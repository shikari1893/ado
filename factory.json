{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "OCE-REPORTING-POC-23488-df"
		},
		"CCPM_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'CCPM'"
		},
		"ISSAC_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'ISSAC'"
		},
		"LOGIN_passPhrase": {
			"type": "secureString",
			"metadata": "Secure string for 'passPhrase' of 'LOGIN'"
		},
		"OCEAzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OCEAzureSqlDatabase'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=ocereportingserver.database.windows.net;Initial Catalog=ocereporting;User ID=ocereporting"
		},
		"OCEAzureSqlKeyVault_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OCEAzureSqlKeyVault'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=ocereportingserver.database.windows.net;Initial Catalog=ocereporting;User ID=ocereporting"
		},
		"AzureBlobStorage2_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://ocereportingpoc.blob.core.windows.net/"
		},
		"AzureKeyVaultDataFactory_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dev1oce23488eastus2kv.vault.azure.net/"
		},
		"CCPM_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "zlt05203.vci.att.com"
		},
		"CCPM_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ipcadmin"
		},
		"ISSAC_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "wfe-eastus2-nprd-db-sit1-vm-jump-v2.az.3pc.att.com"
		},
		"ISSAC_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "m85907"
		},
		"LOGIN_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "uadmftp.cso.att.com"
		},
		"LOGIN_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "m03080"
		},
		"OCE_Adx_Adf_PE_properties_typeProperties_endpoint": {
			"type": "string",
			"defaultValue": "https://oce-eastus2-poc-dx.eastus2.kusto.windows.net"
		},
		"OCE_Adx_Adf_PE_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Ocereporting"
		},
		"OCE_AuditLog_Adx_Adf_PE_properties_typeProperties_endpoint": {
			"type": "string",
			"defaultValue": "https://oce-eastus2-poc-dx.eastus2.kusto.windows.net"
		},
		"OCE_AuditLog_Adx_Adf_PE_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "auditlogdb"
		},
		"CCPM_Feed_Trigger_properties_pl_CCPM_parameters_feed": {
			"type": "string",
			"defaultValue": "CCPM"
		},
		"ISAAC_Feed_Tumbling_Window_properties_pipeline_parameters_feed": {
			"type": "string",
			"defaultValue": "ISAAC"
		},
		"Mylogin_Feed_Schedule_Trigger_properties_pl_usermgmt_feed_parameters_sinkMyLoginLocation": {
			"type": "string",
			"defaultValue": "ABC"
		},
		"Pipleline_Completion_Trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/510f2c47-3416-4e8c-a1ef-06c9e9399ffb/resourceGroups/OCE-REPORTING-POC1/providers/Microsoft.Storage/storageAccounts/ocereportingpoc"
		},
		"TMF_OpsMS_properties_pipeline_parameters_schema": {
			"type": "string",
			"defaultValue": "tmf"
		},
		"TMF_OpsMS_properties_pipeline_parameters_tablename": {
			"type": "string",
			"defaultValue": "oce_order_event"
		},
		"v101-historyload-commonorder_properties_pl_v101_history_load_encryption_parameters_ds_keyspace": {
			"type": "string",
			"defaultValue": "commonorder"
		},
		"v101-historyload-orderrepo_properties_pl_v101_history_load_encryption_parameters_ds_keyspace": {
			"type": "string",
			"defaultValue": "orderrepo"
		},
		"v101-historyload-transactionlosg-email_properties_pl_v101_history_load_encryption_parameters_ds_keyspace": {
			"type": "string",
			"defaultValue": "transactionlosgemail"
		},
		"v101-historyload-transactionlosg_properties_pl_v101_history_load_encryption_parameters_ds_keyspace": {
			"type": "string",
			"defaultValue": "transactionlosg"
		},
		"AzureBlobStorage1_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/510f2c47-3416-4e8c-a1ef-06c9e9399ffb/resourceGroups/OCE-REPORTING-POC1/providers/Microsoft.Storage/storageAccounts/ocereportingpoc"
		},
		"AzureBlobStorage1_properties_groupId": {
			"type": "string",
			"defaultValue": "blob"
		},
		"AzureBlobStorage1_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"ocereportingpoc.blob.core.windows.net"
			]
		},
		"MyLogin_PrivateEndpoint_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/510f2c47-3416-4e8c-a1ef-06c9e9399ffb/resourceGroups/dev1-23488-eastus2-OCE-ParentInfra-RG/providers/Microsoft.Network/privateLinkServices/dev1-23488-eastus2-uadmftp.cso.att.com.pls"
		},
		"MyLogin_PrivateEndpoint_properties_groupId": {
			"type": "string",
			"defaultValue": ""
		},
		"MyLogin_PrivateEndpoint_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"uadmftp.cso.att.com"
			]
		},
		"OCESql_adf_PLE_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/510f2c47-3416-4e8c-a1ef-06c9e9399ffb/resourceGroups/OCE-REPORTING-POC1/providers/Microsoft.Sql/servers/ocereportingserver"
		},
		"OCESql_adf_PLE_properties_groupId": {
			"type": "string",
			"defaultValue": "sqlServer"
		},
		"OCESql_adf_PLE_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"ocereportingserver.database.windows.net"
			]
		},
		"PrivateEndpoint_ISAAC_NonProd_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/778fbbfa-a4df-4a45-94da-a081e4ecd2ca/resourceGroups/wfe-eastus2-nprd-db-sit1-rg-v2/providers/Microsoft.Network/privateLinkServices/10593-eastus2-nprd-db-sit1-pls-v2"
		},
		"PrivateEndpoint_ISAAC_NonProd_properties_groupId": {
			"type": "string",
			"defaultValue": ""
		},
		"PrivateEndpoint_ISAAC_NonProd_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"wfe-eastus2-nprd-db-sit1-vm-jump-v2.az.3pc.att.com"
			]
		},
		"PrivateEndpoint_ISAAC_NonProd2_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/778fbbfa-a4df-4a45-94da-a081e4ecd2ca/resourceGroups/wfe-eastus2-nprd-db-sit2-rg-v2/providers/Microsoft.Network/privateLinkServices/10593-eastus2-nprd-db-sit2-pls-v2"
		},
		"PrivateEndpoint_ISAAC_NonProd2_properties_groupId": {
			"type": "string",
			"defaultValue": ""
		},
		"PrivateEndpoint_ISAAC_NonProd2_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"wfe-eastus2-nprd-db-sit2-vm-jump-v2.az.3pc.att.com"
			]
		},
		"dev1-23488-eastus2-oracle-ple_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/510f2c47-3416-4e8c-a1ef-06c9e9399ffb/resourceGroups/dev1-23488-eastus2-OCE-ParentInfra-RG/providers/Microsoft.Network/privateLinkServices/dev1-23488-eastus2-zlt03294.vci.att.com.pls"
		},
		"dev1-23488-eastus2-oracle-ple_properties_groupId": {
			"type": "string",
			"defaultValue": ""
		},
		"dev1-23488-eastus2-oracle-ple_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"zlt03294.vci.att.com"
			]
		},
		"dev1_23488_eastus2_zlt05203_vci_att_com_ple_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/510f2c47-3416-4e8c-a1ef-06c9e9399ffb/resourceGroups/dev1-23488-eastus2-OCE-ParentInfra-RG/providers/Microsoft.Network/privateLinkServices/dev1-23488-eastus2-zlt05203.vci.att.com.pls"
		},
		"dev1_23488_eastus2_zlt05203_vci_att_com_ple_properties_groupId": {
			"type": "string",
			"defaultValue": ""
		},
		"dev1_23488_eastus2_zlt05203_vci_att_com_ple_properties_fqdns": {
			"type": "array",
			"defaultValue": [
				"zlt05203.vci.att.com"
			]
		},
		"oce-eastus2-poc-adx-pe-oce-eastus2_properties_privateLinkResourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/510f2c47-3416-4e8c-a1ef-06c9e9399ffb/resourceGroups/oce-eastus2-poc-adx-rg-01/providers/Microsoft.Kusto/clusters/oce-eastus2-poc-dx"
		},
		"oce-eastus2-poc-adx-pe-oce-eastus2_properties_groupId": {
			"type": "string",
			"defaultValue": "cluster"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maxium Watermark Date and Time",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  MAX(watermark_value) as maxvalue  from oce.[autoUnlockWatermark]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "autoUnlock_WaterMarrk",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy Staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Maxium Watermark Date and Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_autoUnlock_events\n| project AutoUnlockJson,lastmodified_date,imei,ingestionTIme=ingestion_time(),\n    eventSource=tostring(parse_json(AutoUnlockJson).eventSource),\n    eventId=tostring(parse_json(AutoUnlockJson).eventId),\n    eventType=tostring(parse_json(AutoUnlockJson).eventType),\n    source=tostring(parse_json(AutoUnlockJson).source),\n    eventTime=tostring(parse_json(AutoUnlockJson).eventTime)\n|where ingestion_time()>datetime('@{activity('Maxium Watermark Date and Time').output.value[0].maxvalue}')\n//| take 25000\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "01:00:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [oce].[autoUnlockOrderDataStaging]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adx_AutoUnlock",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "autoUnlock_OrderDataStaging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Auto Unlock Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AutoUnlock_DF_Upsert",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TempAutoUnlockOrderData": {},
									"AutoUnlockOrderData": {},
									"AutoUnlockResponce": {},
									"AutoUnlockDeviceCheckResponse": {},
									"AutoUnlocksubscirberNumberCheckResponce": {},
									"AUSC2": {},
									"AUDC": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Prod-New-23488",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true,
							"continueOnError": true
						}
					},
					{
						"name": "Update Watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Auto Unlock Data Flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "insert into oce.[autoUnlockWatermark]\nvalues( (\nselect max(watermark_value) from \n(\nselect distinct max(ingestionTime) as watermark_value from oce.autoUnlockOrderDataStaging\nunion\nselect distinct max(watermark_value) as watermark_value from oce.autoUnlockWatermark\n)x\n),GETDATE(),(select distinct max(ingestionTime) as batch_max_load_date from oce.autoUnlockOrderDataStaging),(select distinct min(ingestionTime) as batch_min_load_date from oce.autoUnlockOrderDataStaging),(select COUNT(*) as records_processed from oce.autoUnlockOrderDataStaging))\n;\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "autoUnlock_WaterMarrk",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/autoUnlock_WaterMarrk')]",
				"[concat(variables('factoryId'), '/datasets/adx_AutoUnlock')]",
				"[concat(variables('factoryId'), '/datasets/autoUnlock_OrderDataStaging')]",
				"[concat(variables('factoryId'), '/dataflows/AutoUnlock_DF_Upsert')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Errors to Staging Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Error Folders",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_REPROCESS_ERROR",
								"type": "DatasetReference",
								"parameters": {
									"DS_folder": {
										"value": "@pipeline().parameters.ErrorFoldersContainer",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Error Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Error Folders').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data to Archive",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@item().name",
													"type": "Expression"
												},
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CopyErrorFolder",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.ErrorFoldersContainer",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ArchiveErrorFolder",
											"type": "DatasetReference",
											"parameters": {
												"ErrorFolder": {
													"value": "@item().name",
													"type": "Expression"
												},
												"RootErrorFolder": {
													"value": "@pipeline().parameters.ErrorFoldersArchiveContainer",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data to Archive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().name",
													"type": "Expression"
												},
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CopyErrorFolder",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.ErrorFoldersContainer",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CopyErrorsStaging",
											"type": "DatasetReference",
											"parameters": {
												"ErrorStagingTable": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DeleteErrorFiles",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.ErrorFoldersContainer",
													"type": "Expression"
												},
												"ErrorFolders": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Error Folders",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Error Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Error Folders').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'Folder')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ErrorFoldersContainer": {
						"type": "string",
						"defaultValue": "tmftableerrors"
					},
					"ErrorFoldersArchiveContainer": {
						"type": "string",
						"defaultValue": "tmftableerrorsarchive"
					}
				},
				"folder": {
					"name": "Utility Folder"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-19T21:05:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_REPROCESS_ERROR')]",
				"[concat(variables('factoryId'), '/datasets/CopyErrorFolder')]",
				"[concat(variables('factoryId'), '/datasets/ArchiveErrorFolder')]",
				"[concat(variables('factoryId'), '/datasets/CopyErrorsStaging')]",
				"[concat(variables('factoryId'), '/datasets/DeleteErrorFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataQualityCheck')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select concat(substring(format(watermark_value,'yyyy-MM-ddTHH:mm:ss.fffff'),0,21)  , round( format(watermark_value,'ffff'),-1)) as maxvalue  from v101.DataCheckWatermark ",
								"queryTimeout": "00:10:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DQC_DataCheckWatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_order_v101\n|project lastmodified_date,customer_order_number,eventTime = orderjson_1[\"orderEvent\"].[\"eventTime\"],eventSource = orderjson_1[\"orderEvent\"].[\"eventSource\"],eventType = orderjson_1[\"orderEvent\"].[\"eventType\"], ingestion_time = ingestion_time()\n|where lastmodified_date > datetime('@{activity('watermark').output.value[0].maxvalue}')",
									"type": "Expression"
								},
								"queryTimeout": "00:10:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [V101].[stg_oceOrderDataCheck]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADXV101QualityCheck",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DQC_oceOrderQualityCheckstg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "oceOrderQualityCheckstgdf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"oceOrderQualityCheckstg": {},
									"sinkoceOrderQualityCheckstg": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T21:25:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DQC_DataCheckWatermarkTable')]",
				"[concat(variables('factoryId'), '/datasets/ADXV101QualityCheck')]",
				"[concat(variables('factoryId'), '/datasets/DQC_oceOrderQualityCheckstg')]",
				"[concat(variables('factoryId'), '/dataflows/oceOrderQualityCheckstgdf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_Lean_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maximum Watermark DateTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue  from iconic.watermark \n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Iconic_watermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Max No Of Records",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Maximum Watermark DateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select Extract_records from iconic.[leanPipeline_config]\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Iconic_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "TriggerLookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Max No Of Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Iconice_TriggerConfig",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "TriggerCheck",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "TriggerLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('TriggerLookup').output.firstRow.Flag,'true')\r\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy to Staging Table in Azure SQL_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:15:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDataExplorerSource",
											"query": {
												"value": "oce_order_v101 \n|project orderjson_1, lastmodified_date = ingestion_time(),customerordernumber = customer_order_number\n,eventTime = orderjson_1[\"orderEvent\"].[\"eventTime\"],\neventSource=orderjson_1[\"orderEvent\"].[\"eventSource\"],\nchannel = orderjson_1[\"orderEvent\"].[\"data\"].[\"order\"].[\"sourceDetail\"].[\"channel\"]\n|where isnotnull(eventTime) and ingestion_time()> datetime('@{activity('Maximum Watermark DateTime').output.value[0].maxvalue}')\n| top @{activity('Max No Of Records').output.firstRow.Extract_records} by ingestion_time() asc\n",
												"type": "Expression"
											},
											"queryTimeout": "00:30:00",
											"noTruncation": true
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "TRUNCATE TABLE iconic.orderDataStaging",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": true,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"parallelCopies": 32,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "orderjson_1",
														"type": "String",
														"physicalType": "dynamic"
													},
													"sink": {
														"name": "orderjson_1",
														"type": "String",
														"physicalType": "text"
													}
												},
												{
													"source": {
														"name": "lastmodified_date",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "lastmodified_date",
														"type": "DateTime",
														"physicalType": "datetime2"
													}
												},
												{
													"source": {
														"name": "customerordernumber",
														"type": "String",
														"physicalType": "string"
													},
													"sink": {
														"name": "customerordernumber",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "eventTime",
														"type": "String",
														"physicalType": "dynamic"
													},
													"sink": {
														"name": "eventTime",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "channel",
														"type": "String",
														"physicalType": "dynamic"
													},
													"sink": {
														"name": "channel",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "eventSource",
														"type": "String",
														"physicalType": "dynamic"
													},
													"sink": {
														"name": "eventSource",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureDataExplorerTableV101_medium",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Iconic_Staging",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Data Flow_copy1",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Copy to Staging Table in Azure SQL_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "Iconic_DF_new_singlewindow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"TempOrderData": {},
												"sinkOrderData": {},
												"sinkOrderSourceDetail": {},
												"sinkOrderlosgs": {},
												"sinkError": {},
												"sinkorderreferencedetail": {},
												"oceOrderLosgsWirelessCharacteristics": {},
												"sinkevents": {},
												"oceOrderTransactionlogs": {},
												"oceOrderLosgsLineItems": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integration-RunTime-iconic",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine",
										"runConcurrently": true
									}
								},
								{
									"name": "update watermark_copy1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Data Flow_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "insert into iconic.watermark\nvalues( (\nselect max(watermark_value) from \n(\nselect distinct max(lastmodified_date) as watermark_value from iconic.orderDataStaging\nunion\nselect distinct max(watermark_value) as watermark_value from iconic.watermark\n)x\n),GETDATE(),(select distinct max(lastmodified_date) as batch_max_load_date from iconic.orderDataStaging),(select distinct min(lastmodified_date) as batch_min_load_date from iconic.orderDataStaging),(select COUNT(*) as records_processed from iconic.orderDataStaging))\n;\nselect 'complete'",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Iconic_watermark",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Completion Trigger_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "update watermark_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "V101_eventTrigger",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "operational_reporting_PL_starter_blob",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {
						"duration": "0.00:30:00"
					}
				},
				"annotations": [
					"Iconic"
				],
				"lastPublishTime": "2023-11-01T19:49:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Iconic_watermark')]",
				"[concat(variables('factoryId'), '/datasets/Iconice_TriggerConfig')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataExplorerTableV101_medium')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_Staging')]",
				"[concat(variables('factoryId'), '/dataflows/Iconic_DF_new_singlewindow')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integration-RunTime-iconic')]",
				"[concat(variables('factoryId'), '/datasets/V101_eventTrigger')]",
				"[concat(variables('factoryId'), '/datasets/operational_reporting_PL_starter_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SignatureMS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maximum Watermark DateTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  MAX(watermark_value) as maxvalue  from oce.[signatureWatermark]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SignatureWatermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy staging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Maximum Watermark DateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_signature\n|extend \n    eventSource=tostring(parse_json(Signature_payload).event.eventSource),\n    eventTime=tostring(parse_json(Signature_payload).event.eventTime),\n    eventId=tostring(parse_json(Signature_payload).event.eventId),\n    eventType=tostring(parse_json(Signature_payload).event.eventType),\n    sender=tostring(parse_json(Signature_payload).event.metaData.sender),\n    eventSubType=tostring(parse_json(Signature_payload).event.metaData.eventSubType),\n    customerOrderNumber=tostring(parse_json(Signature_payload).event.metaData.customerOrderNumber),\n    verificationId=tostring(parse_json(Signature_payload).event.metaData.verificationId),\n    verificationStatus=tostring(parse_json(Signature_payload).event.data.verification.verificationStatus),\n    verificationSubStatus=tostring(parse_json(Signature_payload).event.data.verification.verificationSubStatus),\n    ban=tostring(parse_json(Signature_payload).event.data.verification.ban),\n    fanId=tostring(parse_json(Signature_payload).event.data.verification.fanId),\n    market=tostring(parse_json(Signature_payload).event.data.verification.market),\n    subMarket=tostring(parse_json(Signature_payload).event.data.verification.subMarket),\n //subMarket=Signature_payload[\"data\"].[\"verification\"].[\"subMarket\"],\n    fanType=tostring(parse_json(Signature_payload).event.data.verification.fanType),\n    fanName=tostring(parse_json(Signature_payload).event.data.verification.fanName),\n    orderSource=tostring(parse_json(Signature_payload).event.data.verification.orderSource),\n    //statusUpdatedDate=tostring(parse_json(Signature_payload).event.data.verification.statusUpdatedDate),\n    statusUpdatedDate=todatetime(tostring(parse_json(Signature_payload).event.data.verification.statusUpdatedDate)),\n    verificationRejectionReason=tostring(parse_json(Signature_payload).event.data.verification.verificationRejectionReason),\n    oceEnrollmentStatus=tostring(parse_json(Signature_payload).event.data.verification.oceEnrollmentStatus),\n    oceDownstreamReturnCode=tostring(parse_json(Signature_payload).event.data.verification.oceDownstreamReturnCode),\n    oceDownstreamDescription=tostring(parse_json(Signature_payload).event.data.verification.oceDownstreamDescription),\n    oceEnrollStatusUpdateDate=tostring(parse_json(Signature_payload).event.data.verification.oceEnrollStatusUpdateDate),\n    oceEnrollmentFan=tostring(parse_json(Signature_payload).event.data.verification.oceEnrollmentFan),\n    verificationFan=tostring(parse_json(Signature_payload).event.data.verification.verificationFan),\n    verificationFanName=tostring(parse_json(Signature_payload).event.data.verification.verificationFanName),\n    verificationFanType=tostring(parse_json(Signature_payload).event.data.verification.verificationFanType),\n    twinFan=tostring(parse_json(Signature_payload).event.data.verification.twinFan),\n    twinFanName=tostring(parse_json(Signature_payload).event.data.verification.twinFanName),\n    twinFanType=tostring(parse_json(Signature_payload).event.data.verification.twinFanType),\n    docuploadRejectioCount=tostring(parse_json(Signature_payload).event.data.verification.docuploadRejectioCount),\n    umbrellaId=tostring(parse_json(Signature_payload).event.data.verification.umbrellaId),\n    dmaapRequest=tostring(parse_json(Signature_payload).event.data.verification.dmaapRequest),\n    segment=tostring(parse_json(Signature_payload).event.data.verification.segment),\n    subSegment=tostring(parse_json(Signature_payload).event.data.verification.subSegment),\n    docUploadRejectionReason=tostring(parse_json(Signature_payload).event.data.verification.docUploadRejectionReason),\n    ingestionTime=ingestion_time(),\n    flow=tostring(parse_json(Signature_payload).event.data.verification.flow),\n     sheerIdResponseCode=tostring(parse_json(Signature_payload).event.data.verification.sheerIdResponseCode),\n     unableToFetchOrder=tostring(parse_json(Signature_payload).event.data.verification.unableToFetchOrder),\n     isOrderUpdatedWithEnrollmentStatus=tostring(parse_json(Signature_payload).event.data.verification.isOrderUpdatedWithEnrollmentStatus),\n     getBanInfoResponseCode=tostring(parse_json(Signature_payload).event.data.verification.getBanInfoResponseCode),\n     updateTLGResponseCode=tostring(parse_json(Signature_payload).event.data.verification.updateTLGResponseCode),\n     addNotesResponseCode=tostring(parse_json(Signature_payload).event.data.verification.addNotesResponseCode),\n     existingAccountFan=tostring(parse_json(Signature_payload).event.data.verification.existingAccountFan),\n     addedToExtendedRetry=tostring(parse_json(Signature_payload).event.data.verification.addedToExtendedRetry),\n     emailStatus=tostring(parse_json(Signature_payload).event.data.verification.emailStatus),\n     metadataUpdated=tostring(parse_json(Signature_payload).event.data.verification.metadataUpdated),\n      runtimeError=tostring(parse_json(Signature_payload).event.data.verification.runtimeError),\n    actualFanType=tostring(parse_json(Signature_payload).event.data.verification.actualFanType),\n    emailFor=tostring(parse_json(Signature_payload).event.data.verification.emailFor)\n|project eventSource,eventTime,eventId,eventType,\nsender,eventSubType,customerOrderNumber,verificationId,verificationStatus,verificationSubStatus\n,ban,fanId,market,subMarket,fanType,fanName,orderSource,statusUpdatedDate,verificationRejectionReason\n,oceEnrollmentStatus,oceDownstreamReturnCode,oceDownstreamDescription,oceEnrollStatusUpdateDate,oceEnrollmentFan\n,verificationFan,verificationFanName,verificationFanType,twinFan,twinFanName,twinFanType,docuploadRejectioCount\n,umbrellaId,dmaapRequest,segment,subSegment,docUploadRejectionReason,ingestionTime,flow,sheerIdResponseCode,unableToFetchOrder\n,isOrderUpdatedWithEnrollmentStatus,getBanInfoResponseCode,updateTLGResponseCode,addNotesResponseCode,existingAccountFan\n,addedToExtendedRetry,emailStatus,metadataUpdated,runtimeError,actualFanType,emailFor\n|where ingestion_time()> datetime('@{activity('Maximum Watermark DateTime').output.value[0].maxvalue}')",
									"type": "Expression"
								},
								"queryTimeout": "01:00:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table oce.signatureOrderData_stg",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ADXV101QualityCheck",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SignatureOrderData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy to final table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "insert into oce.signatureWatermark\r\nvalues( (\r\nselect max(watermark_value) from \r\n(\r\nselect distinct max(ingestionTime) as watermark_value from oce.signatureOrderData_stg\r\nunion\r\nselect distinct max(watermark_value) as watermark_value from oce.signatureWatermark\r\n)x\r\n),GETDATE(),(select distinct max(ingestionTime) as batch_max_load_date from oce.signatureOrderData_stg),(select distinct min(ingestionTime) as batch_min_load_date from oce.signatureOrderData_stg),(select COUNT(*) as records_processed from oce.signatureOrderData_stg))\r\n;\r\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SignatureWatermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy to final table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadUncommitted",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SignatureOrderData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SignatureOrderDataFinal",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SignatureWatermark')]",
				"[concat(variables('factoryId'), '/datasets/ADXV101QualityCheck')]",
				"[concat(variables('factoryId'), '/datasets/SignatureOrderData')]",
				"[concat(variables('factoryId'), '/datasets/SignatureOrderDataFinal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_PROD-PIP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maxium Watermark Date and Time",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue  from TMF.TMF_watermark",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TMF_watermark1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy to Staging Table in AZ SQL",
						"description": "This Step Truncates staging table and copy  delta data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Max No Of Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_tmf_order\n|project order_event_data, last_modified_date,customer_order_id,ingestionTime=ingestion_time(),\neventTime = order_event_data[\"orderEvent\"].[\"eventTime\"],\neventSource = order_event_data[\"orderEvent\"].[\"eventSource\"]\n|where ingestion_time()>datetime('@{activity('Maxium Watermark Date and Time').output.value[0].maxvalue}')\n| top @{activity('Max No Of Records').output.firstRow.Extract_records} by ingestion_time() asc",
									"type": "Expression"
								},
								"queryTimeout": "00:20:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE TMF.TMF_StagingTable",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "tmf_adx_oceorder",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TMF_StagingTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy to Staging Table in AZ SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TMF_PROD_DF_optimised",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"OrderData": {},
									"OrderValidation": {},
									"OrderValidationConfiguration": {},
									"OrderRelatedParty": {},
									"OrderPayment": {},
									"OrderTotalPrice": {},
									"OrderExtensions": {},
									"OrderImmediatePromotion": {},
									"OrderChannel": {},
									"OrderAgreement": {},
									"OrderEventData": {},
									"Ordereventtransactionlogs": {},
									"totalpricealteration": {},
									"oceorderpromobenefitItem": {},
									"oceorderpromotriggerItem": {},
									"OrderchannelExtension": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "TMF",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true
						}
					},
					{
						"name": "Update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Flow",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Call Statement1 for  Stored Procs",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Call Statement2 for  Stored Procs",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Call Statement3 for  Stored Procs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\ninsert into TMF.TMF_watermark \nvalues( (\nselect max(watermark_value) from \n(\nselect distinct max(ingestionTIme) as watermark_value from TMF.TMF_StagingTable\nunion\nselect distinct max(watermark_value) as watermark_value from TMF.TMF_watermark\n)x\n),GETDATE(),(select distinct max(ingestionTIme) as batch_max_load_date from TMF.TMF_StagingTable),(select distinct min(ingestionTIme) as batch_min_load_date from TMF.TMF_StagingTable),(select COUNT(*) as records_processed from TMF.TMF_StagingTable))\n;\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TMF_watermark1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Call Statement1 for  Stored Procs",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy to Staging Table in AZ SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "exec TMF.oce_order_poi_char_complete_load;\nexec TMF.oce_order_poi_complete_load;\nexec TMF.oce_order_poi_extensions_complete_load;\nexec TMF.oce_order_poi_itemprice_complete_load;\nexec TMF.load_to_oce_order_poi_product_prodrelation_prodchar_complete_load;\nexec [TMF].[oce_order_poi_action_complete_load];\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Call Statement2 for  Stored Procs",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy to Staging Table in AZ SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "exec TMF.oce_order_poi_product_place_complete_load;\nexec TMF.oce_order_poi_product_prodrelation_complete_load;\nexec TMF.oce_order_poi_product_spec_complete_load;\nexec TMF.oce_order_poi_total_price_alteration_complete_load;\nexec TMF.oce_order_poi_total_price_complete_load;\nexec TMF.load_to_oce_order_poi_ban_char_complete_load"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Call Statement3 for  Stored Procs",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy to Staging Table in AZ SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "exec TMF.oce_order_poi_itemprice_price_alteration_complete_load;\nexec TMF.oce_order_poi_payment_complete_load;\nexec TMF.oce_order_poi_poirelationship_complete_load;\nexec TMF.oce_order_poi_product_char_complete_load;\nexec TMF.oce_order_poi_product_complete_load;"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Max No Of Records",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Maxium Watermark Date and Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select Extract_records from \n[TMf].TMFMaster_config",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TMFConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [
					"tmf"
				],
				"lastPublishTime": "2023-10-25T21:08:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TMF_watermark1')]",
				"[concat(variables('factoryId'), '/datasets/tmf_adx_oceorder')]",
				"[concat(variables('factoryId'), '/datasets/TMF_StagingTable')]",
				"[concat(variables('factoryId'), '/dataflows/TMF_PROD_DF_optimised')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/TMF')]",
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/TMFConfigTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_Errors_Staging Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Error Folders",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_REPROCESS_ERROR",
								"type": "DatasetReference",
								"parameters": {
									"DS_folder": {
										"value": "@pipeline().parameters.ErrorFoldersContainer",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Error Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Error Folders').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data to Archive",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@item().name",
													"type": "Expression"
												},
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CopyErrorFolder",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.ErrorFoldersContainer",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ArchiveErrorFolder",
											"type": "DatasetReference",
											"parameters": {
												"ErrorFolder": {
													"value": "@item().name",
													"type": "Expression"
												},
												"RootErrorFolder": {
													"value": "@pipeline().parameters.ErrorFoldersArchiveContainer",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data to Staging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy data to Archive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item().name",
													"type": "Expression"
												},
												"wildcardFileName": "*.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CopyErrorFolder",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.ErrorFoldersContainer",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CopyErrorsStaging",
											"type": "DatasetReference",
											"parameters": {
												"ErrorStagingTable": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DeleteErrorFiles",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.ErrorFoldersContainer",
													"type": "Expression"
												},
												"ErrorFolders": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter Error Folders",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Error Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Error Folders').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'Folder')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ErrorFoldersContainer": {
						"type": "string",
						"defaultValue": "v101tableerror"
					},
					"ErrorFoldersArchiveContainer": {
						"type": "string",
						"defaultValue": "v101tableerrorarchive"
					}
				},
				"folder": {
					"name": "Utility Folder"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-19T21:05:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_REPROCESS_ERROR')]",
				"[concat(variables('factoryId'), '/datasets/CopyErrorFolder')]",
				"[concat(variables('factoryId'), '/datasets/ArchiveErrorFolder')]",
				"[concat(variables('factoryId'), '/datasets/CopyErrorsStaging')]",
				"[concat(variables('factoryId'), '/datasets/DeleteErrorFiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_PROD-PIP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maximum Watermark DateTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue  from v101.watermark \n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "v101_watermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy to Staging Table in Azure SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Max No Of Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_order_v101 \n|project orderjson_1, lastmodified_date = ingestion_time(),customerordernumber = customer_order_number\n,eventTime = orderjson_1[\"orderEvent\"].[\"eventTime\"],\neventSource=orderjson_1[\"orderEvent\"].[\"eventSource\"],\nchannel = orderjson_1[\"orderEvent\"].[\"data\"].[\"order\"].[\"sourceDetail\"].[\"channel\"]\n|where isnotnull(eventTime) and ingestion_time()> datetime('@{activity('Maximum Watermark DateTime').output.value[0].maxvalue}')\n| top @{activity('Max No Of Records').output.firstRow.Extract_records} by ingestion_time() asc\n",
									"type": "Expression"
								},
								"queryTimeout": "00:30:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE v101.orderDataStaging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "orderjson_1",
											"type": "String",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "orderjson_1",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "lastmodified_date",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "customerordernumber",
											"type": "String",
											"physicalType": "string"
										},
										"sink": {
											"name": "customerordernumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "eventTime",
											"type": "String",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventTime",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "channel",
											"type": "String",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "channel",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "eventSource",
											"type": "String",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventSource",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "v101_AzureDataExplorerTableV101",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data Flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy to Staging Table in Azure SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "V101_PROD_DF_tempdisable",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TempOrderData": {},
									"sinkOrderData": {},
									"sinkOrderAdditionalDetails": {},
									"sinkOrderContactDetails": {},
									"sinkOrderPrice": {},
									"sinkOrderPriceSummaryList": {},
									"sinkOrderProductGroups": {},
									"sinkOrderPromotions": {},
									"sinkOrderTermsandConditions": {},
									"sinkOrderAccounts": {},
									"sinkOrderAccountsServiceFacilityQualification": {},
									"sinkOrderAccountsBillingDetails": {},
									"sinkOrderLosgsPrice": {},
									"sinkOrderLosgsPriceSummaryList": {},
									"oceOrderLosgsLineItemsAddlDetails": {},
									"sinkOrderSourceDetail": {},
									"SourceDetailAdditionalDetail": {},
									"sinkOrderlosgs": {},
									"sinkcreditpolicy": {},
									"sinkdebtaccounts": {},
									"sinkError": {},
									"sinkoceOrderMoveDetail": {},
									"sinkordertask": {},
									"sinkorderreferencedetail": {},
									"iptvLOSCharacteristics": {},
									"oceOrderLosgsSubscriberName": {},
									"oceOrderLosgsTermsAndConditionAccepted": {},
									"oceOrderLosgsVoipCharacteristics": {},
									"oceOrderLosgsVoipCharacteristicsDirListing": {},
									"oceOrderLosgsWirelessCharacteristics": {},
									"sinkoceOrderLosgsPortDetails": {},
									"sinkoceOrderAcctsBillingDetailAddr": {},
									"sinkorderaccountsserviceaddress": {},
									"sinkorderaccountsbusinessaddress": {},
									"oceOrderLosgsCompensation": {},
									"oceOrderLosgsAdditionDetails": {},
									"oceOrderLosgsinternetCharacteristics": {},
									"oceOrderLosgsDirectTVCharacteristics": {},
									"sinkevents": {},
									"sinkoceOrderAcctsCreditCheck": {},
									"oceOrderAcctsAutopayPaymentMethod": {},
									"oceOrderAcctsAutoPayEPaymentMethod": {},
									"oceOrderAcctsCardOnFilePaymentMethod": {},
									"oceOrderAcctsCardOnFileEPaymentMethod": {},
									"oceOrderAcctsNegotiateConflictCustomer": {},
									"oceOrderAcctsUnifiedAccount": {},
									"oceOrderEmployeeDetail": {},
									"oceOrderECommercePartner": {},
									"oceOrderIntegratedOffers": {},
									"oceOrderLoginProfile": {},
									"oceOrderSingleDispatchDetail": {},
									"oceOrderPaymentTenders": {},
									"oceOrderPaymentTendersEPaymentMethod": {},
									"sinkshippingdetails": {},
									"sinkShippingDetailsPrice": {},
									"oceOrderSalesAgent": {},
									"oceOrderReferenceDetailFalloutDetails": {},
									"sinkShippingDetailsAddr": {},
									"sinkschedulingdetailsflat": {},
									"oceOrderLosgsExternalOrderReferences": {},
									"oceOrderLosgsPromotions": {},
									"oceOrderLosgsUserDefinedLabels": {},
									"oceOrderLosgsLineItemsPayments": {},
									"oceOrderLosgsLineItemshardGood": {},
									"oceOrderLosgsLineItemsSupplyChainDetail": {},
									"sinklosgserviceaddress": {},
									"oceOrderLosgsLineItemsDirecTVCharacteristics": {},
									"oceOrderLosgsLineItemsVoipCharacteristics": {},
									"oceOrderLosgsLineItemsIptvCharacteristics": {},
									"oceOrderLosgsLineItemsWirelessCharacteristics": {},
									"oceOrderLosgsLineItemsInternetCharacteristics": {},
									"oceOrderLosgsWirelessCharUpgradeQual": {},
									"oceOrderLosgsLineItems": {},
									"sinkacctProvisionSystem": {},
									"sinkLosgsLineItemsEventHistory": {},
									"sinkOceOrderLosgsEventHistory": {},
									"oceOrderTransactionlogs": {},
									"oceOrderLosgsApiExecutionDetails": {},
									"oceOrderCancelDetails": {},
									"oceOrderLosgCancelDetails": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Prod-New-23488",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine",
							"runConcurrently": true
						}
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Call SP_Shipping_Cost",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "insert into v101.watermark\nvalues( (\nselect max(watermark_value) from \n(\nselect distinct max(lastmodified_date) as watermark_value from v101.orderDataStaging\nunion\nselect distinct max(watermark_value) as watermark_value from v101.watermark\n)x\n),GETDATE(),(select distinct max(lastmodified_date) as batch_max_load_date from v101.orderDataStaging),(select distinct min(lastmodified_date) as batch_min_load_date from v101.orderDataStaging),(select COUNT(*) as records_processed from v101.orderDataStaging))\n;\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "v101_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Call SP_Shipping_Cost",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data Flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_UPDATE_LOSG_LINE_ITEMS"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Max No Of Records",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Maximum Watermark DateTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select Extract_records from \n[V101].v101Master_config",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "V101_ConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "TriggerLookup",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "update watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "V101Pipeline_TriggerConfig",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "TriggerCheck",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "TriggerLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('TriggerLookup').output.firstRow.Flag,'true')\r\n",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Completion_EventTrigger_copy_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "V101_eventTrigger",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "operational_reporting_PL_starter_blob",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {
						"duration": "0.00:30:00"
					}
				},
				"annotations": [
					"v101"
				],
				"lastPublishTime": "2023-10-05T17:37:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/v101_watermark')]",
				"[concat(variables('factoryId'), '/datasets/v101_AzureDataExplorerTableV101')]",
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/dataflows/V101_PROD_DF_tempdisable')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]",
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/V101_ConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/V101Pipeline_TriggerConfig')]",
				"[concat(variables('factoryId'), '/datasets/V101_eventTrigger')]",
				"[concat(variables('factoryId'), '/datasets/operational_reporting_PL_starter_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/acfMigration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Max WaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select  dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue  from oce.ACFwatermark",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_acf_watermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Max No Of Record",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Max WaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select extract_records from oce.ACF_config",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ACF_config",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy to Staging Table in Azure SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Max No Of Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_acf_migration_events\n| project eventData, lastmodified_date= ingestion_time(),\neventId,eventTime\n|where isnotnull(eventTime) and ingestion_time()> datetime('@{activity('Max Watermark').output.value[0].maxvalue}')\n| top @{activity('Max No Of Record').output.firstRow.Extract_records} by ingestion_time() asc",
									"type": "Expression"
								},
								"queryTimeout": "01:00:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table oce.acfOrderDataStaging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "eventId",
											"type": "string"
										},
										"sink": {
											"name": "eventId",
											"type": "nvarchar"
										}
									},
									{
										"source": {
											"name": "eventData",
											"type": "dynamic"
										},
										"sink": {
											"name": "acfJson",
											"type": "text"
										}
									},
									{
										"source": {
											"name": "eventTime",
											"type": "string"
										},
										"sink": {
											"name": "eventTime",
											"type": "bigint",
											"precision": 19
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"type": "datetime"
										},
										"sink": {
											"name": "ingestionTime",
											"type": "datetime2",
											"scale": 7
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ADX_Acf",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_acf_staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy to Staging Table in Azure SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ACF_DataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TempOrderData": {},
									"ACFOrderData": {},
									"ACFOrderDataHistory": {},
									"ACFDownStreamSystemStatus": {},
									"ACFDownStreamSystemStatusHistor": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Prod-New-23488",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data flow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "insert into oce.ACFwatermark\r\nvalues( (\r\nselect max(watermark_value) from \r\n(\r\nselect distinct max(ingestionTime) as watermark_value from oce.acfOrderDataStaging\r\nunion\r\nselect distinct max(watermark_value) as watermark_value from oce.ACFwatermark\r\n)x\r\n),GETDATE(),(select distinct max(ingestionTime) as batch_max_load_date from oce.acfOrderDataStaging),\r\n(select distinct min(ingestionTime) as batch_min_load_date from oce.acfOrderDataStaging),\r\n(select COUNT(*) as records_processed from oce.acfOrderDataStaging)\r\n)\r\n;\r\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_acf_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_acf_watermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_ACF_config')]",
				"[concat(variables('factoryId'), '/datasets/ds_ADX_Acf')]",
				"[concat(variables('factoryId'), '/datasets/ds_acf_staging')]",
				"[concat(variables('factoryId'), '/dataflows/ACF_DataFlow')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oceOperatoinalReporting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maxium Watermark Date and Time",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue, max(records_processed) as noofrecords from v101.oceOperationalWatermark;\r\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "V101_OpMS_oceOperationalWatermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "copy customerorders to cnostaging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Max No Of Rcords",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select top @{activity('Max No Of Rcords').output.value[0].Extract_records}  customerOrderNumber,modifiedDate from v101.oceorderevents where modifiedDate>'@{activity('Maxium Watermark Date and Time').output.value[0].maxvalue}' \nand channel<>'UNLOCK'\n order by modifiedDate ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table v101.oceOperationalReportingCnoStaging",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customerOrderNumber",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "customerodernumber"
										}
									},
									{
										"source": {
											"name": "modifiedDate",
											"physicalType": "datetime",
											"scale": 3,
											"precision": 23
										},
										"sink": {
											"name": "modifiedDate",
											"scale": 3,
											"precision": 23
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_oceOrderEvents",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "v101_OpMS_oceOperationalReportingCnoStaging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "copy customerorders to cnostaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "exec v101.oceReportingOperational "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "insert into [V101].[oceOperationalWatermark]\r\nvalues( (\r\nselect max(watermark_value) from \r\n(\r\nselect distinct max(modifiedDate) as watermark_value from v101.oceOperationalReportingCnoStaging\r\nunion\r\nselect distinct max(watermark_value) as watermark_value from v101.oceOperationalWatermark\r\n)x\r\n),GETDATE(),(select distinct max(modifiedDate) as batch_max_load_date from v101.oceOperationalReportingCnoStaging),(select distinct min(modifiedDate) as batch_min_load_date from v101.oceOperationalReportingCnoStaging),(select COUNT(*) as records_processed from v101.oceOperationalReportingCnoStaging))\r\n;\r\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "V101_OpMS_oceOperationalWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Max No Of Rcords",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Maxium Watermark Date and Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select Extract_records from [V101].OperationalMs_config\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "V101_OpMS_oceOperationalWatermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T21:25:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/V101_OpMS_oceOperationalWatermark')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderEvents')]",
				"[concat(variables('factoryId'), '/datasets/v101_OpMS_oceOperationalReportingCnoStaging')]",
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oceOperatoinalReporting_TMF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maxium Watermark Date and Time",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue from ',pipeline().parameters.schema,'.','oceOperationalWatermark')\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TMF_OpMS_oceOperationalWatermark",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "copy customerorders to cnostaging",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Maxium Watermark Date and Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@{concat('select top 10000 customerOrderNumber,modifiedDate from ',\npipeline().parameters.schema,'.',pipeline().parameters.Tablename)}\nwhere modifiedDate>'@{activity('Maxium Watermark Date and Time').output.value[0].maxvalue}'\nand channel<>'UNLOCK'\n order by modifiedDate",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@{concat('truncate table ',pipeline().parameters.schema,'.','oceOperationalReportingCnoStaging')}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customerOrderNumber",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "customerodernumber"
										}
									},
									{
										"source": {
											"name": "modifiedDate",
											"physicalType": "datetime",
											"scale": 3,
											"precision": 23
										},
										"sink": {
											"name": "modifiedDate",
											"scale": 3,
											"precision": 23
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OperationalMsEvent",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TMF_OpMs_oceOperationalReportingCnoStaging",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "SP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "copy customerorders to cnostaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('exec ',pipeline().parameters.schema,'.','oceReportingOperational')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "insert into @{concat(pipeline().parameters.schema,'.','oceOperationalWatermark')}\nvalues( (\nselect max(watermark_value) from\n(\nselect distinct max(modifiedDate) as watermark_value from @{concat(pipeline().parameters.schema,'.','oceOperationalReportingCnoStaging')}\nunion\nselect distinct max(watermark_value) as watermark_value from @{concat(pipeline().parameters.schema,'.','oceOperationalWatermark')}\n)x\n),GETDATE(),(select distinct max(modifiedDate) as batch_max_load_date from @{concat(pipeline().parameters.schema,'.','oceOperationalReportingCnoStaging')}),(select distinct min(modifiedDate) as batch_min_load_date from @{concat(pipeline().parameters.schema,'.','oceOperationalReportingCnoStaging')}),(select COUNT(*) as records_processed from @{concat(pipeline().parameters.schema,'.','oceOperationalReportingCnoStaging')}))\n;\nselect 'complete'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "TMF_OpMS_oceOperationalWatermark",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "tmf"
					},
					"tablename": {
						"type": "string",
						"defaultValue": "oce_order_event"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T21:25:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TMF_OpMS_oceOperationalWatermark')]",
				"[concat(variables('factoryId'), '/datasets/OperationalMsEvent')]",
				"[concat(variables('factoryId'), '/datasets/TMF_OpMs_oceOperationalReportingCnoStaging')]",
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CCPM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Feed Parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup Watermark For CCPM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from V101.EDM_CONFIG where Feed = '@{pipeline().parameters.feed}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "FeedConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Load CCPM Feed Table",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Feed Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@activity('Feed Parameters').output.firstRow.ProcedureName",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"CHANNEL": {
										"type": "String",
										"value": {
											"value": "@activity('Feed Parameters').output.firstRow.Channel",
											"type": "Expression"
										}
									},
									"PRODUCTCATEGORY": {
										"type": "String",
										"value": {
											"value": "@activity('Feed Parameters').output.firstRow.ProductCategory",
											"type": "Expression"
										}
									},
									"WATERMARK_DATE": {
										"type": "Datetime",
										"value": {
											"value": "@activity('Lookup Watermark For CCPM').output.firstRow.maxvalue",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE v101.oce_ccpm_feed_stg",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage2",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_v101_oce_ccpm_feed_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup Watermark For CCPM",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT watermark as maxvalue  \nFROM v101.OCE_FEED_WATERMARKS \nWHERE FEED_NAME\n= '@{pipeline().parameters.feed}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_feed_watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Check if Feed Enabled",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Load CCPM Feed Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Feed Parameters').output.firstRow.is_feed_enabled,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate CCPM Feed",
									"description": "Generate CCPM Feed",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": {
												"value": "@activity('Feed Parameters').output.firstRow.ProcedureName_feed",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"FILENAME": {
													"type": "String",
													"value": {
														"value": "@variables('filename_extension')",
														"type": "Expression"
													}
												},
												"IS_HEADER": {
													"type": "String",
													"value": {
														"value": "@activity('Feed Parameters').output.firstRow.Is_Header",
														"type": "Expression"
													}
												},
												"DELIMITER": {
													"type": "String",
													"value": {
														"value": "@activity('Feed Parameters').output.firstRow.Delimiter",
														"type": "Expression"
													}
												},
												"WATERMARK_DATE": {
													"type": "Datetime",
													"value": {
														"value": "@activity('Lookup Watermark For CCPM').output.firstRow.maxvalue",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "V101_Copy_To_Azure_SQL",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CCPM_BLOB_FILE",
											"type": "DatasetReference",
											"parameters": {
												"ds_containename": {
													"value": "@activity('Feed Parameters').output.firstRow.Feed_Container",
													"type": "Expression"
												},
												"ds_deliimiter": {
													"value": "@activity('Feed Parameters').output.firstRow.Delimiter",
													"type": "Expression"
												},
												"ds_directory": {
													"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
													"type": "Expression"
												},
												"ds_filename": {
													"value": "@concat(variables('filename_extension'),activity('Feed Parameters').output.firstRow.Extension)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy From STG to TZ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate CCPM Feed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_v101_oce_ccpm_feed_stg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_v101_oce_ccpm_feed",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename_extension",
										"value": {
											"value": "@replace(concat(\nactivity('Feed Parameters').output.firstRow.Output_Filename,    formatDateTime(\n        convertTimeZone(utcNow(),'UTC' ,'Central Standard Time' )\n        , 'yyyyMMddTHHmmss'),'_1'\n),'T','_')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update Watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Check If Publish Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "update v101.OCE_FEED_WATERMARKS set watermark= ( select max(cycle_date) from V101.oce_ccpm_feed) where feed_name='CCPM';\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_feed_watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Check If Publish Enabled",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check if Feed Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Feed Parameters').output.firstRow.is_publish_enabled,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Publish Files to CCPM",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_publish_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"feed_name": "CCPM"
										}
									}
								},
								{
									"name": "Partition Feed Files",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Publish Files to CCPM",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_partition_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_dir": {
												"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
												"type": "Expression"
											},
											"destination_dir": {
												"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
												"type": "Expression"
											},
											"static_filename_part": "oce_ccpm_order_"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"feed": {
						"type": "string",
						"defaultValue": "CCPM"
					}
				},
				"variables": {
					"filename_extension": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OCEFeeds"
				},
				"annotations": [
					"feeds"
				],
				"lastPublishTime": "2023-10-10T16:37:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FeedConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_ccpm_feed_stg')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_feed_watermarks')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/CCPM_BLOB_FILE')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_ccpm_feed')]",
				"[concat(variables('factoryId'), '/pipelines/pl_publish_files')]",
				"[concat(variables('factoryId'), '/pipelines/pl_partition_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ISAAC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Feed Parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup Watermark for ISAAC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from V101.EDM_CONFIG where Feed = '@{pipeline().parameters.feed}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "FeedConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Load ISAAC Feed Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Feed Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@activity('Feed Parameters').output.firstRow.ProcedureName",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"CHANNEL": {
										"type": "String",
										"value": {
											"value": "@activity('Feed Parameters').output.firstRow.Channel",
											"type": "Expression"
										}
									},
									"PRODUCTCATEGORY": {
										"type": "String",
										"value": {
											"value": "@activity('Feed Parameters').output.firstRow.ProductCategory",
											"type": "Expression"
										}
									},
									"WATERMARK_DATE": {
										"type": "Datetime",
										"value": {
											"value": "@activity('Lookup Watermark for ISAAC').output.firstRow.maxvalue\n",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE v101.oce_isaac_feed_stg",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage2",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_v101_oce_isaac_feed_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup Watermark for ISAAC",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT watermark as maxvalue  \nFROM v101.OCE_FEED_WATERMARKS\nWHERE FEED_NAME\n= '@{pipeline().parameters.feed}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_feed_watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update Watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Check If Publish Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "update v101.OCE_FEED_WATERMARKS set watermark= ( select DATEADD(minute,-3, max(cycle_date)) from V101.oce_isaac_feed) where feed_name='ISAAC';\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_feed_watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Check if Feed Enabled",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Load ISAAC Feed Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Feed Parameters').output.firstRow.is_feed_enabled,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate ISAAC Feed",
									"description": "Generate ISAAC Feed",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "set Variable Filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:45:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": {
												"value": "@activity('Feed Parameters').output.firstRow.ProcedureName_feed",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"FILENAME": {
													"type": "String",
													"value": {
														"value": "@concat(\nactivity('Feed Parameters').output.firstRow.Output_Filename,    formatDateTime(\n        convertTimeZone(utcNow(),'UTC' ,'Central Standard Time' )\n        , 'yyyyMMddTHHmmss')\n)",
														"type": "Expression"
													}
												},
												"IS_HEADER": {
													"type": "String",
													"value": {
														"value": "@activity('Feed Parameters').output.firstRow.Is_Header",
														"type": "Expression"
													}
												},
												"DELIMITER": {
													"type": "String",
													"value": {
														"value": "@activity('Feed Parameters').output.firstRow.Delimiter",
														"type": "Expression"
													}
												},
												"WATERMARK_DATE": {
													"type": "Datetime",
													"value": {
														"value": "@activity('Lookup Watermark for ISAAC').output.firstRow.maxvalue",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "V101_Copy_To_Azure_SQL",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ISAAC_BLOB_FILE",
											"type": "DatasetReference",
											"parameters": {
												"ds_containename": {
													"value": "@activity('Feed Parameters').output.firstRow.Feed_Container",
													"type": "Expression"
												},
												"ds_deliimiter": {
													"value": "@activity('Feed Parameters').output.firstRow.Delimiter",
													"type": "Expression"
												},
												"ds_directory": {
													"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
													"type": "Expression"
												},
												"ds_filename": {
													"value": "@concat(variables('filename_extension'),activity('Feed Parameters').output.firstRow.Extension)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy From STG to TZ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Generate ISAAC Feed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:45:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_v101_oce_isaac_feed_stg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_v101_oce_isaac_feed",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "set Variable Filename",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename_extension",
										"value": {
											"value": "@concat(\nactivity('Feed Parameters').output.firstRow.Output_Filename,    formatDateTime(\n        convertTimeZone(utcNow(),'UTC' ,'Central Standard Time' )\n        , 'yyyyMMddTHHmmss')\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Check If Publish Enabled",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check if Feed Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Feed Parameters').output.firstRow.is_publish_enabled,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Publish Files to ISAAC",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_publish_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"feed_name": "ISAAC"
										}
									}
								},
								{
									"name": "Partition Feed Files",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Publish Files to ISAAC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_partition_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_dir": {
												"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
												"type": "Expression"
											},
											"destination_dir": {
												"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
												"type": "Expression"
											},
											"static_filename_part": "OCEOrderStatus_"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"feed": {
						"type": "string",
						"defaultValue": "ISAAC"
					}
				},
				"variables": {
					"PreviousModifiedDate": {
						"type": "String",
						"defaultValue": "1990-01-01T05:12:22Z"
					},
					"LatestFileName": {
						"type": "String"
					},
					"source_folder_path": {
						"type": "String"
					},
					"filename_extension": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OCEFeeds"
				},
				"annotations": [
					"feeds"
				],
				"lastPublishTime": "2023-10-10T16:37:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FeedConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_isaac_feed_stg')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_feed_watermarks')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/ISAAC_BLOB_FILE')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_isaac_feed')]",
				"[concat(variables('factoryId'), '/pipelines/pl_publish_files')]",
				"[concat(variables('factoryId'), '/pipelines/pl_partition_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_VOCA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Feed Parameters",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup Watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from V101.EDM_CONFIG where Feed = '@{pipeline().parameters.feed}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "FeedConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Load VOCA Feed Table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Feed Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": {
									"value": "@activity('Feed Parameters').output.firstRow.ProcedureName",
									"type": "Expression"
								},
								"storedProcedureParameters": {
									"CHANNEL": {
										"type": "String",
										"value": {
											"value": "@activity('Feed Parameters').output.firstRow.Channel",
											"type": "Expression"
										}
									},
									"PRODUCTCATEGORY": {
										"type": "String",
										"value": {
											"value": "@activity('Feed Parameters').output.firstRow.ProductCategory",
											"type": "Expression"
										}
									},
									"WATERMARK_DATE": {
										"type": "Datetime",
										"value": {
											"value": "@activity('Lookup Watermark').output.firstRow.maxvalue",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE v101.oce_voca_feed_stg",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage2",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_v101_oce_voca_feed_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup Watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT watermark as maxvalue  \nFROM v101.OCE_FEED_WATERMARKS \nWHERE FEED_NAME\n= '@{pipeline().parameters.feed}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_feed_watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Check if Feed Enabled",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Load VOCA Feed Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Feed Parameters').output.firstRow.is_feed_enabled,'Y')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Generate VOCA Feed",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:45:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": {
												"value": "@activity('Feed Parameters').output.firstRow.ProcedureName_feed",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"FILENAME": {
													"type": "String",
													"value": {
														"value": "@concat(\nactivity('Feed Parameters').output.firstRow.Output_Filename,    formatDateTime(\n        convertTimeZone(utcNow(),'UTC' ,'Central Standard Time' )\n        , 'yyyyMMdd_HHmmss')\n)",
														"type": "Expression"
													}
												},
												"IS_HEADER": {
													"type": "String",
													"value": {
														"value": "@activity('Feed Parameters').output.firstRow.Is_Header",
														"type": "Expression"
													}
												},
												"DELIMITER": {
													"type": "String",
													"value": {
														"value": "@activity('Feed Parameters').output.firstRow.Delimiter",
														"type": "Expression"
													}
												},
												"WATERMARK_DATE": {
													"type": "Datetime",
													"value": {
														"value": "@activity('Lookup Watermark').output.firstRow.maxvalue",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"maxRowsPerFile": {
													"value": "@activity('Feed Parameters').output.firstRow.MaxRowsperfile",
													"type": "Expression"
												},
												"fileNamePrefix": {
													"value": "@concat(\nactivity('Feed Parameters').output.firstRow.Output_Filename,    formatDateTime(\n        convertTimeZone(utcNow(),'UTC' ,'Central Standard Time' )\n        , 'yyyyMMdd_HHmmss')\n)",
													"type": "Expression"
												},
												"quoteAllText": true,
												"fileExtension": {
													"value": "@activity('Feed Parameters').output.firstRow.Extension",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "V101_Copy_To_Azure_SQL",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "VOCA_BLOB_FILE",
											"type": "DatasetReference",
											"parameters": {
												"ds_containename": {
													"value": "@activity('Feed Parameters').output.firstRow.Feed_Container",
													"type": "Expression"
												},
												"ds_deliimiter": {
													"value": "@activity('Feed Parameters').output.firstRow.Delimiter",
													"type": "Expression"
												},
												"ds_directory": {
													"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Partition Feed Files",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Generate VOCA Feed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_partition_files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"source_dir": {
												"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
												"type": "Expression"
											},
											"destination_dir": {
												"value": "@activity('Feed Parameters').output.firstRow.Feed_Directory_outbound",
												"type": "Expression"
											},
											"static_filename_part": "oce_voca_order_"
										}
									}
								},
								{
									"name": "Copy From STG to TZ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Partition Feed Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:45:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_v101_oce_voca_feed_stg",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_v101_oce_voca_feed",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Update Watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Check if Feed Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "update v101.OCE_FEED_WATERMARKS set watermark= ( select DATEADD(minute,-3, max(cycle_date)) from V101.oce_voca_feed) where feed_name='VOCA';\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_feed_watermarks",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"feed": {
						"type": "string",
						"defaultValue": "VOCA"
					}
				},
				"folder": {
					"name": "OCEFeeds"
				},
				"annotations": [
					"feeds"
				],
				"lastPublishTime": "2023-10-10T16:37:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FeedConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_voca_feed_stg')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_feed_watermarks')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/VOCA_BLOB_FILE')]",
				"[concat(variables('factoryId'), '/pipelines/pl_partition_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_voca_feed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_autounlock_history_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read WaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select MAX(watermark_value)  as maxvalue  \n from oce.autoUnlockHistoryWatermark\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_oce_autoUnlockHistoryWatermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy AuditLog ADX Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read WaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_audit_log\n|where ingestion_time()> datetime('@{activity('Read WaterMark').output.value[0].maxvalue}')\n| where service_name == 'CTXAutoUnlock' and operation_name == 'PRODUCE' and interface_name == 'REPORTING'\n|top 1000000 by ingestion_time() asc\n| project service_name, operation_name, interface_name,  customer_order_number, request\n| extend lastmodified_date = ingestion_time()\n| project customer_order_number, request = replace_string(replace_string(tostring(request), '\\n', ''), '\\r', ''), lastmodified_date",
									"type": "Expression"
								},
								"queryTimeout": "01:00:00",
								"noTruncation": true
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_adx_auditlog",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_autounlock_request",
								"type": "DatasetReference",
								"parameters": {
									"ds_filename": {
										"value": "@concat('AutoUnlock_', replace(activity('Read WaterMark').output.value[0].maxvalue, '-', ''), '_', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'Central Standard Time'), 'yyyyMMddHHmmss'), '.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Max Ingestion Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO oce.autoUnlockHistoryWatermark (\n    watermark_value,\n    lastmodifieddate,\n    batch_max_load_date,\n    batch_min_load_date,\n    records_processed\n) VALUES (\n    '@{activity('Get Max Ingestion Time').output.value[0].max_ingestion_time}',\n    GETDATE(),\n    '@{activity('Get Max Ingestion Time').output.value[0].max_ingestion_time}',\n    '@{activity('Get Max Ingestion Time').output.value[0].min_ingestion_time}',\n    @{activity('Get Max Ingestion Time').output.value[0].number_of_records}\n);\n\nSELECT 'complete';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_oce_autoUnlockHistoryWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Max Ingestion Time",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy AuditLog ADX Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "let ingestion_summary = \n    oce_audit_log\n    | where ingestion_time() > datetime('@{activity('Read WaterMark').output.value[0].maxvalue}')\n    | where service_name == 'CTXAutoUnlock' and operation_name == 'PRODUCE' and interface_name == 'REPORTING'\n    | top 1000000 by ingestion_time() asc\n    | summarize \n        max_ingestion_time = coalesce(max(ingestion_time()), datetime('@{activity('Read WaterMark').output.value[0].maxvalue}')), \n        min_ingestion_time = coalesce(min(ingestion_time()), datetime('@{activity('Read WaterMark').output.value[0].maxvalue}')),\n        number_of_records = countif(service_name == 'CTXAutoUnlock' and operation_name == 'PRODUCE' and interface_name == 'REPORTING');\ningestion_summary",
									"type": "Expression"
								},
								"queryTimeout": "01:00:00",
								"noTruncation": true
							},
							"dataset": {
								"referenceName": "ds_adx_auditlog",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OCEStreamingJobs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_oce_autoUnlockHistoryWatermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_adx_auditlog')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_autounlock_request')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_blob_to_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Blob To Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.foldername",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchTimeout": "02:00:00",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"customerOrderNumber"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_v101data",
								"type": "DatasetReference",
								"parameters": {
									"folderpath": {
										"value": "@pipeline().parameters.foldername",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_oceReportingDb",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					},
					"schema": {
						"type": "string",
						"defaultValue": "v101"
					}
				},
				"folder": {
					"name": "Utility Folder/adhoc_load"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-19T21:05:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_v101data')]",
				"[concat(variables('factoryId'), '/datasets/ds_oceReportingDb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_oce_job_audit_events')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Watermark For OCE Job",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  MAX(watermark_value) as maxvalue \nfrom oce.oce_job_auditlog_events_watermark\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_oce_job_auditlog_events_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy to oce_job_auditlog_events",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup Watermark For OCE Job",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_job_auditlog_events \n|where lastmodified_date > datetime('@{activity('Lookup Watermark For OCE Job').output.firstRow.maxvalue}')\n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "00:30:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "eventId"
										},
										"sink": {
											"name": "eventId",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "eventSource",
											"type": "String",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventSource",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "eventType"
										},
										"sink": {
											"name": "eventType",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "region"
										},
										"sink": {
											"name": "region",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "serviceName"
										},
										"sink": {
											"name": "serviceName",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "status"
										},
										"sink": {
											"name": "status",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "eventTime",
											"type": "String",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventTime",
											"type": "int",
											"precision": 10
										}
									},
									{
										"source": {
											"name": "sender"
										},
										"sink": {
											"name": "sender",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "notes"
										},
										"sink": {
											"name": "notes",
											"type": "nvarchar"
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "lastmodified_date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "v101_AzureDataExplorerTableV101",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_oce_job_auditlog_events",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy to oce_job_auditlog_event_jobs",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy to oce_job_auditlog_events",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_job_auditlog_event_jobs \n|where lastmodified_date > datetime('@{activity('Lookup Watermark For OCE Job').output.firstRow.maxvalue}')\n",
									"type": "Expression"
								},
								"queryTimeout": "00:30:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "eventId"
										},
										"sink": {
											"name": "eventId",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "eventSource",
											"type": "String",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventSource",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "eventType"
										},
										"sink": {
											"name": "eventType",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "jobName"
										},
										"sink": {
											"name": "jobName",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "updatedTime"
										},
										"sink": {
											"name": "updatedTime",
											"type": "int",
											"precision": 10
										}
									},
									{
										"source": {
											"name": "throttledValue"
										},
										"sink": {
											"name": "throttledValue",
											"type": "int",
											"precision": 10
										}
									},
									{
										"source": {
											"name": "prefferedThrottleRegion"
										},
										"sink": {
											"name": "prefferedThrottleRegion",
											"type": "varchar"
										}
									},
									{
										"source": {
											"name": "otherChanges",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "otherChanges",
											"type": "nvarchar"
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "lastmodified_date"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "v101_AzureDataExplorerTableV101",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_oce_job_auditlog_event_jobs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy to oce_job_auditlog_event_jobs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "insert into oce.oce_job_auditlog_events_watermark\nvalues( \n    (\n        select max(watermark_value) from \n        (\n            select distinct max(lastmodified_date) as watermark_value from oce.oce_job_auditlog_events\n            union \n            select distinct max(lastmodified_date) as watermark_value from oce.oce_job_auditlog_event_jobs\n        )x\n    ),\n    GETDATE()\n)\n;\nselect 'complete'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_oce_job_auditlog_events_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OCEJobAuditEvents"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_oce_job_auditlog_events_watermark')]",
				"[concat(variables('factoryId'), '/datasets/v101_AzureDataExplorerTableV101')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oce_job_auditlog_events')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oce_job_auditlog_event_jobs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_oce_reporting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Call SP_ICONIC_ORDER_STATISTICS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_ORDER_STATISTICS"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Call SP_ICONIC_SKU_BASED",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_SKU_BASED"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Call SP_ICONIC_UPDATE_ORDER_RECEIVED",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_UPDATE_ORDER_RECEIVED"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Call SP_ICONIC_TOTAL_ORDER_FALLOUT",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_TOTAL_ORDER_FALLOUT"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Call SP_ICONIC_WIRELESS_NONAUTOMATION",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_WIRELESS_NONAUTOMATION"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Call SP_ICONIC_PROCESSED_ORDERS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_PROCESSED_ORDERS"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Call SP_ICONIC_INPROGRESS_ORDERS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_INPROGRESS_ORDERS"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Call SP_ICONIC_SYSPROCESSING_AGING",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.SP_ICONIC_SYSPROCESSING_AGING"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OCEReporting"
				},
				"annotations": [
					"reporting"
				],
				"lastPublishTime": "2023-09-01T13:22:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_operationalms_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "V101-Staging Table in Azure SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "v101 Watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "\noce_order_v101\n|where ingestion_time()> datetime('@{activity('v101 Watermark').output.value[0].maxvalue}')\n|top 100000 by ingestion_time() asc\n|where isnotnull(unixtime_milliseconds_todatetime(tolong(parse_json(orderjson_1).orderEvent.eventTime))) \n|extend \n    eventSource=tostring(parse_json(orderjson_1).orderEvent.eventSource),     \n    channel = tostring((orderjson_1).orderEvent.data.['order'].['sourceDetail'].channel), \n    eventTime=format_datetime(unixtime_milliseconds_todatetime(tolong(parse_json(orderjson_1).orderEvent.eventTime)),'yyyy-MM-dd HH:mm:ss.fff'),   \n    application = tostring( parse_json(orderjson_1).orderEvent.data.['order'].sourceDetail.application),\n    eventType=tostring(parse_json(orderjson_1).orderEvent.eventType),\n    submittedDate=format_datetime(unixtime_milliseconds_todatetime(tolong((orderjson_1).orderEvent.data.['order'].submittedDate)),'yyyy-MM-dd HH:mm:ss.fff'),  \n    acceptedDate=format_datetime(unixtime_milliseconds_todatetime(tolong((orderjson_1).orderEvent.data.['order'].acceptedDate)),'yyyy-MM-dd HH:mm:ss.fff'),  \n    clientType = tostring(parse_json(orderjson_1).orderEvent.data.['order'].['sourceDetail'].clientType),    \n    salesChannel = tostring(parse_json(orderjson_1).orderEvent.data.['order'].['sourceDetail'].salesChannel), \n    orderType = tostring(parse_json(orderjson_1).orderEvent.data.['order'].type),    \n    orderStatus = tostring(parse_json(orderjson_1).orderEvent.data.['order'].statusDetail.status),    \n    orderSubStatus = tostring(parse_json(orderjson_1).orderEvent.data.['order'].statusDetail.subStatus),\n    passthroughInd= tostring(parse_json(orderjson_1).orderEvent.data.['order'].referenceDetail.passThroughIndicator),  \n    testOrderIndicator= tostring(parse_json(orderjson_1).orderEvent.data.['order'].referenceDetail.testOrderIndicator),\n    schemaType='V101',\n    lastmodified_date = ingestion_time()   \n|project  customerordernumber=customer_order_number,channel,eventSource,application,eventType,eventTime,submittedDate,acceptedDate,orderType,orderStatus,orderSubStatus,passthroughInd,testOrderIndicator,schemaType,lastmodified_date  ",
									"type": "Expression"
								},
								"queryTimeout": "00:30:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE v101.oceOpsMsData_stg",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customerordernumber",
											"physicalType": "string"
										},
										"sink": {
											"name": "CustomerOrderNumber"
										}
									},
									{
										"source": {
											"name": "channel"
										},
										"sink": {
											"name": "channel"
										}
									},
									{
										"source": {
											"name": "eventSource"
										},
										"sink": {
											"name": "eventSource"
										}
									},
									{
										"source": {
											"name": "application"
										},
										"sink": {
											"name": "application"
										}
									},
									{
										"source": {
											"name": "eventType"
										},
										"sink": {
											"name": "eventType"
										}
									},
									{
										"source": {
											"name": "eventTime",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventTime",
											"scale": 3,
											"precision": 23
										}
									},
									{
										"source": {
											"name": "submittedDate"
										},
										"sink": {
											"name": "submittedDate",
											"scale": 3,
											"precision": 23
										}
									},
									{
										"source": {
											"name": "acceptedDate"
										},
										"sink": {
											"name": "acceptedDate",
											"scale": 3,
											"precision": 23
										}
									},
									{
										"source": {
											"name": "orderType"
										},
										"sink": {
											"name": "orderType"
										}
									},
									{
										"source": {
											"name": "orderStatus"
										},
										"sink": {
											"name": "orderStatus"
										}
									},
									{
										"source": {
											"name": "orderSubStatus"
										},
										"sink": {
											"name": "orderSubStatus"
										}
									},
									{
										"source": {
											"name": "passthroughInd"
										},
										"sink": {
											"name": "passthroughInd"
										}
									},
									{
										"source": {
											"name": "testOrderIndicator"
										},
										"sink": {
											"name": "testOrderIndicator"
										}
									},
									{
										"source": {
											"name": "schemaType"
										},
										"sink": {
											"name": "schemaType"
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "lastmodified_date",
											"scale": 3,
											"precision": 23
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "v101_AzureDataExplorerTableV101",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_v101_oceOpsMsData_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "v101 Watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue  from v101.oce_opsms_watermark \n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_opsms_watermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update v101 opsms watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Insert Data From v101",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\r\ninsert into v101.oce_opsms_watermark\r\nvalues( \r\n\t\t\t(\r\n\t\t\t\tselect max(watermark_value) \r\n\t\t\t\tfrom (\r\n\t\t\t\t\t\tselect distinct max(lastmodified_date) as watermark_value from v101.oceOpsMsData_stg\r\n\t\t\t\t\t\tunion\r\n\t\t\t\t\t\tselect distinct max(watermark_value) as watermark_value from v101.oce_opsms_watermark\r\n\t\t\t\t)x\r\n\t \r\n\t\t)\r\n\t\t,GETDATE()\r\n\t\t,(\r\n\t\t\tselect distinct max(lastmodified_date) as batch_max_load_date \r\n\t\t\tfrom v101.oceOpsMsData_stg\r\n\t\t),\r\n\t\t(\t\r\n\t\t\tselect distinct min(lastmodified_date) as batch_min_load_date \r\n\t\t\tfrom v101.oceOpsMsData_stg\r\n\t\t),\r\n\t\t(\r\n\t\t\tselect COUNT(*) as records_processed from v101.oceOpsMsData_stg\r\n\t\t)\r\n)\r\n;\r\n\r\n\r\nselect 'complete'\r\n ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_opsms_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "TMF Staging Table in Azure SQL_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "tmf Watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "\noce_tmf_order\n|where ingestion_time()> datetime('@{activity('tmf Watermark').output.value[0].maxvalue}')\n|top 100000 by ingestion_time() asc\n |where isnotnull(unixtime_milliseconds_todatetime(tolong(parse_json(order_event_data).orderEvent.eventTime))) \n | mv-expand   orderExtension=parse_json(order_event_data).orderEvent.data.['order'].orderExtensions               \n | extend orderExtensionname = orderExtension.name , orderExtensionvalue = orderExtension.value,\n         eventSource=tostring(parse_json(order_event_data).orderEvent.eventSource),\n         eventTime=format_datetime(unixtime_milliseconds_todatetime(tolong(parse_json(order_event_data).orderEvent.eventTime)),'yyyy-MM-dd HH:mm:ss'),   \n         eventType=tostring(parse_json(order_event_data).orderEvent.eventType)\n | where orderExtensionname =='application'\n | summarize arg_max(last_modified_date, *) by customer_order_id,eventType, eventSource, eventTime\n | mv-expand   channels=parse_json(order_event_data).orderEvent.data.['order'].channel\n | extend  channel=tostring(channels.name)\n | summarize arg_max(last_modified_date, *) by customer_order_id, eventType, eventSource, eventTime\n|extend \n    application=orderExtensionvalue,    \n    eventTime=format_datetime(unixtime_milliseconds_todatetime(tolong(parse_json(order_event_data).orderEvent.eventTime)),'yyyy-MM-dd HH:mm:ss'),   \n    eventType=tostring(parse_json(order_event_data).orderEvent.eventType),\n    submittedDate=  format_datetime(todatetime(parse_json(order_event_data).orderEvent.data.['order'].orderDate),'yyyy-MM-dd HH:mm:ss'),  \n    acceptedDate= '',      \n    clientType = tostring(parse_json(order_event_data).orderEvent.data.['order'].['sourceDetail'].clientType),    \n    salesChannel = tostring(parse_json(order_event_data).orderEvent.data.['order'].['sourceDetail'].salesChannel), \n    orderType = tostring(parse_json(order_event_data).orderEvent.data.['order'].type),    \n    orderStatus = tostring(parse_json(order_event_data).orderEvent.data.['order'].state),    \n    orderSubStatus = tostring(parse_json(order_event_data).orderEvent.data.['order'].statusDetail.subStatus),\n    passthroughInd= tostring(parse_json(order_event_data).orderEvent.data.['order'].referenceDetail.passThroughIndicator),  \n    testOrderIndicator= tostring(parse_json(order_event_data).orderEvent.data.['order'].referenceDetail.testOrderIndicator),\n    schemaType='TMF',\n    lastmodified_date = last_modified_date          \n|project  customerordernumber=customer_order_id,channel,eventSource,application,eventType,eventTime,submittedDate,acceptedDate,orderType,orderStatus,orderSubStatus,passthroughInd,testOrderIndicator,schemaType,lastmodified_date  ",
									"type": "Expression"
								},
								"queryTimeout": "00:30:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE tmf.oceOpsMsData_stg",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customerordernumber",
											"physicalType": "string"
										},
										"sink": {
											"name": "CustomerOrderNumber"
										}
									},
									{
										"source": {
											"name": "channel"
										},
										"sink": {
											"name": "channel"
										}
									},
									{
										"source": {
											"name": "eventSource"
										},
										"sink": {
											"name": "eventSource"
										}
									},
									{
										"source": {
											"name": "application"
										},
										"sink": {
											"name": "application"
										}
									},
									{
										"source": {
											"name": "eventType"
										},
										"sink": {
											"name": "eventType"
										}
									},
									{
										"source": {
											"name": "eventTime",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventTime",
											"scale": 3,
											"precision": 23
										}
									},
									{
										"source": {
											"name": "submittedDate"
										},
										"sink": {
											"name": "submittedDate",
											"scale": 3,
											"precision": 23
										}
									},
									{
										"source": {
											"name": "acceptedDate"
										},
										"sink": {
											"name": "acceptedDate",
											"scale": 3,
											"precision": 23
										}
									},
									{
										"source": {
											"name": "orderType"
										},
										"sink": {
											"name": "orderType"
										}
									},
									{
										"source": {
											"name": "orderStatus"
										},
										"sink": {
											"name": "orderStatus"
										}
									},
									{
										"source": {
											"name": "orderSubStatus"
										},
										"sink": {
											"name": "orderSubStatus"
										}
									},
									{
										"source": {
											"name": "passthroughInd"
										},
										"sink": {
											"name": "passthroughInd"
										}
									},
									{
										"source": {
											"name": "testOrderIndicator"
										},
										"sink": {
											"name": "testOrderIndicator"
										}
									},
									{
										"source": {
											"name": "schemaType"
										},
										"sink": {
											"name": "schemaType"
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "lastmodified_date",
											"scale": 3,
											"precision": 23
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "v101_AzureDataExplorerTableV101",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_tmf_oceOpsMsData_stg",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "tmf Watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue  from tmf.oce_opsms_watermark \n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_tmf_oce_opsms_watermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update tmf opsms watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Insert Data From tmf",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\ninsert into tmf.oce_opsms_watermark\nvalues( \n\t\t\t(\n\t\t\t\tselect max(watermark_value) \n\t\t\t\tfrom (\n\t\t\t\t\t\tselect distinct max(lastmodified_date) as watermark_value from tmf.oceOpsMsData_stg\n\t\t\t\t\t\tunion\n\t\t\t\t\t\tselect distinct max(watermark_value) as watermark_value from tmf.oce_opsms_watermark\n\t\t\t\t)x\n\t \n\t\t)\n\t\t,GETDATE()\n\t\t,(\n\t\t\tselect distinct max(lastmodified_date) as batch_max_load_date \n\t\t\tfrom tmf.oceOpsMsData_stg\n\t\t),\n\t\t(\t\n\t\t\tselect distinct min(lastmodified_date) as batch_min_load_date \n\t\t\tfrom tmf.oceOpsMsData_stg\n\t\t),\n\t\t(\n\t\t\tselect COUNT(*) as records_processed from tmf.oceOpsMsData_stg\n\t\t)\n)\n;\n\n\nselect 'complete'\n ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_tmf_oce_opsms_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SP Insert Data From v101",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "V101-Staging Table in Azure SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "v101.[SP_OCE_OPSMS_DATA_LOAD]"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP Insert Data From tmf",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "TMF Staging Table in Azure SQL_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "tmf.[SP_OCE_OPSMS_DATA_LOAD]"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OCEReportingMs"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-02T19:50:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/v101_AzureDataExplorerTableV101')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oceOpsMsData_stg')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_opsms_watermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_tmf_oceOpsMsData_stg')]",
				"[concat(variables('factoryId'), '/datasets/ds_tmf_oce_opsms_watermark')]",
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ordergraph_events_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "oce_ordergraph_watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  MAX(watermark_value) as maxvalue  from usermanagement.oce_usermgmt_watermark \n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_oce_ordergraph_watermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy to Staging data in Azure SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "oce_ordergraph_watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_ordergraph_events\n| project-away eventData\n|where lastmodified_date> datetime('@{activity('oce_ordergraph_watermark').output.value[0].maxvalue}')\n|extend  submittedDate = unixtime_milliseconds_todatetime(tolong(submittedDate))\n|top 100000 by lastmodified_date asc",
									"type": "Expression"
								},
								"queryTimeout": "00:30:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE oce.oceOrderGraphEvents_stage\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customerOrderNumber",
											"type": "string"
										},
										"sink": {
											"name": "customerOrderNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "channel",
											"type": "string"
										},
										"sink": {
											"name": "channel",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "applicationName",
											"type": "string"
										},
										"sink": {
											"name": "applicationName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "losgSequence",
											"type": "string"
										},
										"sink": {
											"name": "losgSequence",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "losgType",
											"type": "string"
										},
										"sink": {
											"name": "losgType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "eventProcessedStatus",
											"type": "string"
										},
										"sink": {
											"name": "eventProcessedStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "fulfillment",
											"type": "string"
										},
										"sink": {
											"name": "fulfillment",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "lineStatus",
											"type": "string"
										},
										"sink": {
											"name": "lineStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "lineSubStatus",
											"type": "string"
										},
										"sink": {
											"name": "lineSubStatus",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "createEvent",
											"type": "string"
										},
										"sink": {
											"name": "createEvent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "canceledEvent",
											"type": "string"
										},
										"sink": {
											"name": "canceledEvent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "shippedEvent",
											"type": "string"
										},
										"sink": {
											"name": "shippedEvent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "activatedEvent",
											"type": "string"
										},
										"sink": {
											"name": "activatedEvent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "deliveredEvent",
											"type": "string"
										},
										"sink": {
											"name": "deliveredEvent",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "submittedDate",
											"type": "string"
										},
										"sink": {
											"name": "submittedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"type": "datetime"
										},
										"sink": {
											"name": "lastmodified_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "eventType"
										},
										"sink": {
											"name": "eventType"
										}
									},
									{
										"source": {
											"name": "eventId"
										},
										"sink": {
											"name": "eventId"
										}
									},
									{
										"source": {
											"name": "eventSource"
										},
										"sink": {
											"name": "eventSource"
										}
									},
									{
										"source": {
											"name": "eventTime"
										},
										"sink": {
											"name": "eventTime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adx_oce_ordergraph_events",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_oceOrderGraphEvents_stage",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "update oce_ordergraph_watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Call SP to Insert Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\ninsert into oce.oce_ordergraph_watermark\nvalues( \n\t\t\t(\n\t\t\t\tselect max(watermark_value) \n\t\t\t\tfrom (\n\t\t\t\t\t\tselect distinct max(lastmodified_date) as watermark_value from oce.oceOrderGraphEvents_stage\n\t\t\t\t\t\tunion\n\t\t\t\t\t\tselect distinct max(watermark_value) as watermark_value from oce.oce_ordergraph_watermark\n\t\t\t\t)x\n\t \n\t\t)\n\t\t,GETDATE()\n\t\t,(\n\t\t\tselect distinct max(lastmodified_date) as batch_max_load_date \n\t\t\tfrom oce.oceOrderGraphEvents_stage\n\t\t),\n\t\t(\t\n\t\t\tselect distinct min(lastmodified_date) as batch_min_load_date \n\t\t\tfrom oce.oceOrderGraphEvents_stage\n\t\t),\n\t\t(\n\t\t\tselect COUNT(*) as records_processed from oce.oceOrderGraphEvents_stage\n\t\t)\n)\n;\n\n\nselect 'complete'\n ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_oce_ordergraph_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Call SP to Insert Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy to Staging data in Azure SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "OCE.SP_COPY_ORDER_GRAPH_EVENTS"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OCEOrderGraph"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_oce_ordergraph_watermark')]",
				"[concat(variables('factoryId'), '/datasets/adx_oce_ordergraph_events')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceOrderGraphEvents_stage')]",
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_partition_all_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata of Source Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_partition_source_folder",
								"type": "DatasetReference",
								"parameters": {
									"source_folder_path": {
										"value": "@pipeline().parameters.source_dir",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter Only Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata of Source Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata of Source Folder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File' )\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Partition and Delete",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Only Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Each File from Source",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"parallelCopies": 13,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_partition_source_file",
											"type": "DatasetReference",
											"parameters": {
												"source_folder_path": {
													"value": "@pipeline().parameters.source_dir",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_partition_sink_folder",
											"type": "DatasetReference",
											"parameters": {
												"destination_folder_path": {
													"value": "@concat(pipeline().parameters.destination_dir,\n'/year_p=', substring( item().name, add(  lastIndexOf(item().name,'_'),  1 ),4 ) ,\n\n'/month_p=', substring( item().name, add(  lastIndexOf(item().name,'_'),  5 ),2 ) ,\n\n'/day_p=', substring( item().name, add(  lastIndexOf(item().name,'_'),  7 ),2 )\n)\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Each File from Source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_partition_source_file",
											"type": "DatasetReference",
											"parameters": {
												"source_folder_path": {
													"value": "@pipeline().parameters.source_dir",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"source_dir": {
						"type": "string",
						"defaultValue": "voca/outbound_test/"
					},
					"destination_dir": {
						"type": "string",
						"defaultValue": "voca/outbound_test/"
					}
				},
				"folder": {
					"name": "Utility Folder"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T20:03:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_partition_source_folder')]",
				"[concat(variables('factoryId'), '/datasets/ds_partition_source_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_partition_sink_folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_partition_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata of Source Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_partition_source_folder",
								"type": "DatasetReference",
								"parameters": {
									"source_folder_path": {
										"value": "@pipeline().parameters.source_dir",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter Only Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata of Source Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata of Source Folder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File' )\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Partition and Delete",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Only Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only Files').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Each File from Source",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:45:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"parallelCopies": 13,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_partition_source_file",
											"type": "DatasetReference",
											"parameters": {
												"source_folder_path": {
													"value": "@pipeline().parameters.source_dir",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_partition_sink_folder",
											"type": "DatasetReference",
											"parameters": {
												"destination_folder_path": {
													"value": "@concat(pipeline().parameters.destination_dir,\n'/year_p=', substring( item().name, add(length(pipeline().parameters.static_filename_part), 0) ,  4 ),\n\n'/month_p=', substring( item().name, add(length(pipeline().parameters.static_filename_part), 4) ,  2 ),\n\n'/day_p=', substring( item().name, add(length(pipeline().parameters.static_filename_part), 6) ,  2 )\n)\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy Each File from Source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_partition_source_file",
											"type": "DatasetReference",
											"parameters": {
												"source_folder_path": {
													"value": "@pipeline().parameters.source_dir",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"source_dir": {
						"type": "string",
						"defaultValue": "voca/outbound_test/"
					},
					"destination_dir": {
						"type": "string",
						"defaultValue": "voca/outbound_test/"
					},
					"static_filename_part": {
						"type": "string",
						"defaultValue": "oce_voca_oder_"
					}
				},
				"folder": {
					"name": "Utility Folder"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-19T21:05:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_partition_source_folder')]",
				"[concat(variables('factoryId'), '/datasets/ds_partition_source_file')]",
				"[concat(variables('factoryId'), '/datasets/ds_partition_sink_folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_publish_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get List of Files in Folder",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Get Feed Parameters",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_partition_source_folder",
								"type": "DatasetReference",
								"parameters": {
									"source_folder_path": {
										"value": "@activity('Get Feed Parameters').output.firstRow.Feed_Directory_outbound",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter Only Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get List of Files in Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get List of Files in Folder').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IF_ISAAC_Check",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Loop Over List of Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.feed_name,'ISAAC')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy to ISAAC SFTP server",
									"description": "Copy to ISAAC SFTP server",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_publish_feed_file",
											"type": "DatasetReference",
											"parameters": {
												"source_folder_path": {
													"value": "@activity('Get Feed Parameters').output.firstRow.Feed_Directory_outbound\n\n",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@variables('LatestFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ISAAC",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@variables('LatestFileName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "IF_CCPM_Check",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "IF_ISAAC_Check",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.feed_name,'CCPM')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy to CCPM SFTP server",
									"description": "Copy to CCPM SFTP server",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "SftpWriteSettings",
												"operationTimeout": "01:00:00",
												"useTempFileRename": true
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_publish_feed_file",
											"type": "DatasetReference",
											"parameters": {
												"source_folder_path": {
													"value": "@activity('Get Feed Parameters').output.firstRow.Feed_Directory_outbound",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@variables('LatestFileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CCPM",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@variables('LatestFileName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Feed Parameters",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from V101.EDM_CONFIG where Feed = '@{pipeline().parameters.feed_name}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "FeedConfigTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Loop Over List of Files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Only Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Only Files').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata For Each File",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:20:00",
										"retry": 5,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_partition_source_file",
											"type": "DatasetReference",
											"parameters": {
												"source_folder_path": {
													"value": "@activity('Get Feed Parameters').output.firstRow.Feed_Directory_outbound",
													"type": "Expression"
												},
												"source_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata For Each File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(\n   \n   formatDateTime(activity('Get Metadata For Each File').output.lastModified,'yyyyMMddHHmmss')\n    , \n    formatDateTime(variables('PreviousModifiedDate'),'yyyyMMddHHmmss')\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable - File Name",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "LatestFileName",
													"value": {
														"value": "@activity('Get Metadata For Each File').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set Previous Modified Date",
									"description": "Set Previous Modified Date to modified date of current file",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PreviousModifiedDate",
										"value": {
											"value": "@activity('Get Metadata For Each File').output.lastModified",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"feed_name": {
						"type": "string",
						"defaultValue": "ISAAC"
					}
				},
				"variables": {
					"PreviousModifiedDate": {
						"type": "String",
						"defaultValue": "1990-01-01T05:12:22Z"
					},
					"LatestFileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Utility Folder"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T16:37:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_partition_source_folder')]",
				"[concat(variables('factoryId'), '/datasets/FeedConfigTable')]",
				"[concat(variables('factoryId'), '/datasets/ds_publish_feed_file')]",
				"[concat(variables('factoryId'), '/datasets/ISAAC')]",
				"[concat(variables('factoryId'), '/datasets/CCPM')]",
				"[concat(variables('factoryId'), '/datasets/ds_partition_source_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqldata_achive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Data From SQL DB - CSV",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    'SELECT * FROM ', \n    pipeline().parameters.SourceSchemaName, '.', \n    pipeline().parameters.SourceTableName, \n    if(\n        or(\n            not(empty(pipeline().parameters.SourceFromDate)), \n            not(empty(pipeline().parameters.SourceToDate))\n        ), \n        concat(\n            ' WHERE ', \n            if(\n                not(empty(pipeline().parameters.SourceFromDate)), \n                concat(pipeline().parameters.SourceLookupColumn, ' >= ''', pipeline().parameters.SourceFromDate, ''''), \n                ''\n            ), \n            if(\n                and(\n                    not(empty(pipeline().parameters.SourceFromDate)), \n                    not(empty(pipeline().parameters.SourceToDate))\n                ), \n                ' AND ', \n                ''\n            ), \n            if(\n                not(empty(pipeline().parameters.SourceToDate)), \n                concat(pipeline().parameters.SourceLookupColumn, ' <= ''', pipeline().parameters.SourceToDate, ''''), \n                ''\n            )\n        ), \n        ''\n    )\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"blockSizeInMB": 100
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": 5000000,
									"fileNamePrefix": {
										"value": "@concat(\n    pipeline().parameters.SourceTableName, \n    if(\n        or(\n            not(empty(pipeline().parameters.SourceFromDate)), \n            not(empty(pipeline().parameters.SourceToDate))\n        ), \n        concat(\n            '_', \n            if(\n                not(empty(pipeline().parameters.SourceFromDate)), \n                replace(pipeline().parameters.SourceFromDate, '-', ''), \n                ''\n            ), \n            '_', \n            if(\n                not(empty(pipeline().parameters.SourceToDate)), \n                replace(pipeline().parameters.SourceToDate, '-', ''), \n                ''\n            )\n        ), \n        ''\n    )\n)",
										"type": "Expression"
									},
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"parallelCopies": 4,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_csv_storage",
								"type": "DatasetReference",
								"parameters": {
									"p_schema": {
										"value": "@pipeline().parameters.SourceSchemaName",
										"type": "Expression"
									},
									"p_table": {
										"value": "@pipeline().parameters.SourceTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy Data From SQL DB - Parquet",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    'SELECT * FROM ', \n    pipeline().parameters.SourceSchemaName, '.', \n    pipeline().parameters.SourceTableName, \n    if(\n        or(\n            not(empty(pipeline().parameters.SourceFromDate)), \n            not(empty(pipeline().parameters.SourceToDate))\n        ), \n        concat(\n            ' WHERE ', \n            if(\n                not(empty(pipeline().parameters.SourceFromDate)), \n                concat(pipeline().parameters.SourceLookupColumn, ' >= ''', pipeline().parameters.SourceFromDate, ''''), \n                ''\n            ), \n            if(\n                and(\n                    not(empty(pipeline().parameters.SourceFromDate)), \n                    not(empty(pipeline().parameters.SourceToDate))\n                ), \n                ' AND ', \n                ''\n            ), \n            if(\n                not(empty(pipeline().parameters.SourceToDate)), \n                concat(pipeline().parameters.SourceLookupColumn, ' <= ''', pipeline().parameters.SourceToDate, ''''), \n                ''\n            )\n        ), \n        ''\n    )\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 4,
									"blockSizeInMB": 100
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 50000,
									"fileNamePrefix": {
										"value": "@concat(\n    pipeline().parameters.SourceTableName, \n    if(\n        or(\n            not(empty(pipeline().parameters.SourceFromDate)), \n            not(empty(pipeline().parameters.SourceToDate))\n        ), \n        concat(\n            '_', \n            if(\n                not(empty(pipeline().parameters.SourceFromDate)), \n                replace(pipeline().parameters.SourceFromDate, '-', ''), \n                ''\n            ), \n            '_', \n            if(\n                not(empty(pipeline().parameters.SourceToDate)), \n                replace(pipeline().parameters.SourceToDate, '-', ''), \n                ''\n            )\n        ), \n        ''\n    )\n)",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"parallelCopies": 5,
							"dataIntegrationUnits": 32,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sql_db",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_parquet_storage",
								"type": "DatasetReference",
								"parameters": {
									"p_schema": {
										"value": "@pipeline().parameters.SourceSchemaName",
										"type": "Expression"
									},
									"p_table": {
										"value": "@pipeline().parameters.SourceTableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceSchemaName": {
						"type": "string",
						"defaultValue": "v101"
					},
					"SourceTableName": {
						"type": "string",
						"defaultValue": "oceOrderData"
					},
					"SourceLookupColumn": {
						"type": "string",
						"defaultValue": "ModifiedDate"
					},
					"SourceFromDate": {
						"type": "string"
					},
					"SourceToDate": {
						"type": "string"
					}
				},
				"folder": {
					"name": "PurgeAndArchive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_db')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_csv_storage')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_parquet_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqldata_restore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Data From Parquet to SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_parquet_file_to_restore",
								"type": "DatasetReference",
								"parameters": {
									"p_filepath": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									},
									"p_container": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_db_parquet_load",
								"type": "DatasetReference",
								"parameters": {
									"p_schema": {
										"value": "@pipeline().parameters.DestinationSchema",
										"type": "Expression"
									},
									"p_table": {
										"value": "@pipeline().parameters.DestinationTableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"DestinationSchema": {
						"type": "string",
						"defaultValue": "test"
					},
					"DestinationTableName": {
						"type": "string",
						"defaultValue": "oceOrderData_bk"
					},
					"SourceFilePath": {
						"type": "string",
						"defaultValue": "AureSQLDB/v101/oceOrderData/2024-07-29/oceOrderData_20240701__00000.parquet"
					},
					"SourceContainer": {
						"type": "string",
						"defaultValue": "archive"
					}
				},
				"folder": {
					"name": "PurgeAndArchive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_parquet_file_to_restore')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_db_parquet_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_table_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Table to Blob",
						"description": "Copy Table to Blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('Select * from ',pipeline().parameters.schema,'.',pipeline().parameters.tablename,' where ',pipeline().parameters.where_clause)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_oceReportingDb",
								"type": "DatasetReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.schema",
										"type": "Expression"
									},
									"table": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_v101data",
								"type": "DatasetReference",
								"parameters": {
									"folderpath": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"schema": {
						"type": "string",
						"defaultValue": "v101"
					},
					"where_clause": {
						"type": "string",
						"defaultValue": "1=1"
					}
				},
				"folder": {
					"name": "Utility Folder/adhoc_load"
				},
				"annotations": [],
				"lastPublishTime": "2023-07-19T21:05:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_oceReportingDb')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_v101data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_user_events_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy to Staging Table in Azure SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "oce_usermgmt_watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDataExplorerSource",
								"query": {
									"value": "oce_usermgmt_events\n|where lastmodified_date> datetime('@{activity('oce_usermgmt_watermark').output.value[0].maxvalue}')\n| extend eventSource=parse_json(eventData).event.eventSource,\n     eventTime=tolong(parse_json(eventData).event.eventTime)\n|top 100000 by lastmodified_date asc",
									"type": "Expression"
								},
								"queryTimeout": "00:30:00",
								"noTruncation": true
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE usermanagement.oceUserDataStaging\n;\n\nTRUNCATE TABLE usermanagement.[oceUserDataAuditStaging]\n;\n\nselect 'complete'\n\n\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 16,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId"
										},
										"sink": {
											"name": "userId"
										}
									},
									{
										"source": {
											"name": "eventData"
										},
										"sink": {
											"name": "eventData"
										}
									},
									{
										"source": {
											"name": "lastmodified_date",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "lastmodified_date",
											"scale": 7
										}
									},
									{
										"source": {
											"name": "eventSource"
										},
										"sink": {
											"name": "eventSource"
										}
									},
									{
										"source": {
											"name": "eventTime",
											"physicalType": "dynamic"
										},
										"sink": {
											"name": "eventTime",
											"precision": 19
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "v101_AzureDataExplorerTableV101",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_oceUserDataStaging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "oce_usermgmt_watermark",
						"description": "Get Watermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  MAX(watermark_value) as maxvalue  from usermanagement.oce_usermgmt_watermark \n\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sql_oce_usermgmt_watermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update oce_usermgmt_watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data Flow - Event Processor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\ninsert into usermanagement.oce_usermgmt_watermark\nvalues( \n\t\t\t(\n\t\t\t\tselect max(watermark_value) \n\t\t\t\tfrom (\n\t\t\t\t\t\tselect distinct max(lastmodified_date) as watermark_value from usermanagement.oceUserDataStaging\n\t\t\t\t\t\tunion\n\t\t\t\t\t\tselect distinct max(watermark_value) as watermark_value from usermanagement.oce_usermgmt_watermark\n\t\t\t\t)x\n\t \n\t\t)\n\t\t,GETDATE()\n\t\t,(\n\t\t\tselect distinct max(lastmodified_date) as batch_max_load_date \n\t\t\tfrom usermanagement.oceUserDataStaging\n\t\t),\n\t\t(\t\n\t\t\tselect distinct min(lastmodified_date) as batch_min_load_date \n\t\t\tfrom usermanagement.oceUserDataStaging\n\t\t),\n\t\t(\n\t\t\tselect COUNT(*) as records_processed from usermanagement.oceUserDataStaging\n\t\t)\n)\n;\n\n\nselect 'complete'\n ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_v101_oce_opsms_watermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Data Flow - Event Processor",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy to Staging Table in Azure SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_user_event_load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"oceUserDataStagingStream": {},
									"sinkRoleList": {},
									"sinkPartnerList": {},
									"sinkChannelList": {},
									"sinkOceUsers": {},
									"sinkUserDataAuditStaging": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Prod-New-23488",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Update Audit Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "update oce_usermgmt_watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:45:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[usermanagement].[SP_UPDATE_USERMGMT_AUDIT]"
						},
						"linkedServiceName": {
							"referenceName": "OCEAzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OCEUsermanagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T20:03:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/v101_AzureDataExplorerTableV101')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceUserDataStaging')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oce_usermgmt_watermark')]",
				"[concat(variables('factoryId'), '/datasets/ds_v101_oce_opsms_watermark')]",
				"[concat(variables('factoryId'), '/dataflows/df_user_event_load')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]",
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_usermgmt_feed')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Users",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "usermanagement.[SP_GET_USERS]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_myattlogin",
								"type": "DatasetReference",
								"parameters": {
									"ds_filename": {
										"value": "@concat('oce1_user_',convertFromUtc(utcNow(), 'Central Europe Standard Time', 'yyyyMMdd'),'.txt')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Load User Profiles",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "usermanagement.[SP_GET_USER_PROFILES]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_myattlogin",
								"type": "DatasetReference",
								"parameters": {
									"ds_filename": {
										"value": "@concat('oce1_userprofile_',convertFromUtc(utcNow(), 'Central Europe Standard Time', 'yyyyMMdd'),'.txt')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Load Profiles",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "usermanagement.[SP_GET_PROFILES]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_myattlogin",
								"type": "DatasetReference",
								"parameters": {
									"ds_filename": {
										"value": "@concat('oce1_profile_',convertFromUtc(utcNow(), 'Central Europe Standard Time', 'yyyyMMdd'),'.txt')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Load OCE All Accounts",
						"description": "",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "usermanagement.[SP_GET_ALL_ACCOUNTS]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_myattlogin",
								"type": "DatasetReference",
								"parameters": {
									"ds_filename": {
										"value": "@concat('oce1_AllAccounts_',convertFromUtc(utcNow(), 'Central Europe Standard Time', 'yyyyMMdd'),'.txt')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Partition Files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FTP to MyLogin Server",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_partition_all_files",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"source_dir": {
									"value": "@concat('myattlogin/')",
									"type": "Expression"
								},
								"destination_dir": {
									"value": "@concat('myattlogin/')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "FTP to MyLogin Server",
						"description": "FTP to MyLogin Server",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Load Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load User Profiles",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load Profiles",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Load OCE All Accounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:30:00",
							"retry": 5,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"maxConcurrentConnections": 1,
									"recursive": false,
									"wildcardFolderPath": "myattlogin",
									"wildcardFileName": "oce*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"maxConcurrentConnections": 1,
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_myattlogin_dir",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ftp_mylogin",
								"type": "DatasetReference",
								"parameters": {
									"sinkMyLoginLocation": {
										"value": "@pipeline().parameters.sinkMyLoginLocation",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"sinkMyLoginLocation": {
						"type": "string",
						"defaultValue": "application_logins_test"
					}
				},
				"variables": {
					"v_test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OCEUsermanagement"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-01T16:55:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_myattlogin')]",
				"[concat(variables('factoryId'), '/pipelines/pl_partition_all_files')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_myattlogin_dir')]",
				"[concat(variables('factoryId'), '/datasets/ds_ftp_mylogin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_v101_history_load_encryption')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read WaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat( '\n    SELECT \n        (SELECT dateadd(SECOND,-1,MAX(watermark_value)) as maxvalue FROM oce.v101OrderHistoryWatermark where keyspace ='''\n        , pipeline().parameters.ds_keyspace\n        , ''') AS maxvalue,'\n        , '(SELECT value FROM oce.v101OrderHistoryConfig WHERE [key] = ''historyLoadSQL-', pipeline().parameters.ds_keyspace, ''') AS SQLQuery,'\n        , '(SELECT value FROM oce.v101OrderHistoryConfig WHERE [key] = ''historyLoadMetricsSQL-', pipeline().parameters.ds_keyspace, ''') AS historyLoadMetricsSQL'  \n    \n    )",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_oce_v101OrderHistoryWatermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy AuditLog ADX Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Read WaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@replace(activity('Read WaterMark').output.value[0].SQLQuery, 'WATERMARK_VALUE', activity('Read WaterMark').output.value[0].maxvalue)\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "V101_oceOrderData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_v101OrderHistory",
								"type": "DatasetReference",
								"parameters": {
									"ds_filename": {
										"value": "@concat('v101_', replace(activity('Read WaterMark').output.value[0].maxvalue, '-', ''), '_', formatDateTime(convertTimeZone(utcnow(), 'UTC', 'Central Standard Time'), 'yyyyMMddHHmmss'), '.json')",
										"type": "Expression"
									},
									"ds_containername": {
										"value": "@concat('v101-order-history-',pipeline().parameters.ds_keyspace)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "update watermark",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Max Ingestion Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nINSERT INTO oce.v101OrderHistoryWatermark (\n    watermark_value,\n    lastmodifieddate,\n    batch_max_load_date,\n    batch_min_load_date,\n    records_processed,\n    keyspace\n) VALUES (\n    '@{activity('Get Max Ingestion Time').output.value[0].max_ingestion_time}',\n    GETDATE(),\n    '@{activity('Get Max Ingestion Time').output.value[0].max_ingestion_time}',\n    '@{activity('Get Max Ingestion Time').output.value[0].min_ingestion_time}',\n    @{activity('Get Max Ingestion Time').output.value[0].number_of_records},\n    '@{pipeline().parameters.ds_keyspace}'\n);\n\nSELECT 'complete';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_oce_autoUnlockHistoryWatermark",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get Max Ingestion Time",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy AuditLog ADX Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@replace(activity('Read WaterMark').output.value[0].historyLoadMetricsSQL, 'WATERMARK_VALUE', activity('Read WaterMark').output.value[0].maxvalue)\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_oce_v101OrderHistoryWatermark",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ds_keyspace": {
						"type": "string",
						"defaultValue": "orderrepo"
					}
				},
				"folder": {
					"name": "OCEStreamingJobs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_oce_v101OrderHistoryWatermark')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderData')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_v101OrderHistory')]",
				"[concat(variables('factoryId'), '/datasets/ds_oce_autoUnlockHistoryWatermark')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADXV101QualityCheck')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataQualityCheck"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "lastmodified_date",
						"type": "datetime"
					},
					{
						"name": "orderjson_1",
						"type": "dynamic"
					},
					{
						"name": "customer_order_number",
						"type": "string"
					},
					{
						"name": "orderEvent",
						"type": "dynamic"
					}
				],
				"typeProperties": {
					"table": "oce_order_v101"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArchiveErrorFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ErrorFolder": {
						"type": "string"
					},
					"RootErrorFolder": {
						"type": "string",
						"defaultValue": "tmftableerrorsarchive"
					}
				},
				"folder": {
					"name": "CopyErrorstostageDS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(dataset().ErrorFolder,'/',formatDateTime(utcNow(),'yyyy'),'-',formatDateTime(utcNow(),'MM'),'-',formatDateTime(utcNow(),'dd'),'/')",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().RootErrorFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlockDeviceCheckResponse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Imei",
						"type": "varchar"
					},
					{
						"name": "sim1Imei",
						"type": "nvarchar"
					},
					{
						"name": "sim2Imei",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "responseTimestamp_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "responseTimestamp",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "subscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "AutoUnlockDeviceCheckResponse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlockResponse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Imei",
						"type": "varchar"
					},
					{
						"name": "sim1Imei",
						"type": "varchar"
					},
					{
						"name": "sim2Imei",
						"type": "varchar"
					},
					{
						"name": "issueDateTime_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "responseTimestamp_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "responseTimestamp",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "unlockEligibilityStatus",
						"type": "nvarchar"
					},
					{
						"name": "unlockIneligibilityReason",
						"type": "nvarchar"
					},
					{
						"name": "DeviceUnlocked",
						"type": "nvarchar"
					},
					{
						"name": "unlockCode",
						"type": "nvarchar"
					},
					{
						"name": "eligibilityPreapprovedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "fnCustomerType",
						"type": "nvarchar"
					},
					{
						"name": "fanAccountType",
						"type": "nvarchar"
					},
					{
						"name": "DeviceType",
						"type": "nvarchar"
					},
					{
						"name": "errorMessage",
						"type": "nvarchar"
					},
					{
						"name": "subErrorMessage",
						"type": "nvarchar"
					},
					{
						"name": "errorDetails",
						"type": "nvarchar"
					},
					{
						"name": "SchemaPath",
						"type": "nvarchar"
					},
					{
						"name": "ResponseCode",
						"type": "nvarchar"
					},
					{
						"name": "ResponseDescription",
						"type": "nvarchar"
					},
					{
						"name": "TorchResponse",
						"type": "nvarchar"
					},
					{
						"name": "tlgCode",
						"type": "nvarchar"
					},
					{
						"name": "eventId",
						"type": "nvarchar"
					},
					{
						"name": "Source",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "imeiValidationStatus",
						"type": "nvarchar"
					},
					{
						"name": "model",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "AutoUnlockResponse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlock_DC2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Imei",
						"type": "varchar"
					},
					{
						"name": "sim1Imei",
						"type": "nvarchar"
					},
					{
						"name": "sim2Imei",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "responseTimestamp_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "responseTimestamp",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "subscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "AutoUnlockDeviceCheckResponse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlock_SC2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Imei",
						"type": "varchar"
					},
					{
						"name": "sim1Imei",
						"type": "nvarchar"
					},
					{
						"name": "sim2Imei",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "responseTimestamp_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "responseTimestamp",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "subscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "AutoUnlocksubScriberNumberCheckResponse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlocksubscirberNumberCheckResponce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Imei",
						"type": "varchar"
					},
					{
						"name": "sim1Imei",
						"type": "nvarchar"
					},
					{
						"name": "sim2Imei",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "responseTimestamp_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "responseTimestamp",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "subscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "AutoUnlocksubScriberNumberCheckResponse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataExplorerTableV101_medium')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "lastmodified_date",
						"type": "datetime"
					},
					{
						"name": "orderjson_1",
						"type": "dynamic"
					},
					{
						"name": "customer_order_number",
						"type": "string"
					},
					{
						"name": "orderEvent",
						"type": "dynamic"
					},
					{
						"name": "data",
						"type": "string"
					}
				],
				"typeProperties": {
					"table": "oce_order_v101"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCPM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CCPM",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "/appl/ipc/SrcFiles/ccpm/landingzone/DR"
					},
					"columnDelimiter": "|",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CCPM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCPM_BLOB_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_containename": {
						"type": "string",
						"defaultValue": "oce-feeds"
					},
					"ds_deliimiter": {
						"type": "string"
					},
					"ds_directory": {
						"type": "string"
					},
					"ds_filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ds_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().ds_directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ds_containename",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ds_deliimiter",
						"type": "Expression"
					},
					"escapeChar": "",
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyErrorFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string",
						"defaultValue": "tmftableerrors"
					}
				},
				"folder": {
					"name": "CopyErrorstostageDS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyErrorsStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ErrorStagingTable": {
						"type": "string"
					}
				},
				"folder": {
					"name": "CopyErrorstostageDS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().ErrorStagingTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DQC_DataCheckWatermarkTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataQualityCheck"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "DataCheckWatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DQC_oceOrderQualityCheck')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataQualityCheck"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "lastmodified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "customer_order_number",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "ingestion_time",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderDataCheck"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DQC_oceOrderQualityCheckstg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DataQualityCheck"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "lastmodified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "customer_order_number",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "ingestion_time",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "stg_oceOrderDataCheck"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_REPROCESS_ERROR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DS_folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "CopyErrorstostageDS"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().DS_folder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteErrorFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "tmftableerrors"
					},
					"ErrorFolders": {
						"type": "string"
					}
				},
				"folder": {
					"name": "CopyErrorstostageDS"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().ErrorFolders",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FeedConfigTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "feed",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "productcategory",
						"type": "varchar"
					},
					{
						"name": "insert_ts",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "EDM_CONFIG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FeedData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"StagingTable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "V101",
					"table": {
						"value": "@dataset().StagingTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ISAAC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ISSAC",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": {
							"value": "@concat(dataset().filename,'.gz')",
							"type": "Expression"
						},
						"folderPath": "/home/m85907/oce/data"
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ISSAC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ISAAC_BLOB_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_containename": {
						"type": "string",
						"defaultValue": "oce-feeds"
					},
					"ds_deliimiter": {
						"type": "string"
					},
					"ds_directory": {
						"type": "string"
					},
					"ds_filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ds_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().ds_directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ds_containename",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ds_deliimiter",
						"type": "Expression"
					},
					"escapeChar": "",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_Staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "orderjson_1",
						"type": "text"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "customerordernumber",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "orderDataStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acceptedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "b2bDetail",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "subStatus",
						"type": "varchar"
					},
					{
						"name": "installmentMultiIndicator",
						"type": "nvarchar"
					},
					{
						"name": "isOrderPended",
						"type": "nvarchar"
					},
					{
						"name": "numberOfInstallments",
						"type": "nvarchar"
					},
					{
						"name": "oceOrderNumber",
						"type": "varchar"
					},
					{
						"name": "orderId",
						"type": "nvarchar"
					},
					{
						"name": "program",
						"type": "nvarchar"
					},
					{
						"name": "requestId",
						"type": "nvarchar"
					},
					{
						"name": "requestType",
						"type": "nvarchar"
					},
					{
						"name": "revisionNumber",
						"type": "nvarchar"
					},
					{
						"name": "specialInstructions",
						"type": "nvarchar"
					},
					{
						"name": "createdDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "version",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderErrors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "ErrorCode",
						"type": "varchar"
					},
					{
						"name": "ErrorDescription",
						"type": "nvarchar"
					},
					{
						"name": "IdRef",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "eventhub_adx_ingest_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderErrors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderLosgs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "acceptEULA",
						"type": "nvarchar"
					},
					{
						"name": "accountReference",
						"type": "nvarchar"
					},
					{
						"name": "actionReason",
						"type": "nvarchar"
					},
					{
						"name": "actionType",
						"type": "nvarchar"
					},
					{
						"name": "apiExecutionDetailsErrorCode",
						"type": "nvarchar"
					},
					{
						"name": "apiExecutionDetailsLosgStatus",
						"type": "nvarchar"
					},
					{
						"name": "apiExecutionDetailsName",
						"type": "varchar"
					},
					{
						"name": "apiExecutionDetailsPriority",
						"type": "varchar"
					},
					{
						"name": "billingsystemid",
						"type": "varchar"
					},
					{
						"name": "bundleGroupId",
						"type": "nvarchar"
					},
					{
						"name": "childOrderId",
						"type": "nvarchar"
					},
					{
						"name": "companyCode",
						"type": "nvarchar"
					},
					{
						"name": "creditPolicySecurityType",
						"type": "nvarchar"
					},
					{
						"name": "dealercode",
						"type": "nvarchar"
					},
					{
						"name": "divisionCode",
						"type": "nvarchar"
					},
					{
						"name": "effectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "engageVideoId",
						"type": "nvarchar"
					},
					{
						"name": "entitlementBenefit",
						"type": "nvarchar"
					},
					{
						"name": "fallout",
						"type": "nvarchar"
					},
					{
						"name": "fnGuId",
						"type": "nvarchar"
					},
					{
						"name": "fnType",
						"type": "nvarchar"
					},
					{
						"name": "fnUserId",
						"type": "nvarchar"
					},
					{
						"name": "freeDevicePolicyId",
						"type": "nvarchar"
					},
					{
						"name": "fulfillerCode",
						"type": "nvarchar"
					},
					{
						"name": "fulfillerName",
						"type": "nvarchar"
					},
					{
						"name": "fulfillmentmethod",
						"type": "nvarchar"
					},
					{
						"name": "fwCAF2AddressIndicator",
						"type": "nvarchar"
					},
					{
						"name": "fwiMoveInIndicator",
						"type": "nvarchar"
					},
					{
						"name": "installtype",
						"type": "nvarchar"
					},
					{
						"name": "losgType",
						"type": "nvarchar"
					},
					{
						"name": "market",
						"type": "nvarchar"
					},
					{
						"name": "migrationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "migrationSource",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "preferredAreaCode",
						"type": "nvarchar"
					},
					{
						"name": "priceCode",
						"type": "nvarchar"
					},
					{
						"name": "primaryIndicator",
						"type": "nvarchar"
					},
					{
						"name": "productcategory",
						"type": "nvarchar"
					},
					{
						"name": "productOfferingId",
						"type": "nvarchar"
					},
					{
						"name": "productOrderActionId",
						"type": "nvarchar"
					},
					{
						"name": "productOrderActionReference",
						"type": "nvarchar"
					},
					{
						"name": "profileCode",
						"type": "nvarchar"
					},
					{
						"name": "rateType",
						"type": "nvarchar"
					},
					{
						"name": "requestedExecutionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "salesOfferId",
						"type": "nvarchar"
					},
					{
						"name": "schedulingdetailreference",
						"type": "nvarchar"
					},
					{
						"name": "serviceArea",
						"type": "nvarchar"
					},
					{
						"name": "serviceAreaName",
						"type": "varchar"
					},
					{
						"name": "servicequalificationreference",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "subMarket",
						"type": "varchar"
					},
					{
						"name": "substatus",
						"type": "varchar"
					},
					{
						"name": "sunsetDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "tenantAccountId",
						"type": "nvarchar"
					},
					{
						"name": "tenantAccountStatus",
						"type": "varchar"
					},
					{
						"name": "transferFromBAN",
						"type": "varchar"
					},
					{
						"name": "transferFromFAN",
						"type": "varchar"
					},
					{
						"name": "transferFromMobileNumber",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "vendorAccountId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "actionReasonCode",
						"type": "nvarchar"
					},
					{
						"name": "previousProductOrderActionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderLosgs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderLosgsLineItems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "action",
						"type": "nvarchar"
					},
					{
						"name": "addOnDomainName",
						"type": "nvarchar"
					},
					{
						"name": "addOnDomainRegistration",
						"type": "nvarchar"
					},
					{
						"name": "addOnParentItem",
						"type": "nvarchar"
					},
					{
						"name": "addOnRegistrationType",
						"type": "nvarchar"
					},
					{
						"name": "billingCode",
						"type": "varchar"
					},
					{
						"name": "billingCodeType",
						"type": "nvarchar"
					},
					{
						"name": "catalogProductType",
						"type": "nvarchar"
					},
					{
						"name": "catalogSKUId",
						"type": "nvarchar"
					},
					{
						"name": "contractAmountFinanced",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractAnnualPercentageRate",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractBalancedAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractDisplayName",
						"type": "nvarchar"
					},
					{
						"name": "contractSent",
						"type": "nvarchar"
					},
					{
						"name": "contractSystem",
						"type": "nvarchar"
					},
					{
						"name": "contractType",
						"type": "varchar"
					},
					{
						"name": "contractDownPayment",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractDownPaymentPercent",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractFinanceCharge",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractInstallmentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractInstallmentPlanDef",
						"type": "nvarchar"
					},
					{
						"name": "contractInstallmentPlanId",
						"type": "nvarchar"
					},
					{
						"name": "contractInstallmentStatus",
						"type": "nvarchar"
					},
					{
						"name": "contractInstallmentType",
						"type": "nvarchar"
					},
					{
						"name": "contractPrepaidFinanceCharge",
						"type": "nvarchar"
					},
					{
						"name": "contractPayupAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractPayoffAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractTotalSalePrice",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractlength",
						"type": "int",
						"precision": 10
					},
					{
						"name": "curbsideDelivery",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "displayName",
						"type": "nvarchar"
					},
					{
						"name": "effectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "feeId",
						"type": "nvarchar"
					},
					{
						"name": "feeIdType",
						"type": "nvarchar"
					},
					{
						"name": "feeWaivedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "feeWaivedReason",
						"type": "nvarchar"
					},
					{
						"name": "fulfillmentLocation",
						"type": "nvarchar"
					},
					{
						"name": "groupOptionId",
						"type": "nvarchar"
					},
					{
						"name": "inventoryStoreId",
						"type": "nvarchar"
					},
					{
						"name": "itemFulfillmentMethod",
						"type": "nvarchar"
					},
					{
						"name": "locationId",
						"type": "nvarchar"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "operation",
						"type": "nvarchar"
					},
					{
						"name": "preOwnedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "priceAdditionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "priceAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "priceBaseAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "priceCreditFeeType",
						"type": "nvarchar"
					},
					{
						"name": "priceCurrencyType",
						"type": "nvarchar"
					},
					{
						"name": "priceInstallmentEligibility",
						"type": "nvarchar"
					},
					{
						"name": "priceMsrp",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "priceType",
						"type": "nvarchar"
					},
					{
						"name": "priceTaxDetail",
						"type": "nvarchar"
					},
					{
						"name": "priceTotal",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "productCode",
						"type": "varchar"
					},
					{
						"name": "productGroupReferences",
						"type": "nvarchar"
					},
					{
						"name": "productSKU",
						"type": "varchar"
					},
					{
						"name": "productSubType",
						"type": "nvarchar"
					},
					{
						"name": "productType",
						"type": "nvarchar"
					},
					{
						"name": "promotionReferences",
						"type": "nvarchar"
					},
					{
						"name": "purchaseTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "shippingDetailReference",
						"type": "nvarchar"
					},
					{
						"name": "socForPreviousDevice",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "storeId",
						"type": "nvarchar"
					},
					{
						"name": "subscriptionId",
						"type": "nvarchar"
					},
					{
						"name": "systemName",
						"type": "nvarchar"
					},
					{
						"name": "taxableIndicator",
						"type": "nvarchar"
					},
					{
						"name": "tier",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderLosgsLineItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderLosgsWirelessCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "accountConversionStatus",
						"type": "nvarchar"
					},
					{
						"name": "activationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "availabilityDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "billingSystemId",
						"type": "nvarchar"
					},
					{
						"name": "calculateTaxIndicator",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataAddendDateAndTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "coPayDataAddendVersion",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataAllowanceAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "coPayDataCancelCTN",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataEnrollingCTN",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataReceivingBAN",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataReceivingFAN",
						"type": "nvarchar"
					},
					{
						"name": "cCarDetailMake",
						"type": "varchar"
					},
					{
						"name": "cCarDetailModel",
						"type": "varchar"
					},
					{
						"name": "cCarDetailTrim",
						"type": "varchar"
					},
					{
						"name": "cCarDetailVehicleManufacturer",
						"type": "varchar"
					},
					{
						"name": "cCarVin",
						"type": "varchar"
					},
					{
						"name": "cCarYear",
						"type": "varchar"
					},
					{
						"name": "crossUpgradeIndicator",
						"type": "nvarchar"
					},
					{
						"name": "curbsideDelivery",
						"type": "nvarchar"
					},
					{
						"name": "inventoryStoreId",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListaction",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListCompAListName",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListcompCTNList",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListcontactCTN",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListId",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListOverrideInd",
						"type": "nvarchar"
					},
					{
						"name": "mobileNumber",
						"type": "varchar"
					},
					{
						"name": "paymentId",
						"type": "nvarchar"
					},
					{
						"name": "preOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "primarySharedPlanIndicator",
						"type": "nvarchar"
					},
					{
						"name": "shippedHotIndicator",
						"type": "nvarchar"
					},
					{
						"name": "shoppingZipCode",
						"type": "varchar"
					},
					{
						"name": "splitLiabilityDataAddendDateAndTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "splitLiabilityDataAddendVersion",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataCancelCTN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataEnrollingCTN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataOneTimeChargeInd",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataValueIndicator",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataTargetBAN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataTargetFAN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataTelecomManagerEmail",
						"type": "nvarchar"
					},
					{
						"name": "storeId",
						"type": "nvarchar"
					},
					{
						"name": "subscriberCrossmarketIndicator",
						"type": "nvarchar"
					},
					{
						"name": "subscriptionClass",
						"type": "nvarchar"
					},
					{
						"name": "tradeInQuoteId",
						"type": "nvarchar"
					},
					{
						"name": "upgradeDetailRelatedMobNumber",
						"type": "nvarchar"
					},
					{
						"name": "upgradeDetailRelationship",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderLosgsWirelessCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderReferenceDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "associatedRequestID",
						"type": "nvarchar"
					},
					{
						"name": "bulkIndicator",
						"type": "nvarchar"
					},
					{
						"name": "bulkOrderWorkRequestNumber",
						"type": "nvarchar"
					},
					{
						"name": "chatId",
						"type": "nvarchar"
					},
					{
						"name": "commonOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "encryptedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "fraudDetectionAdditionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "authenticationRequestId",
						"type": "nvarchar"
					},
					{
						"name": "orderFraudCheckStatus",
						"type": "nvarchar"
					},
					{
						"name": "orderModifiedAfterPinValidation",
						"type": "nvarchar"
					},
					{
						"name": "pinValidationSource",
						"type": "nvarchar"
					},
					{
						"name": "pinValidationStatus",
						"type": "nvarchar"
					},
					{
						"name": "proofOfIdentityUrl",
						"type": "nvarchar"
					},
					{
						"name": "smsCTN",
						"type": "nvarchar"
					},
					{
						"name": "validationType",
						"type": "nvarchar"
					},
					{
						"name": "efcCallIndicator",
						"type": "nvarchar"
					},
					{
						"name": "orderStatusUrl",
						"type": "nvarchar"
					},
					{
						"name": "parentOrderId",
						"type": "nvarchar"
					},
					{
						"name": "partialOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "passThroughIndicator",
						"type": "varchar"
					},
					{
						"name": "posReferenceId",
						"type": "nvarchar"
					},
					{
						"name": "posUUID",
						"type": "nvarchar"
					},
					{
						"name": "productCombinationCode",
						"type": "nvarchar"
					},
					{
						"name": "referenceOrderId",
						"type": "nvarchar"
					},
					{
						"name": "resubmitOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "summaryCreatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "testOrderIndicator",
						"type": "varchar"
					},
					{
						"name": "eventhub_adx_ingest_time",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderReferenceDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderSourceDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "application",
						"type": "varchar"
					},
					{
						"name": "browserId",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "clientIP",
						"type": "nvarchar"
					},
					{
						"name": "clientType",
						"type": "nvarchar"
					},
					{
						"name": "countryCode",
						"type": "nvarchar"
					},
					{
						"name": "county",
						"type": "nvarchar"
					},
					{
						"name": "expressCheckOutIndicator",
						"type": "nvarchar"
					},
					{
						"name": "externalOrderSource",
						"type": "nvarchar"
					},
					{
						"name": "locale",
						"type": "nvarchar"
					},
					{
						"name": "mediaSource",
						"type": "nvarchar"
					},
					{
						"name": "originatingApplication",
						"type": "nvarchar"
					},
					{
						"name": "initiatingApplication",
						"type": "nvarchar"
					},
					{
						"name": "premierDetailGroupId",
						"type": "nvarchar"
					},
					{
						"name": "premierDetailGroupName",
						"type": "nvarchar"
					},
					{
						"name": "premierDetailResourceCenterTicketNumber",
						"type": "nvarchar"
					},
					{
						"name": "region",
						"type": "nvarchar"
					},
					{
						"name": "responseMode",
						"type": "nvarchar"
					},
					{
						"name": "salesChannel",
						"type": "nvarchar"
					},
					{
						"name": "salesChannelType",
						"type": "nvarchar"
					},
					{
						"name": "sender",
						"type": "nvarchar"
					},
					{
						"name": "sequence",
						"type": "nvarchar"
					},
					{
						"name": "zip",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderSourceDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceOrderTransactionLosgList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "actionBy",
						"type": "nvarchar"
					},
					{
						"name": "changedLosgReferenceId",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "comments",
						"type": "nvarchar"
					},
					{
						"name": "endTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "orderId",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "parentOrderId",
						"type": "nvarchar"
					},
					{
						"name": "queueName",
						"type": "nvarchar"
					},
					{
						"name": "recordId",
						"type": "nvarchar"
					},
					{
						"name": "startTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "transactionId",
						"type": "nvarchar"
					},
					{
						"name": "transactionName",
						"type": "nvarchar"
					},
					{
						"name": "transactionType",
						"type": "nvarchar"
					},
					{
						"name": "updateInfos",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					},
					{
						"name": "losgReferenceId",
						"type": "varchar"
					},
					{
						"name": "service",
						"type": "nvarchar"
					},
					{
						"name": "serviceType",
						"type": "nvarchar"
					},
					{
						"name": "LosgStatus",
						"type": "varchar"
					},
					{
						"name": "LosgSubStatus",
						"type": "varchar"
					},
					{
						"name": "wirelessNumber",
						"type": "nvarchar"
					},
					{
						"name": "eventtimedate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderTransactionlogs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_oceorderEvents')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "automationUrl",
						"type": "nvarchar"
					},
					{
						"name": "callBack",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "eventId",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "fallOut",
						"type": "nvarchar"
					},
					{
						"name": "fraudResponse",
						"type": "nvarchar"
					},
					{
						"name": "isSingleTopic",
						"type": "nvarchar"
					},
					{
						"name": "isUpgradeOrder",
						"type": "nvarchar"
					},
					{
						"name": "orderType",
						"type": "nvarchar"
					},
					{
						"name": "originalVersion",
						"type": "nvarchar"
					},
					{
						"name": "priority",
						"type": "nvarchar"
					},
					{
						"name": "routingInfo",
						"type": "nvarchar"
					},
					{
						"name": "sender",
						"type": "nvarchar"
					},
					{
						"name": "traceId",
						"type": "nvarchar"
					},
					{
						"name": "version",
						"type": "nvarchar"
					},
					{
						"name": "eventHubAdxIngestTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTimeInt",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "oceOrderEvents"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "lean_pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "iconic",
					"table": "watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconice_TriggerConfig')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Flag",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "iconicpiplineconfig"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OceFeedFiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_containename": {
						"type": "string",
						"defaultValue": "oce-feeds"
					},
					"ds_deliimiter": {
						"type": "string"
					},
					"ds_directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().ds_directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ds_containename",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OperationalMsEvent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "v101"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "oceorderevents"
					}
				},
				"folder": {
					"name": "TMF_OpMS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SignatureOrderData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "varchar"
					},
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "sender",
						"type": "varchar"
					},
					{
						"name": "eventSubType",
						"type": "varchar"
					},
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "verificationId",
						"type": "varchar"
					},
					{
						"name": "verificationStatus",
						"type": "varchar"
					},
					{
						"name": "verificationSubStatus",
						"type": "varchar"
					},
					{
						"name": "ban",
						"type": "varchar"
					},
					{
						"name": "fanId",
						"type": "varchar"
					},
					{
						"name": "market",
						"type": "varchar"
					},
					{
						"name": "subMarket",
						"type": "varchar"
					},
					{
						"name": "fanType",
						"type": "varchar"
					},
					{
						"name": "fanName",
						"type": "varchar"
					},
					{
						"name": "orderSource",
						"type": "varchar"
					},
					{
						"name": "statusUpdatedDate",
						"type": "varchar"
					},
					{
						"name": "verificationRejectionReason",
						"type": "varchar"
					},
					{
						"name": "oceEnrollmentStatus",
						"type": "varchar"
					},
					{
						"name": "oceDownstreamReturnCode",
						"type": "varchar"
					},
					{
						"name": "oceDownstreamDescription",
						"type": "varchar"
					},
					{
						"name": "oceEnrollStatusUpdateDate",
						"type": "varchar"
					},
					{
						"name": "oceEnrollmentFan",
						"type": "varchar"
					},
					{
						"name": "verificationFan",
						"type": "varchar"
					},
					{
						"name": "verificationFanName",
						"type": "varchar"
					},
					{
						"name": "verificationFanType",
						"type": "varchar"
					},
					{
						"name": "twinFan",
						"type": "varchar"
					},
					{
						"name": "twinFanName",
						"type": "varchar"
					},
					{
						"name": "twinFanType",
						"type": "varchar"
					},
					{
						"name": "docuploadRejectioCount",
						"type": "varchar"
					},
					{
						"name": "umbrellaId",
						"type": "varchar"
					},
					{
						"name": "dmaapRequest",
						"type": "varchar"
					},
					{
						"name": "segment",
						"type": "varchar"
					},
					{
						"name": "subSegment",
						"type": "varchar"
					},
					{
						"name": "docUploadRejectionReason",
						"type": "varchar"
					},
					{
						"name": "ingestionTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "signatureOrderData_stg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SignatureOrderDataFinal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "varchar"
					},
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "sender",
						"type": "varchar"
					},
					{
						"name": "eventSubType",
						"type": "varchar"
					},
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "verificationId",
						"type": "varchar"
					},
					{
						"name": "dcustomerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "dverificationId",
						"type": "varchar"
					},
					{
						"name": "verificationStatus",
						"type": "varchar"
					},
					{
						"name": "verificationSubStatus",
						"type": "varchar"
					},
					{
						"name": "ban",
						"type": "varchar"
					},
					{
						"name": "fanId",
						"type": "varchar"
					},
					{
						"name": "market",
						"type": "varchar"
					},
					{
						"name": "subMarket",
						"type": "varchar"
					},
					{
						"name": "fanType",
						"type": "varchar"
					},
					{
						"name": "fanName",
						"type": "varchar"
					},
					{
						"name": "orderSource",
						"type": "varchar"
					},
					{
						"name": "statusUpdatedDate",
						"type": "varchar"
					},
					{
						"name": "verificationRejectionReason",
						"type": "varchar"
					},
					{
						"name": "oceEnrollmentStatus",
						"type": "varchar"
					},
					{
						"name": "oceDownstreamReturnCode",
						"type": "varchar"
					},
					{
						"name": "oceDownstreamDescription",
						"type": "varchar"
					},
					{
						"name": "oceEnrollStatusUpdateDate",
						"type": "varchar"
					},
					{
						"name": "oceEnrollmentFan",
						"type": "varchar"
					},
					{
						"name": "verificationFan",
						"type": "varchar"
					},
					{
						"name": "verificationFanName",
						"type": "varchar"
					},
					{
						"name": "verificationFanType",
						"type": "varchar"
					},
					{
						"name": "twinFan",
						"type": "varchar"
					},
					{
						"name": "twinFanName",
						"type": "varchar"
					},
					{
						"name": "twinFanType",
						"type": "varchar"
					},
					{
						"name": "docuploadRejectioCount",
						"type": "varchar"
					},
					{
						"name": "umbrellaId",
						"type": "varchar"
					},
					{
						"name": "dmaapRequest",
						"type": "varchar"
					},
					{
						"name": "segment",
						"type": "varchar"
					},
					{
						"name": "subSegment",
						"type": "varchar"
					},
					{
						"name": "docUploadRejectionReason",
						"type": "varchar"
					},
					{
						"name": "ingestionTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "signatureOrderData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SignatureWatermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "signatureWatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMFConfigTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Extract_records",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "TMFMaster_config"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_OpMS_oceOperationalWatermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "v101"
					}
				},
				"folder": {
					"name": "TMF_OpMS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": "oceOperationalWatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_OpMs_oceOperationalReportingCnoStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "v101"
					}
				},
				"folder": {
					"name": "TMF_OpMS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": "oceOperationalReportingCnoStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_SP_runner')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "sp_call_stmt",
						"type": "varchar"
					},
					{
						"name": "flag",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "sp_runner"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_StagingTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_event_data",
						"type": "text"
					},
					{
						"name": "last_modified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "customer_order_id",
						"type": "varchar"
					},
					{
						"name": "ingestionTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "eventSource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "TMF_StagingTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_watermark1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "TMF_watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TejaTMFstaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_event_data",
						"type": "text"
					},
					{
						"name": "last_modified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "customer_order_id",
						"type": "varchar"
					},
					{
						"name": "ingestionTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "eventSource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "tmf",
					"table": "tejatmfstaging "
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TejaorderDataStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "orderjson_1",
						"type": "text"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "customerordernumber",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "TejaorderDataStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101Pipeline_TriggerConfig')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Flag",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "v101piplineconfig"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_ConfigTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Extract_records",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "v101Master_config"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_Copy_To_Azure_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "orderjson_1",
						"type": "text"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "customerordernumber",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "orderDataStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_OpMS_oceOperationalWatermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_OpMS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOperationalWatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_eventTrigger')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "feed",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "productcategory",
						"type": "varchar"
					},
					{
						"name": "insert_ts",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "EDM_CONFIG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderAcctServFacilityQualifications')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					},
					{
						"name": "cpeRequiredIndicator",
						"type": "nvarchar"
					},
					{
						"name": "dslAvailableIndicator",
						"type": "varchar"
					},
					{
						"name": "facilityCheck",
						"type": "nvarchar"
					},
					{
						"name": "frequency17MhzIndicator",
						"type": "nvarchar"
					},
					{
						"name": "gfastDeviceWireType",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "potsAvailableIndicator",
						"type": "varchar"
					},
					{
						"name": "preferredNetworkType",
						"type": "nvarchar"
					},
					{
						"name": "profileCode",
						"type": "nvarchar"
					},
					{
						"name": "vectoringIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctServFacilityQualifications"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderAcctServiceAddr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "placeId",
						"type": "nvarchar"
					},
					{
						"name": "addressId",
						"type": "nvarchar"
					},
					{
						"name": "connectedCommunityId",
						"type": "nvarchar"
					},
					{
						"name": "dwellingType",
						"type": "nvarchar"
					},
					{
						"name": "validatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine4",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine5",
						"type": "nvarchar"
					},
					{
						"name": "codingAccuracySupportSystemAddress",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddInstructions",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressChanged",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressMatchCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressStreetLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnit",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnitNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAssignedStreetNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrBuildingType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrclli8",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountyCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirection",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirectionPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDisconnectDate",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExchangeCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExhaustCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrIncorporatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastDisconnectedTransportType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastNetworkAccessDeviceType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLegalEntity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevel",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevelNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLinkKey",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryNPANXX",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateCenterCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZoneBanCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRsagValidationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteBoxNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteCenterNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSecondaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteAddressId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSmartMoves",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetName",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetNameSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructureNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTarCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrVideoHubOffice",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipGeoCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrElevation",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrRuralRoute",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUnit",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "parsedAddrTimeZone",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZone",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctServiceAddr"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderAccts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "varchar"
					},
					{
						"name": "accepteddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "accountCategory",
						"type": "nvarchar"
					},
					{
						"name": "accountCrossmarketIndicator",
						"type": "nvarchar"
					},
					{
						"name": "accountSubCategory",
						"type": "nvarchar"
					},
					{
						"name": "accountSubType",
						"type": "nvarchar"
					},
					{
						"name": "accountType",
						"type": "nvarchar"
					},
					{
						"name": "acpTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "acpClassification",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "anchorCTN",
						"type": "nvarchar"
					},
					{
						"name": "autoPayReason",
						"type": "nvarchar"
					},
					{
						"name": "b2bReference",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerCustomerId",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerName",
						"type": "nvarchar"
					},
					{
						"name": "bigData",
						"type": "nvarchar"
					},
					{
						"name": "billingAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "billingAccountTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "billingdeliverypreference",
						"type": "nvarchar"
					},
					{
						"name": "billingLanguagePreference",
						"type": "nvarchar"
					},
					{
						"name": "billPaymentDueDate",
						"type": "nvarchar"
					},
					{
						"name": "businessAccountName",
						"type": "nvarchar"
					},
					{
						"name": "cardOnFileStatus",
						"type": "nvarchar"
					},
					{
						"name": "conflictingServiceDetails",
						"type": "nvarchar"
					},
					{
						"name": "consentToCCIndicator",
						"type": "nvarchar"
					},
					{
						"name": "contractAcceptance",
						"type": "nvarchar"
					},
					{
						"name": "contractLength",
						"type": "nvarchar"
					},
					{
						"name": "contractVersionNumber",
						"type": "nvarchar"
					},
					{
						"name": "cpni",
						"type": "nvarchar"
					},
					{
						"name": "creditAlertFraudAlert",
						"type": "nvarchar"
					},
					{
						"name": "creditAlertGeneralMessage",
						"type": "nvarchar"
					},
					{
						"name": "ctnValidatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "customerCode",
						"type": "nvarchar"
					},
					{
						"name": "delinquentAccountIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ebillReason",
						"type": "nvarchar"
					},
					{
						"name": "electronicDisclosureAuthorization",
						"type": "nvarchar"
					},
					{
						"name": "internetServiceAuthorization",
						"type": "nvarchar"
					},
					{
						"name": "letterOfAuthorizationURL",
						"type": "nvarchar"
					},
					{
						"name": "localServiceAuthorization",
						"type": "nvarchar"
					},
					{
						"name": "localTollProviderAuthorization",
						"type": "nvarchar"
					},
					{
						"name": "longDistanceServiceProvider",
						"type": "nvarchar"
					},
					{
						"name": "emailValidatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "enterpriseType",
						"type": "nvarchar"
					},
					{
						"name": "existingAutoBillStatus",
						"type": "nvarchar"
					},
					{
						"name": "existingAutoBillIndicator",
						"type": "nvarchar"
					},
					{
						"name": "gigaPower",
						"type": "nvarchar"
					},
					{
						"name": "landLineNumber",
						"type": "nvarchar"
					},
					{
						"name": "langId",
						"type": "nvarchar"
					},
					{
						"name": "liabilityType",
						"type": "nvarchar"
					},
					{
						"name": "market",
						"type": "nvarchar"
					},
					{
						"name": "marketingSourceCode",
						"type": "nvarchar"
					},
					{
						"name": "mdmProfileSettingAdditionDetails",
						"type": "nvarchar"
					},
					{
						"name": "mdmProfileSettingProfileName",
						"type": "nvarchar"
					},
					{
						"name": "packageId",
						"type": "nvarchar"
					},
					{
						"name": "partnerJointBillType",
						"type": "nvarchar"
					},
					{
						"name": "paymentArrangement",
						"type": "nvarchar"
					},
					{
						"name": "pmoIndicator",
						"type": "nvarchar"
					},
					{
						"name": "priceCode",
						"type": "nvarchar"
					},
					{
						"name": "priceMatch",
						"type": "nvarchar"
					},
					{
						"name": "primaryCTN",
						"type": "nvarchar"
					},
					{
						"name": "spokenLanguagePreference",
						"type": "nvarchar"
					},
					{
						"name": "subMarket",
						"type": "nvarchar"
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "targetCTN",
						"type": "nvarchar"
					},
					{
						"name": "thirdPartyCombinedBill",
						"type": "nvarchar"
					},
					{
						"name": "winBackIndicator",
						"type": "nvarchar"
					},
					{
						"name": "createdDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTimeUnixTime",
						"type": "nvarchar"
					},
					{
						"name": "eventTimeDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "priceStrategyId",
						"type": "nvarchar"
					},
					{
						"name": "priceStrategyName",
						"type": "nvarchar"
					},
					{
						"name": "priceLockEndDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAccts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderAcctsBillingDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "accountStatus",
						"type": "nvarchar"
					},
					{
						"name": "dob",
						"type": "nvarchar"
					},
					{
						"name": "driversLicenseExpirationDate",
						"type": "nvarchar"
					},
					{
						"name": "driversLicenseNumber",
						"type": "nvarchar"
					},
					{
						"name": "driverLicenseState",
						"type": "nvarchar"
					},
					{
						"name": "employerName",
						"type": "nvarchar"
					},
					{
						"name": "employerPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "federalTaxId",
						"type": "nvarchar"
					},
					{
						"name": "gender",
						"type": "nvarchar"
					},
					{
						"name": "lastFourOfSSN",
						"type": "nvarchar"
					},
					{
						"name": "motherMaidenName",
						"type": "nvarchar"
					},
					{
						"name": "securityVerificationPin",
						"type": "nvarchar"
					},
					{
						"name": "securityAnswer",
						"type": "nvarchar"
					},
					{
						"name": "securityQuestion",
						"type": "nvarchar"
					},
					{
						"name": "ssn",
						"type": "nvarchar"
					},
					{
						"name": "ssnRefusedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "stateIdNumber",
						"type": "nvarchar"
					},
					{
						"name": "stateIdIssuedState",
						"type": "nvarchar"
					},
					{
						"name": "billingType",
						"type": "nvarchar"
					},
					{
						"name": "nextBillingCycleDate",
						"type": "nvarchar"
					},
					{
						"name": "previousAddress",
						"type": "nvarchar"
					},
					{
						"name": "previousPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "additionalContactPhones",
						"type": "nvarchar"
					},
					{
						"name": "emailAddress",
						"type": "nvarchar"
					},
					{
						"name": "firstName",
						"type": "nvarchar"
					},
					{
						"name": "nameId",
						"type": "nvarchar"
					},
					{
						"name": "lastName",
						"type": "nvarchar"
					},
					{
						"name": "legalFirstName",
						"type": "nvarchar"
					},
					{
						"name": "legalLastName",
						"type": "nvarchar"
					},
					{
						"name": "middleInitial",
						"type": "nvarchar"
					},
					{
						"name": "preferredContactMethod",
						"type": "nvarchar"
					},
					{
						"name": "prefix",
						"type": "nvarchar"
					},
					{
						"name": "previousLegalLastName",
						"type": "nvarchar"
					},
					{
						"name": "suffix",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactextension",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactPhoneType",
						"type": "nvarchar"
					},
					{
						"name": "primarycontactPhoneConsentDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsBillingDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderAcctsBussinessAddr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "placeId",
						"type": "nvarchar"
					},
					{
						"name": "addressId",
						"type": "nvarchar"
					},
					{
						"name": "connectedCommunityId",
						"type": "nvarchar"
					},
					{
						"name": "dwellingType",
						"type": "nvarchar"
					},
					{
						"name": "validatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine4",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine5",
						"type": "nvarchar"
					},
					{
						"name": "codingAccuracySupportSystemAddress",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddInstructions",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressChanged",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressMatchCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressStreetLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnit",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnitNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAssignedStreetNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrBuildingType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrclli8",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountyCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirection",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirectionPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDisconnectDate",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExchangeCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExhaustCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrIncorporatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastDisconnectedTransportType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastNetworkAccessDeviceType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLegalEntity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevel",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevelNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLinkKey",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryNPANXX",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateCenterCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZoneBanCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRsagValidationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteBoxNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteCenterNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSecondaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteAddressId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSmartMoves",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetName",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetNameSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructureNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTarCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrVideoHubOffice",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipGeoCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrElevation",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrRuralRoute",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUnit",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "parsedAddrTimeZone",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZone",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsBussinessAddr"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderAddlDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "code",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "varchar"
					},
					{
						"name": "sequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "parentType",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAddlDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderContactDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "additionalEmailRecipients",
						"type": "nvarchar"
					},
					{
						"name": "orderConfirmationByEmailPermissionIndicator",
						"type": "nvarchar"
					},
					{
						"name": "orderPickUpCTN",
						"type": "nvarchar"
					},
					{
						"name": "permissionForOutboundCallIndicator",
						"type": "nvarchar"
					},
					{
						"name": "additionalContactPhones",
						"type": "nvarchar"
					},
					{
						"name": "emailAddress",
						"type": "nvarchar"
					},
					{
						"name": "firstName",
						"type": "varchar"
					},
					{
						"name": "nameId",
						"type": "nvarchar"
					},
					{
						"name": "lastName",
						"type": "varchar"
					},
					{
						"name": "legalFirstName",
						"type": "nvarchar"
					},
					{
						"name": "legalLastName",
						"type": "nvarchar"
					},
					{
						"name": "middleInitial",
						"type": "nvarchar"
					},
					{
						"name": "prefix",
						"type": "nvarchar"
					},
					{
						"name": "previousLegalLastName",
						"type": "nvarchar"
					},
					{
						"name": "suffix",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactextension",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactPhoneType",
						"type": "nvarchar"
					},
					{
						"name": "primarycontactPhoneConsentDetails",
						"type": "nvarchar"
					},
					{
						"name": "preferredContactMethod",
						"type": "nvarchar"
					},
					{
						"name": "preferredTimeOfDayForContact",
						"type": "nvarchar"
					},
					{
						"name": "primaryemailaddress",
						"type": "nvarchar"
					},
					{
						"name": "productUpdatesByEmailPermissionIndicator",
						"type": "nvarchar"
					},
					{
						"name": "secondaryEmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "timeZone",
						"type": "nvarchar"
					},
					{
						"name": "unpublishedContactByPhonePermissionIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "smsValidIndicator",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderContactDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acceptedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "b2bDetail",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "subStatus",
						"type": "nvarchar"
					},
					{
						"name": "installmentMultiIndicator",
						"type": "nvarchar"
					},
					{
						"name": "isOrderPended",
						"type": "nvarchar"
					},
					{
						"name": "numberOfInstallments",
						"type": "nvarchar"
					},
					{
						"name": "oceOrderNumber",
						"type": "varchar"
					},
					{
						"name": "orderId",
						"type": "nvarchar"
					},
					{
						"name": "program",
						"type": "nvarchar"
					},
					{
						"name": "requestId",
						"type": "nvarchar"
					},
					{
						"name": "requestType",
						"type": "nvarchar"
					},
					{
						"name": "revisionNumber",
						"type": "nvarchar"
					},
					{
						"name": "specialInstructions",
						"type": "nvarchar"
					},
					{
						"name": "createdDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "version",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					},
					{
						"name": "eventTimeDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderErrors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "ErrorCode",
						"type": "nvarchar"
					},
					{
						"name": "ErrorDescription",
						"type": "nvarchar"
					},
					{
						"name": "IdRef",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "eventhub_adx_ingest_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderErrors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderEvents')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "automationUrl",
						"type": "nvarchar"
					},
					{
						"name": "callBack",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "eventId",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "fallOut",
						"type": "nvarchar"
					},
					{
						"name": "fraudResponse",
						"type": "nvarchar"
					},
					{
						"name": "isSingleTopic",
						"type": "nvarchar"
					},
					{
						"name": "isUpgradeOrder",
						"type": "nvarchar"
					},
					{
						"name": "orderType",
						"type": "nvarchar"
					},
					{
						"name": "originalVersion",
						"type": "nvarchar"
					},
					{
						"name": "priority",
						"type": "nvarchar"
					},
					{
						"name": "routingInfo",
						"type": "nvarchar"
					},
					{
						"name": "sender",
						"type": "nvarchar"
					},
					{
						"name": "traceId",
						"type": "nvarchar"
					},
					{
						"name": "version",
						"type": "nvarchar"
					},
					{
						"name": "eventHubAdxIngestTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTimeInt",
						"type": "nvarchar"
					},
					{
						"name": "idbstatus",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderEvents"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderLosgs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "acceptEULA",
						"type": "nvarchar"
					},
					{
						"name": "accountReference",
						"type": "nvarchar"
					},
					{
						"name": "actionReason",
						"type": "nvarchar"
					},
					{
						"name": "actionType",
						"type": "nvarchar"
					},
					{
						"name": "apiExecutionDetailsErrorCode",
						"type": "nvarchar"
					},
					{
						"name": "apiExecutionDetailsLosgStatus",
						"type": "nvarchar"
					},
					{
						"name": "apiExecutionDetailsName",
						"type": "varchar"
					},
					{
						"name": "apiExecutionDetailsPriority",
						"type": "varchar"
					},
					{
						"name": "billingsystemid",
						"type": "varchar"
					},
					{
						"name": "bundleGroupId",
						"type": "nvarchar"
					},
					{
						"name": "childOrderId",
						"type": "nvarchar"
					},
					{
						"name": "companyCode",
						"type": "nvarchar"
					},
					{
						"name": "creditPolicySecurityType",
						"type": "nvarchar"
					},
					{
						"name": "dealercode",
						"type": "nvarchar"
					},
					{
						"name": "divisionCode",
						"type": "nvarchar"
					},
					{
						"name": "effectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "engageVideoId",
						"type": "nvarchar"
					},
					{
						"name": "entitlementBenefit",
						"type": "nvarchar"
					},
					{
						"name": "fallout",
						"type": "nvarchar"
					},
					{
						"name": "fnGuId",
						"type": "nvarchar"
					},
					{
						"name": "fnType",
						"type": "nvarchar"
					},
					{
						"name": "fnUserId",
						"type": "nvarchar"
					},
					{
						"name": "freeDevicePolicyId",
						"type": "nvarchar"
					},
					{
						"name": "fulfillerCode",
						"type": "nvarchar"
					},
					{
						"name": "fulfillerName",
						"type": "nvarchar"
					},
					{
						"name": "fulfillmentmethod",
						"type": "nvarchar"
					},
					{
						"name": "fwCAF2AddressIndicator",
						"type": "nvarchar"
					},
					{
						"name": "fwiMoveInIndicator",
						"type": "nvarchar"
					},
					{
						"name": "installtype",
						"type": "nvarchar"
					},
					{
						"name": "losgType",
						"type": "nvarchar"
					},
					{
						"name": "market",
						"type": "nvarchar"
					},
					{
						"name": "migrationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "migrationSource",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "preferredAreaCode",
						"type": "nvarchar"
					},
					{
						"name": "priceCode",
						"type": "nvarchar"
					},
					{
						"name": "primaryIndicator",
						"type": "nvarchar"
					},
					{
						"name": "productcategory",
						"type": "nvarchar"
					},
					{
						"name": "productOfferingId",
						"type": "nvarchar"
					},
					{
						"name": "productOrderActionId",
						"type": "nvarchar"
					},
					{
						"name": "productOrderActionReference",
						"type": "nvarchar"
					},
					{
						"name": "profileCode",
						"type": "nvarchar"
					},
					{
						"name": "rateType",
						"type": "nvarchar"
					},
					{
						"name": "requestedExecutionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "salesOfferId",
						"type": "nvarchar"
					},
					{
						"name": "schedulingdetailreference",
						"type": "nvarchar"
					},
					{
						"name": "serviceArea",
						"type": "nvarchar"
					},
					{
						"name": "serviceAreaName",
						"type": "varchar"
					},
					{
						"name": "servicequalificationreference",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "subMarket",
						"type": "varchar"
					},
					{
						"name": "substatus",
						"type": "nvarchar"
					},
					{
						"name": "sunsetDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "tenantAccountId",
						"type": "nvarchar"
					},
					{
						"name": "tenantAccountStatus",
						"type": "varchar"
					},
					{
						"name": "transferFromBAN",
						"type": "varchar"
					},
					{
						"name": "transferFromFAN",
						"type": "varchar"
					},
					{
						"name": "transferFromMobileNumber",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "vendorAccountId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "actionReasonCode",
						"type": "nvarchar"
					},
					{
						"name": "previousProductOrderActionId",
						"type": "nvarchar"
					},
					{
						"name": "eventTimeUnixTime",
						"type": "nvarchar"
					},
					{
						"name": "eventTimeDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "productInventoryStatus",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderLosgsLineItemsAddlDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "code",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					},
					{
						"name": "parentType",
						"type": "nvarchar"
					},
					{
						"name": "sequence",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemsAddlDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderLosgsPrice')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "baseamount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "creditFeeType",
						"type": "nvarchar"
					},
					{
						"name": "currencytype",
						"type": "nvarchar"
					},
					{
						"name": "installmentEligibility",
						"type": "nvarchar"
					},
					{
						"name": "msrp",
						"type": "nvarchar"
					},
					{
						"name": "total",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "taxDetail",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsPrice"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderLosgsPriceSummaryList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "currencytype",
						"type": "nvarchar"
					},
					{
						"name": "total",
						"type": "float",
						"precision": 15
					},
					{
						"name": "taxSummary",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsPriceSummaryList"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderPrice')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "baseamount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "creditFeeType",
						"type": "nvarchar"
					},
					{
						"name": "currencytype",
						"type": "nvarchar"
					},
					{
						"name": "installmentEligibility",
						"type": "nvarchar"
					},
					{
						"name": "msrp",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "total",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "taxDetail",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderPrice"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderPriceSummaryList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "currencyType",
						"type": "nvarchar"
					},
					{
						"name": "taxSummary",
						"type": "nvarchar"
					},
					{
						"name": "total",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderPriceSummaryList"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderProductGroups')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "productGroupId",
						"type": "varchar"
					},
					{
						"name": "productGroupSequence",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "characteristicsId",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "discountOffer",
						"type": "nvarchar"
					},
					{
						"name": "packageCharacteristicsCode",
						"type": "nvarchar"
					},
					{
						"name": "packageCharacteristicsDesc",
						"type": "nvarchar"
					},
					{
						"name": "packageCharacteristicsType",
						"type": "nvarchar"
					},
					{
						"name": "sharedPlanDataGroupId",
						"type": "nvarchar"
					},
					{
						"name": "sharedPlanFamilyGroupId",
						"type": "nvarchar"
					},
					{
						"name": "sharedPlanGroupReferencesCode",
						"type": "nvarchar"
					},
					{
						"name": "sharedPlanType",
						"type": "nvarchar"
					},
					{
						"name": "sharedPlanPrimarySubscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderProductGroups"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderPromotions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "sequence",
						"type": "varchar"
					},
					{
						"name": "additionDetails",
						"type": "nvarchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "baseOfferId",
						"type": "nvarchar"
					},
					{
						"name": "complexDiscountIndicator",
						"type": "nvarchar"
					},
					{
						"name": "componentConfigurations",
						"type": "nvarchar"
					},
					{
						"name": "couponCode",
						"type": "nvarchar"
					},
					{
						"name": "displayLevel",
						"type": "nvarchar"
					},
					{
						"name": "duration",
						"type": "int",
						"precision": 10
					},
					{
						"name": "effectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "effectiveInDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "endDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "fixedAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "ioId",
						"type": "nvarchar"
					},
					{
						"name": "ioSequence",
						"type": "nvarchar"
					},
					{
						"name": "parentPricePlanCode",
						"type": "nvarchar"
					},
					{
						"name": "payInAdvanceProdId",
						"type": "nvarchar"
					},
					{
						"name": "percent",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "promotionAppliedBy",
						"type": "nvarchar"
					},
					{
						"name": "promotionBillingCode",
						"type": "nvarchar"
					},
					{
						"name": "promotionCode",
						"type": "nvarchar"
					},
					{
						"name": "promotionCycle",
						"type": "nvarchar"
					},
					{
						"name": "promotionId",
						"type": "nvarchar"
					},
					{
						"name": "promotionName",
						"type": "nvarchar"
					},
					{
						"name": "promotionType",
						"type": "nvarchar"
					},
					{
						"name": "unitOfMeasurement",
						"type": "nvarchar"
					},
					{
						"name": "promotionTypeDetail",
						"type": "nvarchar"
					},
					{
						"name": "qualifyingServiceDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderPromotions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderSourceDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "application",
						"type": "nvarchar"
					},
					{
						"name": "browserId",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "city",
						"type": "nvarchar"
					},
					{
						"name": "clientIP",
						"type": "nvarchar"
					},
					{
						"name": "clientType",
						"type": "nvarchar"
					},
					{
						"name": "countryCode",
						"type": "nvarchar"
					},
					{
						"name": "county",
						"type": "nvarchar"
					},
					{
						"name": "expressCheckOutIndicator",
						"type": "nvarchar"
					},
					{
						"name": "externalOrderSource",
						"type": "nvarchar"
					},
					{
						"name": "locale",
						"type": "nvarchar"
					},
					{
						"name": "mediaSource",
						"type": "nvarchar"
					},
					{
						"name": "originatingApplication",
						"type": "nvarchar"
					},
					{
						"name": "initiatingApplication",
						"type": "nvarchar"
					},
					{
						"name": "premierDetailGroupId",
						"type": "nvarchar"
					},
					{
						"name": "premierDetailGroupName",
						"type": "nvarchar"
					},
					{
						"name": "premierDetailResourceCenterTicketNumber",
						"type": "nvarchar"
					},
					{
						"name": "region",
						"type": "nvarchar"
					},
					{
						"name": "responseMode",
						"type": "nvarchar"
					},
					{
						"name": "salesChannel",
						"type": "nvarchar"
					},
					{
						"name": "salesChannelType",
						"type": "nvarchar"
					},
					{
						"name": "sender",
						"type": "nvarchar"
					},
					{
						"name": "sequence",
						"type": "nvarchar"
					},
					{
						"name": "zip",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderSourceDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderSourceDetailAddlDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "code",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "varchar"
					},
					{
						"name": "sequence",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "parentType",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderSourceDetailAddlDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderTermsAndConditions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "termsAndConditionsId",
						"type": "varchar"
					},
					{
						"name": "agreementText",
						"type": "nvarchar"
					},
					{
						"name": "accepted",
						"type": "nvarchar"
					},
					{
						"name": "agreementURL",
						"type": "nvarchar"
					},
					{
						"name": "agreementType",
						"type": "nvarchar"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "documentName",
						"type": "nvarchar"
					},
					{
						"name": "orderLevelIndicator",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "tncId",
						"type": "nvarchar"
					},
					{
						"name": "tncKey",
						"type": "nvarchar"
					},
					{
						"name": "tncRecordingOff",
						"type": "nvarchar"
					},
					{
						"name": "version",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderTermsAndConditions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderTransactionLogsHistory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "actionBy",
						"type": "nvarchar"
					},
					{
						"name": "changedLosgReferenceId",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "comments",
						"type": "nvarchar"
					},
					{
						"name": "endTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "orderId",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "parentOrderId",
						"type": "nvarchar"
					},
					{
						"name": "queueName",
						"type": "nvarchar"
					},
					{
						"name": "recordId",
						"type": "nvarchar"
					},
					{
						"name": "startTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "transactionId",
						"type": "nvarchar"
					},
					{
						"name": "transactionName",
						"type": "nvarchar"
					},
					{
						"name": "transactionType",
						"type": "nvarchar"
					},
					{
						"name": "updateInfos",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderTransactionLogsHistory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderTransactionLosgList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgReferenceId",
						"type": "nvarchar"
					},
					{
						"name": "changedLosgReferenceId",
						"type": "nvarchar"
					},
					{
						"name": "orderId",
						"type": "nvarchar"
					},
					{
						"name": "service",
						"type": "nvarchar"
					},
					{
						"name": "serviceType",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "subStatus",
						"type": "nvarchar"
					},
					{
						"name": "transactionId",
						"type": "nvarchar"
					},
					{
						"name": "transactionName",
						"type": "nvarchar"
					},
					{
						"name": "transactionType",
						"type": "nvarchar"
					},
					{
						"name": "wirelessNumber",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderTransactionLosgList"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_oceOrderTransactionlogs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_OpMS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "actionBy",
						"type": "nvarchar"
					},
					{
						"name": "changedLosgReferenceId",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "comments",
						"type": "nvarchar"
					},
					{
						"name": "endTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "orderId",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "parentOrderId",
						"type": "nvarchar"
					},
					{
						"name": "queueName",
						"type": "nvarchar"
					},
					{
						"name": "recordId",
						"type": "nvarchar"
					},
					{
						"name": "startTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "transactionId",
						"type": "nvarchar"
					},
					{
						"name": "transactionName",
						"type": "nvarchar"
					},
					{
						"name": "transactionType",
						"type": "nvarchar"
					},
					{
						"name": "updateInfos",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					},
					{
						"name": "losgReferenceId",
						"type": "varchar"
					},
					{
						"name": "service",
						"type": "nvarchar"
					},
					{
						"name": "serviceType",
						"type": "nvarchar"
					},
					{
						"name": "LosgStatus",
						"type": "varchar"
					},
					{
						"name": "LosgSubStatus",
						"type": "varchar"
					},
					{
						"name": "wirelessNumber",
						"type": "nvarchar"
					},
					{
						"name": "eventtimedate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderTransactionlogs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VOCA_BLOB_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_containename": {
						"type": "string",
						"defaultValue": "oce-feeds"
					},
					"ds_deliimiter": {
						"type": "string"
					},
					"ds_directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().ds_directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ds_containename",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ds_deliimiter",
						"type": "Expression"
					},
					"escapeChar": "",
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adx_AutoUnlock')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "lastmodified_date",
						"type": "datetime"
					},
					{
						"name": "AutoUnlockJson",
						"type": "dynamic"
					},
					{
						"name": "imei",
						"type": "string"
					}
				],
				"typeProperties": {
					"table": "oce_autoUnlock_events"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/adx_oce_ordergraph_events')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OrderGraph"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "string"
					},
					{
						"name": "channel",
						"type": "string"
					},
					{
						"name": "applicationName",
						"type": "string"
					},
					{
						"name": "losgSequence",
						"type": "string"
					},
					{
						"name": "losgType",
						"type": "string"
					},
					{
						"name": "fulfillment",
						"type": "string"
					},
					{
						"name": "eventType",
						"type": "string"
					},
					{
						"name": "eventId",
						"type": "string"
					},
					{
						"name": "eventSource",
						"type": "string"
					},
					{
						"name": "eventTime",
						"type": "string"
					},
					{
						"name": "createEvent",
						"type": "string"
					},
					{
						"name": "shippedEvent",
						"type": "string"
					},
					{
						"name": "activatedEvent",
						"type": "string"
					},
					{
						"name": "deliveredEvent",
						"type": "string"
					},
					{
						"name": "canceledEvent",
						"type": "string"
					},
					{
						"name": "eventProcessedStatus",
						"type": "string"
					},
					{
						"name": "lineStatus",
						"type": "string"
					},
					{
						"name": "lineSubStatus",
						"type": "string"
					},
					{
						"name": "submittedDate",
						"type": "string"
					},
					{
						"name": "eventData",
						"type": "dynamic"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime"
					}
				],
				"typeProperties": {
					"table": "oce_ordergraph_events"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/autoUnlockOrderData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Imei",
						"type": "varchar"
					},
					{
						"name": "Market",
						"type": "nvarchar"
					},
					{
						"name": "accSubType",
						"type": "nvarchar"
					},
					{
						"name": "Subscriber",
						"type": "nvarchar"
					},
					{
						"name": "submarket",
						"type": "nvarchar"
					},
					{
						"name": "accountType",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "Make",
						"type": "nvarchar"
					},
					{
						"name": "Ban",
						"type": "nvarchar"
					},
					{
						"name": "productType",
						"type": "nvarchar"
					},
					{
						"name": "responseTimestamp_UnixTime",
						"type": "nvarchar"
					},
					{
						"name": "issueDateTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "responseTimestamp",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "AutoUnlockOrderData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/autoUnlock_OrderDataStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AutoUnlockJson",
						"type": "text"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "imei",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "source",
						"type": "varchar"
					},
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "autoUnlockOrderDataStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/autoUnlock_WaterMarrk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "autoUnlockWatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ACF_ACFOrderData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "source",
						"type": "varchar"
					},
					{
						"name": "eventTimeInt",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "migrationId",
						"type": "varchar"
					},
					{
						"name": "serviceType",
						"type": "varchar"
					},
					{
						"name": "sourceBanId",
						"type": "varchar"
					},
					{
						"name": "sourceMarketCode",
						"type": "varchar"
					},
					{
						"name": "targetBaId",
						"type": "varchar"
					},
					{
						"name": "sourceCycleId",
						"type": "varchar"
					},
					{
						"name": "targetCustomerId",
						"type": "varchar"
					},
					{
						"name": "targetIndividualId",
						"type": "varchar"
					},
					{
						"name": "guid",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "subStatus",
						"type": "varchar"
					},
					{
						"name": "opTs",
						"type": "datetime2",
						"scale": 6
					},
					{
						"name": "eventStatus",
						"type": "varchar"
					},
					{
						"name": "validationMessage",
						"type": "nvarchar"
					},
					{
						"name": "validationFailureReason",
						"type": "nvarchar"
					},
					{
						"name": "lastUpdateTime",
						"type": "datetime2",
						"scale": 6
					},
					{
						"name": "insertedDate",
						"type": "datetime2",
						"scale": 6
					},
					{
						"name": "clmSent",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "ACFOrderData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ACF_config')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Extract_records",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "ACF_config"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ADX_Acf')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "eventId",
						"type": "string"
					},
					{
						"name": "serviceType",
						"type": "string"
					},
					{
						"name": "sourceMarketCode",
						"type": "string"
					},
					{
						"name": "targetBaId",
						"type": "string"
					},
					{
						"name": "eventStatus",
						"type": "string"
					},
					{
						"name": "status",
						"type": "string"
					},
					{
						"name": "subStatus",
						"type": "string"
					},
					{
						"name": "opTimeStamp",
						"type": "string"
					},
					{
						"name": "eventTime",
						"type": "string"
					},
					{
						"name": "eventData",
						"type": "dynamic"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime"
					}
				],
				"typeProperties": {
					"table": "oce_acf_migration_events"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_acf_ACFDownStreamSystemStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "systemName",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					},
					{
						"name": "retryCount",
						"type": "varchar"
					},
					{
						"name": "eventTimeInt",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "lastUpdateTime",
						"type": "datetime2",
						"scale": 6
					},
					{
						"name": "insertedDate",
						"type": "datetime2",
						"scale": 6
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "ACFDownStreamSystemStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_acf_DownStreamSystemStatusHistory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "systemName",
						"type": "varchar"
					},
					{
						"name": "eventTimeInt",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "ErrorMessage",
						"type": "nvarchar"
					},
					{
						"name": "retryCount",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "lastUpdateTime",
						"type": "datetime2",
						"scale": 6
					},
					{
						"name": "insertedDate",
						"type": "datetime2",
						"scale": 6
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "ACFDownStreamSystemStatusHistory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_acf_OrderDataHistory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventTimeInt",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 5
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "subStatus",
						"type": "varchar"
					},
					{
						"name": "opTs",
						"type": "datetime2",
						"scale": 6
					},
					{
						"name": "eventStatus",
						"type": "varchar"
					},
					{
						"name": "validationMessage",
						"type": "nvarchar"
					},
					{
						"name": "validationFailureReason",
						"type": "nvarchar"
					},
					{
						"name": "lastUpdateTime",
						"type": "datetime2",
						"scale": 6
					},
					{
						"name": "insertedDate",
						"type": "datetime2",
						"scale": 6
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "ACFOrderDataHistory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_acf_staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "acfJson",
						"type": "text"
					},
					{
						"name": "ingestionTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "eventId",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "acfOrderDataStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_acf_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlKeyVault",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "ACFwatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adx_auditlog')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_AuditLog_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OCEStreamJob"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "auditlogId",
						"type": "long"
					},
					{
						"name": "customer_order_number",
						"type": "string"
					},
					{
						"name": "request_id",
						"type": "string"
					},
					{
						"name": "interface_name",
						"type": "string"
					},
					{
						"name": "layer",
						"type": "string"
					},
					{
						"name": "service_name",
						"type": "string"
					},
					{
						"name": "operation_name",
						"type": "string"
					},
					{
						"name": "status",
						"type": "string"
					},
					{
						"name": "region",
						"type": "string"
					},
					{
						"name": "interface_type",
						"type": "string"
					},
					{
						"name": "request",
						"type": "dynamic"
					},
					{
						"name": "request_time",
						"type": "datetime"
					},
					{
						"name": "request_header",
						"type": "string"
					},
					{
						"name": "response",
						"type": "dynamic"
					},
					{
						"name": "response_time",
						"type": "datetime"
					},
					{
						"name": "metricLog",
						"type": "dynamic"
					},
					{
						"name": "rerun_id",
						"type": "string"
					},
					{
						"name": "time_delay",
						"type": "string"
					},
					{
						"name": "order_id",
						"type": "string"
					},
					{
						"name": "csr_id",
						"type": "string"
					},
					{
						"name": "conversation_id",
						"type": "string"
					},
					{
						"name": "log_type",
						"type": "string"
					},
					{
						"name": "ipv4",
						"type": "string"
					},
					{
						"name": "ipv6",
						"type": "string"
					},
					{
						"name": "server_name",
						"type": "string"
					},
					{
						"name": "correlation_id",
						"type": "string"
					},
					{
						"name": "rerun_seq",
						"type": "string"
					},
					{
						"name": "is_external",
						"type": "string"
					},
					{
						"name": "external_system_ip",
						"type": "string"
					},
					{
						"name": "comments",
						"type": "string"
					},
					{
						"name": "trace_id",
						"type": "string"
					},
					{
						"name": "inserted_by",
						"type": "string"
					},
					{
						"name": "inserted_date",
						"type": "datetime"
					},
					{
						"name": "last_updated_by",
						"type": "string"
					},
					{
						"name": "last_updated_date",
						"type": "datetime"
					},
					{
						"name": "endpoint_uri",
						"type": "string"
					},
					{
						"name": "error_code",
						"type": "string"
					},
					{
						"name": "error_description",
						"type": "string"
					},
					{
						"name": "response_code",
						"type": "string"
					},
					{
						"name": "response_description",
						"type": "string"
					},
					{
						"name": "fault_code",
						"type": "string"
					},
					{
						"name": "fault_description",
						"type": "string"
					},
					{
						"name": "provider_fault_code",
						"type": "string"
					},
					{
						"name": "provider_fault_description",
						"type": "string"
					},
					{
						"name": "is_fallout",
						"type": "string"
					},
					{
						"name": "business_reason",
						"type": "string"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime"
					},
					{
						"name": "offset",
						"type": "long"
					},
					{
						"name": "partitionKey",
						"type": "string"
					},
					{
						"name": "corelationId",
						"type": "string"
					},
					{
						"name": "publisher",
						"type": "string"
					},
					{
						"name": "payload",
						"type": "dynamic"
					}
				],
				"typeProperties": {
					"table": "oce_audit_log"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_AuditLog_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_autounlock_request')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OCEStreamJob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ds_filename",
							"type": "Expression"
						},
						"container": "autounlock-history"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_csv_storage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_schema": {
						"type": "string"
					},
					"p_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ArchiveAndPurge"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat('AureSQLDB','/',dataset().p_schema, '/', dataset().p_table, '/', formatDateTime(utcNow(), 'yyyy-MM-dd'))",
							"type": "Expression"
						},
						"container": "archive"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_myattlogin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ds_filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "myattlogin",
							"type": "Expression"
						},
						"container": "oce-feeds"
					},
					"columnDelimiter": ",",
					"escapeChar": "",
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_myattlogin_dir')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "myattlogin",
						"container": "oce-feeds"
					},
					"columnDelimiter": ",",
					"escapeChar": "",
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_parquet_file_to_restore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_filepath": {
						"type": "string"
					},
					"p_container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ArchiveAndPurge"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().p_filepath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().p_container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_parquet_storage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_schema": {
						"type": "string"
					},
					"p_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ArchiveAndPurge"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat('AureSQLDB','/',dataset().p_schema, '/', dataset().p_table, '/', formatDateTime(utcNow(), 'yyyy-MM-dd'))",
							"type": "Expression"
						},
						"container": "archive"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_v101OrderHistory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_filename": {
						"type": "string"
					},
					"ds_containername": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OCEStreamJob"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ds_filename",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ds_containername",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_v101data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderpath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "AdocLoad"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folderpath",
							"type": "Expression"
						},
						"container": "v101data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ftp_mylogin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LOGIN",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sinkMyLoginLocation": {
						"type": "string",
						"defaultValue": "application_logins_test"
					}
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"folderPath": {
							"value": "@concat('/',dataset().sinkMyLoginLocation)",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LOGIN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_oceReportingDb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "v101"
					},
					"table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "AdocLoad"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_oce_autoUnlockHistoryWatermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OCEStreamJob"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "autoUnlockHistoryWatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_oce_v101OrderHistoryWatermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OCEStreamJob"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "v101OrderHistoryWatermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_partition_sink_folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"destination_folder_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().destination_folder_path",
							"type": "Expression"
						},
						"container": "oce-feeds"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_partition_source_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder_path": {
						"type": "string"
					},
					"source_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().source_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().source_folder_path",
							"type": "Expression"
						},
						"container": "oce-feeds"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "20230330191142|oce_isaac_order_20230330_191142|",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_partition_source_folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder_path": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().source_folder_path",
							"type": "Expression"
						},
						"container": "oce-feeds"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_publish_feed_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"source_folder_path": {
						"type": "string"
					},
					"source_file_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().source_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().source_folder_path",
							"type": "Expression"
						},
						"container": "oce-feeds"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_db')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ArchiveAndPurge"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_db_parquet_load')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_schema": {
						"type": "string"
					},
					"p_table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ArchiveAndPurge"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().p_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().p_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oceChannels')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "attuid",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "organizationUnitName",
						"type": "varchar"
					},
					{
						"name": "taskLimit",
						"type": "varchar"
					},
					{
						"name": "globalTimeOut",
						"type": "varchar"
					},
					{
						"name": "taskTimeOut",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "usermanagement",
					"table": "oceChannels"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oceOrderGraphEvents_stage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OrderGraph"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "applicationName",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgType",
						"type": "varchar"
					},
					{
						"name": "fulfillment",
						"type": "varchar"
					},
					{
						"name": "lineStatus",
						"type": "varchar"
					},
					{
						"name": "lineSubStatus",
						"type": "varchar"
					},
					{
						"name": "createEvent",
						"type": "varchar"
					},
					{
						"name": "canceledEvent",
						"type": "varchar"
					},
					{
						"name": "shippedEvent",
						"type": "varchar"
					},
					{
						"name": "activatedEvent",
						"type": "varchar"
					},
					{
						"name": "deliveredEvent",
						"type": "varchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "varchar"
					},
					{
						"name": "eventProcessedStatus",
						"type": "varchar"
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "lastUpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "lastUpdatedBy",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "oceOrderGraphEvents_stage"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oceUserDataAuditStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "attuid",
						"type": "varchar"
					},
					{
						"name": "roleId",
						"type": "varchar"
					},
					{
						"name": "profileName",
						"type": "varchar"
					},
					{
						"name": "accountStatus",
						"type": "varchar"
					},
					{
						"name": "startDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "endDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "lastModifiedBy",
						"type": "varchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "usermanagement",
					"table": "oceUserDataAuditStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oceUserDataStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "varchar"
					},
					{
						"name": "eventData",
						"type": "text"
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "usermanagement",
					"table": "oceUserDataStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oceUserPartners')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "attuid",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "usermanagement",
					"table": "oceUserPartners"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oceUserRoles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "attuid",
						"type": "varchar"
					},
					{
						"name": "roleId",
						"type": "varchar"
					},
					{
						"name": "profileName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "usermanagement",
					"table": "oceUserRoles"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oceUsers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "attuid",
						"type": "varchar"
					},
					{
						"name": "firstName",
						"type": "varchar"
					},
					{
						"name": "middleName",
						"type": "varchar"
					},
					{
						"name": "lastName",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "varchar"
					},
					{
						"name": "accountStatus",
						"type": "varchar"
					},
					{
						"name": "workPhone",
						"type": "varchar"
					},
					{
						"name": "createdBy",
						"type": "varchar"
					},
					{
						"name": "lastModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "creationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "startDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "endDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "lastLogonDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "usermanagement",
					"table": "oceUsers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oce_job_auditlog_event_jobs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OCEJobAuditEvents"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "jobName",
						"type": "varchar"
					},
					{
						"name": "updatedTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "throttledValue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "prefferedThrottleRegion",
						"type": "varchar"
					},
					{
						"name": "otherChanges",
						"type": "nvarchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "oce_job_auditlog_event_jobs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oce_job_auditlog_events')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OCEJobAuditEvents"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "eventId",
						"type": "varchar"
					},
					{
						"name": "eventSource",
						"type": "varchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "region",
						"type": "varchar"
					},
					{
						"name": "serviceName",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "eventTime",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "sender",
						"type": "varchar"
					},
					{
						"name": "notes",
						"type": "varchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "oce_job_auditlog_events"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oce_job_auditlog_events_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OCEJobAuditEvents"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastUpdatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "oce_job_auditlog_events_watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oce_ordergraph_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OrderGraph"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "oce",
					"table": "oce_ordergraph_watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_oce_usermgmt_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "usermgmt"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_max_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "batch_min_load_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "records_processed",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "usermanagement",
					"table": "oce_usermgmt_watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tmf_oceOpsMsData_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "opsms"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "application",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "acceptedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "orderType",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "orderSubStatus",
						"type": "nvarchar"
					},
					{
						"name": "passthroughInd",
						"type": "nvarchar"
					},
					{
						"name": "testOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "schemaType",
						"type": "nvarchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oceOpsMsData_stg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tmf_oce_opsms_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "opsms"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "application",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "acceptedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "orderType",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "orderSubStatus",
						"type": "nvarchar"
					},
					{
						"name": "passthroughInd",
						"type": "nvarchar"
					},
					{
						"name": "testOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "schemaType",
						"type": "nvarchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_opsms_watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oceOpsMsData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "opsms"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "application",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "acceptedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "orderType",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "orderSubStatus",
						"type": "nvarchar"
					},
					{
						"name": "passthroughInd",
						"type": "nvarchar"
					},
					{
						"name": "testOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "schemaType",
						"type": "nvarchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOpsMsData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oceOpsMsData_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "opsms"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "application",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "acceptedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "orderType",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "orderSubStatus",
						"type": "nvarchar"
					},
					{
						"name": "passthroughInd",
						"type": "nvarchar"
					},
					{
						"name": "testOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "schemaType",
						"type": "nvarchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOpsMsData_stg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_ccpm_feed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "orderType",
						"type": "varchar"
					},
					{
						"name": "revisionNumber",
						"type": "varchar"
					},
					{
						"name": "orderStatus",
						"type": "varchar"
					},
					{
						"name": "createdDate",
						"type": "varchar"
					},
					{
						"name": "submitedDate",
						"type": "varchar"
					},
					{
						"name": "updatedDate",
						"type": "varchar"
					},
					{
						"name": "firstName",
						"type": "varchar"
					},
					{
						"name": "lastName",
						"type": "varchar"
					},
					{
						"name": "middleName",
						"type": "varchar"
					},
					{
						"name": "emailAddress",
						"type": "varchar"
					},
					{
						"name": "primaryPhone",
						"type": "varchar"
					},
					{
						"name": "altPhoneType",
						"type": "varchar"
					},
					{
						"name": "altPhone",
						"type": "varchar"
					},
					{
						"name": "serviceAddressLine1",
						"type": "varchar"
					},
					{
						"name": "serviceAddressLine2",
						"type": "varchar"
					},
					{
						"name": "serviceAddressCity",
						"type": "varchar"
					},
					{
						"name": "serviceAddressState",
						"type": "varchar"
					},
					{
						"name": "serviceAddressZip",
						"type": "varchar"
					},
					{
						"name": "serviceAddressZip4",
						"type": "varchar"
					},
					{
						"name": "billingAddressLine1",
						"type": "varchar"
					},
					{
						"name": "billingAddressLine2",
						"type": "varchar"
					},
					{
						"name": "billingAddressCity",
						"type": "varchar"
					},
					{
						"name": "billingAddressState",
						"type": "varchar"
					},
					{
						"name": "billingAddressZip",
						"type": "varchar"
					},
					{
						"name": "billingAddressZip4",
						"type": "varchar"
					},
					{
						"name": "billingAccountNumber",
						"type": "varchar"
					},
					{
						"name": "accountcategory",
						"type": "varchar"
					},
					{
						"name": "accountsubcatgory",
						"type": "varchar"
					},
					{
						"name": "credit",
						"type": "varchar"
					},
					{
						"name": "depositAmount",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgType",
						"type": "varchar"
					},
					{
						"name": "productCategory",
						"type": "varchar"
					},
					{
						"name": "losgStatus",
						"type": "varchar"
					},
					{
						"name": "omsOrderId",
						"type": "varchar"
					},
					{
						"name": "conversationId",
						"type": "varchar"
					},
					{
						"name": "orderConfirmationId",
						"type": "varchar"
					},
					{
						"name": "providerName",
						"type": "varchar"
					},
					{
						"name": "submissionStatus",
						"type": "varchar"
					},
					{
						"name": "installDate",
						"type": "varchar"
					},
					{
						"name": "installStartTime",
						"type": "varchar"
					},
					{
						"name": "installEndTime",
						"type": "varchar"
					},
					{
						"name": "installType",
						"type": "varchar"
					},
					{
						"name": "dealerCode",
						"type": "varchar"
					},
					{
						"name": "providerSupportNumber",
						"type": "varchar"
					},
					{
						"name": "cvoipTN",
						"type": "varchar"
					},
					{
						"name": "portedTN",
						"type": "varchar"
					},
					{
						"name": "internetSpeed",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "productType",
						"type": "varchar"
					},
					{
						"name": "productSku",
						"type": "varchar"
					},
					{
						"name": "billingCode",
						"type": "varchar"
					},
					{
						"name": "systemName",
						"type": "varchar"
					},
					{
						"name": "displayName",
						"type": "varchar"
					},
					{
						"name": "action",
						"type": "varchar"
					},
					{
						"name": "quantity",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oce_ccpm_feed"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_ccpm_feed_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "orderType",
						"type": "varchar"
					},
					{
						"name": "revisionNumber",
						"type": "varchar"
					},
					{
						"name": "orderStatus",
						"type": "varchar"
					},
					{
						"name": "createdDate",
						"type": "varchar"
					},
					{
						"name": "submitedDate",
						"type": "varchar"
					},
					{
						"name": "updatedDate",
						"type": "varchar"
					},
					{
						"name": "firstName",
						"type": "varchar"
					},
					{
						"name": "lastName",
						"type": "varchar"
					},
					{
						"name": "middleName",
						"type": "varchar"
					},
					{
						"name": "emailAddress",
						"type": "varchar"
					},
					{
						"name": "primaryPhone",
						"type": "varchar"
					},
					{
						"name": "altPhoneType",
						"type": "varchar"
					},
					{
						"name": "altPhone",
						"type": "varchar"
					},
					{
						"name": "serviceAddressLine1",
						"type": "varchar"
					},
					{
						"name": "serviceAddressLine2",
						"type": "varchar"
					},
					{
						"name": "serviceAddressCity",
						"type": "varchar"
					},
					{
						"name": "serviceAddressState",
						"type": "varchar"
					},
					{
						"name": "serviceAddressZip",
						"type": "varchar"
					},
					{
						"name": "serviceAddressZip4",
						"type": "varchar"
					},
					{
						"name": "billingAddressLine1",
						"type": "varchar"
					},
					{
						"name": "billingAddressLine2",
						"type": "varchar"
					},
					{
						"name": "billingAddressCity",
						"type": "varchar"
					},
					{
						"name": "billingAddressState",
						"type": "varchar"
					},
					{
						"name": "billingAddressZip",
						"type": "varchar"
					},
					{
						"name": "billingAddressZip4",
						"type": "varchar"
					},
					{
						"name": "billingAccountNumber",
						"type": "varchar"
					},
					{
						"name": "accountcategory",
						"type": "varchar"
					},
					{
						"name": "accountsubcatgory",
						"type": "varchar"
					},
					{
						"name": "credit",
						"type": "varchar"
					},
					{
						"name": "depositAmount",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgType",
						"type": "varchar"
					},
					{
						"name": "productCategory",
						"type": "varchar"
					},
					{
						"name": "losgStatus",
						"type": "varchar"
					},
					{
						"name": "omsOrderId",
						"type": "varchar"
					},
					{
						"name": "conversationId",
						"type": "varchar"
					},
					{
						"name": "orderConfirmationId",
						"type": "varchar"
					},
					{
						"name": "providerName",
						"type": "varchar"
					},
					{
						"name": "submissionStatus",
						"type": "varchar"
					},
					{
						"name": "installDate",
						"type": "varchar"
					},
					{
						"name": "installStartTime",
						"type": "varchar"
					},
					{
						"name": "installEndTime",
						"type": "varchar"
					},
					{
						"name": "installType",
						"type": "varchar"
					},
					{
						"name": "dealerCode",
						"type": "varchar"
					},
					{
						"name": "providerSupportNumber",
						"type": "varchar"
					},
					{
						"name": "cvoipTN",
						"type": "varchar"
					},
					{
						"name": "portedTN",
						"type": "varchar"
					},
					{
						"name": "internetSpeed",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "productType",
						"type": "varchar"
					},
					{
						"name": "productSku",
						"type": "varchar"
					},
					{
						"name": "billingCode",
						"type": "varchar"
					},
					{
						"name": "systemName",
						"type": "varchar"
					},
					{
						"name": "displayName",
						"type": "varchar"
					},
					{
						"name": "action",
						"type": "varchar"
					},
					{
						"name": "quantity",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oce_ccpm_feed_stg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_feed_watermarks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "feed_name",
						"type": "varchar"
					},
					{
						"name": "watermark",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "OCE_FEED_WATERMARKS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_isaac_feed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "orderSubmissionDate",
						"type": "varchar"
					},
					{
						"name": "orderReceivedDate",
						"type": "varchar"
					},
					{
						"name": "orderStatus",
						"type": "varchar"
					},
					{
						"name": "transactionUpdateDate",
						"type": "varchar"
					},
					{
						"name": "unifiedBAN",
						"type": "varchar"
					},
					{
						"name": "wirelessBAN",
						"type": "varchar"
					},
					{
						"name": "dtvban",
						"type": "varchar"
					},
					{
						"name": "btn",
						"type": "varchar"
					},
					{
						"name": "ctn",
						"type": "varchar"
					},
					{
						"name": "billingZipCode",
						"type": "varchar"
					},
					{
						"name": "packageId",
						"type": "varchar"
					},
					{
						"name": "productCategory",
						"type": "varchar"
					},
					{
						"name": "losgType",
						"type": "varchar"
					},
					{
						"name": "groupId",
						"type": "varchar"
					},
					{
						"name": "itemId",
						"type": "varchar"
					},
					{
						"name": "itemSku",
						"type": "varchar"
					},
					{
						"name": "itemName",
						"type": "varchar"
					},
					{
						"name": "itemType",
						"type": "varchar"
					},
					{
						"name": "itemQty",
						"type": "varchar"
					},
					{
						"name": "itemPrice",
						"type": "varchar"
					},
					{
						"name": "itemStatus",
						"type": "varchar"
					},
					{
						"name": "itemSubStatus",
						"type": "varchar"
					},
					{
						"name": "itemDescription",
						"type": "varchar"
					},
					{
						"name": "itemShippingStatus",
						"type": "varchar"
					},
					{
						"name": "trackingNumber",
						"type": "varchar"
					},
					{
						"name": "carrier",
						"type": "varchar"
					},
					{
						"name": "shippingZipCode",
						"type": "varchar"
					},
					{
						"name": "shippingDate",
						"type": "varchar"
					},
					{
						"name": "dueDate",
						"type": "varchar"
					},
					{
						"name": "messages",
						"type": "varchar"
					},
					{
						"name": "installDateTime",
						"type": "varchar"
					},
					{
						"name": "activationDate",
						"type": "varchar"
					},
					{
						"name": "serviceState",
						"type": "varchar"
					},
					{
						"name": "serviceZipCode",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oce_isaac_feed"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_isaac_feed_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "orderSubmissionDate",
						"type": "varchar"
					},
					{
						"name": "orderReceivedDate",
						"type": "varchar"
					},
					{
						"name": "orderStatus",
						"type": "varchar"
					},
					{
						"name": "transactionUpdateDate",
						"type": "varchar"
					},
					{
						"name": "unifiedBAN",
						"type": "varchar"
					},
					{
						"name": "wirelessBAN",
						"type": "varchar"
					},
					{
						"name": "dtvban",
						"type": "varchar"
					},
					{
						"name": "btn",
						"type": "varchar"
					},
					{
						"name": "ctn",
						"type": "varchar"
					},
					{
						"name": "billingZipCode",
						"type": "varchar"
					},
					{
						"name": "packageId",
						"type": "varchar"
					},
					{
						"name": "productCategory",
						"type": "varchar"
					},
					{
						"name": "losgType",
						"type": "varchar"
					},
					{
						"name": "groupId",
						"type": "varchar"
					},
					{
						"name": "itemId",
						"type": "varchar"
					},
					{
						"name": "itemSku",
						"type": "varchar"
					},
					{
						"name": "itemName",
						"type": "varchar"
					},
					{
						"name": "itemType",
						"type": "varchar"
					},
					{
						"name": "itemQty",
						"type": "varchar"
					},
					{
						"name": "itemPrice",
						"type": "varchar"
					},
					{
						"name": "itemStatus",
						"type": "varchar"
					},
					{
						"name": "itemSubStatus",
						"type": "varchar"
					},
					{
						"name": "itemDescription",
						"type": "varchar"
					},
					{
						"name": "itemShippingStatus",
						"type": "varchar"
					},
					{
						"name": "trackingNumber",
						"type": "varchar"
					},
					{
						"name": "carrier",
						"type": "varchar"
					},
					{
						"name": "shippingZipCode",
						"type": "varchar"
					},
					{
						"name": "shippingDate",
						"type": "varchar"
					},
					{
						"name": "dueDate",
						"type": "varchar"
					},
					{
						"name": "messages",
						"type": "varchar"
					},
					{
						"name": "installDateTime",
						"type": "varchar"
					},
					{
						"name": "activationDate",
						"type": "varchar"
					},
					{
						"name": "serviceState",
						"type": "varchar"
					},
					{
						"name": "serviceZipCode",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oce_isaac_feed_stg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_opsms_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "opsms"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "application",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "nvarchar"
					},
					{
						"name": "eventTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "submittedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "acceptedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "orderType",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "nvarchar"
					},
					{
						"name": "orderSubStatus",
						"type": "nvarchar"
					},
					{
						"name": "passthroughInd",
						"type": "nvarchar"
					},
					{
						"name": "testOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "schemaType",
						"type": "nvarchar"
					},
					{
						"name": "lastmodified_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oce_opsms_watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_voca_feed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ban",
						"type": "varchar"
					},
					{
						"name": "cbr1",
						"type": "varchar"
					},
					{
						"name": "cbr2",
						"type": "varchar"
					},
					{
						"name": "state",
						"type": "varchar"
					},
					{
						"name": "scriptCode",
						"type": "varchar"
					},
					{
						"name": "product",
						"type": "varchar"
					},
					{
						"name": "schedDate",
						"type": "varchar"
					},
					{
						"name": "schedStartTime",
						"type": "varchar"
					},
					{
						"name": "schedEndTime",
						"type": "varchar"
					},
					{
						"name": "businessUnit",
						"type": "varchar"
					},
					{
						"name": "installType",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "submittedDate",
						"type": "varchar"
					},
					{
						"name": "custOrdNum",
						"type": "varchar"
					},
					{
						"name": "omsOrderId",
						"type": "varchar"
					},
					{
						"name": "requestDate",
						"type": "varchar"
					},
					{
						"name": "requestStartTime",
						"type": "varchar"
					},
					{
						"name": "requestEndTime",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oce_voca_feed"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_v101_oce_voca_feed_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "feeds"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ban",
						"type": "varchar"
					},
					{
						"name": "cbr1",
						"type": "varchar"
					},
					{
						"name": "cbr2",
						"type": "varchar"
					},
					{
						"name": "state",
						"type": "varchar"
					},
					{
						"name": "scriptCode",
						"type": "varchar"
					},
					{
						"name": "product",
						"type": "varchar"
					},
					{
						"name": "schedDate",
						"type": "varchar"
					},
					{
						"name": "schedStartTime",
						"type": "varchar"
					},
					{
						"name": "schedEndTime",
						"type": "varchar"
					},
					{
						"name": "businessUnit",
						"type": "varchar"
					},
					{
						"name": "installType",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					},
					{
						"name": "submittedDate",
						"type": "varchar"
					},
					{
						"name": "custOrdNum",
						"type": "varchar"
					},
					{
						"name": "omsOrderId",
						"type": "varchar"
					},
					{
						"name": "requestDate",
						"type": "varchar"
					},
					{
						"name": "requestStartTime",
						"type": "varchar"
					},
					{
						"name": "requestEndTime",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oce_voca_feed_stg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oce_order_channel_extension')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "tmf",
					"table": "oce_order_channel_extension"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/operational_reporting_PL_starter_blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PL_starter_file.txt",
						"container": "event-based-trigger-space"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_adx_oceorder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "order_event_data",
						"type": "dynamic"
					},
					{
						"name": "last_modified_date",
						"type": "datetime"
					},
					{
						"name": "customer_order_id",
						"type": "string"
					}
				],
				"typeProperties": {
					"table": "oce_order_tmf"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "traceId",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "externalId",
						"type": "nvarchar"
					},
					{
						"name": "cartId",
						"type": "nvarchar"
					},
					{
						"name": "lastUpdate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "orderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "state",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "varchar"
					},
					{
						"name": "channel",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_agreement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "agreementName",
						"type": "varchar"
					},
					{
						"name": "extensionName",
						"type": "varchar"
					},
					{
						"name": "extensionValue",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_agreement"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_channel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "role",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_channel"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_event')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "SK_event_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "eventSource",
						"type": "nvarchar"
					},
					{
						"name": "eventType",
						"type": "varchar"
					},
					{
						"name": "sender",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "routingInfo",
						"type": "nvarchar"
					},
					{
						"name": "fallout",
						"type": "nvarchar"
					},
					{
						"name": "callback",
						"type": "nvarchar"
					},
					{
						"name": "automationUrl",
						"type": "nvarchar"
					},
					{
						"name": "version",
						"type": "nvarchar"
					},
					{
						"name": "traceId",
						"type": "nvarchar"
					},
					{
						"name": "state",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "order_json",
						"type": "text"
					},
					{
						"name": "eventTime",
						"type": "varchar"
					},
					{
						"name": "eventTimeStandard",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_event"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_extension')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_extension"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_payment')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "paymentId",
						"type": "varchar"
					},
					{
						"name": "role",
						"type": "nvarchar"
					},
					{
						"name": "amountUnit",
						"type": "nvarchar"
					},
					{
						"name": "characteristicName",
						"type": "nvarchar"
					},
					{
						"name": "characteristicValue",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "authorizationCode",
						"type": "nvarchar"
					},
					{
						"name": "accountId",
						"type": "nvarchar"
					},
					{
						"name": "amountValue",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_payment"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_promo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "promotionId",
						"type": "varchar"
					},
					{
						"name": "applyPolicy",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "validEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "validStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_promo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_promo_benefitItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "benefitItemId",
						"type": "varchar"
					},
					{
						"name": "itemStatus",
						"type": "nvarchar"
					},
					{
						"name": "itemType",
						"type": "nvarchar"
					},
					{
						"name": "pathToRoot",
						"type": "varchar"
					},
					{
						"name": "actionType",
						"type": "nvarchar"
					},
					{
						"name": "promoCriteriaGroupId",
						"type": "nvarchar"
					},
					{
						"name": "actionValue",
						"type": "nvarchar"
					},
					{
						"name": "actionId",
						"type": "nvarchar"
					},
					{
						"name": "actionName",
						"type": "nvarchar"
					},
					{
						"name": "promoPriceAlterationId",
						"type": "nvarchar"
					},
					{
						"name": "promoPriceAlterationPriceType",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_promo_benefitItem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_promo_triggerItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "triggerItemId",
						"type": "varchar"
					},
					{
						"name": "itemStatus",
						"type": "nvarchar"
					},
					{
						"name": "itemType",
						"type": "nvarchar"
					},
					{
						"name": "pathToRoot",
						"type": "varchar"
					},
					{
						"name": "promoCriteriaGroupId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_promo_triggerItem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_related_party')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "referredType",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "relatedPartyId",
						"type": "varchar"
					},
					{
						"name": "role",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_related_party"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_total_price')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "nvarchar"
					},
					{
						"name": "payImmediately",
						"type": "nvarchar"
					},
					{
						"name": "role",
						"type": "varchar"
					},
					{
						"name": "recurringChargePeriod",
						"type": "nvarchar"
					},
					{
						"name": "recurringChargePeriodLength",
						"type": "nvarchar"
					},
					{
						"name": "finalPriceDutyFreeUnit",
						"type": "nvarchar"
					},
					{
						"name": "finalPriceDutyFreeValue",
						"type": "nvarchar"
					},
					{
						"name": "finalPriceTaxAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "finalPriceTaxAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "finalPriceTaxIncludedAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "finalPriceTaxIncludedAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "priceDutyFreeAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "priceDutyFreeAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "priceTaxAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "priceTaxAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "priceTaxIncludedAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "priceTaxIncludedAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "payOption",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_total_price"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_total_price_alteration')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "payImmediately",
						"type": "varchar"
					},
					{
						"name": "role",
						"type": "varchar"
					},
					{
						"name": "priceAlterationAlterationType",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationChargeType",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationPriceType",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationDutyFreeAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationDutyFreeAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationTaxAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationTaxAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationTaxIncludedAmountUnit",
						"type": "nvarchar"
					},
					{
						"name": "priceAlterationTaxIncludedAmountValue",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_total_price_alteration"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_translog')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "transactionType",
						"type": "nvarchar"
					},
					{
						"name": "comments",
						"type": "nvarchar"
					},
					{
						"name": "actionBy",
						"type": "nvarchar"
					},
					{
						"name": "orderStatus",
						"type": "varchar"
					},
					{
						"name": "startTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "endTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "serviceType",
						"type": "nvarchar"
					},
					{
						"name": "service",
						"type": "varchar"
					},
					{
						"name": "losgReferenceId",
						"type": "varchar"
					},
					{
						"name": "subStatus",
						"type": "varchar"
					},
					{
						"name": "wirelessNumber",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "errorCode",
						"type": "nvarchar"
					},
					{
						"name": "errorMessage",
						"type": "nvarchar"
					},
					{
						"name": "httpStatusCode",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_translog"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_validation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "readyToCheckOut",
						"type": "nvarchar"
					},
					{
						"name": "readyToSubmit",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_validation"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmf_oce_order_validationconfig')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "TMF_Master_Pipeline"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "required",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "subType",
						"type": "varchar"
					},
					{
						"name": "type",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "TMF",
					"table": "oce_order_validationconfig"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_AzureDataExplorerTableV101')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCE_Adx_Adf_PE",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureDataExplorerTable",
				"schema": [
					{
						"name": "lastmodified_date",
						"type": "datetime"
					},
					{
						"name": "orderjson_1",
						"type": "dynamic"
					},
					{
						"name": "customer_order_number",
						"type": "string"
					}
				],
				"typeProperties": {
					"table": "oce_order_v101"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCE_Adx_Adf_PE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_OpMS_oceOperationalReportingCnoStaging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_OpMS"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerodernumber",
						"type": "nvarchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOperationalReportingCnoStaging"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsAutoPayEPaymentMethod')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "varchar"
					},
					{
						"name": "achAccountHolderName",
						"type": "varchar"
					},
					{
						"name": "achAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "achAccountNumberLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "achAccountType",
						"type": "nvarchar"
					},
					{
						"name": "achRoutingNumber",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerCustomerId",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerName",
						"type": "nvarchar"
					},
					{
						"name": "cardCryptogram",
						"type": "nvarchar"
					},
					{
						"name": "cardBillingZipCode",
						"type": "nvarchar"
					},
					{
						"name": "ccCardNotValidatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ccCreditCardHolderName",
						"type": "nvarchar"
					},
					{
						"name": "ccCreditCardNumber",
						"type": "nvarchar"
					},
					{
						"name": "ccExpirationYearMonth",
						"type": "nvarchar"
					},
					{
						"name": "creditCardLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "creditCardType",
						"type": "varchar"
					},
					{
						"name": "customerAgreementVersion",
						"type": "nvarchar"
					},
					{
						"name": "giftCardIndicator",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailBatchNumber",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailaymentHandle",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "paymentConfirmationDetailTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileAutomationProfileName",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileAutomationProfileOwnerId",
						"type": "varchar"
					},
					{
						"name": "paymentProfileName",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileType",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigMerchantId",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigSourceLocation",
						"type": "varchar"
					},
					{
						"name": "paymentTenderConfigSourceSystem",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigSourceUser",
						"type": "nvarchar"
					},
					{
						"name": "paymentTokenPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "paymentTokenPaymentToken",
						"type": "nvarchar"
					},
					{
						"name": "payType",
						"type": "nvarchar"
					},
					{
						"name": "payPalEmailAddress",
						"type": "varchar"
					},
					{
						"name": "payPalPayerId",
						"type": "nvarchar"
					},
					{
						"name": "payPalPaymentMethodId",
						"type": "varchar"
					},
					{
						"name": "payPalToken",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAddressVerificationSystemCode",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAuthorizationCode",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAuthorizationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "preAuthAuthorizationExpirationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "preAuthAuthorizationKey",
						"type": "varchar"
					},
					{
						"name": "profileAction",
						"type": "nvarchar"
					},
					{
						"name": "token",
						"type": "nvarchar"
					},
					{
						"name": "totalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "last4Digits",
						"type": "nvarchar"
					},
					{
						"name": "verificationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "skipAuthorization",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "paymentMethodId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsAutoPayEPaymentMethod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsAutopayPaymentMethod')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "accountsReceivableIndicator",
						"type": "nvarchar"
					},
					{
						"name": "purchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "btmEquipmentType",
						"type": "nvarchar"
					},
					{
						"name": "btmSubscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "btmTotalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "btnCustomerCode",
						"type": "nvarchar"
					},
					{
						"name": "btnPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "btnTn",
						"type": "nvarchar"
					},
					{
						"name": "cashPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "cashPaymentToken",
						"type": "nvarchar"
					},
					{
						"name": "lpmCustomerAgreementVersion",
						"type": "nvarchar"
					},
					{
						"name": "lpmLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "lpmPaymentType",
						"type": "nvarchar"
					},
					{
						"name": "lpmPaymentTypeName",
						"type": "nvarchar"
					},
					{
						"name": "lpmReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "lpmTotalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "paymentTokenOnlyAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "paymentTokenOnlyToken",
						"type": "nvarchar"
					},
					{
						"name": "storeLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "storePaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "storeProfileOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsAutopayPaymentMethod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsBillingDetailAddr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "placeId",
						"type": "nvarchar"
					},
					{
						"name": "addressId",
						"type": "nvarchar"
					},
					{
						"name": "connectedCommunityId",
						"type": "nvarchar"
					},
					{
						"name": "dwellingType",
						"type": "nvarchar"
					},
					{
						"name": "validatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine4",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine5",
						"type": "nvarchar"
					},
					{
						"name": "codingAccuracySupportSystemAddress",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddInstructions",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressChanged",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressMatchCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressStreetLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnit",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnitNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAssignedStreetNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrBuildingType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrclli8",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountyCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirection",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirectionPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDisconnectDate",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExchangeCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExhaustCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrIncorporatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastDisconnectedTransportType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastNetworkAccessDeviceType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLegalEntity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevel",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevelNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLinkKey",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryNPANXX",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateCenterCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZoneBanCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRsagValidationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteBoxNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteCenterNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSecondaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteAddressId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSmartMoves",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetName",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetNameSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructureNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTarCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrVideoHubOffice",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipGeoCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrElevation",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrRuralRoute",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUnit",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "parsedAddrTimeZone",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZone",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsBillingDetailAddr"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsCardOnFileEPaymentMethod')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "achAccountHolderName",
						"type": "varchar"
					},
					{
						"name": "achAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "achAccountNumberLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "achAccountType",
						"type": "nvarchar"
					},
					{
						"name": "achRoutingNumber",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerCustomerId",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerName",
						"type": "nvarchar"
					},
					{
						"name": "cardCryptogram",
						"type": "nvarchar"
					},
					{
						"name": "cardBillingZipCode",
						"type": "nvarchar"
					},
					{
						"name": "ccCardNotValidatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ccCreditCardHolderName",
						"type": "nvarchar"
					},
					{
						"name": "ccCreditCardNumber",
						"type": "nvarchar"
					},
					{
						"name": "ccExpirationYearMonth",
						"type": "nvarchar"
					},
					{
						"name": "creditCardLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "creditCardType",
						"type": "varchar"
					},
					{
						"name": "customerAgreementVersion",
						"type": "nvarchar"
					},
					{
						"name": "giftCardIndicator",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailBatchNumber",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailaymentHandle",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "paymentConfirmationDetailTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileAutomationProfileName",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileAutomationProfileOwnerId",
						"type": "varchar"
					},
					{
						"name": "paymentProfileName",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileType",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigMerchantId",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigSourceLocation",
						"type": "varchar"
					},
					{
						"name": "paymentTenderConfigSourceSystem",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigSourceUser",
						"type": "nvarchar"
					},
					{
						"name": "paymentTokenPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "paymentTokenPaymentToken",
						"type": "nvarchar"
					},
					{
						"name": "payType",
						"type": "nvarchar"
					},
					{
						"name": "payPalEmailAddress",
						"type": "varchar"
					},
					{
						"name": "payPalPayerId",
						"type": "nvarchar"
					},
					{
						"name": "payPalPaymentMethodId",
						"type": "varchar"
					},
					{
						"name": "payPalToken",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAddressVerificationSystemCode",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAuthorizationCode",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAuthorizationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "preAuthAuthorizationExpirationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "preAuthAuthorizationKey",
						"type": "varchar"
					},
					{
						"name": "profileAction",
						"type": "nvarchar"
					},
					{
						"name": "token",
						"type": "nvarchar"
					},
					{
						"name": "totalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "last4Digits",
						"type": "nvarchar"
					},
					{
						"name": "verificationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "skipAuthorization",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsCardOnFileEPaymentMethod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsCardOnFilePaymentMethod')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "accountsReceivableIndicator",
						"type": "varchar"
					},
					{
						"name": "purchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "btmEquipmentType",
						"type": "nvarchar"
					},
					{
						"name": "btmSubscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "btmTotalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "btnCustomerCode",
						"type": "nvarchar"
					},
					{
						"name": "btnPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "btnTn",
						"type": "nvarchar"
					},
					{
						"name": "cashPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "cashPaymentToken",
						"type": "nvarchar"
					},
					{
						"name": "lpmCustomerAgreementVersion",
						"type": "nvarchar"
					},
					{
						"name": "lpmLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "lpmPaymentType",
						"type": "nvarchar"
					},
					{
						"name": "lpmPaymentTypeName",
						"type": "nvarchar"
					},
					{
						"name": "lpmReferenceNumber",
						"type": "nvarchar"
					},
					{
						"name": "lpmTotalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "paymentTokenOnlyAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "paymentTokenOnlyToken",
						"type": "nvarchar"
					},
					{
						"name": "storeLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "storePaymentAmount",
						"type": "nvarchar"
					},
					{
						"name": "storeProfileOwnerId",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsCardOnFilePaymentMethod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsCreditCheck')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "addAccountGUId",
						"type": "nvarchar"
					},
					{
						"name": "applicationApprovalDate",
						"type": "nvarchar"
					},
					{
						"name": "applicationExpiresDate",
						"type": "nvarchar"
					},
					{
						"name": "creditBand",
						"type": "nvarchar"
					},
					{
						"name": "creditCheckManagementTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "creditCheckRanIndicator",
						"type": "nvarchar"
					},
					{
						"name": "creditClass",
						"type": "nvarchar"
					},
					{
						"name": "creditInquiryOpen",
						"type": "nvarchar"
					},
					{
						"name": "creditPolicyToken",
						"type": "nvarchar"
					},
					{
						"name": "creditReferenceDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "creditScoreResult",
						"type": "nvarchar"
					},
					{
						"name": "creditStatus",
						"type": "nvarchar"
					},
					{
						"name": "creditVerified",
						"type": "nvarchar"
					},
					{
						"name": "currentAccountBalance",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "currentDeniablePastDueAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "currentNonDeniablePastDueAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "currentNonRegulatedPastDueAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "currentPastDueAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "currentRegulatedPastDueAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "customerApprovalSystemTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "debtPaidStatus",
						"type": "nvarchar"
					},
					{
						"name": "depositAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "depositRequired",
						"type": "nvarchar"
					},
					{
						"name": "depositStatus",
						"type": "nvarchar"
					},
					{
						"name": "electronicIdNumber",
						"type": "nvarchar"
					},
					{
						"name": "electronicIdVerifierLaunched",
						"type": "nvarchar"
					},
					{
						"name": "electronicIdVerifierRequired",
						"type": "nvarchar"
					},
					{
						"name": "electronicIdVerifierResults",
						"type": "nvarchar"
					},
					{
						"name": "exchangeListFound",
						"type": "nvarchar"
					},
					{
						"name": "expressPayDetailHeld",
						"type": "nvarchar"
					},
					{
						"name": "finalBillAccounts",
						"type": "nvarchar"
					},
					{
						"name": "ignoreDeposit",
						"type": "nvarchar"
					},
					{
						"name": "individualCustomerKey",
						"type": "nvarchar"
					},
					{
						"name": "minimumAmountDue",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "nonRefundableCreditFee",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "numberApprovedLines",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "numberLinesRequired",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "productsInclude",
						"type": "nvarchar"
					},
					{
						"name": "proprietarySegment",
						"type": "nvarchar"
					},
					{
						"name": "reasonCode",
						"type": "nvarchar"
					},
					{
						"name": "reasonCodeDescription",
						"type": "nvarchar"
					},
					{
						"name": "safeScanAlertIndicator",
						"type": "nvarchar"
					},
					{
						"name": "safeScanPassIndicator",
						"type": "nvarchar"
					},
					{
						"name": "singleCreditQueryWirelessIndicator",
						"type": "nvarchar"
					},
					{
						"name": "treatmentCode",
						"type": "nvarchar"
					},
					{
						"name": "treatmentMessage",
						"type": "nvarchar"
					},
					{
						"name": "writeOffAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "writeOffDate",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderAcctsCreditCheck"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsCreditCheckDebtAccounts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "debtAccountNumber",
						"type": "varchar"
					},
					{
						"name": "accountBalance",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "affiliateId",
						"type": "nvarchar"
					},
					{
						"name": "customerAgreementCode",
						"type": "nvarchar"
					},
					{
						"name": "disconnectDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "individualCustomerKey",
						"type": "nvarchar"
					},
					{
						"name": "minimumAmountDue",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderAcctsCreditCheckDebtAccounts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsNegotiateConflictCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "conflictCustomerType",
						"type": "varchar"
					},
					{
						"name": "conflictLandlordDetailApprovalDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "conflictLandlordDetailCompanyName",
						"type": "nvarchar"
					},
					{
						"name": "conflictLandlordDetailEmail",
						"type": "nvarchar"
					},
					{
						"name": "conflictLandlordDetailFirstName",
						"type": "nvarchar"
					},
					{
						"name": "conflictLandlordDetailLandlordApproval",
						"type": "nvarchar"
					},
					{
						"name": "conflictLandlordDetailLastName",
						"type": "nvarchar"
					},
					{
						"name": "conflictLandlordDetailPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "conflictLandlordDetailPhoneNumberType",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailBillingAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailBillingTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailCompanyName",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailEmail",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailFirstName",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailLastName",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailPhoneNumberType",
						"type": "nvarchar"
					},
					{
						"name": "existingCustomerDetailMoveOrCeaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderAcctsNegotiateConflictCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsProvisionSystem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "varchar"
					},
					{
						"name": "systemOrderReference",
						"type": "nvarchar"
					},
					{
						"name": "systemName",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderAcctsProvisionSystem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderAcctsUnifiedAccount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "acctId",
						"type": "varchar"
					},
					{
						"name": "acctSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "convergeOrderIndicator",
						"type": "varchar"
					},
					{
						"name": "convergeValidationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "convergedBilling",
						"type": "nvarchar"
					},
					{
						"name": "premierIndicator",
						"type": "nvarchar"
					},
					{
						"name": "unifiedAccountDiscount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "unifiedAccountExisting",
						"type": "nvarchar"
					},
					{
						"name": "unifiedAccountPending",
						"type": "nvarchar"
					},
					{
						"name": "unifiedAccountRebate",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "unifiedAccountReference",
						"type": "nvarchar"
					},
					{
						"name": "unifiedAccountReward",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderAcctsUnifiedAccount"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderCancelDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "cancelReason",
						"type": "nvarchar"
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedEventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderCancelDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderCreditPolicy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "creditPolicyTransactionId",
						"type": "varchar"
					},
					{
						"name": "crsmOnFlag",
						"type": "nvarchar"
					},
					{
						"name": "previousCreditPolicyTransactionId",
						"type": "varchar"
					},
					{
						"name": "policyAcceptedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "uucpStatus",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "order_type",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderCreditPolicy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderDebtAccts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "debtId",
						"type": "varchar"
					},
					{
						"name": "debtAccountNumber",
						"type": "varchar"
					},
					{
						"name": "accountCategory",
						"type": "varchar"
					},
					{
						"name": "accountSubCategory",
						"type": "varchar"
					},
					{
						"name": "affiliateId",
						"type": "varchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "debtPaidStatus",
						"type": "varchar"
					},
					{
						"name": "paymentMethodReference",
						"type": "varchar"
					},
					{
						"name": "provider",
						"type": "varchar"
					},
					{
						"name": "settledBy",
						"type": "varchar"
					},
					{
						"name": "system",
						"type": "varchar"
					},
					{
						"name": "systemDivision",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderDebtAccts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderDeliveryPromiseNote')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "deliveryPromiseNoteEnglish",
						"type": "nvarchar"
					},
					{
						"name": "deliveryPromiseNoteSpanish",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderDeliveryPromiseNote"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderECommercePartner')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "affiliateName",
						"type": "nvarchar"
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "phoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "referredDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderECommercePartner"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderEmployeeDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "centralizedTableId",
						"type": "nvarchar"
					},
					{
						"name": "class",
						"type": "nvarchar"
					},
					{
						"name": "uid",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderEmployeeDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderEmployeeReferralDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "appId",
						"type": "nvarchar"
					},
					{
						"name": "employeeUId",
						"type": "nvarchar"
					},
					{
						"name": "packageId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderEmployeeReferralDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderFleetDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "callBackDateTime",
						"type": "nvarchar"
					},
					{
						"name": "companyCreationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "companyName",
						"type": "nvarchar"
					},
					{
						"name": "customerAssignToId",
						"type": "nvarchar"
					},
					{
						"name": "erpAccount",
						"type": "nvarchar"
					},
					{
						"name": "lineCount",
						"type": "nvarchar"
					},
					{
						"name": "locationCount",
						"type": "nvarchar"
					},
					{
						"name": "projectBillTo",
						"type": "nvarchar"
					},
					{
						"name": "projectType",
						"type": "nvarchar"
					},
					{
						"name": "shippingFeeId",
						"type": "nvarchar"
					},
					{
						"name": "shipToId",
						"type": "nvarchar"
					},
					{
						"name": "timeZone",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderFleetDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderIntegratedOffers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "ioId",
						"type": "varchar"
					},
					{
						"name": "ioSequence",
						"type": "varchar"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "qualifyingServiceDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderIntegratedOffers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLoginProfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "orderInitiator",
						"type": "nvarchar"
					},
					{
						"name": "profileId",
						"type": "nvarchar"
					},
					{
						"name": "userGuId",
						"type": "nvarchar"
					},
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLoginProfile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgServiceProvider')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerordernumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "conversationId",
						"type": "nvarchar"
					},
					{
						"name": "phoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "orderConfirmationId",
						"type": "nvarchar"
					},
					{
						"name": "submissionStatus",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgServiceProvider"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsAddlDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "code",
						"type": "nvarchar"
					},
					{
						"name": "value",
						"type": "varchar"
					},
					{
						"name": "parentType",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "sequence",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsAddlDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsApiExecutionDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "action",
						"type": "nvarchar"
					},
					{
						"name": "priority",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "losgSubStatus",
						"type": "nvarchar"
					},
					{
						"name": "losgStatus",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsApiExecutionDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsCancelDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "cancelBy",
						"type": "nvarchar"
					},
					{
						"name": "cancelReason",
						"type": "nvarchar"
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedEventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsCancelDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsCompensation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "repId",
						"type": "nvarchar"
					},
					{
						"name": "repAction",
						"type": "nvarchar"
					},
					{
						"name": "dealerCode",
						"type": "nvarchar"
					},
					{
						"name": "salesCode",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "submittedBy",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsCompensation"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsConflictingServiceDetailReferences')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "conflictingServiceDetailReference",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsConflictingServiceDetailReferences"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsDSLCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "parentComponentCode",
						"type": "varchar"
					},
					{
						"name": "retainedServiceProcessIndicator",
						"type": "varchar"
					},
					{
						"name": "serviceId",
						"type": "varchar"
					},
					{
						"name": "serviceType",
						"type": "varchar"
					},
					{
						"name": "totalAllowance",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsDSLCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsDirectTVCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "dealerId",
						"type": "nvarchar"
					},
					{
						"name": "freeSTBReceiverCount",
						"type": "nvarchar"
					},
					{
						"name": "hasMoreThanThreeFloors",
						"type": "nvarchar"
					},
					{
						"name": "marketingSourceCode",
						"type": "nvarchar"
					},
					{
						"name": "moveInOrder",
						"type": "nvarchar"
					},
					{
						"name": "offerLanguage",
						"type": "nvarchar"
					},
					{
						"name": "parentComponentCode",
						"type": "nvarchar"
					},
					{
						"name": "serviceAgreement",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsDirectTVCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsEventHistory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "substatus",
						"type": "varchar"
					},
					{
						"name": "eventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsEventHistory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsExternalOrderReferences')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "systemName",
						"type": "varchar"
					},
					{
						"name": "systemOrderReference",
						"type": "varchar"
					},
					{
						"name": "systemOrderReferenceType",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsExternalOrderReferences"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsInstallationInstructions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "question",
						"type": "varchar"
					},
					{
						"name": "answer",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsInstallationInstructions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsIptvCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "freeSTBReceiverCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "parentComponentCode",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsIptvCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "action",
						"type": "nvarchar"
					},
					{
						"name": "addOnDomainName",
						"type": "nvarchar"
					},
					{
						"name": "addOnDomainRegistration",
						"type": "nvarchar"
					},
					{
						"name": "addOnParentItem",
						"type": "nvarchar"
					},
					{
						"name": "addOnRegistrationType",
						"type": "nvarchar"
					},
					{
						"name": "billingCode",
						"type": "nvarchar"
					},
					{
						"name": "billingCodeType",
						"type": "nvarchar"
					},
					{
						"name": "catalogProductType",
						"type": "nvarchar"
					},
					{
						"name": "catalogSKUId",
						"type": "nvarchar"
					},
					{
						"name": "contractAmountFinanced",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractAnnualPercentageRate",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractBalancedAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractDisplayName",
						"type": "nvarchar"
					},
					{
						"name": "contractSent",
						"type": "nvarchar"
					},
					{
						"name": "contractSystem",
						"type": "nvarchar"
					},
					{
						"name": "contractType",
						"type": "nvarchar"
					},
					{
						"name": "contractDownPayment",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractDownPaymentPercent",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractFinanceCharge",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractInstallmentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractInstallmentPlanDef",
						"type": "nvarchar"
					},
					{
						"name": "contractInstallmentPlanId",
						"type": "nvarchar"
					},
					{
						"name": "contractInstallmentStatus",
						"type": "nvarchar"
					},
					{
						"name": "contractInstallmentType",
						"type": "nvarchar"
					},
					{
						"name": "contractPrepaidFinanceCharge",
						"type": "nvarchar"
					},
					{
						"name": "contractPayupAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractPayoffAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractTotalSalePrice",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "contractlength",
						"type": "int",
						"precision": 10
					},
					{
						"name": "curbsideDelivery",
						"type": "nvarchar"
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "displayName",
						"type": "nvarchar"
					},
					{
						"name": "effectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "feeId",
						"type": "nvarchar"
					},
					{
						"name": "feeIdType",
						"type": "nvarchar"
					},
					{
						"name": "feeWaivedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "feeWaivedReason",
						"type": "nvarchar"
					},
					{
						"name": "fulfillmentLocation",
						"type": "nvarchar"
					},
					{
						"name": "groupOptionId",
						"type": "nvarchar"
					},
					{
						"name": "inventoryStoreId",
						"type": "nvarchar"
					},
					{
						"name": "itemFulfillmentMethod",
						"type": "nvarchar"
					},
					{
						"name": "locationId",
						"type": "nvarchar"
					},
					{
						"name": "notes",
						"type": "nvarchar"
					},
					{
						"name": "operation",
						"type": "nvarchar"
					},
					{
						"name": "preOwnedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "priceAdditionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "priceAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "priceBaseAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "priceCreditFeeType",
						"type": "nvarchar"
					},
					{
						"name": "priceCurrencyType",
						"type": "nvarchar"
					},
					{
						"name": "priceInstallmentEligibility",
						"type": "nvarchar"
					},
					{
						"name": "priceMsrp",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "priceType",
						"type": "nvarchar"
					},
					{
						"name": "priceTaxDetail",
						"type": "nvarchar"
					},
					{
						"name": "priceTotal",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "productCode",
						"type": "nvarchar"
					},
					{
						"name": "productGroupReferences",
						"type": "nvarchar"
					},
					{
						"name": "productSKU",
						"type": "varchar"
					},
					{
						"name": "productSubType",
						"type": "nvarchar"
					},
					{
						"name": "productType",
						"type": "nvarchar"
					},
					{
						"name": "promotionReferences",
						"type": "nvarchar"
					},
					{
						"name": "purchaseTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "shippingDetailReference",
						"type": "nvarchar"
					},
					{
						"name": "socForPreviousDevice",
						"type": "nvarchar"
					},
					{
						"name": "status",
						"type": "nvarchar"
					},
					{
						"name": "storeId",
						"type": "nvarchar"
					},
					{
						"name": "subscriptionId",
						"type": "nvarchar"
					},
					{
						"name": "systemName",
						"type": "nvarchar"
					},
					{
						"name": "taxableIndicator",
						"type": "nvarchar"
					},
					{
						"name": "tier",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "productInventoryStatus",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsDirecTVCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "componentConfigurations",
						"type": "nvarchar"
					},
					{
						"name": "ignorePricePlanCode",
						"type": "varchar"
					},
					{
						"name": "productSpecificationId",
						"type": "varchar"
					},
					{
						"name": "requestComponentGroup",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemsDirecTVCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsEventHistory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "status",
						"type": "varchar"
					},
					{
						"name": "eventDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "insertedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsLineItemsEventHistory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsInternetCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "boltOnType",
						"type": "nvarchar"
					},
					{
						"name": "bucketAllowance",
						"type": "nvarchar"
					},
					{
						"name": "componentConfigurations",
						"type": "nvarchar"
					},
					{
						"name": "ignorePricePlanCode",
						"type": "nvarchar"
					},
					{
						"name": "ipType",
						"type": "nvarchar"
					},
					{
						"name": "maxOverageCharge",
						"type": "int",
						"precision": 10
					},
					{
						"name": "overageBucketAllowance",
						"type": "nvarchar"
					},
					{
						"name": "planDownloadSpeed",
						"type": "nvarchar"
					},
					{
						"name": "pricePerBucketAllowance",
						"type": "int",
						"precision": 10
					},
					{
						"name": "productSpecificationId",
						"type": "nvarchar"
					},
					{
						"name": "requestComponentGroup",
						"type": "nvarchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsLineItemsInternetCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsIptvCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "componentConfigurations",
						"type": "nvarchar"
					},
					{
						"name": "ignorePricePlanCode",
						"type": "varchar"
					},
					{
						"name": "productSpecificationId",
						"type": "varchar"
					},
					{
						"name": "requestComponentGroup",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemsIptvCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsPayments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "nvarchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "paymentTenderReference",
						"type": "varchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "currencyType",
						"type": "nvarchar"
					},
					{
						"name": "numberOfInstallment",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsLineItemsPayments"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsPriceList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "priceAdditionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "priceAmount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "priceBaseAmount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "priceCreditFeeType",
						"type": "varchar"
					},
					{
						"name": "priceCurrencyType",
						"type": "varchar"
					},
					{
						"name": "priceInstallmentEligibility",
						"type": "varchar"
					},
					{
						"name": "priceMsrp",
						"type": "int",
						"precision": 10
					},
					{
						"name": "priceTaxDetail",
						"type": "nvarchar"
					},
					{
						"name": "priceTotal",
						"type": "int",
						"precision": 10
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemsPriceList"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsSupplyChainDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "nvarchar"
					},
					{
						"name": "availabilityDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "carrier",
						"type": "nvarchar"
					},
					{
						"name": "claimRMANumber",
						"type": "nvarchar"
					},
					{
						"name": "exchangeDocumentId",
						"type": "nvarchar"
					},
					{
						"name": "exchangeOrderId",
						"type": "nvarchar"
					},
					{
						"name": "orderDocumentDetailActivity",
						"type": "nvarchar"
					},
					{
						"name": "orderDocumentDetailLocation",
						"type": "nvarchar"
					},
					{
						"name": "orderDocumentDetailOrderId",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "quantityBackOrdered",
						"type": "int",
						"precision": 10
					},
					{
						"name": "quantityCanceled",
						"type": "int",
						"precision": 10
					},
					{
						"name": "quantityOrdered",
						"type": "int",
						"precision": 10
					},
					{
						"name": "quantityShipped",
						"type": "int",
						"precision": 10
					},
					{
						"name": "quantityToShip",
						"type": "int",
						"precision": 10
					},
					{
						"name": "shippedDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "trackingNumber",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemsSupplyChainDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsVoipCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "componentConfigurations",
						"type": "nvarchar"
					},
					{
						"name": "ignorePricePlanCode",
						"type": "varchar"
					},
					{
						"name": "productSpecificationId",
						"type": "varchar"
					},
					{
						"name": "requestComponentGroup",
						"type": "varchar"
					},
					{
						"name": "callerId",
						"type": "varchar"
					},
					{
						"name": "uverseMessaging",
						"type": "varchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemsVoipCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemsWirelessCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "componentConfigurations",
						"type": "nvarchar"
					},
					{
						"name": "ignorePricePlanCode",
						"type": "varchar"
					},
					{
						"name": "productSpecificationId",
						"type": "nvarchar"
					},
					{
						"name": "requestComponentGroup",
						"type": "nvarchar"
					},
					{
						"name": "attDynTrafficManagerAddlDetails",
						"type": "nvarchar"
					},
					{
						"name": "attDynTrafficManagerEnterpriseId",
						"type": "nvarchar"
					},
					{
						"name": "attDynTrafficManagerManifestLabel",
						"type": "nvarchar"
					},
					{
						"name": "attDynTrafficManagerManifestURL",
						"type": "nvarchar"
					},
					{
						"name": "availabilityType",
						"type": "nvarchar"
					},
					{
						"name": "distributionChannelId",
						"type": "nvarchar"
					},
					{
						"name": "nciEligibleIndicator",
						"type": "nvarchar"
					},
					{
						"name": "newSalesChannelId",
						"type": "nvarchar"
					},
					{
						"name": "offerType",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolAddlDetails",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolApnName",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocol5GIndicator",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolDefaultIndicator",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolDefaultSNType",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolIpAddress",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolIpv6Address",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolIpversionType",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolLteIndicator",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolOnlineChargingIndicator",
						"type": "nvarchar"
					},
					{
						"name": "packetDataProtocolType",
						"type": "nvarchar"
					},
					{
						"name": "partnerCode",
						"type": "nvarchar"
					},
					{
						"name": "simType",
						"type": "nvarchar"
					},
					{
						"name": "tradeInModelCode",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailAddlDetails",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailClaimId",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailDeviceClearingAgreement",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailDeviceCondition",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailExchangeType",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailInstallmentPlanId",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailModelCode",
						"type": "nvarchar"
					},
					{
						"name": "tradeInDetailNonComplianceFee",
						"type": "int",
						"precision": 10
					},
					{
						"name": "tradeInDetailPayupAmount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemsWirelessCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsLineItemshardGood')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "lineItemSequence",
						"type": "varchar"
					},
					{
						"name": "lineItemId",
						"type": "varchar"
					},
					{
						"name": "availabilityDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "biller",
						"type": "nvarchar"
					},
					{
						"name": "byodIndicator",
						"type": "nvarchar"
					},
					{
						"name": "cardSerialNumber",
						"type": "nvarchar"
					},
					{
						"name": "deliveryByDateFromDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "deliveryByDateToDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "deliveryPromiseNoteEnglish",
						"type": "nvarchar"
					},
					{
						"name": "deliveryPromiseNoteSpanish",
						"type": "nvarchar"
					},
					{
						"name": "eid",
						"type": "nvarchar"
					},
					{
						"name": "fieldId",
						"type": "nvarchar"
					},
					{
						"name": "hardGoodType",
						"type": "nvarchar"
					},
					{
						"name": "iccId",
						"type": "nvarchar"
					},
					{
						"name": "make",
						"type": "nvarchar"
					},
					{
						"name": "manufacturerCode",
						"type": "nvarchar"
					},
					{
						"name": "model",
						"type": "nvarchar"
					},
					{
						"name": "networkAccessDeviceType",
						"type": "nvarchar"
					},
					{
						"name": "preOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "productImageUrl",
						"type": "nvarchar"
					},
					{
						"name": "serialNumber",
						"type": "nvarchar"
					},
					{
						"name": "shipmentCommitFromDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "shipmentCommitToDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "shippedHotIndicator",
						"type": "nvarchar"
					},
					{
						"name": "whiteGloveDeliveryPartner",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodConnectionType",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodDeviceCategory",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodEquipmentType",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodEquipmentUpgrade",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodIMEI",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodIMEIType",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodIMSI",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodPhoneType",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodTechType",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodUSOC",
						"type": "nvarchar"
					},
					{
						"name": "WirelessHardGoodZodiacSeqNum",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "simStatus",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsLineItemshardGood"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsNumberPortDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "currentServiceProviderId",
						"type": "nvarchar"
					},
					{
						"name": "customerCode",
						"type": "nvarchar"
					},
					{
						"name": "disconAccepted",
						"type": "nvarchar"
					},
					{
						"name": "disconDevInstallAgreementType",
						"type": "nvarchar"
					},
					{
						"name": "disconEConsentAgreementType",
						"type": "nvarchar"
					},
					{
						"name": "disconTimestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "disconVersion",
						"type": "nvarchar"
					},
					{
						"name": "e911ServiceRoutingNumber",
						"type": "nvarchar"
					},
					{
						"name": "lightspeedLocalRoutingNumber",
						"type": "nvarchar"
					},
					{
						"name": "lastFourOfSSN",
						"type": "nvarchar"
					},
					{
						"name": "localRoutingNumber",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "nonATTPortIn",
						"type": "nvarchar"
					},
					{
						"name": "ospAccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "ospName",
						"type": "nvarchar"
					},
					{
						"name": "pinOrPassword",
						"type": "nvarchar"
					},
					{
						"name": "portEligibility",
						"type": "nvarchar"
					},
					{
						"name": "portInType",
						"type": "nvarchar"
					},
					{
						"name": "portTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "portRequestNumber",
						"type": "nvarchar"
					},
					{
						"name": "portStatus",
						"type": "nvarchar"
					},
					{
						"name": "previousAddress",
						"type": "nvarchar"
					},
					{
						"name": "shadowLocalRoutingNumber",
						"type": "nvarchar"
					},
					{
						"name": "ssn",
						"type": "nvarchar"
					},
					{
						"name": "taxId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "shipmentInfoUpdatedIndicator",
						"type": "varchar"
					},
					{
						"name": "portstatusReasonCode",
						"type": "varchar"
					},
					{
						"name": "portRequestLineStatus",
						"type": "varchar"
					},
					{
						"name": "portstatusReasonDescription",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsNumberPortDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsPromotions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "sequence",
						"type": "varchar"
					},
					{
						"name": "additionDetails",
						"type": "nvarchar"
					},
					{
						"name": "amount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "baseOfferId",
						"type": "varchar"
					},
					{
						"name": "complexDiscountIndicator",
						"type": "varchar"
					},
					{
						"name": "componentConfigurations",
						"type": "nvarchar"
					},
					{
						"name": "couponCode",
						"type": "varchar"
					},
					{
						"name": "displayLevel",
						"type": "varchar"
					},
					{
						"name": "duration",
						"type": "int",
						"precision": 10
					},
					{
						"name": "effectiveDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "effectiveInDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "endDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "fixedAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "ioId",
						"type": "varchar"
					},
					{
						"name": "ioSequence",
						"type": "varchar"
					},
					{
						"name": "parentPricePlanCode",
						"type": "varchar"
					},
					{
						"name": "payInAdvanceProdId",
						"type": "varchar"
					},
					{
						"name": "percent",
						"type": "float",
						"precision": 15
					},
					{
						"name": "promotionAppliedBy",
						"type": "varchar"
					},
					{
						"name": "promotionBillingCode",
						"type": "varchar"
					},
					{
						"name": "promotionCode",
						"type": "varchar"
					},
					{
						"name": "promotionCycle",
						"type": "varchar"
					},
					{
						"name": "promotionId",
						"type": "varchar"
					},
					{
						"name": "promotionName",
						"type": "varchar"
					},
					{
						"name": "promotionType",
						"type": "varchar"
					},
					{
						"name": "unitOfMeasurement",
						"type": "varchar"
					},
					{
						"name": "promotionTypeDetail",
						"type": "varchar"
					},
					{
						"name": "qualifyingServiceDetails",
						"type": "nvarchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsPromotions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsServiceAddr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "Id",
						"type": "nvarchar"
					},
					{
						"name": "placeId",
						"type": "nvarchar"
					},
					{
						"name": "addressId",
						"type": "nvarchar"
					},
					{
						"name": "connectedCommunityId",
						"type": "nvarchar"
					},
					{
						"name": "dwellingType",
						"type": "nvarchar"
					},
					{
						"name": "validatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine4",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine5",
						"type": "nvarchar"
					},
					{
						"name": "codingAccuracySupportSystemAddress",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddInstructions",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressChanged",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressMatchCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressStreetLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnit",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnitNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAssignedStreetNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrBuildingType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrclli8",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountyCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirection",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirectionPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDisconnectDate",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExchangeCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExhaustCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrIncorporatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastDisconnectedTransportType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastNetworkAccessDeviceType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLegalEntity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevel",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevelNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLinkKey",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryNPANXX",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateCenterCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZoneBanCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRsagValidationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteBoxNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteCenterNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSecondaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteAddressId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSmartMoves",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetName",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetNameSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructureNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTarCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrVideoHubOffice",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipGeoCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrElevation",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrRuralRoute",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUnit",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "parsedAddrTimeZone",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZone",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsServiceAddr"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsSubscriberName')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "additionalContactPhones",
						"type": "nvarchar"
					},
					{
						"name": "emailAddress",
						"type": "varchar"
					},
					{
						"name": "firstName",
						"type": "nvarchar"
					},
					{
						"name": "nameId",
						"type": "nvarchar"
					},
					{
						"name": "lastName",
						"type": "nvarchar"
					},
					{
						"name": "legalFirstName",
						"type": "nvarchar"
					},
					{
						"name": "legalLastName",
						"type": "varchar"
					},
					{
						"name": "middleInitial",
						"type": "varchar"
					},
					{
						"name": "preferredContactMethod",
						"type": "varchar"
					},
					{
						"name": "prefix",
						"type": "nvarchar"
					},
					{
						"name": "previousLegalLastName",
						"type": "nvarchar"
					},
					{
						"name": "suffix",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "varchar"
					},
					{
						"name": "primaryContactPhoneNumber",
						"type": "varchar"
					},
					{
						"name": "primaryContactextension",
						"type": "varchar"
					},
					{
						"name": "primaryContactPhoneType",
						"type": "nvarchar"
					},
					{
						"name": "primarycontactPhoneConsentDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsSubscriberName"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsTermsAndConditionAccepted')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerordernumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "nvarchar"
					},
					{
						"name": "losgSequence",
						"type": "nvarchar"
					},
					{
						"name": "termsAndConditionsId",
						"type": "varchar"
					},
					{
						"name": "accepted",
						"type": "nvarchar"
					},
					{
						"name": "agreementtext",
						"type": "nvarchar"
					},
					{
						"name": "agreementtype",
						"type": "nvarchar"
					},
					{
						"name": "agreementURL",
						"type": "nvarchar"
					},
					{
						"name": "category",
						"type": "nvarchar"
					},
					{
						"name": "documentName",
						"type": "varchar"
					},
					{
						"name": "orderlevelindicator",
						"type": "nvarchar"
					},
					{
						"name": "version",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "tncKey",
						"type": "varchar"
					},
					{
						"name": "tncld",
						"type": "varchar"
					},
					{
						"name": "tncRecordingOff",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsTermsAndConditionAccepted"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsUserDefinedLabels')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "label",
						"type": "varchar"
					},
					{
						"name": "sequence",
						"type": "nvarchar"
					},
					{
						"name": "value",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsUserDefinedLabels"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsVoipCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "nvarchar"
					},
					{
						"name": "losgSequence",
						"type": "nvarchar"
					},
					{
						"name": "reservedTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "e911Id",
						"type": "nvarchar"
					},
					{
						"name": "e911HomeAlarmSystem",
						"type": "nvarchar"
					},
					{
						"name": "e911NoMatchFound",
						"type": "nvarchar"
					},
					{
						"name": "e911Adress",
						"type": "nvarchar"
					},
					{
						"name": "e911TermsAndConditionId",
						"type": "varchar"
					},
					{
						"name": "e911TnCAccepted",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCCategory",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCAgreementText",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCAgreementType",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCAgreementURL",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCTimestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "e911TnCVersion",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCDocumentName",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCOrderLevelIndicator",
						"type": "nvarchar"
					},
					{
						"name": "e911TncId",
						"type": "nvarchar"
					},
					{
						"name": "e911TncKey",
						"type": "nvarchar"
					},
					{
						"name": "e911TnCRecordingOff",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "V101",
					"table": "oceOrderLosgsVoipCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsVoipCharacteristicsDirListing')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerordernumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "nvarchar"
					},
					{
						"name": "losgSequence",
						"type": "nvarchar"
					},
					{
						"name": "dirListingName",
						"type": "nvarchar"
					},
					{
						"name": "dirListingAdditionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "dirListingDesignation",
						"type": "nvarchar"
					},
					{
						"name": "dirListingAddress",
						"type": "nvarchar"
					},
					{
						"name": "dirListingListingType",
						"type": "nvarchar"
					},
					{
						"name": "dirListingListingCategory",
						"type": "nvarchar"
					},
					{
						"name": "dirListingListBy",
						"type": "nvarchar"
					},
					{
						"name": "releaseDetailForBillingIndicator",
						"type": "nvarchar"
					},
					{
						"name": "dirListingOmitAddressIndicator",
						"type": "nvarchar"
					},
					{
						"name": "dirListingParentComponentCode",
						"type": "nvarchar"
					},
					{
						"name": "dirListingTitle2",
						"type": "nvarchar"
					},
					{
						"name": "dirListingSubscriberName",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsVoipCharacteristicsDirListing"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsWirelessCharUpgradeQual')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "approvalNumber",
						"type": "nvarchar"
					},
					{
						"name": "contractExtended",
						"type": "nvarchar"
					},
					{
						"name": "deviceType",
						"type": "nvarchar"
					},
					{
						"name": "discountUOM",
						"type": "nvarchar"
					},
					{
						"name": "maximumMRC",
						"type": "int",
						"precision": 10
					},
					{
						"name": "minimumCommitment",
						"type": "nvarchar"
					},
					{
						"name": "minimumMRC",
						"type": "int",
						"precision": 10
					},
					{
						"name": "newAEUCheckerIndicator",
						"type": "nvarchar"
					},
					{
						"name": "offerCategory",
						"type": "nvarchar"
					},
					{
						"name": "policyCategory",
						"type": "nvarchar"
					},
					{
						"name": "priceList",
						"type": "nvarchar"
					},
					{
						"name": "qualificationLevel",
						"type": "nvarchar"
					},
					{
						"name": "qualificationMessage",
						"type": "nvarchar"
					},
					{
						"name": "qualificationType",
						"type": "nvarchar"
					},
					{
						"name": "upgradeEligibilityDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "upgradeFeeWaivedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsWirelessCharUpgradeQual"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsWirelessCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "accountConversionStatus",
						"type": "nvarchar"
					},
					{
						"name": "activationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "availabilityDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "billingSystemId",
						"type": "nvarchar"
					},
					{
						"name": "calculateTaxIndicator",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataAddendDateAndTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "coPayDataAddendVersion",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataAllowanceAmount",
						"type": "float",
						"precision": 15
					},
					{
						"name": "coPayDataCancelCTN",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataEnrollingCTN",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataReceivingBAN",
						"type": "nvarchar"
					},
					{
						"name": "coPayDataReceivingFAN",
						"type": "nvarchar"
					},
					{
						"name": "cCarDetailMake",
						"type": "varchar"
					},
					{
						"name": "cCarDetailModel",
						"type": "varchar"
					},
					{
						"name": "cCarDetailTrim",
						"type": "varchar"
					},
					{
						"name": "cCarDetailVehicleManufacturer",
						"type": "varchar"
					},
					{
						"name": "cCarVin",
						"type": "varchar"
					},
					{
						"name": "cCarYear",
						"type": "varchar"
					},
					{
						"name": "crossUpgradeIndicator",
						"type": "nvarchar"
					},
					{
						"name": "curbsideDelivery",
						"type": "nvarchar"
					},
					{
						"name": "inventoryStoreId",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListaction",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListCompAListName",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListcompCTNList",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListcontactCTN",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListId",
						"type": "nvarchar"
					},
					{
						"name": "manageCallListOverrideInd",
						"type": "nvarchar"
					},
					{
						"name": "mobileNumber",
						"type": "nvarchar"
					},
					{
						"name": "paymentId",
						"type": "nvarchar"
					},
					{
						"name": "preOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "primarySharedPlanIndicator",
						"type": "nvarchar"
					},
					{
						"name": "shippedHotIndicator",
						"type": "nvarchar"
					},
					{
						"name": "shoppingZipCode",
						"type": "varchar"
					},
					{
						"name": "splitLiabilityDataAddendDateAndTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "splitLiabilityDataAddendVersion",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataCancelCTN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataEnrollingCTN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataOneTimeChargeInd",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataValueIndicator",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataTargetBAN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataTargetFAN",
						"type": "nvarchar"
					},
					{
						"name": "splitLiabilityDataTelecomManagerEmail",
						"type": "nvarchar"
					},
					{
						"name": "storeId",
						"type": "nvarchar"
					},
					{
						"name": "subscriberCrossmarketIndicator",
						"type": "nvarchar"
					},
					{
						"name": "subscriptionClass",
						"type": "nvarchar"
					},
					{
						"name": "tradeInQuoteId",
						"type": "nvarchar"
					},
					{
						"name": "upgradeDetailRelatedMobNumber",
						"type": "nvarchar"
					},
					{
						"name": "upgradeDetailRelationship",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "networkFulfillmentDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "subscriberNumberStatus",
						"type": "nvarchar"
					},
					{
						"name": "subscriberId",
						"type": "nvarchar"
					},
					{
						"name": "preferredCTNZipCode",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsWirelessCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderLosgsinternetCharacteristics')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "losgId",
						"type": "varchar"
					},
					{
						"name": "losgSequence",
						"type": "varchar"
					},
					{
						"name": "categoryType",
						"type": "nvarchar"
					},
					{
						"name": "discountedInternetIndicator",
						"type": "nvarchar"
					},
					{
						"name": "discountedInternetAdditionalAllowance",
						"type": "nvarchar"
					},
					{
						"name": "gatewayCTN",
						"type": "nvarchar"
					},
					{
						"name": "gatewayCTNStatus",
						"type": "nvarchar"
					},
					{
						"name": "internetProgramType",
						"type": "nvarchar"
					},
					{
						"name": "internetProtocolDigitalSubscriberLineAccess",
						"type": "nvarchar"
					},
					{
						"name": "internetNetworkProvider",
						"type": "nvarchar"
					},
					{
						"name": "parentComponentCode",
						"type": "nvarchar"
					},
					{
						"name": "retainedServiceProcessIndicator",
						"type": "nvarchar"
					},
					{
						"name": "serviceId",
						"type": "nvarchar"
					},
					{
						"name": "serviceType",
						"type": "nvarchar"
					},
					{
						"name": "totalAllowance",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "primaryNetworkType",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderLosgsinternetCharacteristics"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderMiscellaneousDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "code",
						"type": "varchar"
					},
					{
						"name": "value",
						"type": "varchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "parentType",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderMiscellaneousDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderMoveDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "disconnectDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "fromBillingAddress",
						"type": "nvarchar"
					},
					{
						"name": "fromServiceAddress",
						"type": "nvarchar"
					},
					{
						"name": "fullyAuthenticatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "fromTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "modifiedDate",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "eventTime",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderMoveDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderPaymentTenders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "paymentTenderId",
						"type": "varchar"
					},
					{
						"name": "paymentTenderSequence",
						"type": "varchar"
					},
					{
						"name": "accountsReceivableIndicator",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "btmEquipmentType",
						"type": "nvarchar"
					},
					{
						"name": "btmSubscriberNumber",
						"type": "nvarchar"
					},
					{
						"name": "btmTotalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "btnCustomerCode",
						"type": "nvarchar"
					},
					{
						"name": "btnPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "btnTn",
						"type": "nvarchar"
					},
					{
						"name": "collectedInOtherSystem",
						"type": "nvarchar"
					},
					{
						"name": "cashPaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "cashPaymentToken",
						"type": "nvarchar"
					},
					{
						"name": "depositOption",
						"type": "nvarchar"
					},
					{
						"name": "fixedAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "lpmCustomerAgreementVersion",
						"type": "nvarchar"
					},
					{
						"name": "lpmLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "lpmPaymentType",
						"type": "nvarchar"
					},
					{
						"name": "lpmPaymentTypeName",
						"type": "nvarchar"
					},
					{
						"name": "lpmReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "lpmTotalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "purchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "paymentTokenOnlyAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "paymentTokenOnlyToken",
						"type": "nvarchar"
					},
					{
						"name": "selectedOptionId",
						"type": "nvarchar"
					},
					{
						"name": "storeLast4Digits",
						"type": "nvarchar"
					},
					{
						"name": "storePaymentAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "storeProfileOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderPaymentTenders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderPaymentTendersEPaymentMethod')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "paymentTenderId",
						"type": "varchar"
					},
					{
						"name": "paymentTenderSequence",
						"type": "varchar"
					},
					{
						"name": "achAccountHolderName",
						"type": "varchar"
					},
					{
						"name": "achAccountType",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerCustomerId",
						"type": "nvarchar"
					},
					{
						"name": "bankingPartnerName",
						"type": "nvarchar"
					},
					{
						"name": "cardCryptogram",
						"type": "nvarchar"
					},
					{
						"name": "ccCardNotValidatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ccCreditCardHolderName",
						"type": "nvarchar"
					},
					{
						"name": "creditCardType",
						"type": "varchar"
					},
					{
						"name": "customerAgreementVersion",
						"type": "nvarchar"
					},
					{
						"name": "giftCardIndicator",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailBatchNumber",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailaymentHandle",
						"type": "nvarchar"
					},
					{
						"name": "paymentConfirmationDetailReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "paymentConfirmationDetailTransactionId",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileAutomationProfileName",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileAutomationProfileOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileName",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileOwnerId",
						"type": "nvarchar"
					},
					{
						"name": "paymentProfileType",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigMerchantId",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigSourceLocation",
						"type": "varchar"
					},
					{
						"name": "paymentTenderConfigSourceSystem",
						"type": "nvarchar"
					},
					{
						"name": "paymentTenderConfigSourceUser",
						"type": "nvarchar"
					},
					{
						"name": "paymentTokenPaymentAmount",
						"type": "nvarchar"
					},
					{
						"name": "paymentTokenPaymentToken",
						"type": "nvarchar"
					},
					{
						"name": "payType",
						"type": "nvarchar"
					},
					{
						"name": "payPalEmailAddress",
						"type": "varchar"
					},
					{
						"name": "payPalPayerId",
						"type": "nvarchar"
					},
					{
						"name": "payPalPaymentMethodId",
						"type": "varchar"
					},
					{
						"name": "payPalToken",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAddressVerificationSystemCode",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAuthorizationCode",
						"type": "nvarchar"
					},
					{
						"name": "preAuthAuthorizationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "preAuthAuthorizationExpirationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "preAuthAuthorizationKey",
						"type": "varchar"
					},
					{
						"name": "profileAction",
						"type": "nvarchar"
					},
					{
						"name": "token",
						"type": "nvarchar"
					},
					{
						"name": "totalAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "verificationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "skipAuthorization",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "paymentMethodId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderPaymentTendersEPaymentMethod"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderReferenceDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "associatedRequestID",
						"type": "nvarchar"
					},
					{
						"name": "bulkIndicator",
						"type": "nvarchar"
					},
					{
						"name": "bulkOrderWorkRequestNumber",
						"type": "nvarchar"
					},
					{
						"name": "chatId",
						"type": "nvarchar"
					},
					{
						"name": "commonOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "encryptedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "fraudDetectionAdditionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "authenticationRequestId",
						"type": "nvarchar"
					},
					{
						"name": "orderFraudCheckStatus",
						"type": "nvarchar"
					},
					{
						"name": "orderModifiedAfterPinValidation",
						"type": "nvarchar"
					},
					{
						"name": "pinValidationSource",
						"type": "nvarchar"
					},
					{
						"name": "pinValidationStatus",
						"type": "nvarchar"
					},
					{
						"name": "proofOfIdentityUrl",
						"type": "nvarchar"
					},
					{
						"name": "smsCTN",
						"type": "nvarchar"
					},
					{
						"name": "validationType",
						"type": "nvarchar"
					},
					{
						"name": "efcCallIndicator",
						"type": "nvarchar"
					},
					{
						"name": "orderStatusUrl",
						"type": "nvarchar"
					},
					{
						"name": "parentOrderId",
						"type": "nvarchar"
					},
					{
						"name": "partialOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "passThroughIndicator",
						"type": "nvarchar"
					},
					{
						"name": "posReferenceId",
						"type": "nvarchar"
					},
					{
						"name": "posUUID",
						"type": "nvarchar"
					},
					{
						"name": "productCombinationCode",
						"type": "nvarchar"
					},
					{
						"name": "referenceOrderId",
						"type": "nvarchar"
					},
					{
						"name": "resubmitOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "summaryCreatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "testOrderIndicator",
						"type": "nvarchar"
					},
					{
						"name": "eventhub_adx_ingest_time",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderReferenceDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderReferenceDetailFalloutDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "code",
						"type": "varchar"
					},
					{
						"name": "dateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "Operation",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderReferenceDetailFalloutDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderRelatedParty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "relatedPartyId",
						"type": "varchar"
					},
					{
						"name": "role",
						"type": "nvarchar"
					},
					{
						"name": "type",
						"type": "nvarchar"
					},
					{
						"name": "name",
						"type": "nvarchar"
					},
					{
						"name": "startDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "endDateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderRelatedParty"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderSalesAgent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "agentCode",
						"type": "nvarchar"
					},
					{
						"name": "location",
						"type": "nvarchar"
					},
					{
						"name": "salesCode",
						"type": "nvarchar"
					},
					{
						"name": "uid",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderSalesAgent"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderSchedulingDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "schedulingId",
						"type": "varchar"
					},
					{
						"name": "actualScheduleEndTime",
						"type": "nvarchar"
					},
					{
						"name": "actualScheduleSelectedAppointmentDate",
						"type": "date"
					},
					{
						"name": "actualScheduleSelectedAppointmentTime",
						"type": "nvarchar"
					},
					{
						"name": "actualScheduleStartTime",
						"type": "nvarchar"
					},
					{
						"name": "actualScheduleWorkOrderId",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "appointmentComment",
						"type": "nvarchar"
					},
					{
						"name": "bestTimeToReach",
						"type": "nvarchar"
					},
					{
						"name": "billingInstallmentsIndicator",
						"type": "nvarchar"
					},
					{
						"name": "businessName",
						"type": "nvarchar"
					},
					{
						"name": "confirmedScheduleEndTime",
						"type": "nvarchar"
					},
					{
						"name": "confirmedScheduleSelectedAppointmentDate",
						"type": "date"
					},
					{
						"name": "confirmedScheduleSelectedAppointmentTime",
						"type": "nvarchar"
					},
					{
						"name": "confirmedScheduleStartTime",
						"type": "nvarchar"
					},
					{
						"name": "confirmedScheduleWorkOrderId",
						"type": "nvarchar"
					},
					{
						"name": "connecTechInstallationOptions",
						"type": "nvarchar"
					},
					{
						"name": "dispatchType",
						"type": "nvarchar"
					},
					{
						"name": "deferredInstallationDuration",
						"type": "nvarchar"
					},
					{
						"name": "eventCode",
						"type": "nvarchar"
					},
					{
						"name": "eventCodeEnteredManuallyIndicator",
						"type": "nvarchar"
					},
					{
						"name": "installationPartnerName",
						"type": "nvarchar"
					},
					{
						"name": "installationPartnerPurchaseOrderAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "installationPartnerPurchaseOrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "installationPartnerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "installationPartnerProjectBilling",
						"type": "nvarchar"
					},
					{
						"name": "installType",
						"type": "nvarchar"
					},
					{
						"name": "landlordName",
						"type": "nvarchar"
					},
					{
						"name": "landlordPermission",
						"type": "nvarchar"
					},
					{
						"name": "landlordPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "nfflFulfillerName",
						"type": "nvarchar"
					},
					{
						"name": "nfflFulfillerTN",
						"type": "nvarchar"
					},
					{
						"name": "nfflFlag",
						"type": "nvarchar"
					},
					{
						"name": "preference",
						"type": "nvarchar"
					},
					{
						"name": "realTimeCalendarIndicator",
						"type": "nvarchar"
					},
					{
						"name": "reservationId",
						"type": "nvarchar"
					},
					{
						"name": "scheduleType",
						"type": "nvarchar"
					},
					{
						"name": "scheduleASAPIndicator",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeAnyDay",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeMonday",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeTuesday",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeWednesday",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeThursday",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeFriday",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeSaturday",
						"type": "nvarchar"
					},
					{
						"name": "scheduleByDayAndTimeSunday",
						"type": "nvarchar"
					},
					{
						"name": "serviceLevel",
						"type": "nvarchar"
					},
					{
						"name": "timeZone",
						"type": "nvarchar"
					},
					{
						"name": "valueSegmentationTier",
						"type": "nvarchar"
					},
					{
						"name": "additionalContactPhones",
						"type": "nvarchar"
					},
					{
						"name": "emailAddress",
						"type": "nvarchar"
					},
					{
						"name": "firstName",
						"type": "nvarchar"
					},
					{
						"name": "nameId",
						"type": "nvarchar"
					},
					{
						"name": "lastName",
						"type": "nvarchar"
					},
					{
						"name": "legalFirstName",
						"type": "nvarchar"
					},
					{
						"name": "legalLastName",
						"type": "nvarchar"
					},
					{
						"name": "middleInitial",
						"type": "nvarchar"
					},
					{
						"name": "preferredContactMethod",
						"type": "nvarchar"
					},
					{
						"name": "prefix",
						"type": "nvarchar"
					},
					{
						"name": "previousLegalLastName",
						"type": "nvarchar"
					},
					{
						"name": "suffix",
						"type": "nvarchar"
					},
					{
						"name": "title",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactextension",
						"type": "nvarchar"
					},
					{
						"name": "primaryContactPhoneType",
						"type": "nvarchar"
					},
					{
						"name": "primarycontactPhoneConsentDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderSchedulingDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderShippingDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "shippingId",
						"type": "varchar"
					},
					{
						"name": "shippingSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "additiondetails",
						"type": "nvarchar"
					},
					{
						"name": "billingCode",
						"type": "nvarchar"
					},
					{
						"name": "carrierPreference",
						"type": "nvarchar"
					},
					{
						"name": "additionalContactPhones",
						"type": "nvarchar"
					},
					{
						"name": "recipientAdditionalContactPhones",
						"type": "nvarchar"
					},
					{
						"name": "recipientEmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "recipientFirstName",
						"type": "nvarchar"
					},
					{
						"name": "recipientNameId",
						"type": "nvarchar"
					},
					{
						"name": "recipientLastName",
						"type": "nvarchar"
					},
					{
						"name": "recipientLegalFirstName",
						"type": "nvarchar"
					},
					{
						"name": "recipientLegalLastName",
						"type": "nvarchar"
					},
					{
						"name": "recipientMiddleInitial",
						"type": "nvarchar"
					},
					{
						"name": "recipientPreferredContactMethod",
						"type": "nvarchar"
					},
					{
						"name": "recipientNamePrefix",
						"type": "nvarchar"
					},
					{
						"name": "recipientPreviousLegalLastName",
						"type": "nvarchar"
					},
					{
						"name": "recipientNameSuffix",
						"type": "nvarchar"
					},
					{
						"name": "recipientNameTitle",
						"type": "nvarchar"
					},
					{
						"name": "recipientPrimaryContactPhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "recipientPrimaryContactextension",
						"type": "nvarchar"
					},
					{
						"name": "recipientPrimaryContactPhoneType",
						"type": "nvarchar"
					},
					{
						"name": "recipientPrimaryContactPhoneConsentDetails",
						"type": "nvarchar"
					},
					{
						"name": "shipmentCommitDateFromDate",
						"type": "nvarchar"
					},
					{
						"name": "shipmentCommitDateToDate",
						"type": "nvarchar"
					},
					{
						"name": "shippingCode",
						"type": "nvarchar"
					},
					{
						"name": "shippingMethod",
						"type": "nvarchar"
					},
					{
						"name": "shippingPriceCode",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "signatureRequiredIndicator",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderShippingDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderShippingDetailsAddr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "shippingId",
						"type": "varchar"
					},
					{
						"name": "shippingSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "id",
						"type": "varchar"
					},
					{
						"name": "placeId",
						"type": "nvarchar"
					},
					{
						"name": "addressId",
						"type": "nvarchar"
					},
					{
						"name": "connectedCommunityId",
						"type": "nvarchar"
					},
					{
						"name": "dwellingType",
						"type": "nvarchar"
					},
					{
						"name": "validatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine4",
						"type": "nvarchar"
					},
					{
						"name": "auxiliaryAddressLine5",
						"type": "nvarchar"
					},
					{
						"name": "codingAccuracySupportSystemAddress",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddInstructions",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressChanged",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressMatchCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressStreetLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAddressType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnit",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrApartmentUnitNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAssignedStreetNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrBuildingType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrclli8",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrCountyCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirection",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDirectionPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrDisconnectDate",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExchangeCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrExhaustCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberPrefix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrHouseNumberSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrIncorporatedIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastDisconnectedTransportType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLastNetworkAccessDeviceType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLegalEntity",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevel",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLevelNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrLinkKey",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrPrimaryNPANXX",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateCenterCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZoneBanCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRsagValidationIndicator",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteBoxNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRuralRouteCenterNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSecondaryAddressLine",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteAddressId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSiteId",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrSmartMoves",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetName",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetNameSuffix",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStreetType",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrStructureNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTarCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrTelephoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrVideoHubOffice",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrZipGeoCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddressLine3",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrAttention",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCity",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCountry",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrCounty",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrElevation",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrInternationalZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrPostOfficeBox",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrProvince",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrRuralRoute",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrState",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrStructure",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUnit",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrUrbanizationCode",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZip",
						"type": "nvarchar"
					},
					{
						"name": "unparsedAddrZipCodeExtension",
						"type": "nvarchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "parsedAddrTimeZone",
						"type": "nvarchar"
					},
					{
						"name": "parsedAddrRateZone",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderShippingDetailsAddr"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderShippingDetailsPrice')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "shippingId",
						"type": "varchar"
					},
					{
						"name": "shippingSequence",
						"type": "int",
						"precision": 10
					},
					{
						"name": "priceType",
						"type": "varchar"
					},
					{
						"name": "additionalDetails",
						"type": "nvarchar"
					},
					{
						"name": "amount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "baseAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "creditFeeType",
						"type": "nvarchar"
					},
					{
						"name": "currencyType",
						"type": "nvarchar"
					},
					{
						"name": "installmentEligibility",
						"type": "nvarchar"
					},
					{
						"name": "msrp",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "taxDetail",
						"type": "nvarchar"
					},
					{
						"name": "total",
						"type": "decimal",
						"precision": 20,
						"scale": 2
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderShippingDetailsPrice"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderSingleDispatchDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "eligibleIndicator",
						"type": "nvarchar"
					},
					{
						"name": "geoAreaAvailableIndicator",
						"type": "nvarchar"
					},
					{
						"name": "satelliteTVOnlyEligibleIndicator",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderSingleDispatchDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderStatusDetailFallout')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "code",
						"type": "varchar"
					},
					{
						"name": "dateTime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "description",
						"type": "nvarchar"
					},
					{
						"name": "operation",
						"type": "nvarchar"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderStatusDetailFallout"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_oceOrderTasks')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerOrderNumber",
						"type": "varchar"
					},
					{
						"name": "taskId",
						"type": "varchar"
					},
					{
						"name": "applicationName",
						"type": "nvarchar"
					},
					{
						"name": "camundaTaskId",
						"type": "nvarchar"
					},
					{
						"name": "channel",
						"type": "nvarchar"
					},
					{
						"name": "creationDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "losgIds",
						"type": "varchar"
					},
					{
						"name": "orderNumber",
						"type": "nvarchar"
					},
					{
						"name": "partnerName",
						"type": "nvarchar"
					},
					{
						"name": "programName",
						"type": "nvarchar"
					},
					{
						"name": "queueId",
						"type": "nvarchar"
					},
					{
						"name": "queueName",
						"type": "nvarchar"
					},
					{
						"name": "queuesladetails",
						"type": "varchar"
					},
					{
						"name": "taskStatus",
						"type": "nvarchar"
					},
					{
						"name": "eventHubAdxIngestTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "modifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "eventTime",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "oceOrderTasks"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OCEAzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "V101_Master"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "row_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "watermark_value",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "lastmodifieddate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "v101",
					"table": "watermark"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OCEAzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('AzureBlobStorage2_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVaultDataFactory')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVaultDataFactory_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCPM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('CCPM_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('CCPM_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultDataFactory",
							"type": "LinkedServiceReference"
						},
						"secretName": "ccmp-sftp-ssh-key"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('CCPM_passPhrase')]"
					}
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ISSAC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('ISSAC_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('ISSAC_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultDataFactory",
							"type": "LinkedServiceReference"
						},
						"secretName": "isaac-sftp-ssh-key"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('ISSAC_passPhrase')]"
					}
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LOGIN')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('LOGIN_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "SshPublicKey",
					"userName": "[parameters('LOGIN_properties_typeProperties_userName')]",
					"privateKeyContent": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultDataFactory",
							"type": "LinkedServiceReference"
						},
						"secretName": "login-sftp-ssh-key"
					},
					"passPhrase": {
						"type": "SecureString",
						"value": "[parameters('LOGIN_passPhrase')]"
					}
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OCEAzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OCEAzureSqlDatabase_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultDataFactory",
							"type": "LinkedServiceReference"
						},
						"secretName": "ocereporting-sql-db-pass"
					}
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OCEAzureSqlKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OCEAzureSqlKeyVault_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVaultDataFactory",
							"type": "LinkedServiceReference"
						},
						"secretName": "ocereporting-sql-db-pass"
					}
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVaultDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OCE_Adx_Adf_PE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataExplorer",
				"typeProperties": {
					"endpoint": "[parameters('OCE_Adx_Adf_PE_properties_typeProperties_endpoint')]",
					"database": "[parameters('OCE_Adx_Adf_PE_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OCE_AuditLog_Adx_Adf_PE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDataExplorer",
				"typeProperties": {
					"endpoint": "[parameters('OCE_AuditLog_Adx_Adf_PE_properties_typeProperties_endpoint')]",
					"database": "[parameters('OCE_AuditLog_Adx_Adf_PE_properties_typeProperties_database')]"
				},
				"connectVia": {
					"referenceName": "Prod-New-23488",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Prod-New-23488')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlock_Hisotory_Load_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_autounlock_history_load",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-11-12T10:00:00Z",
					"endTime": "2024-11-13T10:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:15:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_autounlock_history_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlock_TW')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "AutoUnlock",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 30,
					"startTime": "2024-06-18T22:09:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:30:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/AutoUnlock')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCPM_Feed_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_CCPM",
							"type": "PipelineReference"
						},
						"parameters": {
							"feed": "[parameters('CCPM_Feed_Trigger_properties_pl_CCPM_parameters_feed')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-07-12T03:43:00",
						"timeZone": "Central America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_CCPM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ICONIC_Lean_TW')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "Iconic_Lean_Pipeline",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-08-29T05:50:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:05:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Iconic_Lean_Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ISAAC_Feed_Tumbling_Window')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_ISAAC",
						"type": "PipelineReference"
					},
					"parameters": {
						"feed": "[parameters('ISAAC_Feed_Tumbling_Window_properties_pipeline_parameters_feed')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2023-07-13T20:22:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 3,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0:00:15:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ISAAC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mylogin_Event_Process_Schedule_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_user_events_load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-11-01T21:00:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_user_events_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Mylogin_Feed_Schedule_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_usermgmt_feed",
							"type": "PipelineReference"
						},
						"parameters": {
							"sinkMyLoginLocation": "[parameters('Mylogin_Feed_Schedule_Trigger_properties_pl_usermgmt_feed_parameters_sinkMyLoginLocation')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-01-08T22:00:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_usermgmt_feed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OCE_Jobs_Schedule_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_oce_job_audit_events",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-06-12T20:44:00",
						"timeZone": "Central Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								22
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_oce_job_audit_events')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OpsMs_TW_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_operationalms_load",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2023-08-30T14:42:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0:00:05:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_operationalms_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderGraph_Event_Schedule_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ordergraph_events_load",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 3,
						"startTime": "2024-01-13T00:23:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ordergraph_events_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipleline_Completion_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_oce_reporting",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/event-based-trigger-space/blobs/PL_starter_file",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Pipleline_Completion_Trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_oce_reporting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Schedule_Trigger_TMF')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "TMF_PROD-PIP",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2025-03-21T19:52:00",
						"timeZone": "Central America Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								8,
								10,
								13,
								16
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TMF_PROD-PIP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Schedule_Trigger_v101')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "V101_PROD-PIP",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2025-03-21T19:50:00",
						"timeZone": "Central America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8,
								10,
								12,
								14,
								16
							],
							"weekDays": [
								"Monday",
								"Wednesday",
								"Tuesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/V101_PROD-PIP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SignatureMS')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SignatureMS",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2024-01-10T15:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SignatureMS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_OpsMS')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "oceOperatoinalReporting_TMF",
						"type": "PipelineReference"
					},
					"parameters": {
						"schema": "[parameters('TMF_OpsMS_properties_pipeline_parameters_schema')]",
						"tablename": "[parameters('TMF_OpsMS_properties_pipeline_parameters_tablename')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 45,
					"startTime": "2023-11-01T12:37:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:45:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/oceOperatoinalReporting_TMF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_TM_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "TMF_PROD-PIP",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2025-01-13T03:48:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:15:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TMF_PROD-PIP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VOCA_Feed_Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_VOCA",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2023-06-30T02:50:00",
						"timeZone": "Central America Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_VOCA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101-historyload-commonorder')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_v101_history_load_encryption",
							"type": "PipelineReference"
						},
						"parameters": {
							"ds_keyspace": "[parameters('v101-historyload-commonorder_properties_pl_v101_history_load_encryption_parameters_ds_keyspace')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-01-15T12:00:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_v101_history_load_encryption')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101-historyload-orderrepo')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_v101_history_load_encryption",
							"type": "PipelineReference"
						},
						"parameters": {
							"ds_keyspace": "[parameters('v101-historyload-orderrepo_properties_pl_v101_history_load_encryption_parameters_ds_keyspace')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 4,
						"startTime": "2025-01-15T12:00:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_v101_history_load_encryption')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101-historyload-transactionlosg-email')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_v101_history_load_encryption",
							"type": "PipelineReference"
						},
						"parameters": {
							"ds_keyspace": "[parameters('v101-historyload-transactionlosg-email_properties_pl_v101_history_load_encryption_parameters_ds_keyspace')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-01-29T16:59:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_v101_history_load_encryption')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101-historyload-transactionlosg')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_v101_history_load_encryption",
							"type": "PipelineReference"
						},
						"parameters": {
							"ds_keyspace": "[parameters('v101-historyload-transactionlosg_properties_pl_v101_history_load_encryption_parameters_ds_keyspace')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2025-01-28T16:58:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_v101_history_load_encryption')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_OpsMS')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "oceOperatoinalReporting",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 45,
					"startTime": "2023-11-01T12:40:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:45:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/oceOperatoinalReporting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/v101_trigger-10min')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "V101_PROD-PIP",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 10,
					"startTime": "2023-09-06T12:15:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"count": 5,
						"intervalInSeconds": 30
					},
					"dependsOn": [
						{
							"type": "SelfDependencyTumblingWindowTriggerReference",
							"offset": "-0.00:10:00"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/V101_PROD-PIP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prod-New-23488')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US 2",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 16,
							"timeToLive": 0,
							"cleanup": false,
							"customProperties": [
								{
									"name": "Shuffle partitions",
									"value": "20"
								}
							]
						},
						"copyComputeScaleProperties": {
							"dataIntegrationUnit": 16,
							"timeToLive": 5
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 5,
							"numberOfPipelineNodes": 2,
							"numberOfExternalNodes": 2
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US 2",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": false,
							"customProperties": []
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integration-RunTime-iconic')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US 2",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 32,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": [
								{
									"name": "Shuffle partitions",
									"value": "20"
								}
							]
						},
						"copyComputeScaleProperties": {
							"dataIntegrationUnit": 64,
							"timeToLive": 10
						},
						"pipelineExternalComputeScaleProperties": {
							"timeToLive": 60,
							"numberOfPipelineNodes": 1,
							"numberOfExternalNodes": 1
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ACF_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_acf_staging",
								"type": "DatasetReference"
							},
							"name": "TempOrderData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ACF_ACFOrderData",
								"type": "DatasetReference"
							},
							"name": "ACFOrderData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_acf_OrderDataHistory",
								"type": "DatasetReference"
							},
							"name": "ACFOrderDataHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_acf_ACFDownStreamSystemStatus",
								"type": "DatasetReference"
							},
							"name": "ACFDownStreamSystemStatus",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_acf_DownStreamSystemStatusHistory",
								"type": "DatasetReference"
							},
							"name": "ACFDownStreamSystemStatusHistor",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "parseACFJson"
						},
						{
							"name": "selectACF"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumnEventTime"
						},
						{
							"name": "windowLatestEvent"
						},
						{
							"name": "filterLatestEvent"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "windowForLatestEventHistory"
						},
						{
							"name": "filterLatestCombination"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "flattendownstreamSystemStatus"
						},
						{
							"name": "derivedColumndownstreamSystemStatus"
						},
						{
							"name": "windowACFDownStreamSystemStatus"
						},
						{
							"name": "filterACFDownStreamSystemStatus"
						},
						{
							"name": "alterRowACFDownStreamSystemStatus"
						},
						{
							"name": "windowACFDownStreamSystemStatusHistory"
						},
						{
							"name": "filterACFDownStreamSystemStatusHistory"
						},
						{
							"name": "alterRowACFDownStreamSystemStatusHistory"
						}
					],
					"scriptLines": [
						"source(output(",
						"          acfJson as string,",
						"          ingestionTime as timestamp,",
						"          eventId as string,",
						"          eventTime as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TempOrderData",
						"TempOrderData parse(acfJson = acfJson ? (orderEvent as (eventSource as string,",
						"          eventType as string,",
						"          source as string,",
						"          eventId as string,",
						"          eventTime as string,",
						"          data as (migrationRequest as (migration_id as string,",
						"          service_type as string,",
						"          source_ban_id as string,",
						"          source_market_code as string,",
						"          target_ba_id as string,",
						"          source_cycle_id as string,",
						"          target_customer_id as string,",
						"          target_individual_id as string,",
						"          target_cycle_id as string,",
						"          guid as string,",
						"          status as string,",
						"          sub_status as string,",
						"          op_ts as string,",
						"          clmSent as string,",
						"          event_status as string,",
						"          validation_message as string,",
						"          validation_failure_reason as string,",
						"          lastUpdateTime as string,",
						"          downstreamSystemStatus as ( ",
						"                                     systemName as string,",
						"                                     status as string,",
						"                                     lastUpdateTime as string,",
						"                                     errorMessage as string,",
						"                                     retryCount as string",
						"                                     )[])))),",
						"     format: 'json',",
						"     documentForm: 'arrayOfDocuments') ~> parseACFJson",
						"parseACFJson select(mapColumn(",
						"          acfJson,",
						"          ingestionTime,",
						"          eventId,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectACF",
						"selectACF select(mapColumn(",
						"          eventSource = acfJson.orderEvent.eventSource,",
						"          eventType = acfJson.orderEvent.eventType,",
						"          source = acfJson.orderEvent.source,",
						"          eventTime,",
						"          eventId = acfJson.orderEvent.eventId,",
						"          migration_id = acfJson.orderEvent.data.migrationRequest.migration_id,",
						"          service_type = acfJson.orderEvent.data.migrationRequest.service_type,",
						"          source_ban_id = acfJson.orderEvent.data.migrationRequest.source_ban_id,",
						"          source_market_code = acfJson.orderEvent.data.migrationRequest.source_market_code,",
						"          target_ba_id = acfJson.orderEvent.data.migrationRequest.target_ba_id,",
						"          source_cycle_id = acfJson.orderEvent.data.migrationRequest.source_cycle_id,",
						"          target_customer_id = acfJson.orderEvent.data.migrationRequest.target_customer_id,",
						"          target_individual_id = acfJson.orderEvent.data.migrationRequest.target_individual_id,",
						"          target_cycle_id = acfJson.orderEvent.data.migrationRequest.target_cycle_id,",
						"          guid = acfJson.orderEvent.data.migrationRequest.guid,",
						"          status = acfJson.orderEvent.data.migrationRequest.status,",
						"          sub_status = acfJson.orderEvent.data.migrationRequest.sub_status,",
						"          op_ts = acfJson.orderEvent.data.migrationRequest.op_ts,",
						"          event_status = acfJson.orderEvent.data.migrationRequest.event_status,",
						"          validation_message = acfJson.orderEvent.data.migrationRequest.validation_message,",
						"          validation_failure_reason = acfJson.orderEvent.data.migrationRequest.validation_failure_reason,",
						"          lastUpdateTime = acfJson.orderEvent.data.migrationRequest.lastUpdateTime,",
						"          ingestionTime,",
						"          clmSent = acfJson.orderEvent.data.migrationRequest.clmSent,",
						"          eventTimeInt = acfJson.orderEvent.eventTime,",
						"          downstreamSystemStatus = acfJson.orderEvent.data.migrationRequest.downstreamSystemStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(eventTime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          lastUpdateTimeConverted = toTimestamp(substring(lastUpdateTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          op_ts = toTimestamp(substring(op_ts,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')) ~> derivedColumnEventTime",
						"derivedColumnEventTime window(over(eventid = eventId),",
						"     desc(eventTime, true),",
						"     prank = rowNumber()) ~> windowLatestEvent",
						"windowLatestEvent filter(prank==1) ~> filterLatestEvent",
						"filterLatestEvent alterRow(upsertIf(true())) ~> alterRow1",
						"derivedColumnEventTime window(over(eventId,",
						"          eventTimeInt),",
						"     desc(eventTime, true),",
						"     prank = rowNumber()) ~> windowForLatestEventHistory",
						"windowForLatestEventHistory filter(prank==1) ~> filterLatestCombination",
						"filterLatestCombination alterRow(upsertIf(true())) ~> alterRow2",
						"derivedColumnEventTime foldDown(unroll(downstreamSystemStatus, downstreamSystemStatus),",
						"     mapColumn(",
						"          eventTime,",
						"          eventId,",
						"          ingestionTime,",
						"          eventTimeInt,",
						"          systemName = downstreamSystemStatus.systemName,",
						"          status = downstreamSystemStatus.status,",
						"          lastUpdateTime = downstreamSystemStatus.lastUpdateTime,",
						"          errorMessage = downstreamSystemStatus.errorMessage,",
						"          retryCount = downstreamSystemStatus.retryCount",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattendownstreamSystemStatus",
						"flattendownstreamSystemStatus derive(lastUpdateTime = toTimestamp(substring(lastUpdateTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')) ~> derivedColumndownstreamSystemStatus",
						"derivedColumndownstreamSystemStatus window(over(eventId,",
						"          systemName),",
						"     desc(eventTime, true),",
						"     prank = rowNumber()) ~> windowACFDownStreamSystemStatus",
						"windowACFDownStreamSystemStatus filter(prank==1) ~> filterACFDownStreamSystemStatus",
						"filterACFDownStreamSystemStatus alterRow(upsertIf(true())) ~> alterRowACFDownStreamSystemStatus",
						"derivedColumndownstreamSystemStatus window(over(eventId,",
						"          eventTimeInt,",
						"          systemName),",
						"     desc(eventTime, true),",
						"     prank = rowNumber()) ~> windowACFDownStreamSystemStatusHistory",
						"windowACFDownStreamSystemStatusHistory filter(prank==1) ~> filterACFDownStreamSystemStatusHistory",
						"filterACFDownStreamSystemStatusHistory alterRow(upsertIf(true())) ~> alterRowACFDownStreamSystemStatusHistory",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          eventId as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          source as string,",
						"          eventTimeInt as string,",
						"          eventTime as timestamp,",
						"          migrationId as string,",
						"          serviceType as string,",
						"          sourceBanId as string,",
						"          sourceMarketCode as string,",
						"          targetBaId as string,",
						"          sourceCycleId as string,",
						"          targetCustomerId as string,",
						"          targetIndividualId as string,",
						"          guid as string,",
						"          status as string,",
						"          subStatus as string,",
						"          opTs as timestamp,",
						"          eventStatus as string,",
						"          validationMessage as string,",
						"          validationFailureReason as string,",
						"          lastUpdateTime as timestamp,",
						"          insertedDate as timestamp,",
						"          clmSent as string",
						"     ),",
						"     stagingSchemaName: 'oce',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['eventId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'acf_ACFOrderData',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          eventId,",
						"          eventSource,",
						"          eventType,",
						"          source,",
						"          eventTimeInt,",
						"          eventTime,",
						"          migrationId = migration_id,",
						"          serviceType = service_type,",
						"          sourceBanId = source_ban_id,",
						"          sourceMarketCode = source_market_code,",
						"          targetBaId = target_ba_id,",
						"          sourceCycleId = source_cycle_id,",
						"          targetCustomerId = target_customer_id,",
						"          targetIndividualId = target_individual_id,",
						"          guid,",
						"          status,",
						"          subStatus = sub_status,",
						"          opTs = op_ts,",
						"          eventStatus = event_status,",
						"          validationMessage = validation_message,",
						"          validationFailureReason = validation_failure_reason,",
						"          clmSent,",
						"          lastUpdateTime = lastUpdateTimeConverted",
						"     )) ~> ACFOrderData",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          eventId as string,",
						"          eventTimeInt as string,",
						"          eventTime as timestamp,",
						"          status as string,",
						"          subStatus as string,",
						"          opTs as timestamp,",
						"          eventStatus as string,",
						"          validationMessage as string,",
						"          validationFailureReason as string,",
						"          lastUpdateTime as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'oce',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['eventId','eventTimeInt'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'acf_ACFOrderDataHistory',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          eventId,",
						"          eventTimeInt,",
						"          eventTime,",
						"          status,",
						"          subStatus = sub_status,",
						"          opTs = op_ts,",
						"          eventStatus = event_status,",
						"          validationMessage = validation_message,",
						"          validationFailureReason = validation_failure_reason,",
						"          lastUpdateTime = lastUpdateTimeConverted",
						"     )) ~> ACFOrderDataHistory",
						"alterRowACFDownStreamSystemStatus sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          eventId as string,",
						"          systemName as string,",
						"          status as string,",
						"          ErrorMessage as string,",
						"          retryCount as string,",
						"          eventTimeInt as string,",
						"          eventTime as timestamp,",
						"          lastUpdateTime as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'oce',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['eventId','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'acf_ACFDownStreamSystemStatus',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          eventId,",
						"          systemName,",
						"          status,",
						"          ErrorMessage = errorMessage,",
						"          retryCount,",
						"          eventTimeInt,",
						"          eventTime,",
						"          lastUpdateTime",
						"     )) ~> ACFDownStreamSystemStatus",
						"alterRowACFDownStreamSystemStatusHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          eventId as string,",
						"          systemName as string,",
						"          eventTimeInt as string,",
						"          status as string,",
						"          ErrorMessage as string,",
						"          retryCount as string,",
						"          eventTime as timestamp,",
						"          lastUpdateTime as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'oce',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['eventId','eventTimeInt','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'ACFDownStreamSystemStatusHistory',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          eventId,",
						"          systemName,",
						"          eventTimeInt,",
						"          status,",
						"          ErrorMessage = errorMessage,",
						"          retryCount,",
						"          eventTime,",
						"          lastUpdateTime",
						"     )) ~> ACFDownStreamSystemStatusHistor"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_acf_staging')]",
				"[concat(variables('factoryId'), '/datasets/ds_ACF_ACFOrderData')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/ds_acf_OrderDataHistory')]",
				"[concat(variables('factoryId'), '/datasets/ds_acf_ACFDownStreamSystemStatus')]",
				"[concat(variables('factoryId'), '/datasets/ds_acf_DownStreamSystemStatusHistory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AutoUnlock_DF_Upsert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "autoUnlock_OrderDataStaging",
								"type": "DatasetReference"
							},
							"name": "TempAutoUnlockOrderData",
							"description": "Import data from autoUnlock_OrderDataStaging _ upload"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "autoUnlockOrderData",
								"type": "DatasetReference"
							},
							"name": "AutoUnlockOrderData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "AutoUnlockResponse",
								"type": "DatasetReference"
							},
							"name": "AutoUnlockResponce",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "AutoUnlockDeviceCheckResponse",
								"type": "DatasetReference"
							},
							"name": "AutoUnlockDeviceCheckResponse",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "AutoUnlocksubscirberNumberCheckResponce",
								"type": "DatasetReference"
							},
							"name": "AutoUnlocksubscirberNumberCheckResponce",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "AutoUnlock_SC2",
								"type": "DatasetReference"
							},
							"name": "AUSC2",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "AutoUnlock_DC2",
								"type": "DatasetReference"
							},
							"name": "AUDC",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "parseJson"
						},
						{
							"name": "selectorderData"
						},
						{
							"name": "selectResponse"
						},
						{
							"name": "CovertUnixtimeToDateTime"
						},
						{
							"name": "windowLatestIMEIPayload"
						},
						{
							"name": "filterIMEI"
						},
						{
							"name": "alterRowOrderData"
						},
						{
							"name": "selectIncomingPayload"
						},
						{
							"name": "flattenAutoUnlockDeviceCheckResponse"
						},
						{
							"name": "flattenAutoUnlocksubscirberNumberCheckResponce"
						},
						{
							"name": "flattensim2"
						},
						{
							"name": "flattensim2device"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "alterRow5"
						},
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AutoUnlockJson as string,",
						"          lastmodified_date as timestamp,",
						"          imei as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          source as string,",
						"          eventId as string,",
						"          eventTime as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TempAutoUnlockOrderData",
						"TempAutoUnlockOrderData parse(AutoUnlockJson = AutoUnlockJson ? (orderEvent as (data as (incomingPayload as (market as string,",
						"          accSubType as string,",
						"          subscriber as string,",
						"          subMarket as string,",
						"          accountType as string,",
						"          imei as string,",
						"          issueDateTime as string,",
						"          make as string,",
						"          ban as string,",
						"          productType as string),",
						"          response as (errorMessage as string,",
						"          model as string,",
						"          imeiValidationStatus as string,",
						"          subErrorMessage as string,",
						"          errorDetails as string,",
						"          schemaPath as string,",
						"          timeStamp as string,",
						"          unlockEligibilityStatus as string,",
						"          unlockIneligibilityReason as string,",
						"          deviceUnlocked as string,",
						"          unlockCode as string,",
						"          eligibilityPreapprovedIndicator as string,",
						"          fnCustomerType as string,",
						"          fanAccountType as string,",
						"          deviceType as string,",
						"          responseCode as string,",
						"          responseDescription as string,",
						"          sim2 as (imei as string,",
						"          details as (deviceCheckResponse as (code as string,description as string,subscriberNumber as string)[],",
						"          subscriberNumberCheckResponse as (code as string,description as string,subscriberNumber as string)[])),",
						"          sim1 as (imei as string,",
						"          details as (deviceCheckResponse as (code as string,description as string,subscriberNumber as string)[],",
						"          subscriberNumberCheckResponse as (code as string,description as string,subscriberNumber as string)[]))),",
						"          torchResponse as string,",
						"          tlgCode as string))),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJson",
						"parseJson select(mapColumn(",
						"          OrderData = AutoUnlockJson.orderEvent.data,",
						"          lastmodified_date,",
						"          imei,",
						"          eventSource,",
						"          eventType,",
						"          source,",
						"          eventId,",
						"          eventTime,",
						"          issueDateTime = AutoUnlockJson.orderEvent.data.incomingPayload.issueDateTime,",
						"          timeStamp = AutoUnlockJson.orderEvent.data.response.timeStamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectorderData",
						"CovertUnixtimeToDateTime select(mapColumn(",
						"          imei = OrderData.incomingPayload.imei,",
						"          dc_issueDateTime,",
						"          dc_responseTime,",
						"          unlockIneligibilityReason = OrderData.response.unlockIneligibilityReason,",
						"          unlockCode = OrderData.response.unlockCode,",
						"          eligibilityPreapprovedIndicator = OrderData.response.eligibilityPreapprovedIndicator,",
						"          fnCustomerType = OrderData.response.fnCustomerType,",
						"          fanAccountType = OrderData.response.fanAccountType,",
						"          sim2Imei = OrderData.response.sim2.imei,",
						"          sim1Imei = OrderData.response.sim1.imei,",
						"          issueDateTime = OrderData.incomingPayload.issueDateTime,",
						"          timeStamp = OrderData.response.timeStamp,",
						"          unlockEligibilityStatus = OrderData.response.unlockEligibilityStatus,",
						"          deviceUnlocked = OrderData.response.deviceUnlocked,",
						"          deviceType = OrderData.response.deviceType,",
						"          errorMessage = OrderData.response.errorMessage,",
						"          subErrorMessage = OrderData.response.subErrorMessage,",
						"          errorDetails = OrderData.response.errorDetails,",
						"          schemaPath = OrderData.response.schemaPath,",
						"          torchResponse = OrderData.torchResponse,",
						"          responseCode = OrderData.response.responseCode,",
						"          responseDescription = OrderData.response.responseDescription,",
						"          tlgCode = OrderData.tlgCode,",
						"          eventId,",
						"          source,",
						"          eventSource,",
						"          eventType,",
						"          dc_eventTime,",
						"          lastmodified_date,",
						"          imeiValidationStatus = OrderData.response.imeiValidationStatus,",
						"          model = OrderData.response.model",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectResponse",
						"filter1 derive(dc_issueDateTime = iif(length(toString(issueDateTime)) > 15, currentTimestamp(), toTimestamp(toLong(issueDateTime)*1000, 'yyyy-MM-dd HH:mm:ss')),",
						"          dc_responseTime = iif(length(toString(timeStamp)) > 15, currentTimestamp(), toTimestamp(toLong(timeStamp), 'yyyy-MM-dd HH:mm:ss'))) ~> CovertUnixtimeToDateTime",
						"selectIncomingPayload window(over(imei),",
						"     desc(dc_eventTime, true),",
						"     prank = rowNumber()) ~> windowLatestIMEIPayload",
						"windowLatestIMEIPayload filter(prank==1) ~> filterIMEI",
						"filterIMEI alterRow(upsertIf(true())) ~> alterRowOrderData",
						"CovertUnixtimeToDateTime select(mapColumn(",
						"          market = OrderData.incomingPayload.market,",
						"          accSubType = OrderData.incomingPayload.accSubType,",
						"          subscriber = OrderData.incomingPayload.subscriber,",
						"          subMarket = OrderData.incomingPayload.subMarket,",
						"          accountType = OrderData.incomingPayload.accountType,",
						"          issueDateTime = OrderData.incomingPayload.issueDateTime,",
						"          make = OrderData.incomingPayload.make,",
						"          ban = OrderData.incomingPayload.ban,",
						"          productType = OrderData.incomingPayload.productType,",
						"          imei,",
						"          timeStamp,",
						"          dc_issueDateTime,",
						"          dc_eventTime,",
						"          dc_responseTime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectIncomingPayload",
						"CovertUnixtimeToDateTime foldDown(unroll(OrderData.response.sim1.details.deviceCheckResponse, OrderData.response.sim1.details.deviceCheckResponse),",
						"     mapColumn(",
						"          code = OrderData.response.sim1.details.deviceCheckResponse.code,",
						"          imei,",
						"          sim1imei = OrderData.response.sim1.imei,",
						"          dc_issueDateTime,",
						"          dc_responseTime,",
						"          timeStamp = OrderData.response.timeStamp,",
						"          issueDateTime = OrderData.incomingPayload.issueDateTime,",
						"          description = OrderData.response.sim1.details.deviceCheckResponse.description,",
						"          subscriberNumber = OrderData.response.sim1.details.deviceCheckResponse.subscriberNumber,",
						"          lastmodified_date,",
						"          dc_eventTime,",
						"          sim2imei = OrderData.response.sim2.imei",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAutoUnlockDeviceCheckResponse",
						"CovertUnixtimeToDateTime foldDown(unroll(OrderData.response.sim1.details.subscriberNumberCheckResponse, OrderData.response.sim1.details.subscriberNumberCheckResponse),",
						"     mapColumn(",
						"          imei,",
						"          code = OrderData.response.sim1.details.subscriberNumberCheckResponse.code,",
						"          description = OrderData.response.sim1.details.subscriberNumberCheckResponse.description,",
						"          sime1imei = OrderData.response.sim1.imei,",
						"          subscriberNumber = OrderData.response.sim1.details.subscriberNumberCheckResponse.subscriberNumber,",
						"          sim2imei = OrderData.response.sim2.imei,",
						"          issueDateTime,",
						"          timeStamp,",
						"          dc_issueDateTime,",
						"          dc_responseTime,",
						"          lastmodified_date,",
						"          dc_eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAutoUnlocksubscirberNumberCheckResponce",
						"CovertUnixtimeToDateTime foldDown(unroll(OrderData.response.sim2.details.subscriberNumberCheckResponse, OrderData.response.sim2.details.subscriberNumberCheckResponse),",
						"     mapColumn(",
						"          imei,",
						"          sim2imei = OrderData.response.sim2.imei,",
						"          sim1imei = OrderData.response.sim1.imei,",
						"          sim2code = OrderData.response.sim2.details.subscriberNumberCheckResponse.code,",
						"          sim2description = OrderData.response.sim2.details.subscriberNumberCheckResponse.description,",
						"          subscriberNumber = OrderData.response.sim2.details.subscriberNumberCheckResponse.subscriberNumber,",
						"          issueDateTime,",
						"          timeStamp,",
						"          dc_issueDateTime,",
						"          dc_responseTime,",
						"          lastmodified_date,",
						"          dc_eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattensim2",
						"CovertUnixtimeToDateTime foldDown(unroll(OrderData.response.sim2.details.deviceCheckResponse, OrderData.response.sim2.details.deviceCheckResponse),",
						"     mapColumn(",
						"          imei,",
						"          issueDateTime,",
						"          timeStamp,",
						"          dc_issueDateTime,",
						"          dc_responseTime,",
						"          code = OrderData.response.sim2.details.deviceCheckResponse.code,",
						"          description = OrderData.response.sim2.details.deviceCheckResponse.description,",
						"          subscriberNumber = OrderData.response.sim2.details.deviceCheckResponse.subscriberNumber,",
						"          sim2imei = OrderData.response.sim2.imei,",
						"          sim1imei = OrderData.response.sim1.imei,",
						"          lastmodified_date,",
						"          dc_eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattensim2device",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"derivedColumn2 alterRow(upsertIf(true())) ~> alterRow2",
						"flattensim2device derive(sim1imei = 'NA') ~> derivedColumn1",
						"flattenAutoUnlockDeviceCheckResponse derive(sim2imei = 'NA') ~> derivedColumn2",
						"selectResponse alterRow(upsertIf(true())) ~> alterRow3",
						"flattensim2 derive(sim1imei = 'NA') ~> derivedColumn3",
						"derivedColumn3 alterRow(upsertIf(true())) ~> alterRow4",
						"flattenAutoUnlocksubscirberNumberCheckResponce derive(sim2imei = 'NA') ~> derivedColumn4",
						"derivedColumn4 alterRow(upsertIf(true())) ~> alterRow5",
						"derivedColumn5 window(over(imei,",
						"          dc_eventTime),",
						"     desc(dc_eventTime, true),",
						"     prank = rowNumber()) ~> window1",
						"window1 filter(prank==1) ~> filter1",
						"selectorderData derive(dc_eventTime = iif(length(toString(eventTime)) > 15, currentTimestamp(), toTimestamp(toLong(eventTime), 'yyyy-MM-dd HH:mm:ss'))) ~> derivedColumn5",
						"alterRowOrderData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Imei as string,",
						"          Market as string,",
						"          accSubType as string,",
						"          Subscriber as string,",
						"          submarket as string,",
						"          accountType as string,",
						"          issueDateTime_UnixTime as string,",
						"          Make as string,",
						"          Ban as string,",
						"          productType as string,",
						"          responseTimestamp_UnixTime as string,",
						"          issueDateTime as timestamp,",
						"          responseTimestamp as timestamp,",
						"          eventTime as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Imei'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'OrderData_Errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          Market = market,",
						"          accSubType,",
						"          Subscriber = subscriber,",
						"          submarket = subMarket,",
						"          accountType,",
						"          Imei = imei,",
						"          issueDateTime_UnixTime = issueDateTime,",
						"          Make = make,",
						"          Ban = ban,",
						"          productType,",
						"          responseTimestamp_UnixTime = timeStamp,",
						"          issueDateTime = dc_issueDateTime,",
						"          responseTimestamp = dc_responseTime,",
						"          eventTime = dc_eventTime",
						"     )) ~> AutoUnlockOrderData",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Imei as string,",
						"          sim1Imei as string,",
						"          sim2Imei as string,",
						"          issueDateTime_UnixTime as string,",
						"          responseTimestamp_UnixTime as string,",
						"          issueDateTime as timestamp,",
						"          responseTimestamp as timestamp,",
						"          unlockEligibilityStatus as string,",
						"          unlockIneligibilityReason as string,",
						"          DeviceUnlocked as string,",
						"          unlockCode as string,",
						"          eligibilityPreapprovedIndicator as string,",
						"          fnCustomerType as string,",
						"          fanAccountType as string,",
						"          DeviceType as string,",
						"          errorMessage as string,",
						"          subErrorMessage as string,",
						"          errorDetails as string,",
						"          SchemaPath as string,",
						"          ResponseCode as string,",
						"          ResponseDescription as string,",
						"          TorchResponse as string,",
						"          tlgCode as string,",
						"          eventId as string,",
						"          Source as string,",
						"          eventType as string,",
						"          eventSource as string,",
						"          insertedDate as timestamp,",
						"          eventTime as timestamp,",
						"          imeiValidationStatus as string,",
						"          model as string",
						"     ),",
						"     stagingSchemaName: 'oce',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Imei','eventTime'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 4,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'Response_Errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          Imei = imei,",
						"          sim1Imei,",
						"          sim2Imei,",
						"          issueDateTime_UnixTime = issueDateTime,",
						"          responseTimestamp_UnixTime = timeStamp,",
						"          issueDateTime = dc_issueDateTime,",
						"          responseTimestamp = dc_responseTime,",
						"          unlockEligibilityStatus,",
						"          unlockIneligibilityReason,",
						"          DeviceUnlocked = deviceUnlocked,",
						"          unlockCode,",
						"          eligibilityPreapprovedIndicator,",
						"          fnCustomerType,",
						"          fanAccountType,",
						"          DeviceType = deviceType,",
						"          errorMessage,",
						"          subErrorMessage,",
						"          errorDetails,",
						"          SchemaPath = schemaPath,",
						"          ResponseCode = responseCode,",
						"          ResponseDescription = responseDescription,",
						"          TorchResponse = torchResponse,",
						"          tlgCode,",
						"          eventId,",
						"          Source = source,",
						"          eventType,",
						"          eventSource,",
						"          eventTime = dc_eventTime,",
						"          imeiValidationStatus,",
						"          model",
						"     )) ~> AutoUnlockResponce",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Imei as string,",
						"          sim1Imei as string,",
						"          sim2Imei as string,",
						"          issueDateTime_UnixTime as string,",
						"          responseTimestamp_UnixTime as string,",
						"          issueDateTime as timestamp,",
						"          responseTimestamp as timestamp,",
						"          code as string,",
						"          description as string,",
						"          subscriberNumber as string,",
						"          insertedDate as timestamp,",
						"          eventTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'oce',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Imei','sim1Imei','sim2Imei','eventTime','code'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'AutoUnlockDeviceCheckResponse_Errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          Imei = imei,",
						"          sim1Imei = sim1imei,",
						"          issueDateTime_UnixTime = issueDateTime,",
						"          responseTimestamp_UnixTime = timeStamp,",
						"          issueDateTime = dc_issueDateTime,",
						"          responseTimestamp = dc_responseTime,",
						"          code,",
						"          description,",
						"          subscriberNumber,",
						"          eventTime = dc_eventTime,",
						"          sim2Imei = sim2imei",
						"     )) ~> AutoUnlockDeviceCheckResponse",
						"alterRow5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Imei as string,",
						"          sim1Imei as string,",
						"          sim2Imei as string,",
						"          issueDateTime_UnixTime as string,",
						"          responseTimestamp_UnixTime as string,",
						"          issueDateTime as timestamp,",
						"          responseTimestamp as timestamp,",
						"          code as string,",
						"          description as string,",
						"          subscriberNumber as string,",
						"          insertedDate as timestamp,",
						"          eventTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'oce',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Imei','sim1Imei','sim2Imei','code','eventTime'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'AutoUnlocksubscirberNumberCheckResponce_erros',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          Imei = imei,",
						"          sim1Imei = sime1imei,",
						"          issueDateTime_UnixTime = issueDateTime,",
						"          responseTimestamp_UnixTime = timeStamp,",
						"          issueDateTime = dc_issueDateTime,",
						"          responseTimestamp = dc_responseTime,",
						"          code,",
						"          description,",
						"          subscriberNumber,",
						"          eventTime = dc_eventTime,",
						"          sim2Imei = sim2imei",
						"     )) ~> AutoUnlocksubscirberNumberCheckResponce",
						"alterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Imei as string,",
						"          sim1Imei as string,",
						"          sim2Imei as string,",
						"          issueDateTime_UnixTime as string,",
						"          responseTimestamp_UnixTime as string,",
						"          issueDateTime as timestamp,",
						"          responseTimestamp as timestamp,",
						"          code as string,",
						"          description as string,",
						"          subscriberNumber as string,",
						"          insertedDate as timestamp,",
						"          eventTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['sim2Imei','code','sim1Imei','Imei','eventTime'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 5,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'AUSC_2_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          Imei = imei,",
						"          sim2Imei = sim2imei,",
						"          issueDateTime_UnixTime = issueDateTime,",
						"          responseTimestamp_UnixTime = timeStamp,",
						"          issueDateTime = dc_issueDateTime,",
						"          responseTimestamp = dc_responseTime,",
						"          code = sim2code,",
						"          description = sim2description,",
						"          subscriberNumber,",
						"          eventTime = dc_eventTime,",
						"          sim1Imei = sim1imei",
						"     )) ~> AUSC2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Imei as string,",
						"          sim1Imei as string,",
						"          sim2Imei as string,",
						"          issueDateTime_UnixTime as string,",
						"          responseTimestamp_UnixTime as string,",
						"          issueDateTime as timestamp,",
						"          responseTimestamp as timestamp,",
						"          code as string,",
						"          description as string,",
						"          subscriberNumber as string,",
						"          insertedDate as timestamp,",
						"          eventTime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Imei','sim2Imei','eventTime','sim1Imei','code'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 6,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'autounlock',",
						"     rejectedData_folderPath: 'AUDC_2_Errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          Imei = imei,",
						"          sim2Imei = sim2imei,",
						"          issueDateTime_UnixTime = issueDateTime,",
						"          responseTimestamp_UnixTime = timeStamp,",
						"          issueDateTime = dc_issueDateTime,",
						"          responseTimestamp = dc_responseTime,",
						"          code,",
						"          description,",
						"          subscriberNumber,",
						"          eventTime = dc_eventTime,",
						"          sim1Imei = sim1imei",
						"     )) ~> AUDC"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/autoUnlock_OrderDataStaging')]",
				"[concat(variables('factoryId'), '/datasets/autoUnlockOrderData')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/AutoUnlockResponse')]",
				"[concat(variables('factoryId'), '/datasets/AutoUnlockDeviceCheckResponse')]",
				"[concat(variables('factoryId'), '/datasets/AutoUnlocksubscirberNumberCheckResponce')]",
				"[concat(variables('factoryId'), '/datasets/AutoUnlock_SC2')]",
				"[concat(variables('factoryId'), '/datasets/AutoUnlock_DC2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FeedToBlob')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "FeedData",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CCPM_BLOB_FILE",
								"type": "DatasetReference"
							},
							"name": "Inbound"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     ProcedureName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     procedureName: ($ProcedureName),",
						"     resultSet: true,",
						"     format: 'procedure') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Inbound"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FeedData')]",
				"[concat(variables('factoryId'), '/datasets/CCPM_BLOB_FILE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FinalDF_bkp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference"
							},
							"name": "SourceStagingTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "V101_oceOrderData",
								"type": "DatasetReference"
							},
							"name": "sinkOrderData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAddlDetails",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAdditionalDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderContactDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderContactDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPrice",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPriceSummaryList",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPriceSummaryList",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderProductGroups",
								"type": "DatasetReference"
							},
							"name": "sinkOrderProductGroups",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPromotions",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPromotions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTermsAndConditions",
								"type": "DatasetReference"
							},
							"name": "sinkOrderTermsandConditions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAccts",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctServFacilityQualifications",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccountsServiceFacilityQualification",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctsBillingDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccountsBillingDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsPrice",
								"type": "DatasetReference"
							},
							"name": "sinkOrderLosgsPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsPriceSummaryList",
								"type": "DatasetReference"
							},
							"name": "sinkOrderLosgsPriceSummaryList",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsLineItemsAddlDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsAddlDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderSourceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderSourceDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderSourceDetailAddlDetails",
								"type": "DatasetReference"
							},
							"name": "SourceDetailAdditionalDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgs",
								"type": "DatasetReference"
							},
							"name": "sinkOrderlosgs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderCreditPolicy",
								"type": "DatasetReference"
							},
							"name": "sinkcreditpolicy",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderDebtAccts",
								"type": "DatasetReference"
							},
							"name": "sinkdebtaccounts",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderErrors",
								"type": "DatasetReference"
							},
							"name": "sinkError",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderMoveDetail",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderMoveDetail",
							"description": "Export data to v101_oceOrderMoveDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderTasks",
								"type": "DatasetReference"
							},
							"name": "sinkordertask",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderReferenceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkorderreferencedetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsIptvCharacteristics",
								"type": "DatasetReference"
							},
							"name": "iptvLOSCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsSubscriberName",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsSubscriberName",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsTermsAndConditionAccepted",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsTermsAndConditionAccepted",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsVoipCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsVoipCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsVoipCharacteristicsDirListing",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsVoipCharacteristicsDirListing",
							"description": "Export data to oceOrderLosgsVoipCharacteristicsDirListing",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsWirelessCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsWirelessCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsNumberPortDetail",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderLosgsPortDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsBillingDetailAddr",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderAcctsBillingDetailAddr",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctServiceAddr",
								"type": "DatasetReference"
							},
							"name": "sinkorderaccountsserviceaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctsBussinessAddr",
								"type": "DatasetReference"
							},
							"name": "sinkorderaccountsbusinessaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsCompensation",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsCompensation",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsAddlDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsAdditionDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsinternetCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsinternetCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsDirectTVCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsDirectTVCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderEvents",
								"type": "DatasetReference"
							},
							"name": "sinkevents",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCreditCheck",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderAcctsCreditCheck",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsAutopayPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsAutopayPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsAutoPayEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsAutoPayEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCardOnFilePaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsCardOnFilePaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCardOnFileEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsCardOnFileEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsNegotiateConflictCustomer",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsNegotiateConflictCustomer",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsUnifiedAccount",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsUnifiedAccount",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderEmployeeDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderEmployeeDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderECommercePartner",
								"type": "DatasetReference"
							},
							"name": "oceOrderECommercePartner",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderIntegratedOffers",
								"type": "DatasetReference"
							},
							"name": "oceOrderIntegratedOffers",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLoginProfile",
								"type": "DatasetReference"
							},
							"name": "oceOrderLoginProfile",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSingleDispatchDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderSingleDispatchDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderPaymentTenders",
								"type": "DatasetReference"
							},
							"name": "oceOrderPaymentTenders",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderPaymentTendersEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderPaymentTendersEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetails",
								"type": "DatasetReference"
							},
							"name": "sinkshippingdetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetailsPrice",
								"type": "DatasetReference"
							},
							"name": "sinkShippingDetailsPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSalesAgent",
								"type": "DatasetReference"
							},
							"name": "oceOrderSalesAgent",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderReferenceDetailFalloutDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderReferenceDetailFalloutDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetailsAddr",
								"type": "DatasetReference"
							},
							"name": "sinkShippingDetailsAddr",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSchedulingDetails",
								"type": "DatasetReference"
							},
							"name": "sinkschedulingdetailsflat",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsExternalOrderReferences",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsExternalOrderReferences",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsPromotions",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsPromotions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsUserDefinedLabels",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsUserDefinedLabels",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsPayments",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsPayments",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemshardGood",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemshardGood",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsSupplyChainDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsSupplyChainDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsServiceAddr",
								"type": "DatasetReference"
							},
							"name": "sinklosgserviceaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsDirecTVCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsDirecTVCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsVoipCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsVoipCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsIptvCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsIptvCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsWirelessCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsWirelessCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsInternetCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsInternetCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsWirelessCharUpgradeQual",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsWirelessCharUpgradeQual",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItems",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItems",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsProvisionSystem",
								"type": "DatasetReference"
							},
							"name": "sinkacctProvisionSystem",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsEventHistory",
								"type": "DatasetReference"
							},
							"name": "sinkOceOrderLosgsEventHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTransactionlogs",
								"type": "DatasetReference"
							},
							"name": "oceOrderTransactionlogs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsEventHistory",
								"type": "DatasetReference"
							},
							"name": "sinkLosgsLineItemsEventHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderCancelDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderCancelDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsCancelDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgCancelDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsApiExecutionDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsApiExecutionDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "parseJsonOrderData"
						},
						{
							"name": "selectOrderData"
						},
						{
							"name": "ConvertDateTime"
						},
						{
							"name": "AlterRowOrderData"
						},
						{
							"name": "flattenOrderAdditionalDetail"
						},
						{
							"name": "AlterRowOrderAdditionalDetails"
						},
						{
							"name": "AlterRowOrderContactDetails"
						},
						{
							"name": "flattenPriceList"
						},
						{
							"name": "AlterRowOrderPriceList"
						},
						{
							"name": "flattenProductGroups"
						},
						{
							"name": "AlterRowOrderProductGroups"
						},
						{
							"name": "flattenOrderPromotions"
						},
						{
							"name": "AlterRowOrderPromotions"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "flattenTermsandConditions"
						},
						{
							"name": "ConvertTimestamp"
						},
						{
							"name": "flattenServiceFacilityQualifications"
						},
						{
							"name": "flattenBillingDetails"
						},
						{
							"name": "AlterRowOrderAccounts"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRowOrderAccountsServiceAddress"
						},
						{
							"name": "AlterRowOrderAccountsServiceFacilityQualification"
						},
						{
							"name": "AlterRowOrderAccountsBillingDetails"
						},
						{
							"name": "flattenOrderLosgs"
						},
						{
							"name": "flattenLosgsPrice"
						},
						{
							"name": "flattenLosgsPriceSummaryList"
						},
						{
							"name": "flattenLosgsLineItems"
						},
						{
							"name": "flattenLosgsAdditionalDetail"
						},
						{
							"name": "AlterRowOrderLosgsPrice"
						},
						{
							"name": "AlterRowOrderLosgsPriceSummaryList"
						},
						{
							"name": "AlterRowlosgsLineitemsAdditionalDetail"
						},
						{
							"name": "flattenSourceDetailAdditionalDetail"
						},
						{
							"name": "AlterRowOrderSourceDetail"
						},
						{
							"name": "AlterRowOrderSourceDetailAdditionalDetail"
						},
						{
							"name": "AlterRowOrderlosgs"
						},
						{
							"name": "AlterRow4"
						},
						{
							"name": "flattenAllAccounts"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filter5"
						},
						{
							"name": "filter9"
						},
						{
							"name": "filter10"
						},
						{
							"name": "filter8"
						},
						{
							"name": "filter17"
						},
						{
							"name": "filter18"
						},
						{
							"name": "filter20"
						},
						{
							"name": "filter23"
						},
						{
							"name": "filter24"
						},
						{
							"name": "filter28"
						},
						{
							"name": "filter29"
						},
						{
							"name": "alterRowcreditpolicy"
						},
						{
							"name": "flattendebitaccounts"
						},
						{
							"name": "alterRowdebitaccounts"
						},
						{
							"name": "alterRowerrors"
						},
						{
							"name": "flattenerror"
						},
						{
							"name": "alterRowmoveorder"
						},
						{
							"name": "flattenOrderTask"
						},
						{
							"name": "windowtask"
						},
						{
							"name": "derivedColumnTask"
						},
						{
							"name": "filterordertask"
						},
						{
							"name": "alterRowtaskid"
						},
						{
							"name": "alterRowreferencedetail"
						},
						{
							"name": "filtertask"
						},
						{
							"name": "filtererror"
						},
						{
							"name": "filterorderdata"
						},
						{
							"name": "IPtvalterrow"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "filter42"
						},
						{
							"name": "AlterSubcribeName"
						},
						{
							"name": "filter43"
						},
						{
							"name": "altervoipc"
						},
						{
							"name": "altere11"
						},
						{
							"name": "alterWirlessChar"
						},
						{
							"name": "alterRowOrderAccountsCreditCheck"
						},
						{
							"name": "alterRowPortDetail"
						},
						{
							"name": "derivedColumn31"
						},
						{
							"name": "filter51"
						},
						{
							"name": "alterRowv101oceOrderAcctsBillingDetailAddr"
						},
						{
							"name": "flattencompensationrepdetail"
						},
						{
							"name": "alterCompensation"
						},
						{
							"name": "flatten5"
						},
						{
							"name": "filter53"
						},
						{
							"name": "alteradditonalDetails"
						},
						{
							"name": "alterRowlosginternetchar"
						},
						{
							"name": "alterRowDIrectvchar"
						},
						{
							"name": "selectInsertonlyTableAttributes"
						},
						{
							"name": "derivedColumnETCnoChannel"
						},
						{
							"name": "filtertransactionlogs"
						},
						{
							"name": "flattenTransactionLosgHistory"
						},
						{
							"name": "derivedColumn36"
						},
						{
							"name": "alterRowtermsandconditins"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "alterRowautopay"
						},
						{
							"name": "alterRowautoepay"
						},
						{
							"name": "alterRowcardonfile"
						},
						{
							"name": "alterRowcardepay"
						},
						{
							"name": "alterRownego"
						},
						{
							"name": "alterRowunified"
						},
						{
							"name": "alterRowEmployeeDetail"
						},
						{
							"name": "alterRowecommerce"
						},
						{
							"name": "flattenshippingDetail"
						},
						{
							"name": "flatten10"
						},
						{
							"name": "filter68"
						},
						{
							"name": "alterRowInte"
						},
						{
							"name": "alterRowlogin"
						},
						{
							"name": "filter71"
						},
						{
							"name": "alterRowSingleDispatch"
						},
						{
							"name": "flatten12"
						},
						{
							"name": "filter73"
						},
						{
							"name": "alterRowPaymentTender"
						},
						{
							"name": "alterRowpayment"
						},
						{
							"name": "alterRowshippingdetail"
						},
						{
							"name": "alterRowshippingprice"
						},
						{
							"name": "alterRowsalesagent"
						},
						{
							"name": "flattenreferencefalloutDetails"
						},
						{
							"name": "alterRowRFallout"
						},
						{
							"name": "filter80"
						},
						{
							"name": "alterRowshippingaddress"
						},
						{
							"name": "flattenSchedulingDetails"
						},
						{
							"name": "derivedColumn40"
						},
						{
							"name": "filter81"
						},
						{
							"name": "alterRowschedulingdetailflat"
						},
						{
							"name": "flattenContactDetail"
						},
						{
							"name": "flatten18"
						},
						{
							"name": "filter83"
						},
						{
							"name": "alterRowext"
						},
						{
							"name": "flatten20"
						},
						{
							"name": "filter85"
						},
						{
							"name": "alterRowpromo"
						},
						{
							"name": "flatten21"
						},
						{
							"name": "filter86"
						},
						{
							"name": "alterRowuse"
						},
						{
							"name": "flatten22"
						},
						{
							"name": "filter87"
						},
						{
							"name": "alterRowllpay"
						},
						{
							"name": "alterRowLLIhard"
						},
						{
							"name": "alterRowsupplychain"
						},
						{
							"name": "derivedColumn43"
						},
						{
							"name": "coalacc"
						},
						{
							"name": "coallosgid",
							"description": "V101.oceOrderLosgsEventHistory"
						},
						{
							"name": "alterRowlosgserviceaddress"
						},
						{
							"name": "filter90"
						},
						{
							"name": "flatten23"
						},
						{
							"name": "alterRowDiLitem"
						},
						{
							"name": "alterRowvoipLLitems"
						},
						{
							"name": "alterRowiptv"
						},
						{
							"name": "alterRowwire"
						},
						{
							"name": "alterRowIIChar"
						},
						{
							"name": "flatten25"
						},
						{
							"name": "flatten26"
						},
						{
							"name": "flattenpriceSummaryList"
						},
						{
							"name": "flatten28"
						},
						{
							"name": "alterRowupgrad"
						},
						{
							"name": "alterRowlineitems"
						},
						{
							"name": "derivedColumn46"
						},
						{
							"name": "derivedColumn48"
						},
						{
							"name": "derivedColumn50"
						},
						{
							"name": "flatten30"
						},
						{
							"name": "derivedColumn53"
						},
						{
							"name": "derivedColumn54"
						},
						{
							"name": "coalLLseq"
						},
						{
							"name": "derivedColumn64"
						},
						{
							"name": "derivedColumn65"
						},
						{
							"name": "derivedColumn68"
						},
						{
							"name": "derivedColumn69"
						},
						{
							"name": "filtereCommercePartner"
						},
						{
							"name": "filteremployeeDetail"
						},
						{
							"name": "filterloginProfile"
						},
						{
							"name": "filterSalesAgent"
						},
						{
							"name": "filterreferenencedetail"
						},
						{
							"name": "filtercreditPolicy"
						},
						{
							"name": "filter100"
						},
						{
							"name": "filterunifiedaccount"
						},
						{
							"name": "filternegotiateCC"
						},
						{
							"name": "filtecardOnFilePaymentMethod"
						},
						{
							"name": "filtercreditCheck"
						},
						{
							"name": "filter101"
						},
						{
							"name": "filtehardGood"
						},
						{
							"name": "filter"
						},
						{
							"name": "filter102"
						},
						{
							"name": "filter103"
						},
						{
							"name": "filter104"
						},
						{
							"name": "filter105"
						},
						{
							"name": "filter107"
						},
						{
							"name": "filter108"
						},
						{
							"name": "filter110"
						},
						{
							"name": "filter111"
						},
						{
							"name": "filter112"
						},
						{
							"name": "filter113"
						},
						{
							"name": "filter114"
						},
						{
							"name": "filter115"
						},
						{
							"name": "filter116"
						},
						{
							"name": "filter117"
						},
						{
							"name": "filter118"
						},
						{
							"name": "filter119"
						},
						{
							"name": "derivedColumn71"
						},
						{
							"name": "filter120"
						},
						{
							"name": "flatten31"
						},
						{
							"name": "alterRowProvisionSystem"
						},
						{
							"name": "derivedColumn72"
						},
						{
							"name": "windowOrderErros"
						},
						{
							"name": "filterlatestordererror",
							"description": "filter"
						},
						{
							"name": "alterRowForOceOrderLosgsEventHistory",
							"description": "Add expressions to alter rows"
						},
						{
							"name": "filterEventsource"
						},
						{
							"name": "WIndowLatestEvent"
						},
						{
							"name": "FitlerOutLatestEvent"
						},
						{
							"name": "filter124"
						},
						{
							"name": "filter125"
						},
						{
							"name": "derivedColumnMoveOrder"
						},
						{
							"name": "selectOrderElements"
						},
						{
							"name": "derivedColumnCnoEventTImeChannel"
						},
						{
							"name": "flatten32"
						},
						{
							"name": "derivedColumn75"
						},
						{
							"name": "window100"
						},
						{
							"name": "filter126"
						},
						{
							"name": "alterRowtransactionlogs"
						},
						{
							"name": "flattenLosgEventsHistory"
						},
						{
							"name": "derivedColumnEventsHistory"
						},
						{
							"name": "windowLosgEventsHistory"
						},
						{
							"name": "filterLosgEventsHistory"
						},
						{
							"name": "flattenLineItemsEventHistory"
						},
						{
							"name": "windowLineItemEventsHistory"
						},
						{
							"name": "filterLineItemsEventHistory"
						},
						{
							"name": "alterRowlineitemhistory"
						},
						{
							"name": "derivedLineItemEventHistory"
						},
						{
							"name": "filterEvents"
						},
						{
							"name": "filteroceOrderCancelDetails"
						},
						{
							"name": "alterRowoceOrderCancelDetails"
						},
						{
							"name": "filterlosgcanceldetails"
						},
						{
							"name": "alterRowcancelDetails"
						},
						{
							"name": "filteroceOrderLosgsApiExecutionDetails"
						},
						{
							"name": "flatterAPIExecutionDetails"
						},
						{
							"name": "alterRowcustomerOrderNumber"
						},
						{
							"name": "filtercno"
						}
					],
					"scriptLines": [
						"source(output(",
						"          orderjson_1 as string,",
						"          lastmodified_date as timestamp,",
						"          customerordernumber as string,",
						"          eventTime as long,",
						"          channel as string,",
						"          eventSource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionColumn: 'customerordernumber',",
						"     partitionBy('external', 20)) ~> SourceStagingTable",
						"SourceStagingTable parse(orderjson_1 = orderjson_1 ? (orderEvent as (eventid as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          eventTime as string,",
						"          customerOrderNumber as string,",
						"          traceId as string,",
						"          metaData as (sender as string,",
						"          channel as string,",
						"          orderType as string,",
						"          traceId as string,",
						"          isSingleTopic as string,",
						"          routingInfo as string,",
						"          automationUrl as string,",
						"          idbStatus as string,",
						"          priority as string,",
						"          customerOrderNumber as string,",
						"          version as string,",
						"          isUpgradeOrder as string,",
						"          fraudResponse as string,",
						"          originalVersion as string,",
						"          fallout as string,",
						"          callback as string),",
						"          dataMap as (traceId as string),",
						"          data as (OrderTasks as (OrderTask as (ApplicationName as string,",
						"Channel as string,",
						"CreationDate as string,",
						"CustomerOrderNumber as string,",
						"LosgIds as string,",
						"OrderNumber as string,",
						"PartnerName as string,",
						"ProgramName as string,",
						"QueueId as string,",
						"QueueName as string,",
						"QueueSlaDetails as string,",
						"TaskId as string,",
						"TaskStatus as string, CamundaTaskId as string",
						")[]),",
						"          order as (createdDate as string,",
						"          updatedDate as string,",
						"          orderId as string,",
						"          specialInstructions as string,",
						"          customerOrderNumber as string,",
						"          oceOrderNumber as string,",
						"          revisionNumber as string,",
						"          requestType as string,",
						"          submittedDate as string,",
						"          type as string,",
						"          requestId as string,",
						"          version as string,",
						"          program as string,",
						"          acceptedDate as string,",
						"          isOrderPended as string,",
						"          cancelDetails as (cancelReason as string),",
						"          losgs as (cancelDetails as (cancelReason as string,cancelBy as string),actionReasonCode as string,previousProductOrderActionId as string,accountReference as string,actionReason as string,actionType as string,addpLOSCharacteristics as (acceptEULA as string,tenantAccountId as string,tenantAccountStatus as string),aPIExecutionDetails as (name as string,priority as string,action as string, loSGStatus as (subStatus as string,status as string))[],bundleGroupId as string,childOrderId as string,companyCode as string,creditPolicySecurityType as string, conflictingServiceDetailReferences as string,divisionCode as string,effectiveDate as string,engageVideoId as string,entitlementBenefit as string,fnGuId as string,fnUserId as string,fnType as string,freeDevicePolicyId as string,fulfillerName as string,fulfillerCode as string,fwCAF2AddressIndicator as string,fwiMoveInIndicator as string, userDefinedLabels as (label as string,sequence as string,value as string)[], serviceProvider as (name as string,code as string, type as string, conversationId as string, phoneNumber as string, orderConfirmationId as string,submissionStatus as string), promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[], ",
						"installationInstructions as (answers as string,question as string)[],",
						"dslLOSCharacteristics as (additionalDetails as string, parentComponentCode as string,retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string),  lineItems as( status as string,storeId as string,subscriptionId as string,taxableIndicator as string,tier as string,shippingDetailReference as string,socForPreviousDevice as string,priceList as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string, installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float)[],   internetLineItemCharacteristics as(additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, boltOnType as string,bucketAllowance as string,ipType as string, maxOverageCharge as integer, overageBucketAllowance as string, planDownloadSpeed as string, pricePerBucketAllowance as integer), voipLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, callerId as string,uverseMessaging as string),",
						"wirelessLineItemCharacteristics as (tradeInModelCode as string,additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, attDynamicTrafficManager as (additionalDetails as string, enterpriseId as string,manifestLabel as string,manifestURL as string),availabilityType as string,distributionChannelId as string,nciEligibleIndicator as string, newSalesChannelId as string,offerType as string,packetDataProtocol as (additionalDetails as string,apnName as string,packetDataProtocol5GIndicator as string,defaultPacketDataProtocolIndicator as string,defaultSNType as string,ipAddress as string,ipv6Address as string,ipversionType as string,ltePacketDataProtocolIndicator as string,onlineChargingSystemIndicator as string,packetDataProtocolType as string), partnerCode as string,simType as string, tradeInDetail as(additionalDetails as string,claimId as string,deviceClearingAgreement as string,deviceCondition as string,exchangeType as string,installmentPlanId as string,modelCode as string,nonComplianceFee as float, payupAmount as float)), iptvLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), direcTVLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), payments as (amount as float,currencyType as string, numberOfInstallment as integer, paymentTenderReference as string)[], action as string,addOnSolutionCharacteristics as (domainName as string,domainRegistration as string,parentItem as string,registrationType as string),billingCode as string,billingCodeType as string,catalogProductType as string,catalogSKUId as string, contractDetails as (amountFinanced as float,annualPercentageRate as float,balancedAmount as float,contractDisplayName as string,contractLength as integer,contractSent as string,contractSystem as string,contractType as string,downPayment as float,downPaymentPercent as float,financeCharge as float,installmentAmount as float,installmentPlanDefinition as string,installmentPlanId as string,installmentStatus as string,installmentType as string,prepaidFinanceCharge as string,payupAmount as float,payoffAmount as float,totalSalePrice as float),curbsideDelivery as string,displayName as string,  description as string,  effectiveDate as string,fees as (feeId as string,feeIdType as string,waivedIndicator as string,waivedReason as string),fulfillmentLocation as string,groupOptionId as string,inventoryStoreId as string,itemFulfillmentMethod as string,locationId as string,notes as string,operation as string,preOwnedIndicator as string,purchaseTransactionId as string,quantity as integer,",
						"          ",
						"          supplyChainDetail as (availabilityDate as string, carrier as string, claimRMANumber as string, exchangeDocumentId as string, exchangeOrderId as string, orderDocumentDetail as (activity as string, location as string, orderId as string), price as float, quantityBackOrdered as integer, quantityCanceled as integer, quantityOrdered as integer, quantityShipped as integer, quantityToShip as integer, shippedDate as string, trackingNumber as string),                                      id as string,                                                                             productCode as string,                                         productSKU as string,                                         productType as string,productSubType as string,                                                                          sequence as string,                                         systemName as string,                                      ",
						"          hardGood as(availabilityDate as string, biller as string, byodIndicator as string, cardSerialNumber as string, deliveryByDate as(fromDate as string,toDate as string), deliveryPromiseNote as (english as string,spanish as string), eid as string,fieldId as string, hardGoodType as string,iccId as string, make as string, manufacturerCode as string, model as string, networkAccessDeviceType as string, preOrderIndicator as string, productImageUrl as string, serialNumber as string, shipmentCommitDate as (fromDate as string,toDate as string), shippedHotIndicator as string, whiteGloveDeliveryPartner as string, wirelessHardGoodCharacteristics as (connectionType as string,deviceCategory as string, equipmentType as string, equipmentUpgrade as string, imei as string, imeiType as string, internationalMobileSubscriberIdentity as string,phoneType as string, techType as string, usoc as string, zodiacSequenceNumber as string)),                                         additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],                                     price as(additionalDetails as string,amount as float, baseAmount as float,creditFeeType as string, currencyType as string,installmentEligibility as string,msrp as float,priceType as string,total as float,taxDetail as string),productGroupReferences as string,                                         promotionReferences as string)[],                               price as(additionalDetails as string, creditFeeType as string ,installmentEligibility as string, msrp as string, taxDetail as string, amount as float,                                         baseAmount as float,                                         currencyType as string,                                         priceType as string,                                         total as float)[],                               priceSummaryList as(amount as float,                                                   currencyType as string,                                                   priceType as string,                                                   total as float,                                                   taxSummary as string)[],                               ",
						"          ",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as (type as string, value as string),urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"          ",
						"          ",
						"          ,                                ",
						"          ",
						"          losgStatus as(status as string, subStatus as string, fallout as string),  internetLOSCharacteristics as(additionalDetails as string,categoryType as string,discountedInternetIndicator as string, discountedInternetAdditionalAllowance as string, gatewayCTN as string, gatewayCTNStatus as string, internetProgramType as string, internetProtocolDigitalSubscriberLineAccess as string, internetNetworkProvider as string, retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string,parentComponentCode as string, primaryNetworkType as string),subscriberName as (emailAddress as string,   middleInitial as string,   prefix as string,  suffix as string, title as string ,    preferredContactMethod as string, previousLegalLastName as string, legalLastName as string, legalFirstName as string,                                        firstName as string,                                                   id as string,                                                   lastName as string,   additionalContactPhones as string,     ",
						"          primaryContactPhones as( extension as string,",
						"          contactPhoneType as string,                                                                            phoneNumber as string,                                                                          ",
						"               consentDetails as string)[]),                        dealerCode as string,                               fulfillmentMethod as string,                               id as string,                               installType as string,                               losgType as string,market as string,migrationIndicator as string,migrationSource as string,name as string,notes as string,preferredAreaCode as string,priceCode as string,primaryIndicator as string, productCategory as string,productOfferingId as string,productOrderActionId as string,productOrderActionReference as string,profileCode as string,rateType as string,requestedExecutionDate as string,salesOfferId as string,                             schedulingDetailReference as string,serviceArea as string,serviceAreaName as string,subMarket as string,sunsetDate as string,transferSubscriberDetail as (fromBillingAccountNumber as string,fromFAN as string,fromMobileNumber as string), sequence as string,                               serviceQualificationReference as string,                               type as string,vendorAccountId as string,                 billingSystemId as string,      iptvLOSCharacteristics as (freeSTBReceiverCount as integer, parentComponentCode as string),voipLOSCharacteristics as (reservedTelephoneNumber as string, e911Detail as(homeAlarmSystem as string, noMatchFound as string, id as string , termsAndCondition911 as (accepted as string,agreementText as string,agreementType as string,agreementURL as string,category as string,documentName as string,id as string,orderLevelIndicator as string,tncId as string,tncKey as string,tncRecordingOff as string,version as string, timestamp as string), address as string),  directoryListing as (additionalDetails as string,designation as string, name as string, title2 as string,parentComponentCode as string,subscriberName as string, omitAddressIndicator as string, listing as (address as string,listingType as string,listingCategory as string,listBy as string,releaseDetailForBillingIndicator as string) )[]),  wirelessLOSCharacteristics as (accountConversionStatus as string, activationDate as string, availabilityDate as string, billingSystemId as string, calculateTaxIndicator as string,coPayData as (addendDateAndTime as string,addendVersion as string, allowanceAmount as float, cancelCTN as string, enrollingCTN as string,receivingBAN as string,receivingFAN as string ), connectedCarDetail as (make as string, model as string, trim as string, vin as string, year as string, vehicleManufacturer as string), crossUpgradeIndicator as string, curbsideDelivery as string,inventoryStoreId as string, mobileNumber as string,paymentId as string, preOrderIndicator as string , primarySharedPlanIndicator as string,shippedHotIndicator as string, shoppingZipCode as string, storeId as string, subscriberCrossmarketIndicator as string, subscriptionClass as string , tradeInQuoteId as string, upgradeDetail as (relatedMobileNumber as string, relationship as string),upgradeQualificationDetails as (approvalNumber as string,contractExtended as string,deviceType as string,discountUOM as string,maximumMRC as integer,minimumCommitment as string,minimumMRC as integer,newAEUCheckerIndicator as string,offerCategory as string,policyCategory as string,priceList as string,qualificationLevel as string,qualificationMessage as string,qualificationType as string,upgradeEligibilityDate as string,upgradeFeeWaivedIndicator as string)[],splitLiabilityData as (addendDateAndTime as string,addendVersion as string,cancelCTN as string,enrollingCTN as string,oneTimeChargeIndicator as string,splitLiabilityValueIndicator as string,targetBAN as string,targetFAN as string,telecomManagerEmailAddress as string),manageCallList as (action as string,companyAListName as string,companyCTNList as string,contactCTN as string,id as string,overrideWithCompanyAListIndicator as string)), termsAndConditionAccepted as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncId as string, tncKey as string, tncRecordingOff as string, version as string )[], compensation as (repDetails as (dealerCode as string,repAction as string,repId as string,salesCode as string,type as string)[],submittedBy as string),additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[], ",
						"               numberPortDetail as (currentServiceProviderId as string ,customerCode as string, disconnectAcknowledged as (accepted as string,deviceInstallAgreementType as string,econsentAgreementType as string, timestamp as string,version as string),e911ServiceRoutingNumber as string,lightspeedLocalRoutingNumber as string,lastFourOfSSN as string,localExchangeRoutingGuideLocalRoutingNumber as string, name as string, nonATTPortIn as string,ospAccountNumber as string,ospName as string, pinOrPassword as string, portEligibility as string,portInType as string, portRequestNumber as string,portStatus as string,portTelephoneNumber as string,shipmentInfoUpdatedIndicator as string, portstatusReasonCode as string, portRequestLineStatus as string, portstatusReasonDescription as string   ,previousAddress as string,shadowLocalRoutingNumber as string,ssn as string,taxId as string), direcTVLOSCharacteristics as( dealerId as string,freeSTBReceiverCount as string, hasMoreThanThreeFloors as string, marketingSourceCode as string,moveInOrder as string, offerLanguage as string, parentComponentCode as string, serviceAgreement as string),",
						"               externalOrderReferences as (systemName as string,systemOrderReference as string, systemOrderReferenceType as string)[]",
						"               ",
						"               )[],",
						"          moveDetail as (additionalDetails as string,",
						"          actualDisconnectDate as string,",
						"          fromBillingAddress as string,",
						"          fromServiceAddress as string,",
						"          fromTelephoneNumber as string,",
						"          fullyAuthenticatedIndicator as string),",
						"          eCommercePartner as (additionalDetails as string,",
						"          affiliateName as string,",
						"          code as string,",
						"          name as string,",
						"          email as string,",
						"          phoneNumber as string,",
						"          referredDate as string,",
						"          type as string),",
						"          employeeDetail as (centralizedTableId as string,",
						"          class as string,",
						"          status as string,",
						"          uid as string),",
						"          deliveryPromiseNote as (english as string,",
						"          spanish as string),",
						"          integratedOffers as (category as string,ioId as string,ioSequence as string, qualifyingServiceDetails as string)[],",
						"          fleetDetail as (callBackDateTime as string,",
						"          customerAssignToId as string,",
						"          lineCount as string,",
						"          locationCount as string,",
						"          projectBillTo as string,",
						"          projectType as string,",
						"          timeZone as string,",
						"          companyName as string,",
						"          companyCreationIndicator as string,",
						"          erpAccount as string,",
						"          shipToId as string,",
						"          shippingFeeId as string),",
						"          loginProfile as (email as string,",
						"          orderInitiator as string,",
						"          profileId as string,",
						"          userGuId as string,",
						"          userId as string),",
						"          miscellaneousDetails as (code as string,parentType as string,type as string,value as string)[],",
						"          salesAgent as (agentCode as string,",
						"          location as string,",
						"          salesCode as string,",
						"          uid as string),",
						"          paymentTenders as ( paymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string,paymentMethodId as string,ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as string, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),additionalDetails as string, depositOption as string, fixedAmount as float, id as string, selectedOptionId as string,sequence as string, collectedInOtherSystem as string)[],",
						"          accounts as (provisioningSystems as (provisioningSystem as (systemName as string,systemOrderReference as string)[]),contractAcceptance as (acceptance as string,contractLength as string,versionNumber as string), creditAlert as (fraudAlert as string, generalMessage as string), ctnValidatedIndicator as string,customerCode as string,delinquentAccountIndicator as string, electronicLetterOfAuthorization as (electronicDisclosureAuthorization as string, internetServiceAuthorization as string,letterOfAuthorizationURL as string, localServiceAuthorization as string, localTollProviderAuthorization as string, longDistanceServiceProvider as string), emailValidatedIndicator as string, existingAutoBillStatus as string, existingAutoBillIndicator as string, landLineNumber as string, liabilityType as string, marketingSourceCode as string, mdmProfileSetting as (additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],profileName as string), partnerJointBillType as string, pmoIndicator as string, priceCode as string, priceMatch as string, subMarket as string, targetCTN as string, thirdPartyCombinedBill as string, winBackIndicator as string, consentToCCIndicator as string ,bankingPartner as (customerId as string, name as string), bigData as string, billPaymentDueDate as string, cardOnFileStatus as string, conflictingServiceDetails as (accountNumber as string, btn as (customerCode as string,paymentAmount as string,tn as string), changeType as string, customerCode as string, disconnectDate as string , dslmemberDetail as (authenticatedIndicator as string ,memberId as string,reuseDSLMemberIdIndicator as string),id as string, legacyExistIndicator as string, productDetails as (action as string, packageCode as string, previousProductTransportType as string,productCode as string,productDescription as string)[], referallOfCallsIndicator as string , region as string, state as string)[], accountCrossmarketIndicator as string, acpEligibility as (acpTransactionId as string, acpClassification as string), anchorCTN as string, unifiedAccount as(convergeOrderIndicator as string, convergeValidationIndicator as string, convergedBilling as string,premierIndicator as string, unifiedAccountDiscount as string, unifiedAccountExisting as string,unifiedAccountPending as string, unifiedAccountRebate as string, unifiedAccountReference as string, unifiedAccountReward as string)     ,negotiateConflictCustomer as(conflictCustomerType as string, conflictLandlordDetail as (approvalDate as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string, phoneNumberType as string), landlordApproval as string), existingCustomerDetail as (billingTelephoneNumber as string,billingAccountNumber as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string,phoneNumberType as string),moveOrCeaseOrderNumber as string)),   cardOnFilePaymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as string, tn as string), cash as (paymentAmount as string,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as string,paymentToken as string), store as (last4Digits as string, paymentAmount as string, profileOwnerId as string),                       ePaymentMethod as( address as string , ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),                    accountCategory as string,                          accountSubCategory as string,                          accountSubType as string,                          accountType as string,                          autoPayReason as string,                          b2bReference as string,                          billingDeliveryPreference as string,                          billingLanguagePreference as string,                          businessAccountName as string,                          cpni as string,                          ebillReason as string,                          enterpriseType as string,                          gigaPower as string,                          id as string,                          langId as string,                          market as string,                          passCode as string,                          paymentArrangement as string,                          sequence as string,                          spokenLanguagePreference as string,                         billingAccountNumber as string, billingAccountTelephoneNumber as string,   ",
						"          primaryCTN as  string,",
						"          additionalDetails as string,                       ",
						"          autopayPaymentMethod as( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string, paymentMethodId as string,  ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),",
						"          ",
						"billingDetail as(billingType as string,",
						"accountStatus as string,",
						"nextBillingCycleDate as string,                                                   ",
						"          address as(additionalDetails as  string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),                                                                  unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),                                                  ",
						"authentication as(dob as string,driversLicense as (licenseExpirationDate as string,licenseNumber as string,state as string),employerDetail as (employerName as string,employerPhoneNumber as string),federalTaxId as string,gender as string,lastFourOfSSN as string,motherMaidenName as string,                                                                       ssn as string,ssnRefusedIndicator as string,stateId as (idNumber as string,state as string),                                                                       securityVerification as(                                                                           pin as string,                                                                            securityAnswer as string,                                                                            securityQuestion as string)),",
						"previousAddress as string,previousPhoneNumber as string,",
						"  name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]) )[],   ",
						"",
						"          businessAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                ",
						"          parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),",
						"          unparsedAddress as(          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),",
						"          ",
						"          creditCheck as( writeOffDate as string, creditReferenceDate as string,currentAccountBalance as float, currentDeniablePastDueAmount as string, currentNonDeniablePastDueAmount as string,currentNonRegulatedPastDueAmount as string,currentPastDueAmount as string,currentRegulatedPastDueAmount as string, customerApprovalSystemTransactionId as string, debtPaidStatus as string, depositAmount as string, depositStatus as string, electronicIdVerifierLaunched as string, electronicIdVerifierRequired as string,  electronicIdVerifierResults as string,exchangeListFound as string,expressPayDetailHeld as string, finalBillAccounts as string, ignoreDeposit as string, minimumAmountDue as string , nonRefundableCreditFee as string, numberApprovedLines as string, numberLinesRequired as string, productsInclude as string, proprietarySegment as string, reasonCode as string, reasonCodeDescription as string, safeScanAlertIndicator as string, safeScanPassIndicator as string, writeOffAmount as string, addAccountGUId as string,applicationApprovalDate as string, applicationExpiresDate as string,creditInquiryOpen as string,creditPolicyToken as string,creditScoreResult as string, creditStatus as string,creditVerified as string, applicationNumber as string,    debtAccounts as (accountBalance as string, affiliateId as string, customerAgreementCode as string, debtAccountNumber as string, disconnectDate as string, individualCustomerKey as string, minimumAmountDue as string)[],                                creditBand as string,                                    creditCheckManagementTransactionId as string,                                    creditCheckRanIndicator as string,                                    creditClass as string,                                    depositRequired as string,                                    electronicIdNumber as string,                                    individualCustomerKey as string,                                    singleCreditQueryWirelessIndicator as string,                                    treatmentCode as string,                                    treatmentMessage as string),",
						"          ",
						"                                ",
						"",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),   ",
						"          ",
						"          serviceFacilityQualifications as (additionalDetails as string, cpeRequiredIndicator as string, facilityCheck as string,  gfastDeviceWireType as string, potsAvailableIndicator as string,                                      dslAvailableIndicator as string,                                         frequency17MhzIndicator as string,                                         id as string,                                         preferredNetworkType as string,                                         profileCode as string,                                         vectoringIndicator as string,                                        address as string)[])[],",
						"          additionalDetails as (type as string, value as string, code as string, parentType as string, sequence as integer)[],",
						"          debtAccounts as (accountCategory as string, accountSubCategory as string, affiliateId as string,  amount    as string, debtAccountNumber    as string, debtPaidStatus    as string, id   as string, paymentMethodReference   as string, provider   as string, settledBy   as string, system   as string, systemDivision    as string)[],",
						"          employeeReferralDetail as (appId as string,",
						"          employeeUId as string,",
						"          packageId as string),",
						"          relatedParty as (endDateTime as string, id as string,role as string, startDateTime as string, type as string, name as string)[],",
						"          b2bDetail as string,",
						"          contactDetail as (additionalDetails as string,",
						"          additionalEmailRecipients as string,",
						"          authorizedContacts as string,",
						"          orderConfirmationByEmailPermissionIndicator as string,",
						"          orderPickUpCTN as string,",
						"          permissionForOutboundCallIndicator as string,",
						"          personalDetail as (additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          id as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          primaryContactPhones as (consentDetails as string,",
						"contactPhoneType as string,",
						"smsValidatedIndicator as string,",
						"extension as string,",
						"phoneNumber as string)[],",
						"          suffix as string,",
						"          title as string),",
						"          preferredContactMethod as string,",
						"          preferredTimeOfDayForContact as string,",
						"          primaryEmailAddress as string,",
						"          productUpdatesByEmailPermissionIndicator as string,",
						"          secondaryEmailAddress as string,",
						"          timeZone as string,",
						"          unpublishedContactByPhonePermissionIndicator as string),",
						"          creditPolicy as (additionalDetails as string,",
						"          creditPolicyTransactionId as string,",
						"          crsmOnFlag as string,",
						"          previousCreditPolicyTransactionId as string,",
						"          policyAcceptedIndicator as string,",
						"          uucpStatus as string),",
						"          installmentDetail as (multiIndicator as string,",
						"          numberOfInstallments as string),",
						"          priceList as (additionalDetails as string,amount as float,  baseAmount as float,    creditFeeType as string,                              currencyType as string,      installmentEligibility as string,      msrp as float,     taxDetail as string,  total as float,                priceType as string)[],",
						"          priceSummaryList as (amount as float,                                    currencyType as string,                                    priceType as string,                                    total as float,                                    taxSummary as string)[],",
						"          productGroups as (additionalDetails as string, id as string,                                         name as string,                                         sequence as integer,                                         type as string,                                         packageCharacteristics as(description as string, code as string, type as string),",
						"          discountOffer as string,  characteristics as (id as string),",
						"          sharedPlanCharacteristics as (",
						"          dataGroupId as string,",
						"familyGroupId as string,",
						"groupReferencesCode as string,",
						"planType as string,",
						"primarySubscriberNumber as string))[],",
						"          promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[],",
						"          referenceDetail as (commonOrderIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          fraudDetectionDetail as (additionalDetails as (type as string, parentType as string, code as string, value as string, sequence as integer)[],",
						"          authenticationRequestId as string,",
						"          efcCallIndicator as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string),",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          falloutDetails as (code as string, dateTime as string, description as string, operation as string)[],",
						"          encryptedIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          bulkIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          associatedRequestID as string),",
						"          schedulingDetails as ( serviceLevel as string, timeZone as string, valueSegmentationTier as string,",
						"          landlordDetail as (landlordName as string,landlordPermission as string,landlordPhoneNumber as string),",
						"          nffl as (fulfillerName as string, fulfillerTN as string, nfflFlag as string), ",
						"          preference as string, reservationId as string, scheduleType as string, dispatchType as string, deferredInstallationDuration as string, eventCode as string, eventCodeEnteredManuallyIndicator as string, ",
						"          installationPartner as(partnerName as string, projectPurchaseOrderAmount as string , projectPurchaseOrderDate as string , projectPurchaseOrderNumber as string, projectBilling as string), appointmentComment as string, bestTimeToReach as string, billingInstallmentsIndicator as string, businessName as string, ",
						"          connecTechInstallationOptions as string,",
						"          additionalDetails as string,id as string,                                                   installType as string,                                                   realTimeCalendarIndicator as string,                                                   scheduleAsSoonAsPossibleIndicator as string,                                                   ",
						"          ",
						"          ",
						"           name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"",
						"          scheduleByDayAndTime as (anyDayOfTheWeek as string,friday as string, monday as string, saturday as string, sunday as string, thursday as string, tuesday as string , wednesday as string),",
						"          actualSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string),",
						"          confirmedSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string))[],",
						"          shippingDetails as (",
						"          additionalDetails as (code as string,parentType as string,type as string,value as string,sequence as integer)[],",
						"               billingCode as string,carrierPreference as string,id as string,sequence as integer,",
						"               ",
						"               price as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string,installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float),",
						"               recipientName as (",
						"                         ",
						"                         emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"                         ",
						"                         ",
						"                         ",
						"                    shipmentCommitDate as (fromDate as string,toDate as string),shippingCode as string,shippingMethod as string,shippingPriceCode as string,",
						"                    ",
						"               address as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,clli8 as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"               ",
						"               ",
						"               ",
						"                    )[],",
						"          singleDispatchDetail as (eligibleIndicator as string,",
						"          geoAreaAvailableIndicator as string,",
						"          satelliteTVOnlyEligibleIndicator as string),",
						"          sourceDetail as (application as string,",
						"          expressCheckOutIndicator as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetail as (groupId as string,",
						"          groupName as string,",
						"          resourceCenterTicketNumber as string),",
						"          responseMode as string,",
						"          sequence as integer,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          region as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          zip as string,",
						"          additionalDetails as (code as string, type as string, value as string, parentType as string, sequence as integer )[]),",
						"          statusDetail as (status as string,",
						"          subStatus as string,",
						"          fallout as (code as string,",
						"          dateTime as string,",
						"          description as string,",
						"          operation as string)),",
						"          termsAndConditions as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncId as string, tncKey as string, tncRecordingOff as string, version as string )[]),",
						"          transactionLogs as (comments as string,",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          updateInfos as string,",
						"          channel as string,",
						"          orderStatus as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          changedLosgReferenceId as string,",
						"          recordId as string,",
						"          queueName as string,",
						"          parentOrderId as string,",
						"          startTime as string,",
						"          endTime as string,",
						"          transactionId as string,",
						"          orderId as string,",
						"          losgs as (losgReferenceId as string,                                                       service as string,                                                       serviceType as string,                                                       status as string,                                                       subStatus as string,wirelessNumber as string)[])[],",
						"          Errors as (Error as (ErrorCode as string,ErrorDescription as string , Reference as ( IdRef as string, Type as string))[])))),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJsonOrderData",
						"FitlerOutLatestEvent select(mapColumn(",
						"          OrderData = orderjson_1.orderEvent.data.order,",
						"          customerOrderNumber = customerordernumber,",
						"          ordertask_channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          lastmodified_date,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          sourceDetail = orderjson_1.orderEvent.data.order.sourceDetail,",
						"          schedulingDetails = orderjson_1.orderEvent.data.order.schedulingDetails,",
						"          dc_eventtime,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          acceptedDate = orderjson_1.orderEvent.data.order.acceptedDate,",
						"          submittedDate = orderjson_1.orderEvent.data.order.submittedDate,",
						"          createdDate = orderjson_1.orderEvent.data.order.createdDate,",
						"          updatedDate = orderjson_1.orderEvent.data.order.updatedDate",
						"     ),",
						"     partitionBy('roundRobin', 8),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderData",
						"selectOrderData derive(submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          channel = coalesce(ordertask_channel,sourcedetail_channel),",
						"          updatedDate = toTimestamp(toLong(toString(byName('updatedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> ConvertDateTime",
						"ConvertDateTime alterRow(upsertIf(true())) ~> AlterRowOrderData",
						"selectOrderData foldDown(unroll(OrderData.additionalDetails, OrderData.additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          type = OrderData.additionalDetails.type,",
						"          parentType = OrderData.additionalDetails.parentType,",
						"          sequence = OrderData.additionalDetails.sequence,",
						"          value = OrderData.additionalDetails.value,",
						"          code = OrderData.additionalDetails.code,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderAdditionalDetail",
						"derivedColumn65 alterRow(upsertIf(true())) ~> AlterRowOrderAdditionalDetails",
						"filter28 alterRow(upsertIf(true())) ~> AlterRowOrderContactDetails",
						"selectOrderData foldDown(unroll(OrderData.priceList, OrderData.priceList),",
						"     mapColumn(",
						"          additionalDetails = OrderData.priceList.additionalDetails,",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          amount = OrderData.priceList.amount,",
						"          baseAmount = OrderData.priceList.baseAmount,",
						"          creditFeeType = OrderData.priceList.creditFeeType,",
						"          currencyType = OrderData.priceList.currencyType,",
						"          installmentEligibility = OrderData.priceList.installmentEligibility,",
						"          msrp = OrderData.priceList.msrp,",
						"          taxDetail = OrderData.priceList.taxDetail,",
						"          total = OrderData.priceList.total,",
						"          priceType = OrderData.priceList.priceType,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenPriceList",
						"flattenPriceList alterRow(upsertIf(true())) ~> AlterRowOrderPriceList",
						"selectOrderData foldDown(unroll(OrderData.productGroups, OrderData.productGroups),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Product_id = OrderData.productGroups.id,",
						"          name = OrderData.productGroups.name,",
						"          sequence = OrderData.productGroups.sequence,",
						"          ProductGrouptype = OrderData.productGroups.type,",
						"          description = OrderData.productGroups.packageCharacteristics.description,",
						"          code = OrderData.productGroups.packageCharacteristics.code,",
						"          packageCharacteristicstype = OrderData.productGroups.packageCharacteristics.type,",
						"          lastmodified_date,",
						"          discountOffer = OrderData.productGroups.discountOffer,",
						"          additionalDetails = OrderData.productGroups.additionalDetails,",
						"          characteristicsid = OrderData.productGroups.characteristics.id,",
						"          sharedPlandataGroupId = OrderData.productGroups.sharedPlanCharacteristics.dataGroupId,",
						"          sharedPlanfamilyGroupId = OrderData.productGroups.sharedPlanCharacteristics.familyGroupId,",
						"          sharedPlangroupReferencesCode = OrderData.productGroups.sharedPlanCharacteristics.groupReferencesCode,",
						"          sharedPlanplanType = OrderData.productGroups.sharedPlanCharacteristics.planType,",
						"          sharedPlanprimarySubscriberNumber = OrderData.productGroups.sharedPlanCharacteristics.primarySubscriberNumber,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenProductGroups",
						"filter24 alterRow(upsertIf(true())) ~> AlterRowOrderProductGroups",
						"selectOrderData foldDown(unroll(OrderData.promotions, OrderData.promotions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          amount = OrderData.promotions.amount,",
						"          duration = OrderData.promotions.duration,",
						"          Promotion_id = OrderData.promotions.id,",
						"          promotionAppliedBy = OrderData.promotions.promotionAppliedBy,",
						"          baseOfferId = OrderData.promotions.baseOfferId,",
						"          Promotionpercent = OrderData.promotions.percent,",
						"          promotionCode = OrderData.promotions.promotionCode,",
						"          promotionCycle = OrderData.promotions.promotionCycle,",
						"          promotionId = OrderData.promotions.promotionId,",
						"          promotionName = OrderData.promotions.promotionName,",
						"          promotionType = OrderData.promotions.promotionType,",
						"          promotionTypeDetail = OrderData.promotions.promotionTypeDetail,",
						"          sequence = OrderData.promotions.sequence,",
						"          unitOfMeasurement = OrderData.promotions.unitOfMeasurement,",
						"          lastmodified_date,",
						"          additionalDetails = OrderData.promotions.additionalDetails,",
						"          complexDiscountIndicator = OrderData.promotions.complexDiscountIndicator,",
						"          componentConfigurations = OrderData.promotions.componentConfigurations,",
						"          couponCode = OrderData.promotions.couponCode,",
						"          displayLevel = OrderData.promotions.displayLevel,",
						"          ioId = OrderData.promotions.ioId,",
						"          effectiveDate = OrderData.promotions.effectiveDate,",
						"          effectiveInDays = OrderData.promotions.effectiveInDays,",
						"          endDate = OrderData.promotions.endDate,",
						"          fixedAmount = OrderData.promotions.fixedAmount,",
						"          ioSequence = OrderData.promotions.ioSequence,",
						"          parentPricePlanCode = OrderData.promotions.parentPricePlanCode,",
						"          payInAdvanceProdId = OrderData.promotions.payInAdvanceProdId,",
						"          promotionBillingCode = OrderData.promotions.promotionBillingCode,",
						"          qualifyingServiceDetails = OrderData.promotions.qualifyingServiceDetails,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderPromotions",
						"derivedColumn68 alterRow(upsertIf(true())) ~> AlterRowOrderPromotions",
						"filter124 alterRow(upsertIf(true())) ~> AlterRow1",
						"selectOrderData foldDown(unroll(OrderData.termsAndConditions, OrderData.termsAndConditions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accepted = OrderData.termsAndConditions.accepted,",
						"          agreementText = OrderData.termsAndConditions.agreementText,",
						"          agreementType = OrderData.termsAndConditions.agreementType,",
						"          category = OrderData.termsAndConditions.category,",
						"          id = OrderData.termsAndConditions.id,",
						"          agreementURL = OrderData.termsAndConditions.agreementURL,",
						"          documentName = OrderData.termsAndConditions.documentName,",
						"          orderLevelIndicator = OrderData.termsAndConditions.orderLevelIndicator,",
						"          tncId = OrderData.termsAndConditions.tncId,",
						"          timestamp = OrderData.termsAndConditions.timestamp,",
						"          tncKey = OrderData.termsAndConditions.tncKey,",
						"          tncRecordingOff = OrderData.termsAndConditions.tncRecordingOff,",
						"          version = OrderData.termsAndConditions.version,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTermsandConditions",
						"filter20 derive(timestamp = toTimestamp(toLong(toString(byName('timestamp'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> ConvertTimestamp",
						"coalacc foldDown(unroll(serviceFacilityQualifications, serviceFacilityQualifications),",
						"     mapColumn(",
						"          additionalDetails = serviceFacilityQualifications.additionalDetails,",
						"          customerOrderNumber,",
						"          Account_id,",
						"          Actsequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          cpeRequiredIndicator = serviceFacilityQualifications.cpeRequiredIndicator,",
						"          facilityCheck = serviceFacilityQualifications.facilityCheck,",
						"          gfastDeviceWireType = serviceFacilityQualifications.gfastDeviceWireType,",
						"          potsAvailableIndicator = serviceFacilityQualifications.potsAvailableIndicator,",
						"          dslAvailableIndicator = serviceFacilityQualifications.dslAvailableIndicator,",
						"          frequency17MhzIndicator = serviceFacilityQualifications.frequency17MhzIndicator,",
						"          id = serviceFacilityQualifications.id,",
						"          preferredNetworkType = serviceFacilityQualifications.preferredNetworkType,",
						"          profileCode = serviceFacilityQualifications.profileCode,",
						"          vectoringIndicator = serviceFacilityQualifications.vectoringIndicator,",
						"          address = serviceFacilityQualifications.address",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenServiceFacilityQualifications",
						"filter101 foldDown(unroll(billingDetail, billingDetail),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          accountStatus = billingDetail.accountStatus,",
						"          unparsedAddress_county = billingDetail.address.unparsedAddress.county,",
						"          billingType = billingDetail.billingType,",
						"          placeId = billingDetail.address.placeId,",
						"          addressId = billingDetail.address.addressId,",
						"          connectedCommunityId = billingDetail.address.connectedCommunityId,",
						"          BillingAddress_id = billingDetail.address.id,",
						"          dwellingType = billingDetail.address.dwellingType,",
						"          validatedIndicator = billingDetail.address.validatedIndicator,",
						"          auxillaryaddress_line1 = billingDetail.address.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = billingDetail.address.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = billingDetail.address.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = billingDetail.address.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = billingDetail.address.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = billingDetail.address.codingAccuracySupportSystemAddress,",
						"          addressLines = billingDetail.address.codingAccuracySupportSystemAddress.addressLines,",
						"          parsed_addInstructions = billingDetail.address.parsedAddress.addInstructions,",
						"          parsed_addressChanged = billingDetail.address.parsedAddress.addressChanged,",
						"          parsed_addressMatchCode = billingDetail.address.parsedAddress.addressMatchCode,",
						"          parsed_addressStreetLine = billingDetail.address.parsedAddress.addressStreetLine,",
						"          parsed_addressType = billingDetail.address.parsedAddress.addressType,",
						"          parsed_apartmentUnit = billingDetail.address.parsedAddress.apartmentUnit,",
						"          parsed_apartmentUnitNumber = billingDetail.address.parsedAddress.apartmentUnitNumber,",
						"          parsed_assignedStreetNumber = billingDetail.address.parsedAddress.assignedStreetNumber,",
						"          parsed_attention = billingDetail.address.parsedAddress.attention,",
						"          parsed_buildingType = billingDetail.address.parsedAddress.buildingType,",
						"          parsed_city = billingDetail.address.parsedAddress.city,",
						"          parsed_country = billingDetail.address.parsedAddress.country,",
						"          parsed_county = billingDetail.address.parsedAddress.county,",
						"          parsed_countyCode = billingDetail.address.parsedAddress.countyCode,",
						"          parsed_direction = billingDetail.address.parsedAddress.direction,",
						"          parsed_directionPrefix = billingDetail.address.parsedAddress.directionPrefix,",
						"          parsed_disconnectDate = billingDetail.address.parsedAddress.disconnectDate,",
						"          parsed_exchangeCode = billingDetail.address.parsedAddress.exchangeCode,",
						"          parsed_exhaustCode = billingDetail.address.parsedAddress.exhaustCode,",
						"          parsed_houseNumber = billingDetail.address.parsedAddress.houseNumber,",
						"          parsed_houseNumberPrefix = billingDetail.address.parsedAddress.houseNumberPrefix,",
						"          parsed_houseNumberSuffix = billingDetail.address.parsedAddress.houseNumberSuffix,",
						"          parsed_incorporatedIndicator = billingDetail.address.parsedAddress.incorporatedIndicator,",
						"          parsed_internationalZip = billingDetail.address.parsedAddress.internationalZip,",
						"          parsed_lastDisconnectedTransportType = billingDetail.address.parsedAddress.lastDisconnectedTransportType,",
						"          parsed_lastNetworkAccessDeviceType = billingDetail.address.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsed_legalEntity = billingDetail.address.parsedAddress.legalEntity,",
						"          parsed_level = billingDetail.address.parsedAddress.level,",
						"          parsed_levelNumber = billingDetail.address.parsedAddress.levelNumber,",
						"          parsed_linkKey = billingDetail.address.parsedAddress.linkKey,",
						"          parsed_postOfficeBox = billingDetail.address.parsedAddress.postOfficeBox,",
						"          parsed_primaryAddressLine = billingDetail.address.parsedAddress.primaryAddressLine,",
						"          parsed_primaryNPANXX = billingDetail.address.parsedAddress.primaryNPANXX,",
						"          parsed_province = billingDetail.address.parsedAddress.province,",
						"          parsed_rateCenterCode = billingDetail.address.parsedAddress.rateCenterCode,",
						"          parsed_rateZoneBanCode = billingDetail.address.parsedAddress.rateZoneBanCode,",
						"          parsed_rsagValidationIndicator = billingDetail.address.parsedAddress.rsagValidationIndicator,",
						"          parsed_ruralRouteBoxNumber = billingDetail.address.parsedAddress.ruralRouteBoxNumber,",
						"          parsed_ruralRouteCenterNumber = billingDetail.address.parsedAddress.ruralRouteCenterNumber,",
						"          parsed_secondaryAddressLine = billingDetail.address.parsedAddress.secondaryAddressLine,",
						"          parsed_siteAddressId = billingDetail.address.parsedAddress.siteAddressId,",
						"          parsed_siteId = billingDetail.address.parsedAddress.siteId,",
						"          parsed_smartMoves = billingDetail.address.parsedAddress.smartMoves,",
						"          parsed_state = billingDetail.address.parsedAddress.state,",
						"          parsed_streetName = billingDetail.address.parsedAddress.streetName,",
						"          parsed_streetNameSuffix = billingDetail.address.parsedAddress.streetNameSuffix,",
						"          parsed_streetType = billingDetail.address.parsedAddress.streetType,",
						"          parsed_structure = billingDetail.address.parsedAddress.structure,",
						"          parsed_structureNumber = billingDetail.address.parsedAddress.structureNumber,",
						"          parsed_tarCode = billingDetail.address.parsedAddress.tarCode,",
						"          parsed_telephoneNumber = billingDetail.address.parsedAddress.telephoneNumber,",
						"          parsed_urbanizationCode = billingDetail.address.parsedAddress.urbanizationCode,",
						"          parsed_videoHubOffice = billingDetail.address.parsedAddress.videoHubOffice,",
						"          parsed_zip = billingDetail.address.parsedAddress.zip,",
						"          parsed_zipCodeExtension = billingDetail.address.parsedAddress.zipCodeExtension,",
						"          parsed_zipGeoCode = billingDetail.address.parsedAddress.zipGeoCode,",
						"          unparsed_addressLine1 = billingDetail.address.unparsedAddress.addressLine1,",
						"          unparsed_addressLine3 = billingDetail.address.unparsedAddress.addressLine3,",
						"          unparsed_attention = billingDetail.address.unparsedAddress.attention,",
						"          unparsed_elevation = billingDetail.address.unparsedAddress.elevation,",
						"          unparsed_postOfficeBox = billingDetail.address.unparsedAddress.postOfficeBox,",
						"          unparsed_province = billingDetail.address.unparsedAddress.province,",
						"          unparsed_ruralRoute = billingDetail.address.unparsedAddress.ruralRoute,",
						"          unparsed_structure = billingDetail.address.unparsedAddress.structure,",
						"          unparsed_unit = billingDetail.address.unparsedAddress.unit,",
						"          unparsed_urbanizationCode = billingDetail.address.unparsedAddress.urbanizationCode,",
						"          unparsed_city = billingDetail.address.unparsedAddress.city,",
						"          unparsed_country = billingDetail.address.unparsedAddress.country,",
						"          unparsed_state = billingDetail.address.unparsedAddress.state,",
						"          unparsed_zip = billingDetail.address.unparsedAddress.zip,",
						"          unparsed_zipCodeExtension = billingDetail.address.unparsedAddress.zipCodeExtension,",
						"          unparsed_internationalZip = billingDetail.address.unparsedAddress.internationalZip,",
						"          unparsed_addressLine2 = billingDetail.address.unparsedAddress.addressLine2,",
						"          dob = billingDetail.authentication.dob,",
						"          ssn = billingDetail.authentication.ssn,",
						"          pin = billingDetail.authentication.securityVerification.pin,",
						"          securityAnswer = billingDetail.authentication.securityVerification.securityAnswer,",
						"          securityQuestion = billingDetail.authentication.securityVerification.securityQuestion,",
						"          motherMaidenName = billingDetail.authentication.motherMaidenName,",
						"          name = billingDetail.name,",
						"          additionalDetails = billingDetail.address.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          emailAddress = billingDetail.name.emailAddress,",
						"          firstName = billingDetail.name.firstName,",
						"          id = billingDetail.name.id,",
						"          middleInitial = billingDetail.name.middleInitial,",
						"          lastName = billingDetail.name.lastName,",
						"          additional_contactPhones = billingDetail.name.additionalContactPhones,",
						"          consentDetails = billingDetail.name.primaryContactPhones.consentDetails,",
						"          extension = billingDetail.name.primaryContactPhones.extension,",
						"          legalFirstName = billingDetail.name.legalFirstName,",
						"          legalLastName = billingDetail.name.legalLastName,",
						"          previousLegalLastName = billingDetail.name.previousLegalLastName,",
						"          suffix = billingDetail.name.suffix,",
						"          title = billingDetail.name.title,",
						"          previousAddress = billingDetail.previousAddress,",
						"          previousPhoneNumber = billingDetail.previousPhoneNumber,",
						"          preferredContactMethod = billingDetail.name.preferredContactMethod,",
						"          phoneNumber = billingDetail.name.primaryContactPhones.phoneNumber,",
						"          contactPhoneType = billingDetail.name.primaryContactPhones.contactPhoneType,",
						"          licenseExpirationDate = billingDetail.authentication.driversLicense.licenseExpirationDate,",
						"          licenseNumber = billingDetail.authentication.driversLicense.licenseNumber,",
						"          licensestate = billingDetail.authentication.driversLicense.state,",
						"          employerName = billingDetail.authentication.employerDetail.employerName,",
						"          employerPhoneNumber = billingDetail.authentication.employerDetail.employerPhoneNumber,",
						"          federalTaxId = billingDetail.authentication.federalTaxId,",
						"          gender = billingDetail.authentication.gender,",
						"          lastFourOfSSN = billingDetail.authentication.lastFourOfSSN,",
						"          ssnRefusedIndicator = billingDetail.authentication.ssnRefusedIndicator,",
						"          StateidNumber = billingDetail.authentication.stateId.idNumber,",
						"          stateIdIssuedState = billingDetail.authentication.stateId.state,",
						"          nextBillingCycleDate = billingDetail.nextBillingCycleDate,",
						"          sequence,",
						"          line1 = billingDetail.address.auxiliaryAddress.line1,",
						"          unparsed_county = billingDetail.address.unparsedAddress.county",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenBillingDetails",
						"coalacc alterRow(upsertIf(true())) ~> AlterRowOrderAccounts",
						"filter2 alterRow(upsertIf(true())) ~> AlterRow2",
						"filter1 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsServiceAddress",
						"flattenServiceFacilityQualifications alterRow(upsertIf(true())) ~> AlterRowOrderAccountsServiceFacilityQualification",
						"filter5 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsBillingDetails",
						"selectOrderData foldDown(unroll(OrderData.losgs, OrderData.losgs),",
						"     mapColumn(",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          timestamp = OrderData.losgs.voipLOSCharacteristics.e911Detail.termsAndCondition911.timestamp,",
						"          accountReference = OrderData.losgs.accountReference,",
						"          actionReasonCode = OrderData.losgs.actionReasonCode,",
						"          previousProductOrderActionId = OrderData.losgs.previousProductOrderActionId,",
						"          actionReason = OrderData.losgs.actionReason,",
						"          actionType = OrderData.losgs.actionType,",
						"          acceptEULA = OrderData.losgs.addpLOSCharacteristics.acceptEULA,",
						"          tenantAccountId = OrderData.losgs.addpLOSCharacteristics.tenantAccountId,",
						"          tenantAccountStatus = OrderData.losgs.addpLOSCharacteristics.tenantAccountStatus,",
						"          billingSystemId = OrderData.losgs.billingSystemId,",
						"          bundleGroupId = OrderData.losgs.bundleGroupId,",
						"          childOrderId = OrderData.losgs.childOrderId,",
						"          companyCode = OrderData.losgs.companyCode,",
						"          creditPolicySecurityType = OrderData.losgs.creditPolicySecurityType,",
						"          conflictingServiceDetailReferences = OrderData.losgs.conflictingServiceDetailReferences,",
						"          iptvLOSCharacteristics = OrderData.losgs.iptvLOSCharacteristics,",
						"          dealerCode = OrderData.losgs.dealerCode,",
						"          divisionCode = OrderData.losgs.divisionCode,",
						"          effectiveDate = OrderData.losgs.effectiveDate,",
						"          engageVideoId = OrderData.losgs.engageVideoId,",
						"          entitlementBenefit = OrderData.losgs.entitlementBenefit,",
						"          fnGuId = OrderData.losgs.fnGuId,",
						"          fnUserId = OrderData.losgs.fnUserId,",
						"          fnType = OrderData.losgs.fnType,",
						"          freeDevicePolicyId = OrderData.losgs.freeDevicePolicyId,",
						"          fulfillmentMethod = OrderData.losgs.fulfillmentMethod,",
						"          fulfillerName = OrderData.losgs.fulfillerName,",
						"          fulfillerCode = OrderData.losgs.fulfillerCode,",
						"          fwCAF2AddressIndicator = OrderData.losgs.fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator = OrderData.losgs.fwiMoveInIndicator,",
						"          Losg_id = OrderData.losgs.id,",
						"          installType = OrderData.losgs.installType,",
						"          losgType = OrderData.losgs.losgType,",
						"          name = OrderData.losgs.name,",
						"          productCategory = OrderData.losgs.productCategory,",
						"          schedulingDetailReference = OrderData.losgs.schedulingDetailReference,",
						"          sequence = OrderData.losgs.sequence,",
						"          serviceQualificationReference = OrderData.losgs.serviceQualificationReference,",
						"          subscriberName = OrderData.losgs.subscriberName,",
						"          type = OrderData.losgs.type,",
						"          wirelessLOSCharacteristics = OrderData.losgs.wirelessLOSCharacteristics,",
						"          internetLOSCharacteristics = OrderData.losgs.internetLOSCharacteristics,",
						"          lineItems = OrderData.losgs.lineItems,",
						"          serviceProvider = OrderData.losgs.serviceProvider,",
						"          price = OrderData.losgs.price,",
						"          priceSummaryList = OrderData.losgs.priceSummaryList,",
						"          serviceAddress = OrderData.losgs.serviceAddress,",
						"          losgStatus = OrderData.losgs.losgStatus,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          termsAndConditionAccepted = OrderData.losgs.termsAndConditionAccepted,",
						"          voipLOSCharacteristics = OrderData.losgs.voipLOSCharacteristics,",
						"          numberPortDetail = OrderData.losgs.numberPortDetail,",
						"          compensation = OrderData.losgs.compensation,",
						"          additionalDetails = OrderData.losgs.additionalDetails,",
						"          direcTVLOSCharacteristics = OrderData.losgs.direcTVLOSCharacteristics,",
						"          externalOrderReferences = OrderData.losgs.externalOrderReferences,",
						"          dslLOSCharacteristics = OrderData.losgs.dslLOSCharacteristics,",
						"          installationInstructions = OrderData.losgs.installationInstructions,",
						"          promotions = OrderData.losgs.promotions,",
						"          userDefinedLabels = OrderData.losgs.userDefinedLabels,",
						"          market = OrderData.losgs.market,",
						"          migrationIndicator = OrderData.losgs.migrationIndicator,",
						"          migrationSource = OrderData.losgs.migrationSource,",
						"          notes = OrderData.losgs.notes,",
						"          preferredAreaCode = OrderData.losgs.preferredAreaCode,",
						"          priceCode = OrderData.losgs.priceCode,",
						"          primaryIndicator = OrderData.losgs.primaryIndicator,",
						"          productOfferingId = OrderData.losgs.productOfferingId,",
						"          productOrderActionId = OrderData.losgs.productOrderActionId,",
						"          productOrderActionReference = OrderData.losgs.productOrderActionReference,",
						"          profileCode = OrderData.losgs.profileCode,",
						"          rateType = OrderData.losgs.rateType,",
						"          requestedExecutionDate = OrderData.losgs.requestedExecutionDate,",
						"          salesOfferId = OrderData.losgs.salesOfferId,",
						"          serviceArea = OrderData.losgs.serviceArea,",
						"          serviceAreaName = OrderData.losgs.serviceAreaName,",
						"          subMarket = OrderData.losgs.subMarket,",
						"          sunsetDate = OrderData.losgs.sunsetDate,",
						"          vendorAccountId = OrderData.losgs.vendorAccountId,",
						"          transferfromBAN = OrderData.losgs.transferSubscriberDetail.fromBillingAccountNumber,",
						"          transferfromFAN = OrderData.losgs.transferSubscriberDetail.fromFAN,",
						"          transferfromMobileNumber = OrderData.losgs.transferSubscriberDetail.fromMobileNumber,",
						"          directoryListing = OrderData.losgs.voipLOSCharacteristics.directoryListing,",
						"          cancelDetails = OrderData.losgs.cancelDetails,",
						"          aPIExecutionDetails = OrderData.losgs.aPIExecutionDetails,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderLosgs",
						"coallosgid foldDown(unroll(price, price),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount = price.amount,",
						"          baseAmount = price.baseAmount,",
						"          currencyType = price.currencyType,",
						"          pricetype = price.priceType,",
						"          total = price.total,",
						"          losgsequence = sequence,",
						"          creditFeeType = price.creditFeeType,",
						"          installmentEligibility = price.installmentEligibility,",
						"          msrp = price.msrp,",
						"          additionalDetails = price.additionalDetails,",
						"          J_tax = price.taxDetail,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsPrice",
						"coallosgid foldDown(unroll(priceSummaryList, priceSummaryList),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount = priceSummaryList.amount,",
						"          currencyType = priceSummaryList.currencyType,",
						"          priceType = priceSummaryList.priceType,",
						"          total = priceSummaryList.total,",
						"          taxSummary = priceSummaryList.taxSummary,",
						"          lastmodified_date,",
						"          Losgsequence = sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsPriceSummaryList",
						"coallosgid foldDown(unroll(lineItems, lineItems),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          action = lineItems.action,",
						"          addOnDomainName = lineItems.addOnSolutionCharacteristics.domainName,",
						"          addOnDomainRegistration = lineItems.addOnSolutionCharacteristics.domainRegistration,",
						"          addOnParentItem = lineItems.addOnSolutionCharacteristics.parentItem,",
						"          addOnRegistrationType = lineItems.addOnSolutionCharacteristics.registrationType,",
						"          billingCode = lineItems.billingCode,",
						"          billingCodeType = lineItems.billingCodeType,",
						"          catalogProductType = lineItems.catalogProductType,",
						"          catalogSKUId = lineItems.catalogSKUId,",
						"          contractAmountFinanced = lineItems.contractDetails.amountFinanced,",
						"          contractAnnualPercentageRate = lineItems.contractDetails.annualPercentageRate,",
						"          contractBalancedAmount = lineItems.contractDetails.balancedAmount,",
						"          contractDisplayName = lineItems.contractDetails.contractDisplayName,",
						"          contractLength = lineItems.contractDetails.contractLength,",
						"          contractSent = lineItems.contractDetails.contractSent,",
						"          contractSystem = lineItems.contractDetails.contractSystem,",
						"          contractType = lineItems.contractDetails.contractType,",
						"          contractDownPayment = lineItems.contractDetails.downPayment,",
						"          contractDownPaymentPercent = lineItems.contractDetails.downPaymentPercent,",
						"          contractFinanceCharge = lineItems.contractDetails.financeCharge,",
						"          contractInstallmentAmount = lineItems.contractDetails.installmentAmount,",
						"          contractInstallmentPlanDef = lineItems.contractDetails.installmentPlanDefinition,",
						"          contractInstallmentPlanId = lineItems.contractDetails.installmentPlanId,",
						"          contractInstallmentStatus = lineItems.contractDetails.installmentStatus,",
						"          contractInstallmentType = lineItems.contractDetails.installmentType,",
						"          contractPrepaidFinanceCharge = lineItems.contractDetails.prepaidFinanceCharge,",
						"          contractPayupAmount = lineItems.contractDetails.payupAmount,",
						"          contractPayoffAmount = lineItems.contractDetails.payoffAmount,",
						"          contractTotalSalePrice = lineItems.contractDetails.totalSalePrice,",
						"          curbsideDelivery = lineItems.curbsideDelivery,",
						"          description = lineItems.description,",
						"          effectiveDate = lineItems.effectiveDate,",
						"          feeId = lineItems.fees.feeId,",
						"          feeIdType = lineItems.fees.feeIdType,",
						"          feeWaivedIndicator = lineItems.fees.waivedIndicator,",
						"          feeWaivedReason = lineItems.fees.waivedReason,",
						"          fulfillmentLocation = lineItems.fulfillmentLocation,",
						"          displayName = lineItems.displayName,",
						"          groupOptionId = lineItems.groupOptionId,",
						"          inventoryStoreId = lineItems.inventoryStoreId,",
						"          itemFulfillmentMethod = lineItems.itemFulfillmentMethod,",
						"          LineItem_id = lineItems.id,",
						"          locationId = lineItems.locationId,",
						"          notes = lineItems.notes,",
						"          operation = lineItems.operation,",
						"          preOwnedIndicator = lineItems.preOwnedIndicator,",
						"          productCode = lineItems.productCode,",
						"          productSKU = lineItems.productSKU,",
						"          productType = lineItems.productType,",
						"          quantity = lineItems.quantity,",
						"          sequence = lineItems.sequence,",
						"          systemName = lineItems.systemName,",
						"          hardGood = lineItems.hardGood,",
						"          additionalDetails = lineItems.additionalDetails,",
						"          internetLineItemCharacteristics = lineItems.internetLineItemCharacteristics,",
						"          price = lineItems.price,",
						"          productGroupReferences = lineItems.productGroupReferences,",
						"          promotionReferences = lineItems.promotionReferences,",
						"          productSubType = lineItems.productSubType,",
						"          purchaseTransactionId = lineItems.purchaseTransactionId,",
						"          payments = lineItems.payments,",
						"          lastmodified_date,",
						"          losgsequence = sequence,",
						"          dc_eventtime,",
						"          supplyChainDetail = lineItems.supplyChainDetail,",
						"          supplyChainDetail_trackingNumber = lineItems.supplyChainDetail.trackingNumber,",
						"          hardgood_shipmentCommitDate_fromDate = lineItems.hardGood.shipmentCommitDate.fromDate,",
						"          hardgood_shipmentCommitDate_toDate = lineItems.hardGood.shipmentCommitDate.toDate,",
						"          hardgood_DeliveryByDate_fromDate = lineItems.hardGood.deliveryByDate.fromDate,",
						"          direcTVLineItemCharacteristics = lineItems.direcTVLineItemCharacteristics,",
						"          voipLineItemCharacteristics = lineItems.voipLineItemCharacteristics,",
						"          iptvLineItemCharacteristics = lineItems.iptvLineItemCharacteristics,",
						"          wirelessLineItemCharacteristics = lineItems.wirelessLineItemCharacteristics,",
						"          priceList = lineItems.priceList,",
						"          shippingDetailReference = lineItems.shippingDetailReference,",
						"          socForPreviousDevice = lineItems.socForPreviousDevice,",
						"          status = lineItems.status,",
						"          storeId = lineItems.storeId,",
						"          subscriptionId = lineItems.subscriptionId,",
						"          taxableIndicator = lineItems.taxableIndicator,",
						"          tier = lineItems.tier",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsLineItems",
						"coalLLseq foldDown(unroll(additionalDetails, additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          type = additionalDetails.type,",
						"          LineItemsequence = sequence,",
						"          parentType = additionalDetails.parentType,",
						"          code = additionalDetails.code,",
						"          value = additionalDetails.value,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          sequence = additionalDetails.sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsAdditionalDetail",
						"filter18 alterRow(upsertIf(true())) ~> AlterRowOrderLosgsPrice",
						"filter17 alterRow(upsertIf(true())) ~> AlterRowOrderLosgsPriceSummaryList",
						"filter10 alterRow(upsertIf(true())) ~> AlterRowlosgsLineitemsAdditionalDetail",
						"selectOrderData foldDown(unroll(OrderData.sourceDetail.additionalDetails, OrderData.sourceDetail.additionalDetails),",
						"     mapColumn(",
						"          code = OrderData.sourceDetail.additionalDetails.code,",
						"          customerOrderNumber,",
						"          type = OrderData.sourceDetail.additionalDetails.type,",
						"          value = OrderData.sourceDetail.additionalDetails.value,",
						"          parentType = OrderData.sourceDetail.additionalDetails.parentType,",
						"          sequence = OrderData.sourceDetail.additionalDetails.sequence",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenSourceDetailAdditionalDetail",
						"filter8 alterRow(upsertIf(true())) ~> AlterRowOrderSourceDetail",
						"filter9 alterRow(upsertIf(true())) ~> AlterRowOrderSourceDetailAdditionalDetail",
						"coallosgid alterRow(upsertIf(true())) ~> AlterRowOrderlosgs",
						"ConvertTimestamp alterRow(upsertIf(true())) ~> AlterRow4",
						"selectOrderData foldDown(unroll(OrderData.accounts, OrderData.accounts),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          createdDate = OrderData.createdDate,",
						"          submittedDate = OrderData.submittedDate,",
						"          acceptedDate = OrderData.acceptedDate,",
						"          accountCategory = OrderData.accounts.accountCategory,",
						"          accountSubCategory = OrderData.accounts.accountSubCategory,",
						"          accountSubType = OrderData.accounts.accountSubType,",
						"          accountType = OrderData.accounts.accountType,",
						"          autoPayReason = OrderData.accounts.autoPayReason,",
						"          b2bReference = OrderData.accounts.b2bReference,",
						"          cardOnFilePaymentMethod = OrderData.accounts.cardOnFilePaymentMethod,",
						"          billingDeliveryPreference = OrderData.accounts.billingDeliveryPreference,",
						"          billingLanguagePreference = OrderData.accounts.billingLanguagePreference,",
						"          businessAccountName = OrderData.accounts.businessAccountName,",
						"          cpni = OrderData.accounts.cpni,",
						"          ebillReason = OrderData.accounts.ebillReason,",
						"          enterpriseType = OrderData.accounts.enterpriseType,",
						"          gigaPower = OrderData.accounts.gigaPower,",
						"          Account_id = OrderData.accounts.id,",
						"          langId = OrderData.accounts.langId,",
						"          market = OrderData.accounts.market,",
						"          passCode = OrderData.accounts.passCode,",
						"          paymentArrangement = OrderData.accounts.paymentArrangement,",
						"          sequence = OrderData.accounts.sequence,",
						"          spokenLanguagePreference = OrderData.accounts.spokenLanguagePreference,",
						"          billingAccountNumber = OrderData.accounts.billingAccountNumber,",
						"          additionalDetails = OrderData.accounts.additionalDetails,",
						"          autopayPaymentMethod = OrderData.accounts.autopayPaymentMethod,",
						"          billingDetail = OrderData.accounts.billingDetail,",
						"          businessAddress = OrderData.accounts.businessAddress,",
						"          creditCheck = OrderData.accounts.creditCheck,",
						"          negotiateConflictCustomer = OrderData.accounts.negotiateConflictCustomer,",
						"          serviceAddress = OrderData.accounts.serviceAddress,",
						"          unifiedAccount = OrderData.accounts.unifiedAccount,",
						"          serviceFacilityQualifications = OrderData.accounts.serviceFacilityQualifications,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          billingAccountTelephoneNumber = OrderData.accounts.billingAccountTelephoneNumber,",
						"          primaryCTN = OrderData.accounts.primaryCTN,",
						"          employeeReferralDetail = OrderData.employeeReferralDetail,",
						"          accountCrossmarketIndicator = OrderData.accounts.accountCrossmarketIndicator,",
						"          acpTransactionId = OrderData.accounts.acpEligibility.acpTransactionId,",
						"          acpClassification = OrderData.accounts.acpEligibility.acpClassification,",
						"          anchorCTN = OrderData.accounts.anchorCTN,",
						"          bankingPartnerCustomerId = OrderData.accounts.bankingPartner.customerId,",
						"          bankingPartnerName = OrderData.accounts.bankingPartner.name,",
						"          bigData = OrderData.accounts.bigData,",
						"          billPaymentDueDate = OrderData.accounts.billPaymentDueDate,",
						"          cardOnFileStatus = OrderData.accounts.cardOnFileStatus,",
						"          conflictingServiceDetails = OrderData.accounts.conflictingServiceDetails,",
						"          consentToCCIndicator = OrderData.accounts.consentToCCIndicator,",
						"          contractAcceptance = OrderData.accounts.contractAcceptance.acceptance,",
						"          contractLength = OrderData.accounts.contractAcceptance.contractLength,",
						"          contractVersionNumber = OrderData.accounts.contractAcceptance.versionNumber,",
						"          creditAlertFraudAlert = OrderData.accounts.creditAlert.fraudAlert,",
						"          creditAlertGeneralMessage = OrderData.accounts.creditAlert.generalMessage,",
						"          ctnValidatedIndicator = OrderData.accounts.ctnValidatedIndicator,",
						"          customerCode = OrderData.accounts.customerCode,",
						"          delinquentAccountIndicator = OrderData.accounts.delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization = OrderData.accounts.electronicLetterOfAuthorization.electronicDisclosureAuthorization,",
						"          internetServiceAuthorization = OrderData.accounts.electronicLetterOfAuthorization.internetServiceAuthorization,",
						"          letterOfAuthorizationURL = OrderData.accounts.electronicLetterOfAuthorization.letterOfAuthorizationURL,",
						"          localServiceAuthorization = OrderData.accounts.electronicLetterOfAuthorization.localServiceAuthorization,",
						"          localTollProviderAuthorization = OrderData.accounts.electronicLetterOfAuthorization.localTollProviderAuthorization,",
						"          longDistanceServiceProvider = OrderData.accounts.electronicLetterOfAuthorization.longDistanceServiceProvider,",
						"          emailValidatedIndicator = OrderData.accounts.emailValidatedIndicator,",
						"          existingAutoBillStatus = OrderData.accounts.existingAutoBillStatus,",
						"          existingAutoBillIndicator = OrderData.accounts.existingAutoBillIndicator,",
						"          landLineNumber = OrderData.accounts.landLineNumber,",
						"          liabilityType = OrderData.accounts.liabilityType,",
						"          marketingSourceCode = OrderData.accounts.marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails = OrderData.accounts.mdmProfileSetting.additionalDetails,",
						"          mdmProfileSettingProfileName = OrderData.accounts.mdmProfileSetting.profileName,",
						"          partnerJointBillType = OrderData.accounts.partnerJointBillType,",
						"          pmoIndicator = OrderData.accounts.pmoIndicator,",
						"          priceCode = OrderData.accounts.priceCode,",
						"          priceMatch = OrderData.accounts.priceMatch,",
						"          subMarket = OrderData.accounts.subMarket,",
						"          targetCTN = OrderData.accounts.targetCTN,",
						"          thirdPartyCombinedBill = OrderData.accounts.thirdPartyCombinedBill,",
						"          winBackIndicator = OrderData.accounts.winBackIndicator,",
						"          provisioningSystem = OrderData.accounts.provisioningSystems.provisioningSystem,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAllAccounts",
						"coalacc filter(not(isNull(serviceAddress.id))) ~> filter1",
						"coalacc filter(not(isNull(businessAddress.id))) ~> filter2",
						"flatten23 filter(!isNull(nameId)) ~> filter5",
						"derivedColumn64 filter(!isNull(code)) ~> filter9",
						"flattenLosgsAdditionalDetail filter(!isNull(code)) ~> filter10",
						"selectOrderData filter(!isNull(OrderData.sourceDetail.channel)) ~> filter8",
						"flattenLosgsPriceSummaryList filter(!isNull(priceType)) ~> filter17",
						"flattenLosgsPrice filter(!isNull(pricetype)) ~> filter18",
						"flattenTermsandConditions filter(!isNull(id)) ~> filter20",
						"flattenOrderPromotions filter((!isNull(Promotion_id) || !isNull(sequence))) ~> filter23",
						"flattenProductGroups filter((!isNull(Product_id) || !isNull(sequence))) ~> filter24",
						"flattenContactDetail filter(!isNull(nameid)) ~> filter28",
						"flattenOrderAdditionalDetail filter(!isNull(code)) ~> filter29",
						"filtercreditPolicy alterRow(upsertIf(true())) ~> alterRowcreditpolicy",
						"selectOrderData foldDown(unroll(OrderData.debtAccounts, OrderData.debtAccounts),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          debtAccounts = OrderData.debtAccounts,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattendebitaccounts",
						"derivedColumn43 alterRow(upsertIf(true())) ~> alterRowdebitaccounts",
						"filterlatestordererror alterRow(upsertIf(true())) ~> alterRowerrors",
						"filtererror foldDown(unroll(orderjson_1.orderEvent.data.Errors.Error, orderjson_1.orderEvent.data.Errors.Error),",
						"     mapColumn(",
						"          ErrorCode = orderjson_1.orderEvent.data.Errors.Error.ErrorCode,",
						"          ErrorDescription = orderjson_1.orderEvent.data.Errors.Error.ErrorDescription,",
						"          IdRef = orderjson_1.orderEvent.data.Errors.Error.Reference.IdRef,",
						"          Type = orderjson_1.orderEvent.data.Errors.Error.Reference.Type,",
						"          customerOrderNumber,",
						"          eventtime = orderjson_1.orderEvent.eventTime,",
						"          lastmodified_date = dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenerror",
						"derivedColumnMoveOrder alterRow(upsertIf(true())) ~> alterRowmoveorder",
						"filtertask foldDown(unroll(orderjson_1.orderEvent.data.OrderTasks.OrderTask, orderjson_1.orderEvent.data.OrderTasks.OrderTask),",
						"     mapColumn(",
						"          ApplicationName = orderjson_1.orderEvent.data.OrderTasks.OrderTask.ApplicationName,",
						"          Channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask.Channel,",
						"          CreationDate = orderjson_1.orderEvent.data.OrderTasks.OrderTask.CreationDate,",
						"          CustomerOrderNumber = customerOrderNumber,",
						"          LosgIds = orderjson_1.orderEvent.data.OrderTasks.OrderTask.LosgIds,",
						"          OrderNumber = orderjson_1.orderEvent.data.OrderTasks.OrderTask.OrderNumber,",
						"          PartnerName = orderjson_1.orderEvent.data.OrderTasks.OrderTask.PartnerName,",
						"          ProgramName = orderjson_1.orderEvent.data.OrderTasks.OrderTask.ProgramName,",
						"          QueueId = orderjson_1.orderEvent.data.OrderTasks.OrderTask.QueueId,",
						"          QueueName = orderjson_1.orderEvent.data.OrderTasks.OrderTask.QueueName,",
						"          QueueSlaDetails = orderjson_1.orderEvent.data.OrderTasks.OrderTask.QueueSlaDetails,",
						"          TaskId = orderjson_1.orderEvent.data.OrderTasks.OrderTask.TaskId,",
						"          TaskStatus = orderjson_1.orderEvent.data.OrderTasks.OrderTask.TaskStatus,",
						"          CamundaTaskId = orderjson_1.orderEvent.data.OrderTasks.OrderTask.CamundaTaskId,",
						"          lastmodified_date,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderTask",
						"derivedColumnTask window(over(CustomerOrderNumber,",
						"          dc_taskid),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowtask",
						"flattenOrderTask derive(dc_taskid = coalesce(TaskId,CamundaTaskId),",
						"          dc_camuda = coalesce(CamundaTaskId,TaskId),",
						"          dc_losgids = regexReplace(regexReplace(regexReplace(regexReplace(LosgIds,'\",\"',' || '),\"\\\\[\",\"\"),\"\\\"\",''),\"\\\\]\",\"\"),",
						"          dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          CreationDate = toTimestamp(toLong(toString(byName('CreationDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumnTask",
						"windowtask filter(prank==1  && !isNull(dc_taskid)) ~> filterordertask",
						"filterordertask alterRow(upsertIf(true())) ~> alterRowtaskid",
						"filterreferenencedetail alterRow(upsertIf(true())) ~> alterRowreferencedetail",
						"derivedColumnETCnoChannel filter(not(isNull(orderjson_1.orderEvent.data.OrderTasks))) ~> filtertask",
						"derivedColumnETCnoChannel filter(not(isNull(orderjson_1.orderEvent.data.Errors))) ~> filtererror",
						"derivedColumnCnoEventTImeChannel filter(not(isNull(orderjson_1.orderEvent.data.order.customerOrderNumber))) ~> filterorderdata",
						"filter112 alterRow(upsertIf(true())) ~> IPtvalterrow",
						"coallosgid foldDown(unroll(subscriberName.primaryContactPhones, subscriberName.primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          additionalContactPhones = subscriberName.additionalContactPhones,",
						"          emailAddress = subscriberName.emailAddress,",
						"          firstName = subscriberName.firstName,",
						"          nameId = subscriberName.id,",
						"          lastName = subscriberName.lastName,",
						"          legalFirstName = subscriberName.legalFirstName,",
						"          legalLastName = subscriberName.legalLastName,",
						"          middleInitial = subscriberName.middleInitial,",
						"          preferredContactMethod = subscriberName.preferredContactMethod,",
						"          prefix = subscriberName.prefix,",
						"          previousLegalLastName = subscriberName.previousLegalLastName,",
						"          suffix = subscriberName.suffix,",
						"          title = subscriberName.title,",
						"          primaryContactPhoneType = subscriberName.primaryContactPhones.contactPhoneType,",
						"          primaryContactPhoneNumber = subscriberName.primaryContactPhones.phoneNumber,",
						"          primaryContactextension = subscriberName.primaryContactPhones.extension,",
						"          primarycontactPhoneConsentDetails = subscriberName.primaryContactPhones.consentDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 filter(!isNull(nameId)) ~> filter42",
						"filter42 alterRow(upsertIf(true())) ~> AlterSubcribeName",
						"flatten30 filter(!isNull(termsandconditions_id)) ~> filter43",
						"filter111 alterRow(upsertIf(true())) ~> altervoipc",
						"derivedColumn69 alterRow(upsertIf(true())) ~> altere11",
						"filter110 alterRow(upsertIf(true())) ~> alterWirlessChar",
						"filtercreditCheck alterRow(upsertIf(true())) ~> alterRowOrderAccountsCreditCheck",
						"coallosgid alterRow(upsertIf(true())) ~> alterRowPortDetail",
						"flattenBillingDetails derive(dc_codingaccuracysupport = regexReplace(addressLines,'\\\",\\\"',' || ')) ~> derivedColumn31",
						"derivedColumn31 filter(!isNull(BillingAddress_id)) ~> filter51",
						"filter51 alterRow(upsertIf(true())) ~> alterRowv101oceOrderAcctsBillingDetailAddr",
						"filter107 foldDown(unroll(compensation.repDetails, compensation.repDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          dealerCode = compensation.repDetails.dealerCode,",
						"          repAction = compensation.repDetails.repAction,",
						"          repId = compensation.repDetails.repId,",
						"          salesCode = compensation.repDetails.salesCode,",
						"          type = compensation.repDetails.type,",
						"          submittedBy = compensation.submittedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: false) ~> flattencompensationrepdetail",
						"flattencompensationrepdetail alterRow(upsertIf(true())) ~> alterCompensation",
						"coallosgid foldDown(unroll(additionalDetails, additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          type = additionalDetails.type,",
						"          parentType = additionalDetails.parentType,",
						"          code = additionalDetails.code,",
						"          value = additionalDetails.value,",
						"          sequence = additionalDetails.sequence",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten5",
						"flatten5 filter(!isNull(code)) ~> filter53",
						"filter53 alterRow(upsertIf(true())) ~> alteradditonalDetails",
						"filter117 alterRow(upsertIf(true())) ~> alterRowlosginternetchar",
						"filter108 alterRow(upsertIf(true())) ~> alterRowDIrectvchar",
						"parseJsonOrderData select(mapColumn(",
						"          orderjson_1,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          orderData = orderjson_1.orderEvent.data.order,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          metedata_channel = orderjson_1.orderEvent.metaData.channel,",
						"          order_task_Channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          lastmodified_date,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          TransactionLogs = orderjson_1.orderEvent.data.transactionLogs,",
						"          losgsarray = orderjson_1.orderEvent.data.order.losgs,",
						"          eventSource",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInsertonlyTableAttributes",
						"selectInsertonlyTableAttributes derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          customerOrderNumber = coalesce(customerOrderNumber,customerOrderNumber2),",
						"          channel = coalesce(sourcedetail_channel,order_task_Channel,metedata_channel),",
						"     partitionBy('roundRobin', 2)) ~> derivedColumnETCnoChannel",
						"derivedColumnETCnoChannel filter(not(isNull(TransactionLogs))) ~> filtertransactionlogs",
						"filtertransactionlogs foldDown(unroll(TransactionLogs, TransactionLogs),",
						"     mapColumn(",
						"          comments = TransactionLogs.comments,",
						"          actionBy = TransactionLogs.actionBy,",
						"          updateInfos = TransactionLogs.updateInfos,",
						"          orderStatus = TransactionLogs.orderStatus,",
						"          transactionName = TransactionLogs.transactionName,",
						"          transactionType = TransactionLogs.transactionType,",
						"          changedLosgReferenceId = TransactionLogs.changedLosgReferenceId,",
						"          recordId = TransactionLogs.recordId,",
						"          queueName = TransactionLogs.queueName,",
						"          parentOrderId = TransactionLogs.parentOrderId,",
						"          startTime = TransactionLogs.startTime,",
						"          endTime = TransactionLogs.endTime,",
						"          transactionId = TransactionLogs.transactionId,",
						"          orderId = TransactionLogs.orderId,",
						"          losgs = TransactionLogs.losgs,",
						"          eventTime,",
						"          lastmodified_date = dc_eventtime,",
						"          idbStatus = orderjson_1.orderEvent.metaData.idbStatus,",
						"          channel,",
						"          customerOrderNumber",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTransactionLosgHistory",
						"flattenTransactionLosgHistory derive(endTime = toTimestamp(case((instr(endTime,'T'))>0,toString(toTimestamp(substring(endTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),toString(toTimestamp(toLong(toString(byName('endTime'))),'yyyy-MM-dd HH:mm:ss.SSS'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          startTime = case((instr(startTime,'T'))>0,toTimestamp(substring(startTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss'),    toTimestamp(toLong(toString(byName('startTime'))),'yyyy-MM-dd HH:mm:ss'))) ~> derivedColumn36",
						"filter43 alterRow(upsertIf(true())) ~> alterRowtermsandconditins",
						"alterRowtermsandconditins derive(timestamp = toTimestamp(toLong(toString(byName('timestamp'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> MapDrifted1",
						"filter105 alterRow(upsertIf(true())) ~> alterRowautopay",
						"filter104 alterRow(upsertIf(true())) ~> alterRowautoepay",
						"filter103 alterRow(upsertIf(true())) ~> alterRowcardonfile",
						"filtecardOnFilePaymentMethod alterRow(upsertIf(true())) ~> alterRowcardepay",
						"filternegotiateCC alterRow(upsertIf(true())) ~> alterRownego",
						"filterunifiedaccount alterRow(upsertIf(true())) ~> alterRowunified",
						"filteremployeeDetail alterRow(upsertIf(true())) ~> alterRowEmployeeDetail",
						"derivedColumn50 alterRow(upsertIf(true())) ~> alterRowecommerce",
						"selectOrderData foldDown(unroll(OrderData.shippingDetails, OrderData.shippingDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          price = OrderData.shippingDetails.price,",
						"          shippingaddress = OrderData.shippingDetails.address,",
						"          shippingDetailsid = OrderData.shippingDetails.id,",
						"          billingCode = OrderData.shippingDetails.billingCode,",
						"          carrierPreference = OrderData.shippingDetails.carrierPreference,",
						"          fromDate = OrderData.shippingDetails.shipmentCommitDate.fromDate,",
						"          toDate = OrderData.shippingDetails.shipmentCommitDate.toDate,",
						"          sequence = OrderData.shippingDetails.sequence,",
						"          shippingCode = OrderData.shippingDetails.shippingCode,",
						"          shippingMethod = OrderData.shippingDetails.shippingMethod,",
						"          shippingPriceCode = OrderData.shippingDetails.shippingPriceCode,",
						"          additionalContactPhones = OrderData.shippingDetails.recipientName.additionalContactPhones,",
						"          id = OrderData.shippingDetails.recipientName.id,",
						"          emailAddress = OrderData.shippingDetails.recipientName.emailAddress,",
						"          firstName = OrderData.shippingDetails.recipientName.firstName,",
						"          middleInitial = OrderData.shippingDetails.recipientName.middleInitial,",
						"          lastName = OrderData.shippingDetails.recipientName.lastName,",
						"          legalFirstName = OrderData.shippingDetails.recipientName.legalFirstName,",
						"          legalLastName = OrderData.shippingDetails.recipientName.legalLastName,",
						"          preferredContactMethod = OrderData.shippingDetails.recipientName.preferredContactMethod,",
						"          suffix = OrderData.shippingDetails.recipientName.suffix,",
						"          prefix = OrderData.shippingDetails.recipientName.prefix,",
						"          title = OrderData.shippingDetails.recipientName.title,",
						"          previousLegalLastName = OrderData.shippingDetails.recipientName.previousLegalLastName,",
						"          recipientPrimaryContact = OrderData.shippingDetails.recipientName.primaryContactPhones",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenshippingDetail",
						"selectOrderData foldDown(unroll(OrderData.integratedOffers, OrderData.integratedOffers),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          category = OrderData.integratedOffers.category,",
						"          ioId = OrderData.integratedOffers.ioId,",
						"          ioSequence = OrderData.integratedOffers.ioSequence,",
						"          qualifyingServiceDetails = OrderData.integratedOffers.qualifyingServiceDetails",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten10",
						"flatten10 filter(!isNull(ioId)) ~> filter68",
						"filter68 alterRow(upsertIf(true())) ~> alterRowInte",
						"filterloginProfile alterRow(upsertIf(true())) ~> alterRowlogin",
						"selectOrderData filter(!isNull(OrderData.singleDispatchDetail.eligibleIndicator)) ~> filter71",
						"filter71 alterRow(upsertIf(true())) ~> alterRowSingleDispatch",
						"selectOrderData foldDown(unroll(OrderData.paymentTenders, OrderData.paymentTenders),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          paymentTenders = OrderData.paymentTenders",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten12",
						"flatten12 filter(( !isNull(paymentTenders.id) || !isNull(paymentTenders.sequence))) ~> filter73",
						"filter73 alterRow(upsertIf(true())) ~> alterRowPaymentTender",
						"derivedColumn53 alterRow(upsertIf(true())) ~> alterRowpayment",
						"filter125 alterRow(upsertIf(true())) ~> alterRowshippingdetail",
						"derivedColumn72 alterRow(upsertIf(true())) ~> alterRowshippingprice",
						"filterSalesAgent alterRow(upsertIf(true())) ~> alterRowsalesagent",
						"selectOrderData foldDown(unroll(OrderData.referenceDetail.falloutDetails, OrderData.referenceDetail.falloutDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          code = OrderData.referenceDetail.falloutDetails.code,",
						"          dateTime = OrderData.referenceDetail.falloutDetails.dateTime,",
						"          description = OrderData.referenceDetail.falloutDetails.description,",
						"          operation = OrderData.referenceDetail.falloutDetails.operation",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenreferencefalloutDetails",
						"derivedColumn48 alterRow(upsertIf(true())) ~> alterRowRFallout",
						"flattenshippingDetail filter(!isNull(shippingaddress.id)) ~> filter80",
						"filter80 alterRow(upsertIf(true())) ~> alterRowshippingaddress",
						"selectOrderData foldDown(unroll(schedulingDetails.name.primaryContactPhones, schedulingDetails),",
						"     mapColumn(",
						"          serviceLevel = schedulingDetails.serviceLevel,",
						"          customerOrderNumber,",
						"          eventTime,",
						"          lastmodified_date,",
						"          timeZone = schedulingDetails.timeZone,",
						"          valueSegmentationTier = schedulingDetails.valueSegmentationTier,",
						"          landlordDetail_landlordName = schedulingDetails.landlordDetail.landlordName,",
						"          landlordDetail_landlordPermission = schedulingDetails.landlordDetail.landlordPermission,",
						"          landlordDetail_landlordPhoneNumber = schedulingDetails.landlordDetail.landlordPhoneNumber,",
						"          nffl_fulfillerName = schedulingDetails.nffl.fulfillerName,",
						"          nffl_ffulfillerTN = schedulingDetails.nffl.fulfillerTN,",
						"          nffl_fnfflFlag = schedulingDetails.nffl.nfflFlag,",
						"          preference = schedulingDetails.preference,",
						"          reservationId = schedulingDetails.reservationId,",
						"          scheduleType = schedulingDetails.scheduleType,",
						"          dispatchType = schedulingDetails.dispatchType,",
						"          deferredInstallationDuration = schedulingDetails.deferredInstallationDuration,",
						"          eventCode = schedulingDetails.eventCode,",
						"          eventCodeEnteredManuallyIndicator = schedulingDetails.eventCodeEnteredManuallyIndicator,",
						"          partnerName_installationPartner = schedulingDetails.installationPartner.partnerName,",
						"          partnerName_projectPurchaseOrderAmount = schedulingDetails.installationPartner.projectPurchaseOrderAmount,",
						"          partnerName_projectPurchaseOrderDate = schedulingDetails.installationPartner.projectPurchaseOrderDate,",
						"          partnerName_projectPurchaseOrderNumber = schedulingDetails.installationPartner.projectPurchaseOrderNumber,",
						"          partnerName_projectBilling = schedulingDetails.installationPartner.projectBilling,",
						"          appointmentComment = schedulingDetails.appointmentComment,",
						"          bestTimeToReach = schedulingDetails.bestTimeToReach,",
						"          billingInstallmentsIndicator = schedulingDetails.billingInstallmentsIndicator,",
						"          businessName = schedulingDetails.businessName,",
						"          str_additionalDetails = schedulingDetails.additionalDetails,",
						"          schedulingdetails_id = schedulingDetails.id,",
						"          installType = schedulingDetails.installType,",
						"          realTimeCalendarIndicator = schedulingDetails.realTimeCalendarIndicator,",
						"          scheduleAsSoonAsPossibleIndicator = schedulingDetails.scheduleAsSoonAsPossibleIndicator,",
						"          emailAddress = schedulingDetails.name.emailAddress,",
						"          firstName = schedulingDetails.name.firstName,",
						"          schedulingdetails_name_id = schedulingDetails.name.id,",
						"          lastName = schedulingDetails.name.lastName,",
						"          contactPhoneType = schedulingDetails.name.primaryContactPhones.contactPhoneType,",
						"          phoneNumber = schedulingDetails.name.primaryContactPhones.phoneNumber,",
						"          scheduleByDayAndTime_DayOfTheWeek = schedulingDetails.scheduleByDayAndTime.anyDayOfTheWeek,",
						"          scheduleByDayAndTime_friday = schedulingDetails.scheduleByDayAndTime.friday,",
						"          scheduleByDayAndTime_monday = schedulingDetails.scheduleByDayAndTime.monday,",
						"          scheduleByDayAndTime_saturday = schedulingDetails.scheduleByDayAndTime.saturday,",
						"          scheduleByDayAndTime_sunday = schedulingDetails.scheduleByDayAndTime.sunday,",
						"          scheduleByDayAndTime_thursday = schedulingDetails.scheduleByDayAndTime.thursday,",
						"          scheduleByDayAndTime_tuesday = schedulingDetails.scheduleByDayAndTime.tuesday,",
						"          scheduleByDayAndTime_wednesday = schedulingDetails.scheduleByDayAndTime.wednesday,",
						"          actualSchedule_workOrderId = schedulingDetails.actualSchedule.workOrderId,",
						"          actualSchedule_startTime = schedulingDetails.actualSchedule.startTime,",
						"          actualSchedule_selectedAppointmentDate = schedulingDetails.actualSchedule.selectedAppointmentDate,",
						"          actualSchedule_selectedAppointmentTime = schedulingDetails.actualSchedule.selectedAppointmentTime,",
						"          actualSchedule_endTime = schedulingDetails.actualSchedule.endTime,",
						"          confirmedSchedule_workOrderId = schedulingDetails.confirmedSchedule.workOrderId,",
						"          confirmedSchedule_startTime = schedulingDetails.confirmedSchedule.startTime,",
						"          confirmedSchedule_selectedAppointmentDate = schedulingDetails.confirmedSchedule.selectedAppointmentDate,",
						"          confirmedSchedule_selectedAppointmentTime = schedulingDetails.confirmedSchedule.selectedAppointmentTime,",
						"          confirmedSchedule_endTime = schedulingDetails.confirmedSchedule.endTime,",
						"          middleInitial = schedulingDetails.name.middleInitial,",
						"          legalLastName = schedulingDetails.name.legalLastName,",
						"          legalFirstName = schedulingDetails.name.legalFirstName,",
						"          suffix = schedulingDetails.name.suffix,",
						"          prefix = schedulingDetails.name.prefix,",
						"          previousLegalLastName = schedulingDetails.name.previousLegalLastName,",
						"          title = schedulingDetails.name.title,",
						"          additionalContactPhones = schedulingDetails.name.additionalContactPhones,",
						"          preferredContactMethod = schedulingDetails.name.preferredContactMethod,",
						"          primarycontactPhoneConsentDetails = schedulingDetails.name.primaryContactPhones.consentDetails,",
						"          anyDayOfTheWeek = schedulingDetails.scheduleByDayAndTime.anyDayOfTheWeek,",
						"          primaryContactextension = schedulingDetails.name.primaryContactPhones.extension,",
						"          connecTechInstallationOptions = schedulingDetails.connecTechInstallationOptions,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenSchedulingDetails",
						"flattenSchedulingDetails derive(actualSchedule_selectedAppointmentDate = toDate(toString(byName('actualSchedule_selectedAppointmentDate')),'yyyy-MM-dd'),",
						"          confirmedSchedule_selectedAppointmentDate = toDate(toString(byName('confirmedSchedule_selectedAppointmentDate')),'yyyy-MM-dd'),",
						"          partnerName_projectPurchaseOrderDate = toDate(toString(byName('partnerName_projectPurchaseOrderDate')),'yyyy-MM-dd'),",
						"          schedulingdetails_id = coalesce(schedulingdetails_id,' ')) ~> derivedColumn40",
						"derivedColumn40 filter(!isNull(schedulingdetails_id)) ~> filter81",
						"filter81 alterRow(upsertIf(true())) ~> alterRowschedulingdetailflat",
						"selectOrderData foldDown(unroll(OrderData.contactDetail.personalDetail.primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails = OrderData.contactDetail.additionalDetails,",
						"          additionalEmailRecipients = OrderData.contactDetail.additionalEmailRecipients,",
						"          authorizedContacts = OrderData.contactDetail.authorizedContacts,",
						"          orderConfirmationByEmailPermissionIndicator = OrderData.contactDetail.orderConfirmationByEmailPermissionIndicator,",
						"          permissionForOutboundCallIndicator = OrderData.contactDetail.permissionForOutboundCallIndicator,",
						"          preferredContactMethod = OrderData.contactDetail.preferredContactMethod,",
						"          preferredTimeOfDayForContact = OrderData.contactDetail.preferredTimeOfDayForContact,",
						"          timeZone = OrderData.contactDetail.timeZone,",
						"          unpublishedContactByPhonePermissionIndicator = OrderData.contactDetail.unpublishedContactByPhonePermissionIndicator,",
						"          additionalContactPhones = OrderData.contactDetail.personalDetail.additionalContactPhones,",
						"          legalFirstName = OrderData.contactDetail.personalDetail.legalFirstName,",
						"          lastName = OrderData.contactDetail.personalDetail.lastName,",
						"          legalLastName = OrderData.contactDetail.personalDetail.legalLastName,",
						"          middleInitial = OrderData.contactDetail.personalDetail.middleInitial,",
						"          personaldetail_preferredContactMethod = OrderData.contactDetail.personalDetail.preferredContactMethod,",
						"          primaryEmailAddress = OrderData.contactDetail.primaryEmailAddress,",
						"          secondaryEmailAddress = OrderData.contactDetail.secondaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator = OrderData.contactDetail.productUpdatesByEmailPermissionIndicator,",
						"          emailAddress = OrderData.contactDetail.personalDetail.emailAddress,",
						"          firstName = OrderData.contactDetail.personalDetail.firstName,",
						"          nameid = OrderData.contactDetail.personalDetail.id,",
						"          lastmodified_date,",
						"          orderPickUpCTN = OrderData.contactDetail.orderPickUpCTN,",
						"          prefix = OrderData.contactDetail.personalDetail.prefix,",
						"          previousLegalLastName = OrderData.contactDetail.personalDetail.previousLegalLastName,",
						"          primarycontactPhoneConsentDetails = OrderData.contactDetail.personalDetail.primaryContactPhones.consentDetails,",
						"          primaryContactPhoneType = OrderData.contactDetail.personalDetail.primaryContactPhones.contactPhoneType,",
						"          primaryContactextension = OrderData.contactDetail.personalDetail.primaryContactPhones.extension,",
						"          primaryContactPhoneNumber = OrderData.losgs.subscriberName.primaryContactPhones.phoneNumber,",
						"          title = OrderData.contactDetail.personalDetail.title,",
						"          suffix = OrderData.contactDetail.personalDetail.suffix,",
						"          dc_eventtime,",
						"          smsValidatedIndicator = OrderData.contactDetail.personalDetail.primaryContactPhones.smsValidatedIndicator",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenContactDetail",
						"coallosgid foldDown(unroll(externalOrderReferences, externalOrderReferences),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          systemName = externalOrderReferences.systemName,",
						"          systemOrderReference = externalOrderReferences.systemOrderReference,",
						"          systemOrderReferenceType = externalOrderReferences.systemOrderReferenceType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten18",
						"flatten18 filter(!isNull(systemName)) ~> filter83",
						"filter83 alterRow(upsertIf(true())) ~> alterRowext",
						"coallosgid foldDown(unroll(promotions, promotions),",
						"     mapColumn(",
						"          additionalDetails = promotions.additionalDetails,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          amount = promotions.amount,",
						"          baseOfferId = promotions.baseOfferId,",
						"          complexDiscountIndicator = promotions.complexDiscountIndicator,",
						"          componentConfigurations = promotions.componentConfigurations,",
						"          couponCode = promotions.couponCode,",
						"          displayLevel = promotions.displayLevel,",
						"          duration = promotions.duration,",
						"          effectiveDate,",
						"          effectiveInDays = promotions.effectiveInDays,",
						"          endDate = promotions.endDate,",
						"          fixedAmount = promotions.fixedAmount,",
						"          id = promotions.id,",
						"          ioId = promotions.ioId,",
						"          ioSequence = promotions.ioSequence,",
						"          parentPricePlanCode = promotions.parentPricePlanCode,",
						"          payInAdvanceProdId = promotions.payInAdvanceProdId,",
						"          percent = promotions.percent,",
						"          promotionAppliedBy = promotions.promotionAppliedBy,",
						"          promotionBillingCode = promotions.promotionBillingCode,",
						"          promotionCode = promotions.promotionCode,",
						"          promotionCycle = promotions.promotionCycle,",
						"          promotionId = promotions.promotionId,",
						"          promotionName = promotions.promotionName,",
						"          promotionType = promotions.promotionType,",
						"          promotionTypeDetail = promotions.promotionTypeDetail,",
						"          qualifyingServiceDetails = promotions.qualifyingServiceDetails,",
						"          sequence = promotions.sequence,",
						"          unitOfMeasurement = promotions.unitOfMeasurement",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten20",
						"derivedColumn54 filter(( !isNull(id) || !isNull(sequence))) ~> filter85",
						"filter85 alterRow(upsertIf(true())) ~> alterRowpromo",
						"coallosgid foldDown(unroll(userDefinedLabels, userDefinedLabels),",
						"     mapColumn(",
						"          label = userDefinedLabels.label,",
						"          customerOrderNumber,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          sequence = userDefinedLabels.sequence,",
						"          value = userDefinedLabels.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten21",
						"flatten21 filter(!isNull(label)) ~> filter86",
						"filter86 alterRow(upsertIf(true())) ~> alterRowuse",
						"coalLLseq foldDown(unroll(payments, payments),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemsequence = sequence,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          amount = payments.amount,",
						"          currencyType = payments.currencyType,",
						"          numberOfInstallment = payments.numberOfInstallment,",
						"          paymentTenderReference = payments.paymentTenderReference",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten22",
						"flatten22 filter((!isNull(paymentTenderReference) || !isNull(amount))) ~> filter87",
						"derivedColumn71 alterRow(upsertIf(true())) ~> alterRowllpay",
						"filtehardGood alterRow(upsertIf(true())) ~> alterRowLLIhard",
						"filter118 alterRow(upsertIf(true())) ~> alterRowsupplychain",
						"flattendebitaccounts derive(debtAccountNumber = coalesce(debtAccounts.debtAccountNumber,' '),",
						"          id = coalesce(debtAccounts.id,' ')) ~> derivedColumn43",
						"flattenAllAccounts derive(Account_id = coalesce(Account_id,' '),",
						"          sequence = coalesce(sequence,''),",
						"          createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          column1preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          creditReferenceDate = toTimestamp(toLong(toString(byName('creditCheck.creditReferenceDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          cpreAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          cpreAuthAuthorizationDate = toTimestamp(toLong(toString(byName('cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          conflictLandlordDetailApprovalDate = toTimestamp(toLong(toString(byName('negotiateConflictCustomer.conflictLandlordDetail.approvalDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          dc_addressLines = regexReplace(serviceAddress.codingAccuracySupportSystemAddress.addressLines,'\\\",\\\"',' || '),",
						"          BA_dc_addresslines = regexReplace(businessAddress.codingAccuracySupportSystemAddress.addressLines,'\\\",\\\"',' || ')) ~> coalacc",
						"flattenOrderLosgs derive(Losg_id = coalesce(Losg_id,' '),",
						"          addendDateAndTime = toTimestamp(toLong(toString(byName('wirelessLOSCharacteristics.coPayData.addendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          sequence = coalesce(sequence,''),",
						"          sunsetDate = toTimestamp(toLong(toString(byName('sunsetDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          requestedExecutionDate = toTimestamp(toLong(toString(byName('requestedExecutionDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          ModifiedDate = currentUTC(),",
						"          e911TnCtimestamp = toTimestamp(toLong(toString(byName('timestamp'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          splitLiabilityDataAddendDateAndTime = toTimestamp(toLong(toString(byName('wirelessLOSCharacteristics.splitLiabilityData.addendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          activationDate = toTimestamp(toLong(toString(byName('wirelessLOSCharacteristics.activationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          availabilityDate = toTimestamp(toLong(toString(byName('wirelessLOSCharacteristics.availabilityDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          disconTimestamp = toTimestamp(toLong(toString(byName('numberPortDetail.disconnectAcknowledged.timestamp'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> coallosgid",
						"filter90 alterRow(upsertIf(true())) ~> alterRowlosgserviceaddress",
						"coallosgid filter(!isNull(serviceAddress.id)) ~> filter90",
						"flattenBillingDetails foldDown(unroll(name.primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          emailAddress = name.emailAddress,",
						"          firstName = name.firstName,",
						"          nameId = name.id,",
						"          middleInitial = name.middleInitial,",
						"          lastName = name.lastName,",
						"          legalFirstName = name.legalFirstName,",
						"          legalLastName = name.legalLastName,",
						"          previousLegalLastName = name.previousLegalLastName,",
						"          suffix = name.suffix,",
						"          title = name.title,",
						"          additionalContactPhones = name.additionalContactPhones,",
						"          primaryContactPhoneType = name.primaryContactPhones.contactPhoneType,",
						"          primaryContactPhoneNumber = name.primaryContactPhones.phoneNumber,",
						"          primaryContactextension = name.primaryContactPhones.extension,",
						"          primarycontactPhoneConsentDetails = name.primaryContactPhones.consentDetails,",
						"          licenseExpirationDate,",
						"          licenseNumber,",
						"          licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          federalTaxId,",
						"          gender,",
						"          lastFourOfSSN,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          accountStatus,",
						"          dob,",
						"          motherMaidenName,",
						"          pin,",
						"          securityQuestion,",
						"          securityAnswer,",
						"          ssn,",
						"          ssnRefusedIndicator,",
						"          stateidNumber = StateidNumber,",
						"          stateIdIssuedState,",
						"          billingType,",
						"          nextBillingCycleDate,",
						"          preferredContactMethod = name.preferredContactMethod,",
						"          prefix = name.prefix,",
						"          dc_eventtime,",
						"          sequence",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten23",
						"filter115 alterRow(upsertIf(true())) ~> alterRowDiLitem",
						"filter114 alterRow(upsertIf(true())) ~> alterRowvoipLLitems",
						"filter113 alterRow(upsertIf(true())) ~> alterRowiptv",
						"filter102 alterRow(upsertIf(true())) ~> alterRowwire",
						"filter alterRow(upsertIf(true())) ~> alterRowIIChar",
						"flattenshippingDetail foldDown(unroll(recipientPrimaryContact),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          price,",
						"          shippingaddress,",
						"          shippingDetailsid,",
						"          billingCode,",
						"          carrierPreference,",
						"          fromDate,",
						"          toDate,",
						"          sequence,",
						"          shippingCode,",
						"          shippingMethod,",
						"          shippingPriceCode,",
						"          additionalContactPhones,",
						"          id,",
						"          emailAddress,",
						"          firstName,",
						"          middleInitial,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          preferredContactMethod,",
						"          suffix,",
						"          prefix,",
						"          title,",
						"          previousLegalLastName,",
						"          recipientPrimaryContactPhoneType = recipientPrimaryContact.contactPhoneType,",
						"          recipientPrimaryContactPhoneNumber = recipientPrimaryContact.phoneNumber,",
						"          recipientPrimaryContactextension = recipientPrimaryContact.extension,",
						"          recipientPrimaryContactPhoneConsentDetails = recipientPrimaryContact.consentDetails",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten25",
						"filter116 foldDown(unroll(voipLOSCharacteristics.directoryListing, voipLOSCharacteristics.directoryListing),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgSequence = sequence,",
						"          dirListingName = voipLOSCharacteristics.directoryListing.name,",
						"          dirListingAdditionalDetails = voipLOSCharacteristics.directoryListing.additionalDetails,",
						"          dirListingDesignation = voipLOSCharacteristics.directoryListing.designation,",
						"          dirListingAddress = voipLOSCharacteristics.directoryListing.listing.address,",
						"          dirListingListingType = voipLOSCharacteristics.directoryListing.listing.listingType,",
						"          dirListingListingCategory = voipLOSCharacteristics.directoryListing.listing.listingCategory,",
						"          dirListingListBy = voipLOSCharacteristics.directoryListing.listing.listBy,",
						"          releaseDetailForBillingIndicator = voipLOSCharacteristics.directoryListing.listing.releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator = voipLOSCharacteristics.directoryListing.omitAddressIndicator,",
						"          dirListingParentComponentCode = voipLOSCharacteristics.directoryListing.parentComponentCode,",
						"          dirListingTitle2 = voipLOSCharacteristics.directoryListing.title2,",
						"          dirListingSubscriberName = voipLOSCharacteristics.directoryListing.subscriberName,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten26",
						"selectOrderData foldDown(unroll(OrderData.priceSummaryList, OrderData.priceSummaryList),",
						"     mapColumn(",
						"          amount = OrderData.priceSummaryList.amount,",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          currencyType = OrderData.priceSummaryList.currencyType,",
						"          priceType = OrderData.priceSummaryList.priceType,",
						"          total = OrderData.priceSummaryList.total,",
						"          taxSummary = OrderData.priceSummaryList.taxSummary",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenpriceSummaryList",
						"filter119 foldDown(unroll(wirelessLOSCharacteristics.upgradeQualificationDetails, wirelessLOSCharacteristics.upgradeQualificationDetails),",
						"     mapColumn(",
						"          approvalNumber = wirelessLOSCharacteristics.upgradeQualificationDetails.approvalNumber,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          contractExtended = wirelessLOSCharacteristics.upgradeQualificationDetails.contractExtended,",
						"          deviceType = wirelessLOSCharacteristics.upgradeQualificationDetails.deviceType,",
						"          discountUOM = wirelessLOSCharacteristics.upgradeQualificationDetails.discountUOM,",
						"          maximumMRC = wirelessLOSCharacteristics.upgradeQualificationDetails.maximumMRC,",
						"          minimumCommitment = wirelessLOSCharacteristics.upgradeQualificationDetails.minimumCommitment,",
						"          minimumMRC = wirelessLOSCharacteristics.upgradeQualificationDetails.minimumMRC,",
						"          newAEUCheckerIndicator = wirelessLOSCharacteristics.upgradeQualificationDetails.newAEUCheckerIndicator,",
						"          offerCategory = wirelessLOSCharacteristics.upgradeQualificationDetails.offerCategory,",
						"          policyCategory = wirelessLOSCharacteristics.upgradeQualificationDetails.policyCategory,",
						"          priceList = wirelessLOSCharacteristics.upgradeQualificationDetails.priceList,",
						"          qualificationLevel = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationLevel,",
						"          qualificationMessage = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationMessage,",
						"          qualificationType = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationType,",
						"          upgradeEligibilityDate = wirelessLOSCharacteristics.upgradeQualificationDetails.upgradeEligibilityDate,",
						"          upgradeFeeWaivedIndicator = wirelessLOSCharacteristics.upgradeQualificationDetails.upgradeFeeWaivedIndicator",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten28",
						"derivedColumn46 alterRow(upsertIf(true())) ~> alterRowupgrad",
						"coalLLseq alterRow(upsertIf(true())) ~> alterRowlineitems",
						"flatten28 derive(date = toTimestamp(toLong(toString(byName('upgradeEligibilityDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn46",
						"flattenreferencefalloutDetails derive(code = coalesce(code,' '),",
						"          dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn48",
						"filtereCommercePartner derive(referredDate = toTimestamp(toLong(toString(byName('OrderData.eCommercePartner.referredDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn50",
						"coallosgid foldDown(unroll(termsAndConditionAccepted, termsAndConditionAccepted),",
						"     mapColumn(",
						"          accepted = termsAndConditionAccepted.accepted,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          agreementText = termsAndConditionAccepted.agreementText,",
						"          agreementType = termsAndConditionAccepted.agreementType,",
						"          agreementURL = termsAndConditionAccepted.agreementURL,",
						"          category = termsAndConditionAccepted.category,",
						"          documentName = termsAndConditionAccepted.documentName,",
						"          termsandconditions_id = termsAndConditionAccepted.id,",
						"          orderLevelIndicator = termsAndConditionAccepted.orderLevelIndicator,",
						"          timestamp = termsAndConditionAccepted.timestamp,",
						"          tncld = termsAndConditionAccepted.tncId,",
						"          tnckey = termsAndConditionAccepted.tncKey,",
						"          tncRecordingOff = termsAndConditionAccepted.tncRecordingOff,",
						"          version = termsAndConditionAccepted.version",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten30",
						"flatten12 derive(preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn53",
						"flatten20 derive(effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          endDate = toTimestamp(toLong(toString(byName('endDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn54",
						"flattenLosgsLineItems derive(sequence = coalesce(sequence,''),",
						"          LineItem_id = coalesce(LineItem_id,''),",
						"          status = coalesce(status,''),",
						"          effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          availabilityDate = toTimestamp(toLong(toString(byName('supplyChainDetail.availabilityDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          shippedDate = toTimestamp(toLong(toString(byName('supplyChainDetail.shippedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          havailabilityDate = toTimestamp(toLong(toString(byName('hardGood.availabilityDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          deliveryByDateFromDate = toTimestamp(toLong(toString(byName('hardGood.deliveryByDate.fromDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          deliveryByDateToDate = toTimestamp(toLong(toString(byName('hardGood.deliveryByDate.toDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          shipmentCommitFromDate = toTimestamp(toLong(toString(byName('hardgood_shipmentCommitDate_fromDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          shipmentCommitToDate = toTimestamp(toLong(toString(byName('hardgood_shipmentCommitDate_toDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> coalLLseq",
						"flattenSourceDetailAdditionalDetail derive(value = coalesce(value,'')) ~> derivedColumn64",
						"filter29 derive(value = coalesce(value,'')) ~> derivedColumn65",
						"filter23 derive(Promotion_id = coalesce(Promotion_id,' '),",
						"          sequence = coalesce(sequence,' '),",
						"          effectiveDate = toDate(toString(byName('effectiveDate')),'yyyy-MM-dd'),",
						"          endDate = toDate(toString(byName('endDate')),'yyyy-MM-dd')) ~> derivedColumn68",
						"flatten26 derive(dirListingName = coalesce(dirListingName,' ')) ~> derivedColumn69",
						"selectOrderData filter(not(isNull(OrderData.eCommercePartner))) ~> filtereCommercePartner",
						"selectOrderData filter(not(isNull(OrderData.employeeDetail))) ~> filteremployeeDetail",
						"selectOrderData filter(not(isNull(OrderData.loginProfile))) ~> filterloginProfile",
						"selectOrderData filter(not(isNull(OrderData.salesAgent))) ~> filterSalesAgent",
						"selectOrderData filter(not(isNull(OrderData.referenceDetail))) ~> filterreferenencedetail",
						"selectOrderData filter(not(isNull(OrderData.creditPolicy))) ~> filtercreditPolicy",
						"selectOrderData filter(not(isNull(OrderData.moveDetail))) ~> filter100",
						"coalacc filter(not(isNull(unifiedAccount))) ~> filterunifiedaccount",
						"coalacc filter(not(isNull(negotiateConflictCustomer))) ~> filternegotiateCC",
						"coalacc filter(not(isNull(cardOnFilePaymentMethod.ePaymentMethod))) ~> filtecardOnFilePaymentMethod",
						"coalacc filter(not(isNull(creditCheck))) ~> filtercreditCheck",
						"coalacc filter(not(isNull(billingDetail))) ~> filter101",
						"coalLLseq filter(not(isNull(hardGood))) ~> filtehardGood",
						"coalLLseq filter(not(isNull(internetLineItemCharacteristics))) ~> filter",
						"coalLLseq filter(not(isNull(wirelessLineItemCharacteristics))) ~> filter102",
						"coalacc filter(not(isNull(cardOnFilePaymentMethod))) ~> filter103",
						"coalacc filter(not(isNull(autopayPaymentMethod.ePaymentMethod))) ~> filter104",
						"coalacc filter(not(isNull(autopayPaymentMethod))) ~> filter105",
						"coallosgid filter(not(isNull(compensation))) ~> filter107",
						"coallosgid filter(not(isNull(direcTVLOSCharacteristics))) ~> filter108",
						"coallosgid filter(not(isNull(wirelessLOSCharacteristics))) ~> filter110",
						"coallosgid filter(not(isNull(voipLOSCharacteristics))) ~> filter111",
						"coallosgid filter(not(isNull(iptvLOSCharacteristics))) ~> filter112",
						"coalLLseq filter(not(isNull(iptvLineItemCharacteristics))) ~> filter113",
						"coalLLseq filter(not(isNull(voipLineItemCharacteristics))) ~> filter114",
						"coalLLseq filter(not(isNull(direcTVLineItemCharacteristics))) ~> filter115",
						"coallosgid filter(not(isNull(directoryListing))) ~> filter116",
						"coallosgid filter(not(isNull(internetLOSCharacteristics))) ~> filter117",
						"coalLLseq filter(not(isNull(supplyChainDetail))) ~> filter118",
						"coallosgid filter(not(isNull(wirelessLOSCharacteristics.upgradeQualificationDetails))) ~> filter119",
						"filter87 derive(paymentTenderReference = coalesce(paymentTenderReference,'')) ~> derivedColumn71",
						"coalacc filter(not(isNull(provisioningSystem))) ~> filter120",
						"filter120 foldDown(unroll(provisioningSystem, provisioningSystem),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          systemName = provisioningSystem.systemName,",
						"          systemOrderReference = provisioningSystem.systemOrderReference,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten31",
						"flatten31 alterRow(upsertIf(true())) ~> alterRowProvisionSystem",
						"flattenshippingDetail derive(priceType = coalesce(price.priceType,' ')) ~> derivedColumn72",
						"flattenerror window(over(customerOrderNumber,",
						"          ErrorCode),",
						"     desc(lastmodified_date, true),",
						"     prank = rowNumber()) ~> windowOrderErros",
						"windowOrderErros filter(prank==1) ~> filterlatestordererror",
						"filterLosgEventsHistory alterRow(upsertIf(true())) ~> alterRowForOceOrderLosgsEventHistory",
						"filterorderdata filter(in(['OrderMs','OrderRepoMS','OrderTaskQueueMs'],eventSource)) ~> filterEventsource",
						"filterEventsource window(over(customerordernumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> WIndowLatestEvent",
						"WIndowLatestEvent filter(prank==1) ~> FitlerOutLatestEvent",
						"flattenpriceSummaryList filter(!isNull(priceType)) ~> filter124",
						"flatten25 filter(!isNull(shippingDetailsid)) ~> filter125",
						"filter100 derive(disconnectDate = toTimestamp(toLong(toString(byName('OrderData.moveDetail.disconnectDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumnMoveOrder",
						"parseJsonOrderData select(mapColumn(",
						"          orderjson_1,",
						"          lastmodified_date,",
						"          customerordernumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerordernumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          channel = orderjson_1.orderEvent.metaData.channel,",
						"          ordertask_Channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          eventSource",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderElements",
						"selectOrderElements derive(customerordernumber = coalesce(customerordernumber,customerordernumber2),",
						"          dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          channel = coalesce(channel,ordertask_Channel,sourcedetail_channel)) ~> derivedColumnCnoEventTImeChannel",
						"derivedColumn36 foldDown(unroll(losgs),",
						"     mapColumn(",
						"          comments,",
						"          actionBy,",
						"          updateInfos,",
						"          orderStatus,",
						"          transactionName,",
						"          transactionType,",
						"          changedLosgReferenceId,",
						"          recordId,",
						"          queueName,",
						"          parentOrderId,",
						"          startTime,",
						"          endTime,",
						"          transactionId,",
						"          orderId,",
						"          eventTime,",
						"          lastmodified_date,",
						"          idbStatus,",
						"          channel,",
						"          customerOrderNumber,",
						"          losgReferenceId = losgs.losgReferenceId,",
						"          service = losgs.service,",
						"          serviceType = losgs.serviceType,",
						"          losgstatus = losgs.status,",
						"          losgsubStatus = losgs.subStatus,",
						"          wirelessNumber = losgs.wirelessNumber",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten32",
						"flatten32 derive(losgstatus = coalesce(losgstatus,''),",
						"          losgsubStatus = coalesce(losgsubStatus,''),",
						"          losgReferenceId = coalesce(losgReferenceId,''),",
						"          modifiedDate = currentUTC()) ~> derivedColumn75",
						"derivedColumn75 window(over(customerOrderNumber,",
						"          losgReferenceId,",
						"          losgstatus,",
						"          losgsubStatus,",
						"          startTime),",
						"     asc(startTime, true),",
						"     prank = rowNumber()) ~> window100",
						"window100 filter(prank==1) ~> filter126",
						"filter126 alterRow(upsertIf(true())) ~> alterRowtransactionlogs",
						"filterEvents foldDown(unroll(losgsarray, losgsarray),",
						"     mapColumn(",
						"          losgStatus = losgsarray.losgStatus.status,",
						"          losg_id = losgsarray.id,",
						"          customerOrderNumber,",
						"          losgsequence = losgsarray.sequence,",
						"          losgsubStatus = losgsarray.losgStatus.subStatus,",
						"          eventDate = dc_eventtime,",
						"          lineItems = losgsarray.lineItems",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgEventsHistory",
						"flattenLosgEventsHistory derive(ModifiedDate = currentUTC(),",
						"          losg_id = coalesce(losg_id,''),",
						"          losgsequence = coalesce(losgsequence,'')) ~> derivedColumnEventsHistory",
						"derivedColumnEventsHistory window(over(customerOrderNumber,",
						"          losg_id,",
						"          losgsequence,",
						"          losgStatus,",
						"          losgsubStatus),",
						"     desc(eventDate, true),",
						"     prank = rowNumber()) ~> windowLosgEventsHistory",
						"windowLosgEventsHistory filter(prank==1) ~> filterLosgEventsHistory",
						"derivedColumnEventsHistory foldDown(unroll(lineItems, lineItems),",
						"     mapColumn(",
						"          losgStatus,",
						"          losg_id,",
						"          customerOrderNumber,",
						"          losgsequence,",
						"          losgsubStatus,",
						"          eventDate,",
						"          lineitemId = lineItems.id,",
						"          lineitemsequence = lineItems.sequence,",
						"          status = lineItems.status,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLineItemsEventHistory",
						"derivedLineItemEventHistory window(over(customerOrderNumber,",
						"          losg_id,",
						"          losgsequence,",
						"          lineitemId,",
						"          lineitemsequence),",
						"     desc(eventDate, true),",
						"     prank = rowNumber()) ~> windowLineItemEventsHistory",
						"windowLineItemEventsHistory filter(prank==1) ~> filterLineItemsEventHistory",
						"filterLineItemsEventHistory alterRow(upsertIf(true())) ~> alterRowlineitemhistory",
						"flattenLineItemsEventHistory derive(lineitemsequence = coalesce(lineitemsequence,'')) ~> derivedLineItemEventHistory",
						"filtercno filter(in(['OrderMs','OrderRepoMS','OrderTaskQueueMs'],eventSource)) ~> filterEvents",
						"selectOrderData filter(not(isNull(OrderData.cancelDetails.cancelReason))) ~> filteroceOrderCancelDetails",
						"filteroceOrderCancelDetails alterRow(upsertIf(true())) ~> alterRowoceOrderCancelDetails",
						"coallosgid filter(not(isNull(cancelDetails))) ~> filterlosgcanceldetails",
						"filterlosgcanceldetails alterRow(upsertIf(true())) ~> alterRowcancelDetails",
						"coallosgid filter(not(isNull(aPIExecutionDetails))) ~> filteroceOrderLosgsApiExecutionDetails",
						"filteroceOrderLosgsApiExecutionDetails foldDown(unroll(aPIExecutionDetails, aPIExecutionDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          name = aPIExecutionDetails.name,",
						"          losgId = Losg_id,",
						"          losgsequence = sequence,",
						"          priority = aPIExecutionDetails.priority,",
						"          action = aPIExecutionDetails.action,",
						"          subStatus = aPIExecutionDetails.loSGStatus.subStatus,",
						"          status = aPIExecutionDetails.loSGStatus.status,",
						"          eventDate = dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatterAPIExecutionDetails",
						"flatterAPIExecutionDetails alterRow(upsertIf(true())) ~> alterRowcustomerOrderNumber",
						"derivedColumnETCnoChannel filter(not(isNull(orderjson_1.orderEvent.data.order.customerOrderNumber))) ~> filtercno",
						"AlterRowOrderData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acceptedDate as timestamp,",
						"          b2bDetail as string,",
						"          channel as string,",
						"          status as string,",
						"          subStatus as string,",
						"          installmentMultiIndicator as string,",
						"          isOrderPended as string,",
						"          numberOfInstallments as string,",
						"          oceOrderNumber as string,",
						"          orderId as string,",
						"          program as string,",
						"          requestId as string,",
						"          requestType as string,",
						"          revisionNumber as string,",
						"          specialInstructions as string,",
						"          createdDate as timestamp,",
						"          submittedDate as timestamp,",
						"          updatedDate as timestamp,",
						"          type as string,",
						"          version as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          eventTimeDateTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderdata_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acceptedDate,",
						"          b2bDetail = OrderData.b2bDetail,",
						"          channel,",
						"          status = OrderData.statusDetail.status,",
						"          subStatus = OrderData.statusDetail.subStatus,",
						"          installmentMultiIndicator = OrderData.installmentDetail.multiIndicator,",
						"          isOrderPended = OrderData.isOrderPended,",
						"          numberOfInstallments = OrderData.installmentDetail.numberOfInstallments,",
						"          oceOrderNumber = OrderData.oceOrderNumber,",
						"          orderId = OrderData.orderId,",
						"          program = OrderData.program,",
						"          requestId = OrderData.requestId,",
						"          requestType = OrderData.requestType,",
						"          revisionNumber = OrderData.revisionNumber,",
						"          specialInstructions = OrderData.specialInstructions,",
						"          createdDate,",
						"          submittedDate,",
						"          updatedDate,",
						"          type = OrderData.type,",
						"          version = OrderData.version,",
						"          eventTime,",
						"          eventTimeDateTime = dc_eventtime",
						"     )) ~> sinkOrderData",
						"AlterRowOrderAdditionalDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          value as string,",
						"          sequence as integer,",
						"          type as string,",
						"          parentType as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code','value'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderadditionaldetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          type,",
						"          value,",
						"          code,",
						"          parentType,",
						"          sequence",
						"     )) ~> sinkOrderAdditionalDetails",
						"AlterRowOrderContactDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          additionalEmailRecipients as string,",
						"          orderConfirmationByEmailPermissionIndicator as string,",
						"          orderPickUpCTN as string,",
						"          permissionForOutboundCallIndicator as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          preferredContactMethod as string,",
						"          preferredTimeOfDayForContact as string,",
						"          primaryemailaddress as string,",
						"          productUpdatesByEmailPermissionIndicator as string,",
						"          secondaryEmailAddress as string,",
						"          timeZone as string,",
						"          unpublishedContactByPhonePermissionIndicator as string,",
						"          ModifiedDate as timestamp,",
						"          smsValidIndicator as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordercontactdetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails,",
						"          additionalEmailRecipients,",
						"          orderConfirmationByEmailPermissionIndicator,",
						"          orderPickUpCTN,",
						"          permissionForOutboundCallIndicator,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = nameid,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          preferredContactMethod,",
						"          preferredTimeOfDayForContact,",
						"          primaryemailaddress = primaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator,",
						"          secondaryEmailAddress,",
						"          timeZone,",
						"          unpublishedContactByPhonePermissionIndicator,",
						"          smsValidIndicator = smsValidatedIndicator",
						"     )) ~> sinkOrderContactDetails",
						"AlterRowOrderPriceList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseamount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencytype as string,",
						"          installmentEligibility as string,",
						"          msrp as decimal(20,2),",
						"          total as decimal(20,2),",
						"          taxDetail as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpricelist_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          additionalDetails,",
						"          amount,",
						"          baseamount = baseAmount,",
						"          creditFeeType,",
						"          currencytype = currencyType,",
						"          installmentEligibility,",
						"          msrp,",
						"          total,",
						"          taxDetail",
						"     )) ~> sinkOrderPrice",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          amount as decimal(20,2),",
						"          currencyType as string,",
						"          taxSummary as string,",
						"          total as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpricesummarylist',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          amount,",
						"          currencyType,",
						"          taxSummary,",
						"          total",
						"     )) ~> sinkOrderPriceSummaryList",
						"AlterRowOrderProductGroups sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          productGroupId as string,",
						"          productGroupSequence as string,",
						"          additionalDetails as string,",
						"          characteristicsId as string,",
						"          name as string,",
						"          type as string,",
						"          discountOffer as string,",
						"          packageCharacteristicsCode as string,",
						"          packageCharacteristicsDesc as string,",
						"          packageCharacteristicsType as string,",
						"          sharedPlanDataGroupId as string,",
						"          sharedPlanFamilyGroupId as string,",
						"          sharedPlanGroupReferencesCode as string,",
						"          sharedPlanType as string,",
						"          sharedPlanPrimarySubscriberNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','productGroupId','productGroupSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderproductgroups',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          productGroupId = Product_id,",
						"          productGroupSequence = sequence,",
						"          additionalDetails,",
						"          characteristicsId = characteristicsid,",
						"          name,",
						"          type = ProductGrouptype,",
						"          discountOffer,",
						"          packageCharacteristicsCode = code,",
						"          packageCharacteristicsDesc = description,",
						"          packageCharacteristicsType = packageCharacteristicstype,",
						"          sharedPlanDataGroupId = sharedPlandataGroupId,",
						"          sharedPlanFamilyGroupId = sharedPlanfamilyGroupId,",
						"          sharedPlanGroupReferencesCode = sharedPlangroupReferencesCode,",
						"          sharedPlanType = sharedPlanplanType,",
						"          sharedPlanPrimarySubscriberNumber = sharedPlanprimarySubscriberNumber",
						"     )) ~> sinkOrderProductGroups",
						"AlterRowOrderPromotions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          id as string,",
						"          sequence as string,",
						"          additionDetails as string,",
						"          amount as decimal(20,2),",
						"          baseOfferId as string,",
						"          complexDiscountIndicator as string,",
						"          componentConfigurations as string,",
						"          couponCode as string,",
						"          displayLevel as string,",
						"          duration as integer,",
						"          effectiveDate as timestamp,",
						"          effectiveInDays as integer,",
						"          endDate as timestamp,",
						"          fixedAmount as decimal(20,2),",
						"          ioId as string,",
						"          ioSequence as string,",
						"          parentPricePlanCode as string,",
						"          payInAdvanceProdId as string,",
						"          percent as decimal(20,2),",
						"          promotionAppliedBy as string,",
						"          promotionBillingCode as string,",
						"          promotionCode as string,",
						"          promotionCycle as string,",
						"          promotionId as string,",
						"          promotionName as string,",
						"          promotionType as string,",
						"          unitOfMeasurement as string,",
						"          promotionTypeDetail as string,",
						"          qualifyingServiceDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','sequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpromotions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          amount,",
						"          duration,",
						"          id = Promotion_id,",
						"          percent = Promotionpercent,",
						"          promotionCode,",
						"          promotionCycle,",
						"          promotionId,",
						"          promotionName,",
						"          promotionType,",
						"          sequence,",
						"          unitOfMeasurement,",
						"          baseOfferId,",
						"          complexDiscountIndicator,",
						"          componentConfigurations,",
						"          couponCode,",
						"          displayLevel,",
						"          effectiveDate,",
						"          effectiveInDays,",
						"          endDate,",
						"          fixedAmount,",
						"          ioId,",
						"          ioSequence,",
						"          parentPricePlanCode,",
						"          payInAdvanceProdId,",
						"          promotionAppliedBy,",
						"          promotionBillingCode,",
						"          promotionTypeDetail,",
						"          qualifyingServiceDetails,",
						"          additionDetails = additionalDetails",
						"     )) ~> sinkOrderPromotions",
						"AlterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          termsAndConditionsId as string,",
						"          agreementText as string,",
						"          accepted as string,",
						"          agreementURL as string,",
						"          agreementType as string,",
						"          category as string,",
						"          documentName as string,",
						"          orderLevelIndicator as string,",
						"          timestamp as timestamp,",
						"          tncId as string,",
						"          tncKey as string,",
						"          tncRecordingOff as string,",
						"          version as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','termsAndConditionsId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordertermsandconditions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accepted,",
						"          agreementText,",
						"          agreementType,",
						"          category,",
						"          termsAndConditionsId = id,",
						"          orderLevelIndicator,",
						"          timestamp,",
						"          version,",
						"          agreementURL,",
						"          documentName,",
						"          tncId,",
						"          tncKey,",
						"          tncRecordingOff",
						"     )) ~> sinkOrderTermsandConditions",
						"AlterRowOrderAccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          accepteddate as timestamp,",
						"          accountCategory as string,",
						"          accountCrossmarketIndicator as string,",
						"          accountSubCategory as string,",
						"          accountSubType as string,",
						"          accountType as string,",
						"          acpTransactionId as string,",
						"          acpClassification as string,",
						"          additionalDetails as string,",
						"          anchorCTN as string,",
						"          autoPayReason as string,",
						"          b2bReference as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          bigData as string,",
						"          billingAccountNumber as string,",
						"          billingAccountTelephoneNumber as string,",
						"          billingdeliverypreference as string,",
						"          billingLanguagePreference as string,",
						"          billPaymentDueDate as string,",
						"          businessAccountName as string,",
						"          cardOnFileStatus as string,",
						"          conflictingServiceDetails as string,",
						"          consentToCCIndicator as string,",
						"          contractAcceptance as string,",
						"          contractLength as string,",
						"          contractVersionNumber as string,",
						"          cpni as string,",
						"          creditAlertFraudAlert as string,",
						"          creditAlertGeneralMessage as string,",
						"          ctnValidatedIndicator as string,",
						"          customerCode as string,",
						"          delinquentAccountIndicator as string,",
						"          ebillReason as string,",
						"          electronicDisclosureAuthorization as string,",
						"          internetServiceAuthorization as string,",
						"          letterOfAuthorizationURL as string,",
						"          localServiceAuthorization as string,",
						"          localTollProviderAuthorization as string,",
						"          longDistanceServiceProvider as string,",
						"          emailValidatedIndicator as string,",
						"          enterpriseType as string,",
						"          existingAutoBillStatus as string,",
						"          existingAutoBillIndicator as string,",
						"          gigaPower as string,",
						"          landLineNumber as string,",
						"          langId as string,",
						"          liabilityType as string,",
						"          market as string,",
						"          marketingSourceCode as string,",
						"          mdmProfileSettingAdditionDetails as string,",
						"          mdmProfileSettingProfileName as string,",
						"          packageId as string,",
						"          partnerJointBillType as string,",
						"          paymentArrangement as string,",
						"          pmoIndicator as string,",
						"          priceCode as string,",
						"          priceMatch as string,",
						"          primaryCTN as string,",
						"          spokenLanguagePreference as string,",
						"          subMarket as string,",
						"          submittedDate as timestamp,",
						"          targetCTN as string,",
						"          thirdPartyCombinedBill as string,",
						"          winBackIndicator as string,",
						"          createdDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          eventTimeUnixTime as string,",
						"          eventTimeDateTime as timestamp,",
						"          priceStrategyId as string,",
						"          priceStrategyName as string,",
						"          priceLockEndDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAccts_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          createdDate,",
						"          submittedDate,",
						"          accepteddate = acceptedDate,",
						"          accountCategory,",
						"          accountSubCategory,",
						"          accountSubType,",
						"          accountType,",
						"          autoPayReason,",
						"          b2bReference,",
						"          billingdeliverypreference = billingDeliveryPreference,",
						"          billingLanguagePreference,",
						"          businessAccountName,",
						"          cpni,",
						"          ebillReason,",
						"          enterpriseType,",
						"          gigaPower,",
						"          acctId = Account_id,",
						"          langId,",
						"          market,",
						"          paymentArrangement,",
						"          acctSequence = sequence,",
						"          spokenLanguagePreference,",
						"          billingAccountNumber,",
						"          additionalDetails,",
						"          billingAccountTelephoneNumber,",
						"          primaryCTN,",
						"          packageId = employeeReferralDetail.packageId,",
						"          accountCrossmarketIndicator,",
						"          acpTransactionId,",
						"          acpClassification,",
						"          anchorCTN,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          bigData,",
						"          billPaymentDueDate,",
						"          cardOnFileStatus,",
						"          conflictingServiceDetails,",
						"          consentToCCIndicator,",
						"          contractAcceptance,",
						"          contractLength,",
						"          contractVersionNumber,",
						"          creditAlertFraudAlert,",
						"          creditAlertGeneralMessage,",
						"          ctnValidatedIndicator,",
						"          customerCode,",
						"          delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization,",
						"          internetServiceAuthorization,",
						"          letterOfAuthorizationURL,",
						"          localServiceAuthorization,",
						"          localTollProviderAuthorization,",
						"          longDistanceServiceProvider,",
						"          emailValidatedIndicator,",
						"          existingAutoBillStatus,",
						"          existingAutoBillIndicator,",
						"          landLineNumber,",
						"          liabilityType,",
						"          marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails,",
						"          mdmProfileSettingProfileName,",
						"          partnerJointBillType,",
						"          pmoIndicator,",
						"          priceCode,",
						"          priceMatch,",
						"          subMarket,",
						"          targetCTN,",
						"          thirdPartyCombinedBill,",
						"          winBackIndicator,",
						"          eventTimeDateTime = dc_eventtime,",
						"          eventTimeUnixTime = eventTime",
						"     )) ~> sinkOrderAccounts",
						"AlterRowOrderAccountsServiceFacilityQualification sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          additionalDetails as string,",
						"          address as string,",
						"          cpeRequiredIndicator as string,",
						"          dslAvailableIndicator as string,",
						"          facilityCheck as string,",
						"          frequency17MhzIndicator as string,",
						"          gfastDeviceWireType as string,",
						"          id as string,",
						"          potsAvailableIndicator as string,",
						"          preferredNetworkType as string,",
						"          profileCode as string,",
						"          vectoringIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderaccountsservicefacilityqualification_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = Actsequence,",
						"          additionalDetails,",
						"          address,",
						"          cpeRequiredIndicator,",
						"          dslAvailableIndicator,",
						"          facilityCheck,",
						"          frequency17MhzIndicator,",
						"          gfastDeviceWireType,",
						"          id,",
						"          potsAvailableIndicator,",
						"          vectoringIndicator,",
						"          preferredNetworkType,",
						"          profileCode",
						"     )) ~> sinkOrderAccountsServiceFacilityQualification",
						"AlterRowOrderAccountsBillingDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountStatus as string,",
						"          dob as string,",
						"          driversLicenseExpirationDate as string,",
						"          driversLicenseNumber as string,",
						"          driverLicenseState as string,",
						"          employerName as string,",
						"          employerPhoneNumber as string,",
						"          federalTaxId as string,",
						"          gender as string,",
						"          lastFourOfSSN as string,",
						"          motherMaidenName as string,",
						"          securityVerificationPin as string,",
						"          securityAnswer as string,",
						"          securityQuestion as string,",
						"          ssn as string,",
						"          ssnRefusedIndicator as string,",
						"          stateIdNumber as string,",
						"          stateIdIssuedState as string,",
						"          billingType as string,",
						"          nextBillingCycleDate as string,",
						"          previousAddress as string,",
						"          previousPhoneNumber as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderaccountsbillingdetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          accountStatus,",
						"          driverLicenseState = licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          gender,",
						"          motherMaidenName,",
						"          ssnRefusedIndicator,",
						"          stateIdIssuedState,",
						"          billingType,",
						"          nextBillingCycleDate,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails",
						"     )) ~> sinkOrderAccountsBillingDetails",
						"AlterRowOrderLosgsPrice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseamount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencytype as string,",
						"          installmentEligibility as string,",
						"          msrp as string,",
						"          total as decimal(20,2),",
						"          taxDetail as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgsprice_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          amount,",
						"          baseamount = baseAmount,",
						"          currencytype = currencyType,",
						"          priceType = pricetype,",
						"          total,",
						"          creditFeeType,",
						"          installmentEligibility,",
						"          msrp,",
						"          additionalDetails,",
						"          taxDetail = J_tax",
						"     )) ~> sinkOrderLosgsPrice",
						"AlterRowOrderLosgsPriceSummaryList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          priceType as string,",
						"          amount as double,",
						"          currencytype as string,",
						"          total as double,",
						"          taxSummary as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgspricesummarylist_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          amount,",
						"          currencytype = currencyType,",
						"          priceType,",
						"          total,",
						"          taxSummary,",
						"          losgSequence = Losgsequence",
						"     )) ~> sinkOrderLosgsPriceSummaryList",
						"AlterRowlosgsLineitemsAdditionalDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          type as string,",
						"          code as string,",
						"          value as string,",
						"          parentType as string,",
						"          sequence as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','code','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_losgslineitemsadditionaldetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          lineItemId = LineItem_id,",
						"          type,",
						"          parentType,",
						"          code,",
						"          value,",
						"          losgSequence = losgsequence,",
						"          lineItemSequence = LineItemsequence,",
						"          sequence",
						"     )) ~> oceOrderLosgsLineItemsAddlDetails",
						"AlterRowOrderSourceDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          application as string,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          expressCheckOutIndicator as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetailGroupId as string,",
						"          premierDetailGroupName as string,",
						"          premierDetailResourceCenterTicketNumber as string,",
						"          region as string,",
						"          responseMode as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          sequence as string,",
						"          zip as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordersourcedetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          application = sourceDetail.application,",
						"          browserId = sourceDetail.browserId,",
						"          channel = sourceDetail.channel,",
						"          city = sourceDetail.city,",
						"          clientIP = sourceDetail.clientIP,",
						"          clientType = sourceDetail.clientType,",
						"          countryCode = sourceDetail.countryCode,",
						"          county = sourceDetail.county,",
						"          externalOrderSource = sourceDetail.externalOrderSource,",
						"          locale = sourceDetail.locale,",
						"          region = sourceDetail.region,",
						"          salesChannel = sourceDetail.salesChannel,",
						"          salesChannelType = sourceDetail.salesChannelType,",
						"          sender = sourceDetail.sender,",
						"          zip = sourceDetail.zip,",
						"          expressCheckOutIndicator = sourceDetail.expressCheckOutIndicator,",
						"          mediaSource = sourceDetail.mediaSource,",
						"          originatingApplication = sourceDetail.originatingApplication,",
						"          initiatingApplication = sourceDetail.initiatingApplication,",
						"          premierDetailGroupId = sourceDetail.premierDetail.groupId,",
						"          premierDetailGroupName = sourceDetail.premierDetail.groupName,",
						"          premierDetailResourceCenterTicketNumber = sourceDetail.premierDetail.resourceCenterTicketNumber,",
						"          responseMode = sourceDetail.responseMode,",
						"          sequence = sourceDetail.sequence",
						"     )) ~> sinkOrderSourceDetail",
						"AlterRowOrderSourceDetailAdditionalDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          value as string,",
						"          sequence as string,",
						"          type as string,",
						"          parentType as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code','value'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordersourcedetailadditionaldetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          type,",
						"          value,",
						"          sequence,",
						"          parentType",
						"     )) ~> SourceDetailAdditionalDetail",
						"AlterRowOrderlosgs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          acceptEULA as string,",
						"          accountReference as string,",
						"          actionReason as string,",
						"          actionType as string,",
						"          apiExecutionDetailsErrorCode as string,",
						"          apiExecutionDetailsLosgStatus as string,",
						"          apiExecutionDetailsName as string,",
						"          apiExecutionDetailsPriority as string,",
						"          billingsystemid as string,",
						"          bundleGroupId as string,",
						"          childOrderId as string,",
						"          companyCode as string,",
						"          creditPolicySecurityType as string,",
						"          dealercode as string,",
						"          divisionCode as string,",
						"          effectiveDate as timestamp,",
						"          engageVideoId as string,",
						"          entitlementBenefit as string,",
						"          fallout as string,",
						"          fnGuId as string,",
						"          fnType as string,",
						"          fnUserId as string,",
						"          freeDevicePolicyId as string,",
						"          fulfillerCode as string,",
						"          fulfillerName as string,",
						"          fulfillmentmethod as string,",
						"          fwCAF2AddressIndicator as string,",
						"          fwiMoveInIndicator as string,",
						"          installtype as string,",
						"          losgType as string,",
						"          market as string,",
						"          migrationIndicator as string,",
						"          migrationSource as string,",
						"          name as string,",
						"          notes as string,",
						"          preferredAreaCode as string,",
						"          priceCode as string,",
						"          primaryIndicator as string,",
						"          productcategory as string,",
						"          productOfferingId as string,",
						"          productOrderActionId as string,",
						"          productOrderActionReference as string,",
						"          profileCode as string,",
						"          rateType as string,",
						"          requestedExecutionDate as timestamp,",
						"          salesOfferId as string,",
						"          schedulingdetailreference as string,",
						"          serviceArea as string,",
						"          serviceAreaName as string,",
						"          servicequalificationreference as string,",
						"          status as string,",
						"          subMarket as string,",
						"          substatus as string,",
						"          sunsetDate as timestamp,",
						"          tenantAccountId as string,",
						"          tenantAccountStatus as string,",
						"          transferFromBAN as string,",
						"          transferFromFAN as string,",
						"          transferFromMobileNumber as string,",
						"          type as string,",
						"          vendorAccountId as string,",
						"          ModifiedDate as timestamp,",
						"          actionReasonCode as string,",
						"          previousProductOrderActionId as string,",
						"          eventTimeUnixTime as string,",
						"          eventTimeDateTime as timestamp,",
						"          productInventoryStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgs_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = sequence,",
						"          losgId = Losg_id,",
						"          accountReference,",
						"          actionReason,",
						"          actionType,",
						"          acceptEULA,",
						"          tenantAccountId,",
						"          tenantAccountStatus,",
						"          billingsystemid = billingSystemId,",
						"          bundleGroupId,",
						"          childOrderId,",
						"          companyCode,",
						"          creditPolicySecurityType,",
						"          dealercode = dealerCode,",
						"          divisionCode,",
						"          effectiveDate,",
						"          engageVideoId,",
						"          entitlementBenefit,",
						"          fnGuId,",
						"          fnUserId,",
						"          fnType,",
						"          freeDevicePolicyId,",
						"          fulfillmentmethod = fulfillmentMethod,",
						"          fulfillerName,",
						"          fulfillerCode,",
						"          fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator,",
						"          installtype = installType,",
						"          status = losgStatus.status,",
						"          substatus = losgStatus.subStatus,",
						"          fallout = losgStatus.fallout,",
						"          losgType,",
						"          market,",
						"          migrationIndicator,",
						"          migrationSource,",
						"          name,",
						"          notes,",
						"          preferredAreaCode,",
						"          priceCode,",
						"          primaryIndicator,",
						"          productcategory = productCategory,",
						"          productOfferingId,",
						"          productOrderActionId,",
						"          productOrderActionReference,",
						"          profileCode,",
						"          rateType,",
						"          requestedExecutionDate,",
						"          salesOfferId,",
						"          schedulingdetailreference = schedulingDetailReference,",
						"          serviceArea,",
						"          serviceAreaName,",
						"          servicequalificationreference = serviceQualificationReference,",
						"          subMarket,",
						"          sunsetDate,",
						"          transferFromBAN = transferfromBAN,",
						"          transferFromFAN = transferfromFAN,",
						"          transferFromMobileNumber = transferfromMobileNumber,",
						"          type,",
						"          vendorAccountId,",
						"          previousProductOrderActionId,",
						"          actionReasonCode,",
						"          eventTimeDateTime = dc_eventtime,",
						"          eventTimeUnixTime = eventTime",
						"     )) ~> sinkOrderlosgs",
						"alterRowcreditpolicy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          creditPolicyTransactionId as string,",
						"          crsmOnFlag as string,",
						"          previousCreditPolicyTransactionId as string,",
						"          policyAcceptedIndicator as string,",
						"          uucpStatus as string,",
						"          ModifiedDate as timestamp,",
						"          order_type as string,",
						"          additionalDetails as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_ordercreditpolicy_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          creditPolicyTransactionId = OrderData.creditPolicy.creditPolicyTransactionId,",
						"          crsmOnFlag = OrderData.creditPolicy.crsmOnFlag,",
						"          previousCreditPolicyTransactionId = OrderData.creditPolicy.previousCreditPolicyTransactionId,",
						"          policyAcceptedIndicator = OrderData.creditPolicy.policyAcceptedIndicator,",
						"          uucpStatus = OrderData.creditPolicy.uucpStatus,",
						"          additionalDetails = OrderData.creditPolicy.additionalDetails",
						"     )) ~> sinkcreditpolicy",
						"alterRowdebitaccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          debtId as string,",
						"          debtAccountNumber as string,",
						"          accountCategory as string,",
						"          accountSubCategory as string,",
						"          affiliateId as string,",
						"          amount as decimal(20,2),",
						"          debtPaidStatus as string,",
						"          paymentMethodReference as string,",
						"          provider as string,",
						"          settledBy as string,",
						"          system as string,",
						"          systemDivision as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','debtId','debtAccountNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_orderdebtAccounts_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accountCategory = debtAccounts.accountCategory,",
						"          accountSubCategory = debtAccounts.accountSubCategory,",
						"          affiliateId = debtAccounts.affiliateId,",
						"          amount = debtAccounts.amount,",
						"          debtAccountNumber,",
						"          debtPaidStatus = debtAccounts.debtPaidStatus,",
						"          debtId = id,",
						"          paymentMethodReference = debtAccounts.paymentMethodReference,",
						"          provider = debtAccounts.provider,",
						"          settledBy = debtAccounts.settledBy,",
						"          system = debtAccounts.system,",
						"          systemDivision = debtAccounts.systemDivision",
						"     )) ~> sinkdebtaccounts",
						"alterRowerrors sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          ErrorCode as string,",
						"          ErrorDescription as string,",
						"          IdRef as string,",
						"          Type as string,",
						"          eventhub_adx_ingest_time as timestamp,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','ErrorCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_Errors_error',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          ErrorCode,",
						"          ErrorDescription,",
						"          IdRef,",
						"          Type,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          eventTime = eventtime",
						"     )) ~> sinkError",
						"alterRowmoveorder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          disconnectDate as timestamp,",
						"          fromBillingAddress as string,",
						"          fromServiceAddress as string,",
						"          fullyAuthenticatedIndicator as string,",
						"          fromTelephoneNumber as string,",
						"          modifiedDate as timestamp,",
						"          eventTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_moveorderexists_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails = OrderData.moveDetail.additionalDetails,",
						"          disconnectDate,",
						"          fromBillingAddress = OrderData.moveDetail.fromBillingAddress,",
						"          fromServiceAddress = OrderData.moveDetail.fromServiceAddress,",
						"          fullyAuthenticatedIndicator = OrderData.moveDetail.fullyAuthenticatedIndicator,",
						"          fromTelephoneNumber = OrderData.moveDetail.fromTelephoneNumber,",
						"          eventTime = dc_eventtime",
						"     )) ~> sinkoceOrderMoveDetail",
						"alterRowtaskid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerOrderNumber as string,",
						"          taskId as string,",
						"          applicationName as string,",
						"          camundaTaskId as string,",
						"          channel as string,",
						"          creationDate as timestamp,",
						"          losgIds as string,",
						"          orderNumber as string,",
						"          partnerName as string,",
						"          programName as string,",
						"          queueId as string,",
						"          queueName as string,",
						"          queuesladetails as string,",
						"          taskStatus as string,",
						"          eventHubAdxIngestTime as timestamp,",
						"          modifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerOrderNumber','taskId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_ordertask_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          CustomerOrderNumber,",
						"          taskId = dc_taskid,",
						"          applicationName = ApplicationName,",
						"          camundaTaskId = dc_camuda,",
						"          channel = Channel,",
						"          creationDate = CreationDate,",
						"          losgIds = dc_losgids,",
						"          orderNumber = OrderNumber,",
						"          partnerName = PartnerName,",
						"          programName = ProgramName,",
						"          queueId = QueueId,",
						"          queueName = QueueName,",
						"          queuesladetails = QueueSlaDetails,",
						"          taskStatus = TaskStatus,",
						"          eventTime,",
						"          eventHubAdxIngestTime = lastmodified_date",
						"     )) ~> sinkordertask",
						"alterRowreferencedetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          associatedRequestID as string,",
						"          bulkIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          commonOrderIndicator as string,",
						"          encryptedIndicator as string,",
						"          fraudDetectionAdditionalDetails as string,",
						"          authenticationRequestId as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string,",
						"          efcCallIndicator as string,",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          eventhub_adx_ingest_time as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_order_referenceDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          encryptedIndicator = OrderData.referenceDetail.encryptedIndicator,",
						"          posReferenceId = OrderData.referenceDetail.posReferenceId,",
						"          posUUID = OrderData.referenceDetail.posUUID,",
						"          associatedRequestID = OrderData.referenceDetail.associatedRequestID,",
						"          passThroughIndicator = OrderData.referenceDetail.passThroughIndicator,",
						"          testOrderIndicator = OrderData.referenceDetail.testOrderIndicator,",
						"          bulkIndicator = OrderData.referenceDetail.bulkIndicator,",
						"          bulkOrderWorkRequestNumber = OrderData.referenceDetail.bulkOrderWorkRequestNumber,",
						"          chatId = OrderData.referenceDetail.chatId,",
						"          commonOrderIndicator = OrderData.referenceDetail.commonOrderIndicator,",
						"          fraudDetectionAdditionalDetails = OrderData.referenceDetail.fraudDetectionDetail.additionalDetails,",
						"          authenticationRequestId = OrderData.referenceDetail.fraudDetectionDetail.authenticationRequestId,",
						"          orderFraudCheckStatus = OrderData.referenceDetail.fraudDetectionDetail.orderFraudCheckStatus,",
						"          orderModifiedAfterPinValidation = OrderData.referenceDetail.fraudDetectionDetail.orderModifiedAfterPinValidation,",
						"          pinValidationSource = OrderData.referenceDetail.fraudDetectionDetail.pinValidationSource,",
						"          pinValidationStatus = OrderData.referenceDetail.fraudDetectionDetail.pinValidationStatus,",
						"          proofOfIdentityUrl = OrderData.referenceDetail.fraudDetectionDetail.proofOfIdentityUrl,",
						"          smsCTN = OrderData.referenceDetail.fraudDetectionDetail.smsCTN,",
						"          validationType = OrderData.referenceDetail.fraudDetectionDetail.validationType,",
						"          efcCallIndicator = OrderData.referenceDetail.fraudDetectionDetail.efcCallIndicator,",
						"          orderStatusUrl = OrderData.referenceDetail.orderStatusUrl,",
						"          parentOrderId = OrderData.referenceDetail.parentOrderId,",
						"          partialOrderIndicator = OrderData.referenceDetail.partialOrderIndicator,",
						"          productCombinationCode = OrderData.referenceDetail.productCombinationCode,",
						"          referenceOrderId = OrderData.referenceDetail.referenceOrderId,",
						"          resubmitOrderIndicator = OrderData.referenceDetail.resubmitOrderIndicator,",
						"          summaryCreatedIndicator = OrderData.referenceDetail.summaryCreatedIndicator",
						"     )) ~> sinkorderreferencedetail",
						"IPtvalterrow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          freeSTBReceiverCount as integer,",
						"          parentComponentCode as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_iptvLOSCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          freeSTBReceiverCount = iptvLOSCharacteristics.freeSTBReceiverCount,",
						"          parentComponentCode = iptvLOSCharacteristics.parentComponentCode",
						"     )) ~> iptvLOSCharacteristics",
						"AlterSubcribeName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101-oceOrderLosgsSubscriberName_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails",
						"     )) ~> oceOrderLosgsSubscriberName",
						"MapDrifted1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerordernumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          termsAndConditionsId as string,",
						"          accepted as string,",
						"          agreementtext as string,",
						"          agreementtype as string,",
						"          agreementURL as string,",
						"          category as string,",
						"          documentName as string,",
						"          orderlevelindicator as string,",
						"          version as string,",
						"          timestamp as timestamp,",
						"          tncKey as string,",
						"          tncld as string,",
						"          tncRecordingOff as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerordernumber','losgSequence','losgId','termsAndConditionsId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgTermsAndConditionsAccepted_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerordernumber = customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          accepted,",
						"          agreementtext = agreementText,",
						"          agreementtype = agreementType,",
						"          agreementURL,",
						"          category,",
						"          termsAndConditionsId = termsandconditions_id,",
						"          orderlevelindicator = orderLevelIndicator,",
						"          timestamp,",
						"          version,",
						"          tncKey = tnckey,",
						"          tncld,",
						"          tncRecordingOff,",
						"          documentName",
						"     )) ~> oceOrderLosgsTermsAndConditionAccepted",
						"altervoipc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          reservedTelephoneNumber as string,",
						"          e911Id as string,",
						"          e911HomeAlarmSystem as string,",
						"          e911NoMatchFound as string,",
						"          e911Adress as string,",
						"          e911TermsAndConditionId as string,",
						"          e911TnCAccepted as string,",
						"          e911TnCCategory as string,",
						"          e911TnCAgreementText as string,",
						"          e911TnCAgreementType as string,",
						"          e911TnCAgreementURL as string,",
						"          e911TnCTimestamp as timestamp,",
						"          e911TnCVersion as string,",
						"          e911TnCDocumentName as string,",
						"          e911TnCOrderLevelIndicator as string,",
						"          e911TncId as string,",
						"          e911TncKey as string,",
						"          e911TnCRecordingOff as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsVoipCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          reservedTelephoneNumber = voipLOSCharacteristics.reservedTelephoneNumber,",
						"          e911Id = voipLOSCharacteristics.e911Detail.id,",
						"          e911HomeAlarmSystem = voipLOSCharacteristics.e911Detail.homeAlarmSystem,",
						"          e911NoMatchFound = voipLOSCharacteristics.e911Detail.noMatchFound,",
						"          e911Adress = voipLOSCharacteristics.e911Detail.address,",
						"          e911TermsAndConditionId = voipLOSCharacteristics.e911Detail.termsAndCondition911.id,",
						"          e911TnCAccepted = voipLOSCharacteristics.e911Detail.termsAndCondition911.accepted,",
						"          e911TnCCategory = voipLOSCharacteristics.e911Detail.termsAndCondition911.category,",
						"          e911TnCAgreementText = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementText,",
						"          e911TnCAgreementType = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementType,",
						"          e911TnCAgreementURL = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementURL,",
						"          e911TnCTimestamp = e911TnCtimestamp,",
						"          e911TnCVersion = voipLOSCharacteristics.e911Detail.termsAndCondition911.version,",
						"          e911TnCDocumentName = voipLOSCharacteristics.e911Detail.termsAndCondition911.documentName,",
						"          e911TnCOrderLevelIndicator = voipLOSCharacteristics.e911Detail.termsAndCondition911.orderLevelIndicator,",
						"          e911TncId = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncId,",
						"          e911TncKey = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncKey,",
						"          e911TnCRecordingOff = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncRecordingOff",
						"     )) ~> oceOrderLosgsVoipCharacteristics",
						"altere11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerordernumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          dirListingName as string,",
						"          dirListingAdditionalDetails as string,",
						"          dirListingDesignation as string,",
						"          dirListingAddress as string,",
						"          dirListingListingType as string,",
						"          dirListingListingCategory as string,",
						"          dirListingListBy as string,",
						"          releaseDetailForBillingIndicator as string,",
						"          dirListingOmitAddressIndicator as string,",
						"          dirListingParentComponentCode as string,",
						"          dirListingTitle2 as string,",
						"          dirListingSubscriberName as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerordernumber','losgSequence','losgId','dirListingName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsVoipCharacteristicsE911Detail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerordernumber = customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence,",
						"          dirListingName,",
						"          dirListingAdditionalDetails,",
						"          dirListingDesignation,",
						"          dirListingAddress,",
						"          dirListingListingType,",
						"          dirListingListingCategory,",
						"          dirListingListBy,",
						"          releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator,",
						"          dirListingParentComponentCode,",
						"          dirListingTitle2,",
						"          dirListingSubscriberName",
						"     )) ~> oceOrderLosgsVoipCharacteristicsDirListing",
						"alterWirlessChar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          accountConversionStatus as string,",
						"          activationDate as timestamp,",
						"          availabilityDate as timestamp,",
						"          billingSystemId as string,",
						"          calculateTaxIndicator as string,",
						"          coPayDataAddendDateAndTime as timestamp,",
						"          coPayDataAddendVersion as string,",
						"          coPayDataAllowanceAmount as double,",
						"          coPayDataCancelCTN as string,",
						"          coPayDataEnrollingCTN as string,",
						"          coPayDataReceivingBAN as string,",
						"          coPayDataReceivingFAN as string,",
						"          cCarDetailMake as string,",
						"          cCarDetailModel as string,",
						"          cCarDetailTrim as string,",
						"          cCarDetailVehicleManufacturer as string,",
						"          cCarVin as string,",
						"          cCarYear as string,",
						"          crossUpgradeIndicator as string,",
						"          curbsideDelivery as string,",
						"          inventoryStoreId as string,",
						"          manageCallListaction as string,",
						"          manageCallListCompAListName as string,",
						"          manageCallListcompCTNList as string,",
						"          manageCallListcontactCTN as string,",
						"          manageCallListId as string,",
						"          manageCallListOverrideInd as string,",
						"          mobileNumber as string,",
						"          paymentId as string,",
						"          preOrderIndicator as string,",
						"          primarySharedPlanIndicator as string,",
						"          shippedHotIndicator as string,",
						"          shoppingZipCode as string,",
						"          splitLiabilityDataAddendDateAndTime as timestamp,",
						"          splitLiabilityDataAddendVersion as string,",
						"          splitLiabilityDataCancelCTN as string,",
						"          splitLiabilityDataEnrollingCTN as string,",
						"          splitLiabilityDataOneTimeChargeInd as string,",
						"          splitLiabilityDataValueIndicator as string,",
						"          splitLiabilityDataTargetBAN as string,",
						"          splitLiabilityDataTargetFAN as string,",
						"          splitLiabilityDataTelecomManagerEmail as string,",
						"          storeId as string,",
						"          subscriberCrossmarketIndicator as string,",
						"          subscriptionClass as string,",
						"          tradeInQuoteId as string,",
						"          upgradeDetailRelatedMobNumber as string,",
						"          upgradeDetailRelationship as string,",
						"          ModifiedDate as timestamp,",
						"          networkFulfillmentDate as timestamp,",
						"          subscriberNumberStatus as string,",
						"          subscriberId as string,",
						"          preferredCTNZipCode as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsWirelessCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          accountConversionStatus = wirelessLOSCharacteristics.accountConversionStatus,",
						"          activationDate,",
						"          availabilityDate,",
						"          billingSystemId = wirelessLOSCharacteristics.billingSystemId,",
						"          calculateTaxIndicator = wirelessLOSCharacteristics.calculateTaxIndicator,",
						"          coPayDataAddendDateAndTime = addendDateAndTime,",
						"          coPayDataAddendVersion = wirelessLOSCharacteristics.coPayData.addendVersion,",
						"          coPayDataAllowanceAmount = wirelessLOSCharacteristics.coPayData.allowanceAmount,",
						"          coPayDataCancelCTN = wirelessLOSCharacteristics.coPayData.cancelCTN,",
						"          coPayDataEnrollingCTN = wirelessLOSCharacteristics.coPayData.enrollingCTN,",
						"          coPayDataReceivingBAN = wirelessLOSCharacteristics.coPayData.receivingBAN,",
						"          coPayDataReceivingFAN = wirelessLOSCharacteristics.coPayData.receivingFAN,",
						"          cCarDetailMake = wirelessLOSCharacteristics.connectedCarDetail.make,",
						"          cCarDetailModel = wirelessLOSCharacteristics.connectedCarDetail.model,",
						"          cCarDetailTrim = wirelessLOSCharacteristics.connectedCarDetail.trim,",
						"          cCarDetailVehicleManufacturer = wirelessLOSCharacteristics.connectedCarDetail.vehicleManufacturer,",
						"          cCarVin = wirelessLOSCharacteristics.connectedCarDetail.vin,",
						"          cCarYear = wirelessLOSCharacteristics.connectedCarDetail.year,",
						"          crossUpgradeIndicator = wirelessLOSCharacteristics.crossUpgradeIndicator,",
						"          curbsideDelivery = wirelessLOSCharacteristics.curbsideDelivery,",
						"          inventoryStoreId = wirelessLOSCharacteristics.inventoryStoreId,",
						"          manageCallListaction = wirelessLOSCharacteristics.manageCallList.action,",
						"          manageCallListCompAListName = wirelessLOSCharacteristics.manageCallList.companyAListName,",
						"          manageCallListcompCTNList = wirelessLOSCharacteristics.manageCallList.companyCTNList,",
						"          manageCallListcontactCTN = wirelessLOSCharacteristics.manageCallList.contactCTN,",
						"          manageCallListId = wirelessLOSCharacteristics.manageCallList.id,",
						"          manageCallListOverrideInd = wirelessLOSCharacteristics.manageCallList.overrideWithCompanyAListIndicator,",
						"          mobileNumber = wirelessLOSCharacteristics.mobileNumber,",
						"          paymentId = wirelessLOSCharacteristics.paymentId,",
						"          preOrderIndicator = wirelessLOSCharacteristics.preOrderIndicator,",
						"          primarySharedPlanIndicator = wirelessLOSCharacteristics.primarySharedPlanIndicator,",
						"          shippedHotIndicator = wirelessLOSCharacteristics.shippedHotIndicator,",
						"          shoppingZipCode = wirelessLOSCharacteristics.shoppingZipCode,",
						"          splitLiabilityDataAddendDateAndTime,",
						"          splitLiabilityDataAddendVersion = wirelessLOSCharacteristics.splitLiabilityData.addendVersion,",
						"          splitLiabilityDataCancelCTN = wirelessLOSCharacteristics.splitLiabilityData.cancelCTN,",
						"          splitLiabilityDataEnrollingCTN = wirelessLOSCharacteristics.splitLiabilityData.enrollingCTN,",
						"          splitLiabilityDataOneTimeChargeInd = wirelessLOSCharacteristics.splitLiabilityData.oneTimeChargeIndicator,",
						"          splitLiabilityDataValueIndicator = wirelessLOSCharacteristics.splitLiabilityData.splitLiabilityValueIndicator,",
						"          splitLiabilityDataTargetBAN = wirelessLOSCharacteristics.splitLiabilityData.targetBAN,",
						"          splitLiabilityDataTargetFAN = wirelessLOSCharacteristics.splitLiabilityData.targetFAN,",
						"          splitLiabilityDataTelecomManagerEmail = wirelessLOSCharacteristics.splitLiabilityData.telecomManagerEmailAddress,",
						"          storeId = wirelessLOSCharacteristics.storeId,",
						"          subscriberCrossmarketIndicator = wirelessLOSCharacteristics.subscriberCrossmarketIndicator,",
						"          subscriptionClass = wirelessLOSCharacteristics.subscriptionClass,",
						"          tradeInQuoteId = wirelessLOSCharacteristics.tradeInQuoteId,",
						"          upgradeDetailRelatedMobNumber = wirelessLOSCharacteristics.upgradeDetail.relatedMobileNumber,",
						"          upgradeDetailRelationship = wirelessLOSCharacteristics.upgradeDetail.relationship",
						"     )) ~> oceOrderLosgsWirelessCharacteristics",
						"alterRowPortDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          currentServiceProviderId as string,",
						"          customerCode as string,",
						"          disconAccepted as string,",
						"          disconDevInstallAgreementType as string,",
						"          disconEConsentAgreementType as string,",
						"          disconTimestamp as timestamp,",
						"          disconVersion as string,",
						"          e911ServiceRoutingNumber as string,",
						"          lightspeedLocalRoutingNumber as string,",
						"          lastFourOfSSN as string,",
						"          localRoutingNumber as string,",
						"          name as string,",
						"          nonATTPortIn as string,",
						"          ospAccountNumber as string,",
						"          ospName as string,",
						"          pinOrPassword as string,",
						"          portEligibility as string,",
						"          portInType as string,",
						"          portTelephoneNumber as string,",
						"          portRequestNumber as string,",
						"          portStatus as string,",
						"          previousAddress as string,",
						"          shadowLocalRoutingNumber as string,",
						"          ssn as string,",
						"          taxId as string,",
						"          ModifiedDate as timestamp,",
						"          shipmentInfoUpdatedIndicator as string,",
						"          portstatusReasonCode as string,",
						"          portRequestLineStatus as string,",
						"          portstatusReasonDescription as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderLosgsPortDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          portTelephoneNumber = numberPortDetail.portTelephoneNumber,",
						"          currentServiceProviderId = numberPortDetail.currentServiceProviderId,",
						"          customerCode = numberPortDetail.customerCode,",
						"          disconAccepted = numberPortDetail.disconnectAcknowledged.accepted,",
						"          disconDevInstallAgreementType = numberPortDetail.disconnectAcknowledged.deviceInstallAgreementType,",
						"          disconEConsentAgreementType = numberPortDetail.disconnectAcknowledged.econsentAgreementType,",
						"          disconTimestamp,",
						"          disconVersion = numberPortDetail.disconnectAcknowledged.version,",
						"          e911ServiceRoutingNumber = numberPortDetail.e911ServiceRoutingNumber,",
						"          lightspeedLocalRoutingNumber = numberPortDetail.lightspeedLocalRoutingNumber,",
						"          localRoutingNumber = numberPortDetail.localExchangeRoutingGuideLocalRoutingNumber,",
						"          name = numberPortDetail.name,",
						"          nonATTPortIn = numberPortDetail.nonATTPortIn,",
						"          ospAccountNumber = numberPortDetail.ospAccountNumber,",
						"          ospName = numberPortDetail.ospName,",
						"          portEligibility = numberPortDetail.portEligibility,",
						"          portInType = numberPortDetail.portInType,",
						"          portRequestNumber = numberPortDetail.portRequestNumber,",
						"          portStatus = numberPortDetail.portStatus,",
						"          previousAddress = numberPortDetail.previousAddress,",
						"          shadowLocalRoutingNumber = numberPortDetail.shadowLocalRoutingNumber,",
						"          shipmentInfoUpdatedIndicator = numberPortDetail.shipmentInfoUpdatedIndicator,",
						"          portstatusReasonCode = numberPortDetail.portstatusReasonCode,",
						"          portRequestLineStatus = numberPortDetail.portRequestLineStatus,",
						"          portstatusReasonDescription = numberPortDetail.portstatusReasonDescription",
						"     )) ~> sinkoceOrderLosgsPortDetails",
						"alterRowv101oceOrderAcctsBillingDetailAddr sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence','id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctsBillingDetailAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          placeId,",
						"          addressId,",
						"          connectedCommunityId,",
						"          id = BillingAddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = auxillaryaddress_line1,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = dc_codingaccuracysupport,",
						"          parsedAddrAddInstructions = parsed_addInstructions,",
						"          parsedAddrAddressChanged = parsed_addressChanged,",
						"          parsedAddrAddressMatchCode = parsed_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsed_addressStreetLine,",
						"          parsedAddrAddressType = parsed_addressType,",
						"          parsedAddrApartmentUnit = parsed_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsed_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsed_assignedStreetNumber,",
						"          parsedAddrAttention = parsed_attention,",
						"          parsedAddrBuildingType = parsed_buildingType,",
						"          parsedAddrCity = parsed_city,",
						"          parsedAddrCountry = parsed_country,",
						"          parsedAddrCounty = parsed_county,",
						"          parsedAddrCountyCode = parsed_countyCode,",
						"          parsedAddrDirection = parsed_direction,",
						"          parsedAddrDirectionPrefix = parsed_directionPrefix,",
						"          parsedAddrDisconnectDate = parsed_disconnectDate,",
						"          parsedAddrExchangeCode = parsed_exchangeCode,",
						"          parsedAddrExhaustCode = parsed_exhaustCode,",
						"          parsedAddrHouseNumber = parsed_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsed_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsed_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsed_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsed_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsed_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsed_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsed_legalEntity,",
						"          parsedAddrLevel = parsed_level,",
						"          parsedAddrLevelNumber = parsed_levelNumber,",
						"          parsedAddrLinkKey = parsed_linkKey,",
						"          parsedAddrPostOfficeBox = parsed_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsed_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsed_primaryNPANXX,",
						"          parsedAddrProvince = parsed_province,",
						"          parsedAddrRateCenterCode = parsed_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsed_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsed_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsed_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsed_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsed_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsed_siteAddressId,",
						"          parsedAddrSiteId = parsed_siteId,",
						"          parsedAddrSmartMoves = parsed_smartMoves,",
						"          parsedAddrState = parsed_state,",
						"          parsedAddrStreetName = parsed_streetName,",
						"          parsedAddrStreetNameSuffix = parsed_streetNameSuffix,",
						"          parsedAddrStreetType = parsed_streetType,",
						"          parsedAddrStructure = parsed_structure,",
						"          parsedAddrStructureNumber = parsed_structureNumber,",
						"          parsedAddrTarCode = parsed_tarCode,",
						"          parsedAddrTelephoneNumber = parsed_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsed_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsed_videoHubOffice,",
						"          parsedAddrZip = parsed_zip,",
						"          parsedAddrZipCodeExtension = parsed_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsed_zipGeoCode,",
						"          unparsedAddressLine1 = unparsed_addressLine1,",
						"          unparsedAddressLine3 = unparsed_addressLine3,",
						"          unparsedAddrAttention = unparsed_attention,",
						"          unparsedAddrElevation = unparsed_elevation,",
						"          unparsedAddrPostOfficeBox = unparsed_postOfficeBox,",
						"          unparsedAddrProvince = unparsed_province,",
						"          unparsedAddrRuralRoute = unparsed_ruralRoute,",
						"          unparsedAddrStructure = unparsed_structure,",
						"          unparsedAddrUnit = unparsed_unit,",
						"          unparsedAddrUrbanizationCode = unparsed_urbanizationCode,",
						"          unparsedAddrCity = unparsed_city,",
						"          unparsedAddrCounty = unparsed_county,",
						"          unparsedAddrCountry = unparsed_country,",
						"          unparsedAddrState = unparsed_state,",
						"          unparsedAddrZip = unparsed_zip,",
						"          unparsedAddrZipCodeExtension = unparsed_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsed_internationalZip,",
						"          unparsedAddressLine2 = unparsed_addressLine2,",
						"          additionalDetails,",
						"          acctSequence = sequence,",
						"          codingAccuracySupportSystemAddress = dc_codingaccuracysupport",
						"     )) ~> sinkoceOrderAcctsBillingDetailAddr",
						"AlterRowOrderAccountsServiceAddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','id','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctServiceAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          addressId = serviceAddress.addressId,",
						"          id = serviceAddress.id,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          auxiliaryAddressLine1 = serviceAddress.auxiliaryAddress.line1,",
						"          dwellingType = serviceAddress.dwellingType,",
						"          auxiliaryAddressLine2 = serviceAddress.auxiliaryAddress.line2,",
						"          auxiliaryAddressLine3 = serviceAddress.auxiliaryAddress.line3,",
						"          auxiliaryAddressLine4 = serviceAddress.auxiliaryAddress.line4,",
						"          auxiliaryAddressLine5 = serviceAddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = dc_addressLines,",
						"          parsedAddrAddInstructions = serviceAddress.parsedAddress.addInstructions,",
						"          parsedAddrAddressChanged = serviceAddress.parsedAddress.addressChanged,",
						"          parsedAddrAddressMatchCode = serviceAddress.parsedAddress.addressMatchCode,",
						"          parsedAddrAddressStreetLine = serviceAddress.parsedAddress.addressStreetLine,",
						"          parsedAddrAddressType = serviceAddress.parsedAddress.addressType,",
						"          parsedAddrApartmentUnit = serviceAddress.parsedAddress.apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = serviceAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = serviceAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddrAttention = serviceAddress.parsedAddress.attention,",
						"          parsedAddrBuildingType = serviceAddress.parsedAddress.buildingType,",
						"          parsedAddrCity = serviceAddress.parsedAddress.city,",
						"          parsedAddrCountry = serviceAddress.parsedAddress.country,",
						"          parsedAddrCounty = serviceAddress.parsedAddress.county,",
						"          parsedAddrCountyCode = serviceAddress.parsedAddress.countyCode,",
						"          parsedAddrDirection = serviceAddress.parsedAddress.direction,",
						"          parsedAddrDirectionPrefix = serviceAddress.parsedAddress.directionPrefix,",
						"          parsedAddrDisconnectDate = serviceAddress.parsedAddress.disconnectDate,",
						"          parsedAddrExchangeCode = serviceAddress.parsedAddress.exchangeCode,",
						"          parsedAddrExhaustCode = serviceAddress.parsedAddress.exhaustCode,",
						"          parsedAddrHouseNumber = serviceAddress.parsedAddress.houseNumber,",
						"          parsedAddrHouseNumberPrefix = serviceAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = serviceAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = serviceAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddrInternationalZip = serviceAddress.parsedAddress.internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = serviceAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = serviceAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = serviceAddress.parsedAddress.legalEntity,",
						"          parsedAddrLevel = serviceAddress.parsedAddress.level,",
						"          parsedAddrLevelNumber = serviceAddress.parsedAddress.levelNumber,",
						"          parsedAddrLinkKey = serviceAddress.parsedAddress.linkKey,",
						"          parsedAddrPostOfficeBox = serviceAddress.parsedAddress.postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = serviceAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = serviceAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddrProvince = serviceAddress.parsedAddress.province,",
						"          parsedAddrRateCenterCode = serviceAddress.parsedAddress.rateCenterCode,",
						"          parsedAddrRateZoneBanCode = serviceAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = serviceAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = serviceAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = serviceAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = serviceAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddrSiteAddressId = serviceAddress.parsedAddress.siteAddressId,",
						"          parsedAddrSiteId = serviceAddress.parsedAddress.siteId,",
						"          parsedAddrSmartMoves = serviceAddress.parsedAddress.smartMoves,",
						"          parsedAddrState = serviceAddress.parsedAddress.state,",
						"          parsedAddrStreetName = serviceAddress.parsedAddress.streetName,",
						"          parsedAddrStreetNameSuffix = serviceAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddrStreetType = serviceAddress.parsedAddress.streetType,",
						"          parsedAddrStructure = serviceAddress.parsedAddress.structure,",
						"          parsedAddrStructureNumber = serviceAddress.parsedAddress.structureNumber,",
						"          parsedAddrTarCode = serviceAddress.parsedAddress.tarCode,",
						"          parsedAddrTelephoneNumber = serviceAddress.parsedAddress.telephoneNumber,",
						"          parsedAddrUrbanizationCode = serviceAddress.parsedAddress.urbanizationCode,",
						"          parsedAddrVideoHubOffice = serviceAddress.parsedAddress.videoHubOffice,",
						"          parsedAddrZip = serviceAddress.parsedAddress.zip,",
						"          parsedAddrZipCodeExtension = serviceAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddrZipGeoCode = serviceAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddressLine1 = serviceAddress.unparsedAddress.addressLine1,",
						"          unparsedAddressLine3 = serviceAddress.unparsedAddress.addressLine3,",
						"          unparsedAddrAttention = serviceAddress.unparsedAddress.attention,",
						"          unparsedAddrElevation = serviceAddress.unparsedAddress.elevation,",
						"          unparsedAddrPostOfficeBox = serviceAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddrProvince = serviceAddress.unparsedAddress.province,",
						"          unparsedAddrRuralRoute = serviceAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddrStructure = serviceAddress.unparsedAddress.structure,",
						"          unparsedAddrUnit = serviceAddress.unparsedAddress.unit,",
						"          unparsedAddrUrbanizationCode = serviceAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddrCity = serviceAddress.unparsedAddress.city,",
						"          unparsedAddrCountry = serviceAddress.unparsedAddress.country,",
						"          unparsedAddrState = serviceAddress.unparsedAddress.state,",
						"          unparsedAddrZip = serviceAddress.unparsedAddress.zip,",
						"          unparsedAddrZipCodeExtension = serviceAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddrInternationalZip = serviceAddress.unparsedAddress.internationalZip,",
						"          unparsedAddressLine2 = serviceAddress.unparsedAddress.addressLine2,",
						"          additionalDetails = serviceAddress.additionalDetails,",
						"          placeId = serviceAddress.placeId,",
						"          connectedCommunityId = serviceAddress.connectedCommunityId,",
						"          acctSequence = sequence,",
						"          unparsedAddrCounty = serviceAddress.unparsedAddress.county",
						"     )) ~> sinkorderaccountsserviceaddress",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','id','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctBussinessAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          addressId = businessAddress.addressId,",
						"          id = businessAddress.id,",
						"          dwellingType = businessAddress.dwellingType,",
						"          validatedIndicator = businessAddress.validatedIndicator,",
						"          auxiliaryAddressLine1 = businessAddress.auxiliaryAddress.line1,",
						"          auxiliaryAddressLine2 = businessAddress.auxiliaryAddress.line2,",
						"          auxiliaryAddressLine3 = businessAddress.auxiliaryAddress.line3,",
						"          auxiliaryAddressLine4 = businessAddress.auxiliaryAddress.line4,",
						"          auxiliaryAddressLine5 = businessAddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = BA_dc_addresslines,",
						"          parsedAddrAddInstructions = businessAddress.parsedAddress.addInstructions,",
						"          parsedAddrAddressChanged = businessAddress.parsedAddress.addressChanged,",
						"          parsedAddrAddressMatchCode = businessAddress.parsedAddress.addressMatchCode,",
						"          parsedAddrAddressStreetLine = businessAddress.parsedAddress.addressStreetLine,",
						"          parsedAddrAddressType = businessAddress.parsedAddress.addressType,",
						"          parsedAddrApartmentUnit = businessAddress.parsedAddress.apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = businessAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = businessAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddrAttention = businessAddress.parsedAddress.attention,",
						"          parsedAddrBuildingType = businessAddress.parsedAddress.buildingType,",
						"          parsedAddrCity = businessAddress.parsedAddress.city,",
						"          parsedAddrCountry = businessAddress.parsedAddress.country,",
						"          parsedAddrCounty = businessAddress.parsedAddress.county,",
						"          parsedAddrCountyCode = businessAddress.parsedAddress.countyCode,",
						"          parsedAddrDirection = businessAddress.parsedAddress.direction,",
						"          parsedAddrDirectionPrefix = businessAddress.parsedAddress.directionPrefix,",
						"          parsedAddrDisconnectDate = businessAddress.parsedAddress.disconnectDate,",
						"          parsedAddrExchangeCode = businessAddress.parsedAddress.exchangeCode,",
						"          parsedAddrExhaustCode = businessAddress.parsedAddress.exhaustCode,",
						"          parsedAddrHouseNumber = businessAddress.parsedAddress.houseNumber,",
						"          parsedAddrHouseNumberPrefix = businessAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = businessAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = businessAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddrInternationalZip = businessAddress.parsedAddress.internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = businessAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = businessAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = businessAddress.parsedAddress.legalEntity,",
						"          parsedAddrLevel = businessAddress.parsedAddress.level,",
						"          parsedAddrLevelNumber = businessAddress.parsedAddress.levelNumber,",
						"          parsedAddrLinkKey = businessAddress.parsedAddress.linkKey,",
						"          parsedAddrPostOfficeBox = businessAddress.parsedAddress.postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = businessAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = businessAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddrProvince = businessAddress.parsedAddress.province,",
						"          parsedAddrRateCenterCode = businessAddress.parsedAddress.rateCenterCode,",
						"          parsedAddrRateZoneBanCode = businessAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = businessAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = businessAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = businessAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = businessAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddrSiteAddressId = businessAddress.parsedAddress.siteAddressId,",
						"          parsedAddrSiteId = businessAddress.parsedAddress.siteId,",
						"          parsedAddrSmartMoves = businessAddress.parsedAddress.smartMoves,",
						"          parsedAddrState = businessAddress.parsedAddress.state,",
						"          parsedAddrStreetName = businessAddress.parsedAddress.streetName,",
						"          parsedAddrStreetNameSuffix = businessAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddrStreetType = businessAddress.parsedAddress.streetType,",
						"          parsedAddrStructure = businessAddress.parsedAddress.structure,",
						"          parsedAddrStructureNumber = businessAddress.parsedAddress.structureNumber,",
						"          parsedAddrTarCode = businessAddress.parsedAddress.tarCode,",
						"          parsedAddrTelephoneNumber = businessAddress.parsedAddress.telephoneNumber,",
						"          parsedAddrUrbanizationCode = businessAddress.parsedAddress.urbanizationCode,",
						"          parsedAddrVideoHubOffice = businessAddress.parsedAddress.videoHubOffice,",
						"          parsedAddrZip = businessAddress.parsedAddress.zip,",
						"          parsedAddrZipCodeExtension = businessAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddrZipGeoCode = businessAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddressLine1 = businessAddress.unparsedAddress.addressLine1,",
						"          unparsedAddressLine3 = businessAddress.unparsedAddress.addressLine3,",
						"          unparsedAddrAttention = businessAddress.unparsedAddress.attention,",
						"          unparsedAddrElevation = businessAddress.unparsedAddress.elevation,",
						"          unparsedAddrPostOfficeBox = businessAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddrProvince = businessAddress.unparsedAddress.province,",
						"          unparsedAddrRuralRoute = businessAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddrStructure = businessAddress.unparsedAddress.structure,",
						"          unparsedAddrUnit = businessAddress.unparsedAddress.unit,",
						"          unparsedAddrUrbanizationCode = businessAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddrCity = businessAddress.unparsedAddress.city,",
						"          unparsedAddrCountry = businessAddress.unparsedAddress.country,",
						"          unparsedAddrState = businessAddress.unparsedAddress.state,",
						"          unparsedAddrZip = businessAddress.unparsedAddress.zip,",
						"          unparsedAddrZipCodeExtension = businessAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddrInternationalZip = businessAddress.unparsedAddress.internationalZip,",
						"          unparsedAddressLine2 = businessAddress.unparsedAddress.addressLine2,",
						"          placeId = businessAddress.placeId,",
						"          connectedCommunityId = businessAddress.connectedCommunityId,",
						"          acctSequence = sequence,",
						"          unparsedAddrCounty = businessAddress.unparsedAddress.county,",
						"          additionalDetails = businessAddress.additionalDetails",
						"     )) ~> sinkorderaccountsbusinessaddress",
						"alterCompensation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          repId as string,",
						"          repAction as string,",
						"          dealerCode as string,",
						"          salesCode as string,",
						"          type as string,",
						"          submittedBy as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','repId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderLosgsCompensation_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          repId,",
						"          repAction,",
						"          dealerCode,",
						"          salesCode,",
						"          type,",
						"          submittedBy",
						"     )) ~> oceOrderLosgsCompensation",
						"alteradditonalDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          code as string,",
						"          value as string,",
						"          parentType as string,",
						"          type as string,",
						"          sequence as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','code','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsAdditionDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          code,",
						"          value,",
						"          parentType,",
						"          type,",
						"          sequence",
						"     )) ~> oceOrderLosgsAdditionDetails",
						"alterRowlosginternetchar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          categoryType as string,",
						"          discountedInternetIndicator as string,",
						"          discountedInternetAdditionalAllowance as string,",
						"          gatewayCTN as string,",
						"          gatewayCTNStatus as string,",
						"          internetProgramType as string,",
						"          internetProtocolDigitalSubscriberLineAccess as string,",
						"          internetNetworkProvider as string,",
						"          parentComponentCode as string,",
						"          retainedServiceProcessIndicator as string,",
						"          serviceId as string,",
						"          serviceType as string,",
						"          totalAllowance as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          primaryNetworkType as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsinternetCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          categoryType = internetLOSCharacteristics.categoryType,",
						"          discountedInternetIndicator = internetLOSCharacteristics.discountedInternetIndicator,",
						"          discountedInternetAdditionalAllowance = internetLOSCharacteristics.discountedInternetAdditionalAllowance,",
						"          gatewayCTN = internetLOSCharacteristics.gatewayCTN,",
						"          gatewayCTNStatus = internetLOSCharacteristics.gatewayCTNStatus,",
						"          internetProgramType = internetLOSCharacteristics.internetProgramType,",
						"          internetProtocolDigitalSubscriberLineAccess = internetLOSCharacteristics.internetProtocolDigitalSubscriberLineAccess,",
						"          internetNetworkProvider = internetLOSCharacteristics.internetNetworkProvider,",
						"          parentComponentCode = internetLOSCharacteristics.parentComponentCode,",
						"          retainedServiceProcessIndicator = internetLOSCharacteristics.retainedServiceProcessIndicator,",
						"          serviceId = internetLOSCharacteristics.serviceId,",
						"          serviceType = internetLOSCharacteristics.serviceType,",
						"          totalAllowance = internetLOSCharacteristics.totalAllowance,",
						"          primaryNetworkType = internetLOSCharacteristics.primaryNetworkType,",
						"          additionalDetails = internetLOSCharacteristics.additionalDetails",
						"     )) ~> oceOrderLosgsinternetCharacteristics",
						"alterRowDIrectvchar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          dealerId as string,",
						"          freeSTBReceiverCount as string,",
						"          hasMoreThanThreeFloors as string,",
						"          marketingSourceCode as string,",
						"          moveInOrder as string,",
						"          offerLanguage as string,",
						"          parentComponentCode as string,",
						"          serviceAgreement as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderLosgsDirectTVCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          dealerId = direcTVLOSCharacteristics.dealerId,",
						"          freeSTBReceiverCount = direcTVLOSCharacteristics.freeSTBReceiverCount,",
						"          hasMoreThanThreeFloors = direcTVLOSCharacteristics.hasMoreThanThreeFloors,",
						"          marketingSourceCode = direcTVLOSCharacteristics.marketingSourceCode,",
						"          moveInOrder = direcTVLOSCharacteristics.moveInOrder,",
						"          offerLanguage = direcTVLOSCharacteristics.offerLanguage,",
						"          parentComponentCode = direcTVLOSCharacteristics.parentComponentCode,",
						"          serviceAgreement = direcTVLOSCharacteristics.serviceAgreement",
						"     )) ~> oceOrderLosgsDirectTVCharacteristics",
						"derivedColumnETCnoChannel sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          automationUrl as string,",
						"          callBack as string,",
						"          channel as string,",
						"          eventId as string,",
						"          eventSource as string,",
						"          eventTime as timestamp,",
						"          eventType as string,",
						"          fallOut as string,",
						"          fraudResponse as string,",
						"          isSingleTopic as string,",
						"          isUpgradeOrder as string,",
						"          orderType as string,",
						"          originalVersion as string,",
						"          priority as string,",
						"          routingInfo as string,",
						"          sender as string,",
						"          traceId as string,",
						"          version as string,",
						"          eventHubAdxIngestTime as timestamp,",
						"          modifiedDate as timestamp,",
						"          eventTimeInt as string,",
						"          idbstatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101tableerror_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          automationUrl = orderjson_1.orderEvent.metaData.automationUrl,",
						"          callBack = orderjson_1.orderEvent.metaData.callback,",
						"          channel,",
						"          eventId = orderjson_1.orderEvent.eventid,",
						"          eventSource = orderjson_1.orderEvent.eventSource,",
						"          eventTime = dc_eventtime,",
						"          eventType = orderjson_1.orderEvent.eventType,",
						"          fallOut = orderjson_1.orderEvent.metaData.fallout,",
						"          fraudResponse = orderjson_1.orderEvent.metaData.fraudResponse,",
						"          isSingleTopic = orderjson_1.orderEvent.metaData.isSingleTopic,",
						"          isUpgradeOrder = orderjson_1.orderEvent.metaData.isUpgradeOrder,",
						"          orderType = orderjson_1.orderEvent.metaData.orderType,",
						"          originalVersion = orderjson_1.orderEvent.metaData.originalVersion,",
						"          priority = orderjson_1.orderEvent.metaData.priority,",
						"          routingInfo = orderjson_1.orderEvent.metaData.routingInfo,",
						"          sender = orderjson_1.orderEvent.metaData.sender,",
						"          traceId = orderjson_1.orderEvent.metaData.traceId,",
						"          version = orderjson_1.orderEvent.metaData.version,",
						"          eventHubAdxIngestTime = lastmodified_date,",
						"          eventTimeInt = orderjson_1.orderEvent.eventTime,",
						"          idbstatus = orderjson_1.orderEvent.metaData.idbStatus",
						"     )) ~> sinkevents",
						"alterRowOrderAccountsCreditCheck sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          addAccountGUId as string,",
						"          applicationApprovalDate as string,",
						"          applicationExpiresDate as string,",
						"          creditBand as string,",
						"          creditCheckManagementTransactionId as string,",
						"          creditCheckRanIndicator as string,",
						"          creditClass as string,",
						"          creditInquiryOpen as string,",
						"          creditPolicyToken as string,",
						"          creditReferenceDate as timestamp,",
						"          creditScoreResult as string,",
						"          creditStatus as string,",
						"          creditVerified as string,",
						"          currentAccountBalance as decimal(20,2),",
						"          currentDeniablePastDueAmount as decimal(20,2),",
						"          currentNonDeniablePastDueAmount as decimal(20,2),",
						"          currentNonRegulatedPastDueAmount as decimal(20,2),",
						"          currentPastDueAmount as decimal(20,2),",
						"          currentRegulatedPastDueAmount as decimal(20,2),",
						"          customerApprovalSystemTransactionId as string,",
						"          debtPaidStatus as string,",
						"          depositAmount as decimal(20,2),",
						"          depositRequired as string,",
						"          depositStatus as string,",
						"          electronicIdNumber as string,",
						"          electronicIdVerifierLaunched as string,",
						"          electronicIdVerifierRequired as string,",
						"          electronicIdVerifierResults as string,",
						"          exchangeListFound as string,",
						"          expressPayDetailHeld as string,",
						"          finalBillAccounts as string,",
						"          ignoreDeposit as string,",
						"          individualCustomerKey as string,",
						"          minimumAmountDue as decimal(20,2),",
						"          nonRefundableCreditFee as decimal(20,2),",
						"          numberApprovedLines as decimal(20,2),",
						"          numberLinesRequired as decimal(20,2),",
						"          productsInclude as string,",
						"          proprietarySegment as string,",
						"          reasonCode as string,",
						"          reasonCodeDescription as string,",
						"          safeScanAlertIndicator as string,",
						"          safeScanPassIndicator as string,",
						"          singleCreditQueryWirelessIndicator as string,",
						"          treatmentCode as string,",
						"          treatmentMessage as string,",
						"          writeOffAmount as decimal(20,2),",
						"          writeOffDate as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctsCreditCheck_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          creditClass = creditCheck.creditClass,",
						"          addAccountGUId = creditCheck.addAccountGUId,",
						"          applicationApprovalDate = creditCheck.applicationApprovalDate,",
						"          applicationExpiresDate = creditCheck.applicationExpiresDate,",
						"          creditBand = creditCheck.creditBand,",
						"          creditCheckManagementTransactionId = creditCheck.creditCheckManagementTransactionId,",
						"          creditCheckRanIndicator = creditCheck.creditCheckRanIndicator,",
						"          creditInquiryOpen = creditCheck.creditInquiryOpen,",
						"          creditPolicyToken = creditCheck.creditPolicyToken,",
						"          creditReferenceDate,",
						"          creditScoreResult = creditCheck.creditScoreResult,",
						"          creditStatus = creditCheck.creditStatus,",
						"          creditVerified = creditCheck.creditVerified,",
						"          currentAccountBalance = creditCheck.currentAccountBalance,",
						"          currentDeniablePastDueAmount = creditCheck.currentDeniablePastDueAmount,",
						"          currentNonDeniablePastDueAmount = creditCheck.currentNonDeniablePastDueAmount,",
						"          currentNonRegulatedPastDueAmount = creditCheck.currentNonRegulatedPastDueAmount,",
						"          currentPastDueAmount = creditCheck.currentPastDueAmount,",
						"          currentRegulatedPastDueAmount = creditCheck.currentRegulatedPastDueAmount,",
						"          customerApprovalSystemTransactionId = creditCheck.customerApprovalSystemTransactionId,",
						"          debtPaidStatus = creditCheck.debtPaidStatus,",
						"          depositAmount = creditCheck.depositAmount,",
						"          depositRequired = creditCheck.depositRequired,",
						"          depositStatus = creditCheck.depositStatus,",
						"          electronicIdNumber = creditCheck.electronicIdNumber,",
						"          electronicIdVerifierLaunched = creditCheck.electronicIdVerifierLaunched,",
						"          electronicIdVerifierRequired = creditCheck.electronicIdVerifierRequired,",
						"          electronicIdVerifierResults = creditCheck.electronicIdVerifierResults,",
						"          exchangeListFound = creditCheck.exchangeListFound,",
						"          expressPayDetailHeld = creditCheck.expressPayDetailHeld,",
						"          finalBillAccounts = creditCheck.finalBillAccounts,",
						"          ignoreDeposit = creditCheck.ignoreDeposit,",
						"          individualCustomerKey = creditCheck.individualCustomerKey,",
						"          minimumAmountDue = creditCheck.minimumAmountDue,",
						"          nonRefundableCreditFee = creditCheck.nonRefundableCreditFee,",
						"          numberApprovedLines = creditCheck.numberApprovedLines,",
						"          numberLinesRequired = creditCheck.numberLinesRequired,",
						"          productsInclude = creditCheck.productsInclude,",
						"          proprietarySegment = creditCheck.proprietarySegment,",
						"          reasonCode = creditCheck.reasonCode,",
						"          reasonCodeDescription = creditCheck.reasonCodeDescription,",
						"          safeScanAlertIndicator = creditCheck.safeScanAlertIndicator,",
						"          safeScanPassIndicator = creditCheck.safeScanPassIndicator,",
						"          singleCreditQueryWirelessIndicator = creditCheck.singleCreditQueryWirelessIndicator,",
						"          treatmentCode = creditCheck.treatmentCode,",
						"          treatmentMessage = creditCheck.treatmentMessage,",
						"          writeOffAmount = creditCheck.writeOffAmount,",
						"          writeOffDate = creditCheck.writeOffDate,",
						"          finalBillAccounts = creditCheck.finalBillAccounts",
						"     )) ~> sinkoceOrderAcctsCreditCheck",
						"alterRowautopay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountsReceivableIndicator as string,",
						"          purchaseOrderNumber as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as decimal(20,2),",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsAutopayPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          accountsReceivableIndicator = autopayPaymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          purchaseOrderNumber = autopayPaymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          btmEquipmentType = autopayPaymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = autopayPaymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = autopayPaymentMethod.btm.totalAmount,",
						"          btnCustomerCode = autopayPaymentMethod.btn.customerCode,",
						"          btnPaymentAmount = autopayPaymentMethod.btn.paymentAmount,",
						"          btnTn = autopayPaymentMethod.btn.tn,",
						"          cashPaymentAmount = autopayPaymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = autopayPaymentMethod.cash.paymentToken,",
						"          lpmCustomerAgreementVersion = autopayPaymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmPaymentType = autopayPaymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = autopayPaymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = autopayPaymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          lpmTotalAmount = autopayPaymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = autopayPaymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = autopayPaymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = autopayPaymentMethod.store.last4Digits,",
						"          storePaymentAmount = autopayPaymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = autopayPaymentMethod.store.profileOwnerId",
						"     )) ~> oceOrderAcctsAutopayPaymentMethod",
						"alterRowautoepay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          achAccountHolderName as string,",
						"          achAccountNumber as string,",
						"          achAccountNumberLast4Digits as string,",
						"          achAccountType as string,",
						"          achRoutingNumber as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          cardBillingZipCode as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          ccCreditCardNumber as string,",
						"          ccExpirationYearMonth as string,",
						"          creditCardLast4Digits as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as decimal(20,2),",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          last4Digits as string,",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp,",
						"          paymentMethodId as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsAutoPayEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          achAccountHolderName = autopayPaymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountType = autopayPaymentMethod.ePaymentMethod.ach.accountType,",
						"          bankingPartnerCustomerId = autopayPaymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = autopayPaymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = autopayPaymentMethod.ePaymentMethod.cardCryptogram,",
						"          ccCardNotValidatedIndicator = autopayPaymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = autopayPaymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          creditCardType = autopayPaymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = autopayPaymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          giftCardIndicator = autopayPaymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailaymentHandle = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = autopayPaymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = autopayPaymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = autopayPaymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileOwnerId = autopayPaymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          paymentProfileType = autopayPaymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentTenderConfigMerchantId = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = autopayPaymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = autopayPaymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = autopayPaymentMethod.ePaymentMethod.payType,",
						"          payPalEmailAddress = autopayPaymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = autopayPaymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = autopayPaymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = autopayPaymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = autopayPaymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = column1preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = autopayPaymentMethod.ePaymentMethod.profileAction,",
						"          token = autopayPaymentMethod.ePaymentMethod.token,",
						"          totalAmount = autopayPaymentMethod.ePaymentMethod.totalAmount,",
						"          verificationIndicator = autopayPaymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = autopayPaymentMethod.ePaymentMethod.skipAuthorization,",
						"          address = autopayPaymentMethod.ePaymentMethod.address,",
						"          paymentMethodId = autopayPaymentMethod.ePaymentMethod.paymentMethodId",
						"     )) ~> oceOrderAcctsAutoPayEPaymentMethod",
						"alterRowcardonfile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountsReceivableIndicator as string,",
						"          purchaseOrderNumber as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as string,",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsCardOnFilePaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          accountsReceivableIndicator = cardOnFilePaymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          purchaseOrderNumber = cardOnFilePaymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          btmEquipmentType = cardOnFilePaymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = cardOnFilePaymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = cardOnFilePaymentMethod.btm.totalAmount,",
						"          btnCustomerCode = cardOnFilePaymentMethod.btn.customerCode,",
						"          btnPaymentAmount = cardOnFilePaymentMethod.btn.paymentAmount,",
						"          btnTn = cardOnFilePaymentMethod.btn.tn,",
						"          cashPaymentAmount = cardOnFilePaymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = cardOnFilePaymentMethod.cash.paymentToken,",
						"          lpmCustomerAgreementVersion = cardOnFilePaymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmPaymentType = cardOnFilePaymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = cardOnFilePaymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = cardOnFilePaymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          lpmTotalAmount = cardOnFilePaymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = cardOnFilePaymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = cardOnFilePaymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = cardOnFilePaymentMethod.store.last4Digits,",
						"          storePaymentAmount = cardOnFilePaymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = cardOnFilePaymentMethod.store.profileOwnerId",
						"     )) ~> oceOrderAcctsCardOnFilePaymentMethod",
						"alterRowcardepay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          achAccountHolderName as string,",
						"          achAccountNumber as string,",
						"          achAccountNumberLast4Digits as string,",
						"          achAccountType as string,",
						"          achRoutingNumber as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          cardBillingZipCode as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          ccCreditCardNumber as string,",
						"          ccExpirationYearMonth as string,",
						"          creditCardLast4Digits as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as decimal(20,2),",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          last4Digits as string,",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsCardOnFileEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          achAccountHolderName = cardOnFilePaymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountType = cardOnFilePaymentMethod.ePaymentMethod.ach.accountType,",
						"          bankingPartnerCustomerId = cardOnFilePaymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = cardOnFilePaymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = cardOnFilePaymentMethod.ePaymentMethod.cardCryptogram,",
						"          ccCardNotValidatedIndicator = cardOnFilePaymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = cardOnFilePaymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          creditCardType = cardOnFilePaymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = cardOnFilePaymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          giftCardIndicator = cardOnFilePaymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailaymentHandle = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileOwnerId = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          paymentProfileType = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentTenderConfigMerchantId = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = cardOnFilePaymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = cardOnFilePaymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = cardOnFilePaymentMethod.ePaymentMethod.payType,",
						"          payPalEmailAddress = cardOnFilePaymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = cardOnFilePaymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = cardOnFilePaymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = cardOnFilePaymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = cpreAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate = cpreAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = cardOnFilePaymentMethod.ePaymentMethod.profileAction,",
						"          token = cardOnFilePaymentMethod.ePaymentMethod.token,",
						"          totalAmount = cardOnFilePaymentMethod.ePaymentMethod.totalAmount,",
						"          verificationIndicator = cardOnFilePaymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = cardOnFilePaymentMethod.ePaymentMethod.skipAuthorization,",
						"          address = cardOnFilePaymentMethod.ePaymentMethod.address",
						"     )) ~> oceOrderAcctsCardOnFileEPaymentMethod",
						"alterRownego sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          conflictCustomerType as string,",
						"          conflictLandlordDetailApprovalDate as timestamp,",
						"          conflictLandlordDetailCompanyName as string,",
						"          conflictLandlordDetailEmail as string,",
						"          conflictLandlordDetailFirstName as string,",
						"          conflictLandlordDetailLandlordApproval as string,",
						"          conflictLandlordDetailLastName as string,",
						"          conflictLandlordDetailPhoneNumber as string,",
						"          conflictLandlordDetailPhoneNumberType as string,",
						"          existingCustomerDetailBillingAccountNumber as string,",
						"          existingCustomerDetailBillingTelephoneNumber as string,",
						"          existingCustomerDetailCompanyName as string,",
						"          existingCustomerDetailEmail as string,",
						"          existingCustomerDetailFirstName as string,",
						"          existingCustomerDetailLastName as string,",
						"          existingCustomerDetailPhoneNumber as string,",
						"          existingCustomerDetailPhoneNumberType as string,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsNegotiateConflictCustomer_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          conflictCustomerType = negotiateConflictCustomer.conflictCustomerType,",
						"          conflictLandlordDetailApprovalDate,",
						"          conflictLandlordDetailCompanyName = negotiateConflictCustomer.conflictLandlordDetail.contact.companyName,",
						"          conflictLandlordDetailEmail = negotiateConflictCustomer.conflictLandlordDetail.contact.email,",
						"          conflictLandlordDetailFirstName = negotiateConflictCustomer.conflictLandlordDetail.contact.firstName,",
						"          conflictLandlordDetailLastName = negotiateConflictCustomer.conflictLandlordDetail.contact.lastName,",
						"          conflictLandlordDetailPhoneNumber = negotiateConflictCustomer.conflictLandlordDetail.contact.phoneNumber,",
						"          conflictLandlordDetailPhoneNumberType = negotiateConflictCustomer.conflictLandlordDetail.contact.phoneNumberType,",
						"          conflictLandlordDetailLandlordApproval = negotiateConflictCustomer.conflictLandlordDetail.landlordApproval,",
						"          existingCustomerDetailBillingTelephoneNumber = negotiateConflictCustomer.existingCustomerDetail.billingTelephoneNumber,",
						"          existingCustomerDetailBillingAccountNumber = negotiateConflictCustomer.existingCustomerDetail.billingAccountNumber,",
						"          existingCustomerDetailCompanyName = negotiateConflictCustomer.existingCustomerDetail.contact.companyName,",
						"          existingCustomerDetailEmail = negotiateConflictCustomer.existingCustomerDetail.contact.email,",
						"          existingCustomerDetailFirstName = negotiateConflictCustomer.existingCustomerDetail.contact.firstName,",
						"          existingCustomerDetailLastName = negotiateConflictCustomer.existingCustomerDetail.contact.lastName,",
						"          existingCustomerDetailPhoneNumber = negotiateConflictCustomer.existingCustomerDetail.contact.phoneNumber,",
						"          existingCustomerDetailPhoneNumberType = negotiateConflictCustomer.existingCustomerDetail.contact.phoneNumberType,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber = negotiateConflictCustomer.existingCustomerDetail.moveOrCeaseOrderNumber",
						"     )) ~> oceOrderAcctsNegotiateConflictCustomer",
						"alterRowunified sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          convergeOrderIndicator as string,",
						"          convergeValidationIndicator as string,",
						"          convergedBilling as string,",
						"          premierIndicator as string,",
						"          unifiedAccountDiscount as decimal(20,2),",
						"          unifiedAccountExisting as string,",
						"          unifiedAccountPending as string,",
						"          unifiedAccountRebate as decimal(20,2),",
						"          unifiedAccountReference as string,",
						"          unifiedAccountReward as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsUnifiedAccount_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          convergeOrderIndicator = unifiedAccount.convergeOrderIndicator,",
						"          convergeValidationIndicator = unifiedAccount.convergeValidationIndicator,",
						"          convergedBilling = unifiedAccount.convergedBilling,",
						"          premierIndicator = unifiedAccount.premierIndicator,",
						"          unifiedAccountDiscount = unifiedAccount.unifiedAccountDiscount,",
						"          unifiedAccountExisting = unifiedAccount.unifiedAccountExisting,",
						"          unifiedAccountPending = unifiedAccount.unifiedAccountPending,",
						"          unifiedAccountRebate = unifiedAccount.unifiedAccountRebate,",
						"          unifiedAccountReference = unifiedAccount.unifiedAccountReference,",
						"          unifiedAccountReward = unifiedAccount.unifiedAccountReward",
						"     )) ~> oceOrderAcctsUnifiedAccount",
						"alterRowEmployeeDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          centralizedTableId as string,",
						"          class as string,",
						"          uid as string,",
						"          status as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderEmployeeDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          centralizedTableId = OrderData.employeeDetail.centralizedTableId,",
						"          class = OrderData.employeeDetail.class,",
						"          uid = OrderData.employeeDetail.uid,",
						"          status = OrderData.employeeDetail.status",
						"     )) ~> oceOrderEmployeeDetail",
						"alterRowecommerce sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          affiliateName as string,",
						"          code as string,",
						"          name as string,",
						"          email as string,",
						"          phoneNumber as string,",
						"          referredDate as timestamp,",
						"          type as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderECommercePartner_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          affiliateName = OrderData.eCommercePartner.affiliateName,",
						"          code = OrderData.eCommercePartner.code,",
						"          name = OrderData.eCommercePartner.name,",
						"          email = OrderData.eCommercePartner.email,",
						"          phoneNumber = OrderData.eCommercePartner.phoneNumber,",
						"          referredDate,",
						"          type = OrderData.eCommercePartner.type,",
						"          additionalDetails = OrderData.eCommercePartner.additionalDetails",
						"     )) ~> oceOrderECommercePartner",
						"alterRowInte sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          ioId as string,",
						"          ioSequence as string,",
						"          category as string,",
						"          qualifyingServiceDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','ioId','ioSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderIntegratedOffers_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          ioId,",
						"          ioSequence,",
						"          category,",
						"          qualifyingServiceDetails",
						"     )) ~> oceOrderIntegratedOffers",
						"alterRowlogin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          email as string,",
						"          orderInitiator as string,",
						"          profileId as string,",
						"          userGuId as string,",
						"          userId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLoginProfile_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          email = OrderData.loginProfile.email,",
						"          orderInitiator = OrderData.loginProfile.orderInitiator,",
						"          profileId = OrderData.loginProfile.profileId,",
						"          userGuId = OrderData.loginProfile.userGuId,",
						"          userId = OrderData.loginProfile.userId",
						"     )) ~> oceOrderLoginProfile",
						"alterRowSingleDispatch sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          eligibleIndicator as string,",
						"          geoAreaAvailableIndicator as string,",
						"          satelliteTVOnlyEligibleIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSingleDispatchDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eligibleIndicator = OrderData.singleDispatchDetail.eligibleIndicator,",
						"          geoAreaAvailableIndicator = OrderData.singleDispatchDetail.geoAreaAvailableIndicator,",
						"          satelliteTVOnlyEligibleIndicator = OrderData.singleDispatchDetail.satelliteTVOnlyEligibleIndicator",
						"     )) ~> oceOrderSingleDispatchDetail",
						"alterRowPaymentTender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          paymentTenderId as string,",
						"          paymentTenderSequence as string,",
						"          accountsReceivableIndicator as string,",
						"          additionalDetails as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          collectedInOtherSystem as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          depositOption as string,",
						"          fixedAmount as decimal(20,2),",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          purchaseOrderNumber as string,",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          selectedOptionId as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as decimal(20,2),",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','paymentTenderId','paymentTenderSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderPaymentTenders_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          paymentTenderId = paymentTenders.id,",
						"          paymentTenderSequence = paymentTenders.sequence,",
						"          additionalDetails = paymentTenders.additionalDetails,",
						"          depositOption = paymentTenders.depositOption,",
						"          fixedAmount = paymentTenders.fixedAmount,",
						"          selectedOptionId = paymentTenders.selectedOptionId,",
						"          collectedInOtherSystem = paymentTenders.collectedInOtherSystem,",
						"          accountsReceivableIndicator = paymentTenders.paymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          purchaseOrderNumber = paymentTenders.paymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          btmEquipmentType = paymentTenders.paymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = paymentTenders.paymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = paymentTenders.paymentMethod.btm.totalAmount,",
						"          btnCustomerCode = paymentTenders.paymentMethod.btn.customerCode,",
						"          btnPaymentAmount = paymentTenders.paymentMethod.btn.paymentAmount,",
						"          btnTn = paymentTenders.paymentMethod.btn.tn,",
						"          cashPaymentAmount = paymentTenders.paymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = paymentTenders.paymentMethod.cash.paymentToken,",
						"          lpmCustomerAgreementVersion = paymentTenders.paymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmPaymentType = paymentTenders.paymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = paymentTenders.paymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = paymentTenders.paymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          lpmTotalAmount = paymentTenders.paymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = paymentTenders.paymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = paymentTenders.paymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = paymentTenders.paymentMethod.store.last4Digits,",
						"          storePaymentAmount = paymentTenders.paymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = paymentTenders.paymentMethod.store.profileOwnerId",
						"     )) ~> oceOrderPaymentTenders",
						"alterRowpayment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          paymentTenderId as string,",
						"          paymentTenderSequence as string,",
						"          achAccountHolderName as string,",
						"          achAccountType as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as string,",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp,",
						"          paymentMethodId as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','paymentTenderId','paymentTenderSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderPaymentTendersEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          paymentTenderId = paymentTenders.id,",
						"          paymentTenderSequence = paymentTenders.sequence,",
						"          achAccountHolderName = paymentTenders.paymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountType = paymentTenders.paymentMethod.ePaymentMethod.ach.accountType,",
						"          address = paymentTenders.paymentMethod.ePaymentMethod.address,",
						"          bankingPartnerCustomerId = paymentTenders.paymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = paymentTenders.paymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = paymentTenders.paymentMethod.ePaymentMethod.cardCryptogram,",
						"          ccCardNotValidatedIndicator = paymentTenders.paymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = paymentTenders.paymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          creditCardType = paymentTenders.paymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = paymentTenders.paymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          giftCardIndicator = paymentTenders.paymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailaymentHandle = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileOwnerId = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          paymentProfileType = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentTenderConfigMerchantId = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = paymentTenders.paymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = paymentTenders.paymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = paymentTenders.paymentMethod.ePaymentMethod.payType,",
						"          payPalEmailAddress = paymentTenders.paymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = paymentTenders.paymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = paymentTenders.paymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = paymentTenders.paymentMethod.ePaymentMethod.profileAction,",
						"          token = paymentTenders.paymentMethod.ePaymentMethod.token,",
						"          totalAmount = paymentTenders.paymentMethod.ePaymentMethod.totalAmount,",
						"          verificationIndicator = paymentTenders.paymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = paymentTenders.paymentMethod.ePaymentMethod.skipAuthorization,",
						"          paymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.paymentMethodId",
						"     )) ~> oceOrderPaymentTendersEPaymentMethod",
						"alterRowshippingdetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          additiondetails as string,",
						"          billingCode as string,",
						"          carrierPreference as string,",
						"          additionalContactPhones as string,",
						"          recipientAdditionalContactPhones as string,",
						"          recipientEmailAddress as string,",
						"          recipientFirstName as string,",
						"          recipientNameId as string,",
						"          recipientLastName as string,",
						"          recipientLegalFirstName as string,",
						"          recipientLegalLastName as string,",
						"          recipientMiddleInitial as string,",
						"          recipientPreferredContactMethod as string,",
						"          recipientNamePrefix as string,",
						"          recipientPreviousLegalLastName as string,",
						"          recipientNameSuffix as string,",
						"          recipientNameTitle as string,",
						"          recipientPrimaryContactPhoneNumber as string,",
						"          recipientPrimaryContactextension as string,",
						"          recipientPrimaryContactPhoneType as string,",
						"          recipientPrimaryContactPhoneConsentDetails as string,",
						"          shipmentCommitDateFromDate as string,",
						"          shipmentCommitDateToDate as string,",
						"          shippingCode as string,",
						"          shippingMethod as string,",
						"          shippingPriceCode as string,",
						"          ModifiedDate as timestamp,",
						"          signatureRequiredIndicator as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','shippingId','shippingSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderShippingDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          billingCode,",
						"          carrierPreference,",
						"          shipmentCommitDateFromDate = fromDate,",
						"          shipmentCommitDateToDate = toDate,",
						"          shippingSequence = sequence,",
						"          shippingCode,",
						"          shippingMethod,",
						"          shippingPriceCode,",
						"          recipientAdditionalContactPhones = additionalContactPhones,",
						"          shippingId = shippingDetailsid,",
						"          recipientEmailAddress = emailAddress,",
						"          recipientFirstName = firstName,",
						"          recipientMiddleInitial = middleInitial,",
						"          recipientLastName = lastName,",
						"          recipientLegalFirstName = legalFirstName,",
						"          recipientLegalLastName = legalLastName,",
						"          recipientPreferredContactMethod = preferredContactMethod,",
						"          recipientNameSuffix = suffix,",
						"          recipientNamePrefix = prefix,",
						"          recipientNameTitle = title,",
						"          recipientNameId = id,",
						"          recipientPrimaryContactPhoneNumber,",
						"          recipientPrimaryContactPhoneType,",
						"          recipientPrimaryContactextension,",
						"          recipientPrimaryContactPhoneConsentDetails,",
						"          additionalContactPhones,",
						"          recipientPreviousLegalLastName = previousLegalLastName",
						"     )) ~> sinkshippingdetails",
						"alterRowshippingprice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseAmount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencyType as string,",
						"          installmentEligibility as string,",
						"          msrp as decimal(20,2),",
						"          taxDetail as string,",
						"          total as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','shippingId','shippingSequence','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderShippingDetailsPrice_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          shippingId = shippingDetailsid,",
						"          shippingSequence = sequence,",
						"          priceType,",
						"          amount = price.amount,",
						"          baseAmount = price.baseAmount,",
						"          creditFeeType = price.creditFeeType,",
						"          currencyType = price.currencyType,",
						"          installmentEligibility = price.installmentEligibility,",
						"          msrp = price.msrp,",
						"          total = price.total,",
						"          additionalDetails = price.additionalDetails,",
						"          taxDetail = price.taxDetail",
						"     )) ~> sinkShippingDetailsPrice",
						"alterRowsalesagent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          agentCode as string,",
						"          location as string,",
						"          salesCode as string,",
						"          uid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSalesAgent_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          agentCode = OrderData.salesAgent.agentCode,",
						"          location = OrderData.salesAgent.location,",
						"          salesCode = OrderData.salesAgent.salesCode,",
						"          uid = OrderData.salesAgent.uid",
						"     )) ~> oceOrderSalesAgent",
						"alterRowRFallout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          dateTime as timestamp,",
						"          description as string,",
						"          Operation as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderReferenceDetailFalloutDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          dateTime,",
						"          description,",
						"          Operation = operation",
						"     )) ~> oceOrderReferenceDetailFalloutDetails",
						"alterRowshippingaddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','shippingSequence','shippingId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_sinkShippingDetailsAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          addressId = shippingaddress.addressId,",
						"          id = shippingaddress.id,",
						"          dwellingType = shippingaddress.dwellingType,",
						"          validatedIndicator = shippingaddress.validatedIndicator,",
						"          auxiliaryAddressLine1 = shippingaddress.auxiliaryAddress.line1,",
						"          auxiliaryAddressLine2 = shippingaddress.auxiliaryAddress.line2,",
						"          auxiliaryAddressLine3 = shippingaddress.auxiliaryAddress.line3,",
						"          auxiliaryAddressLine4 = shippingaddress.auxiliaryAddress.line4,",
						"          auxiliaryAddressLine5 = shippingaddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = shippingaddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddrAddInstructions = shippingaddress.parsedAddress.addInstructions,",
						"          parsedAddrAddressChanged = shippingaddress.parsedAddress.addressChanged,",
						"          parsedAddrclli8 = shippingaddress.parsedAddress.clli8,",
						"          parsedAddrAddressMatchCode = shippingaddress.parsedAddress.addressMatchCode,",
						"          parsedAddrAddressStreetLine = shippingaddress.parsedAddress.addressStreetLine,",
						"          parsedAddrAddressType = shippingaddress.parsedAddress.addressType,",
						"          parsedAddrApartmentUnit = shippingaddress.parsedAddress.apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = shippingaddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = shippingaddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddrAttention = shippingaddress.parsedAddress.attention,",
						"          parsedAddrBuildingType = shippingaddress.parsedAddress.buildingType,",
						"          parsedAddrCity = shippingaddress.parsedAddress.city,",
						"          parsedAddrCountry = shippingaddress.parsedAddress.country,",
						"          parsedAddrCounty = shippingaddress.parsedAddress.county,",
						"          parsedAddrCountyCode = shippingaddress.parsedAddress.countyCode,",
						"          parsedAddrDirection = shippingaddress.parsedAddress.direction,",
						"          parsedAddrDirectionPrefix = shippingaddress.parsedAddress.directionPrefix,",
						"          parsedAddrDisconnectDate = shippingaddress.parsedAddress.disconnectDate,",
						"          parsedAddrExchangeCode = shippingaddress.parsedAddress.exchangeCode,",
						"          parsedAddrExhaustCode = shippingaddress.parsedAddress.exhaustCode,",
						"          parsedAddrHouseNumber = shippingaddress.parsedAddress.houseNumber,",
						"          parsedAddrHouseNumberPrefix = shippingaddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = shippingaddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = shippingaddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddrInternationalZip = shippingaddress.parsedAddress.internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = shippingaddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = shippingaddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = shippingaddress.parsedAddress.legalEntity,",
						"          parsedAddrLevel = shippingaddress.parsedAddress.level,",
						"          parsedAddrLevelNumber = shippingaddress.parsedAddress.levelNumber,",
						"          parsedAddrLinkKey = shippingaddress.parsedAddress.linkKey,",
						"          parsedAddrPostOfficeBox = shippingaddress.parsedAddress.postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = shippingaddress.parsedAddress.primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = shippingaddress.parsedAddress.primaryNPANXX,",
						"          parsedAddrProvince = shippingaddress.parsedAddress.province,",
						"          parsedAddrRateCenterCode = shippingaddress.parsedAddress.rateCenterCode,",
						"          parsedAddrRateZoneBanCode = shippingaddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = shippingaddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = shippingaddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = shippingaddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = shippingaddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddrSiteAddressId = shippingaddress.parsedAddress.siteAddressId,",
						"          parsedAddrSiteId = shippingaddress.parsedAddress.siteId,",
						"          parsedAddrSmartMoves = shippingaddress.parsedAddress.smartMoves,",
						"          parsedAddrState = shippingaddress.parsedAddress.state,",
						"          parsedAddrStreetName = shippingaddress.parsedAddress.streetName,",
						"          parsedAddrStreetNameSuffix = shippingaddress.parsedAddress.streetNameSuffix,",
						"          parsedAddrStreetType = shippingaddress.parsedAddress.streetType,",
						"          parsedAddrStructure = shippingaddress.parsedAddress.structure,",
						"          parsedAddrStructureNumber = shippingaddress.parsedAddress.structureNumber,",
						"          parsedAddrTarCode = shippingaddress.parsedAddress.tarCode,",
						"          parsedAddrTelephoneNumber = shippingaddress.parsedAddress.telephoneNumber,",
						"          parsedAddrUrbanizationCode = shippingaddress.parsedAddress.urbanizationCode,",
						"          parsedAddrVideoHubOffice = shippingaddress.parsedAddress.videoHubOffice,",
						"          parsedAddrZip = shippingaddress.parsedAddress.zip,",
						"          parsedAddrZipCodeExtension = shippingaddress.parsedAddress.zipCodeExtension,",
						"          parsedAddrZipGeoCode = shippingaddress.parsedAddress.zipGeoCode,",
						"          unparsedAddressLine1 = shippingaddress.unparsedAddress.addressLine1,",
						"          unparsedAddressLine3 = shippingaddress.unparsedAddress.addressLine3,",
						"          unparsedAddrAttention = shippingaddress.unparsedAddress.attention,",
						"          unparsedAddrElevation = shippingaddress.unparsedAddress.elevation,",
						"          unparsedAddrPostOfficeBox = shippingaddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddrProvince = shippingaddress.unparsedAddress.province,",
						"          unparsedAddrRuralRoute = shippingaddress.unparsedAddress.ruralRoute,",
						"          unparsedAddrStructure = shippingaddress.unparsedAddress.structure,",
						"          unparsedAddrUnit = shippingaddress.unparsedAddress.unit,",
						"          unparsedAddrUrbanizationCode = shippingaddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddrCity = shippingaddress.unparsedAddress.city,",
						"          unparsedAddrCountry = shippingaddress.unparsedAddress.country,",
						"          unparsedAddrState = shippingaddress.unparsedAddress.state,",
						"          unparsedAddrZip = shippingaddress.unparsedAddress.zip,",
						"          unparsedAddrZipCodeExtension = shippingaddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddrInternationalZip = shippingaddress.unparsedAddress.internationalZip,",
						"          unparsedAddressLine2 = shippingaddress.unparsedAddress.addressLine2,",
						"          additionalDetails = shippingaddress.additionalDetails,",
						"          shippingSequence = sequence,",
						"          placeId = shippingaddress.placeId,",
						"          connectedCommunityId = shippingaddress.connectedCommunityId,",
						"          shippingId = shippingDetailsid,",
						"          unparsedAddrCounty = shippingaddress.unparsedAddress.county",
						"     )) ~> sinkShippingDetailsAddr",
						"alterRowschedulingdetailflat sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          schedulingId as string,",
						"          actualScheduleEndTime as string,",
						"          actualScheduleSelectedAppointmentDate as date,",
						"          actualScheduleSelectedAppointmentTime as string,",
						"          actualScheduleStartTime as string,",
						"          actualScheduleWorkOrderId as string,",
						"          additionalDetails as string,",
						"          appointmentComment as string,",
						"          bestTimeToReach as string,",
						"          billingInstallmentsIndicator as string,",
						"          businessName as string,",
						"          confirmedScheduleEndTime as string,",
						"          confirmedScheduleSelectedAppointmentDate as date,",
						"          confirmedScheduleSelectedAppointmentTime as string,",
						"          confirmedScheduleStartTime as string,",
						"          confirmedScheduleWorkOrderId as string,",
						"          connecTechInstallationOptions as string,",
						"          dispatchType as string,",
						"          deferredInstallationDuration as string,",
						"          eventCode as string,",
						"          eventCodeEnteredManuallyIndicator as string,",
						"          installationPartnerName as string,",
						"          installationPartnerPurchaseOrderAmount as decimal(20,2),",
						"          installationPartnerPurchaseOrderDate as timestamp,",
						"          installationPartnerPurchaseOrderNumber as string,",
						"          installationPartnerProjectBilling as string,",
						"          installType as string,",
						"          landlordName as string,",
						"          landlordPermission as string,",
						"          landlordPhoneNumber as string,",
						"          nfflFulfillerName as string,",
						"          nfflFulfillerTN as string,",
						"          nfflFlag as string,",
						"          preference as string,",
						"          realTimeCalendarIndicator as string,",
						"          reservationId as string,",
						"          scheduleType as string,",
						"          scheduleASAPIndicator as string,",
						"          scheduleByDayAndTimeAnyDay as string,",
						"          scheduleByDayAndTimeMonday as string,",
						"          scheduleByDayAndTimeTuesday as string,",
						"          scheduleByDayAndTimeWednesday as string,",
						"          scheduleByDayAndTimeThursday as string,",
						"          scheduleByDayAndTimeFriday as string,",
						"          scheduleByDayAndTimeSaturday as string,",
						"          scheduleByDayAndTimeSunday as string,",
						"          serviceLevel as string,",
						"          timeZone as string,",
						"          valueSegmentationTier as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','schedulingId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSchedulingDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          serviceLevel,",
						"          timeZone,",
						"          valueSegmentationTier,",
						"          landlordName = landlordDetail_landlordName,",
						"          landlordPermission = landlordDetail_landlordPermission,",
						"          landlordPhoneNumber = landlordDetail_landlordPhoneNumber,",
						"          nfflFulfillerName = nffl_fulfillerName,",
						"          nfflFulfillerTN = nffl_ffulfillerTN,",
						"          nfflFlag = nffl_fnfflFlag,",
						"          preference,",
						"          reservationId,",
						"          scheduleType,",
						"          dispatchType,",
						"          deferredInstallationDuration,",
						"          eventCode,",
						"          eventCodeEnteredManuallyIndicator,",
						"          installationPartnerName = partnerName_installationPartner,",
						"          installationPartnerPurchaseOrderAmount = partnerName_projectPurchaseOrderAmount,",
						"          installationPartnerPurchaseOrderDate = partnerName_projectPurchaseOrderDate,",
						"          installationPartnerPurchaseOrderNumber = partnerName_projectPurchaseOrderNumber,",
						"          installationPartnerProjectBilling = partnerName_projectBilling,",
						"          appointmentComment,",
						"          bestTimeToReach,",
						"          billingInstallmentsIndicator,",
						"          businessName,",
						"          schedulingId = schedulingdetails_id,",
						"          installType,",
						"          realTimeCalendarIndicator,",
						"          scheduleASAPIndicator = scheduleAsSoonAsPossibleIndicator,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = schedulingdetails_name_id,",
						"          lastName,",
						"          primarycontactPhoneConsentDetails,",
						"          primaryContactextension,",
						"          scheduleByDayAndTimeFriday = scheduleByDayAndTime_friday,",
						"          scheduleByDayAndTimeMonday = scheduleByDayAndTime_monday,",
						"          scheduleByDayAndTimeSaturday = scheduleByDayAndTime_saturday,",
						"          scheduleByDayAndTimeSunday = scheduleByDayAndTime_sunday,",
						"          scheduleByDayAndTimeThursday = scheduleByDayAndTime_thursday,",
						"          scheduleByDayAndTimeTuesday = scheduleByDayAndTime_tuesday,",
						"          scheduleByDayAndTimeWednesday = scheduleByDayAndTime_wednesday,",
						"          actualScheduleWorkOrderId = actualSchedule_workOrderId,",
						"          actualScheduleStartTime = actualSchedule_startTime,",
						"          actualScheduleSelectedAppointmentDate = actualSchedule_selectedAppointmentDate,",
						"          actualScheduleSelectedAppointmentTime = actualSchedule_selectedAppointmentTime,",
						"          actualScheduleEndTime = actualSchedule_endTime,",
						"          confirmedScheduleWorkOrderId = confirmedSchedule_workOrderId,",
						"          confirmedScheduleStartTime = confirmedSchedule_startTime,",
						"          confirmedScheduleSelectedAppointmentDate = confirmedSchedule_selectedAppointmentDate,",
						"          confirmedScheduleSelectedAppointmentTime = confirmedSchedule_selectedAppointmentTime,",
						"          confirmedScheduleEndTime = confirmedSchedule_endTime,",
						"          additionalDetails = str_additionalDetails,",
						"          additionalContactPhones,",
						"          legalLastName,",
						"          legalFirstName,",
						"          previousLegalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          suffix,",
						"          title,",
						"          primaryContactextension,",
						"          primaryContactPhoneNumber = phoneNumber,",
						"          primaryContactPhoneType = contactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          connecTechInstallationOptions,",
						"          scheduleByDayAndTimeAnyDay = anyDayOfTheWeek",
						"     )) ~> sinkschedulingdetailsflat",
						"alterRowext sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          systemName as string,",
						"          systemOrderReference as string,",
						"          systemOrderReferenceType as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsExternalOrderReferences_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          systemName,",
						"          systemOrderReference,",
						"          systemOrderReferenceType",
						"     )) ~> oceOrderLosgsExternalOrderReferences",
						"alterRowpromo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          id as string,",
						"          sequence as string,",
						"          additionDetails as string,",
						"          amount as double,",
						"          baseOfferId as string,",
						"          complexDiscountIndicator as string,",
						"          componentConfigurations as string,",
						"          couponCode as string,",
						"          displayLevel as string,",
						"          duration as integer,",
						"          effectiveDate as timestamp,",
						"          effectiveInDays as integer,",
						"          endDate as timestamp,",
						"          fixedAmount as double,",
						"          ioId as string,",
						"          ioSequence as string,",
						"          parentPricePlanCode as string,",
						"          payInAdvanceProdId as string,",
						"          percent as double,",
						"          promotionAppliedBy as string,",
						"          promotionBillingCode as string,",
						"          promotionCode as string,",
						"          promotionCycle as string,",
						"          promotionId as string,",
						"          promotionName as string,",
						"          promotionType as string,",
						"          unitOfMeasurement as string,",
						"          promotionTypeDetail as string,",
						"          qualifyingServiceDetails as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','id','sequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsPromotions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          id,",
						"          sequence,",
						"          additionDetails = additionalDetails,",
						"          amount,",
						"          baseOfferId,",
						"          complexDiscountIndicator,",
						"          componentConfigurations,",
						"          couponCode,",
						"          displayLevel,",
						"          duration,",
						"          effectiveDate,",
						"          effectiveInDays,",
						"          endDate,",
						"          fixedAmount,",
						"          ioId,",
						"          ioSequence,",
						"          parentPricePlanCode,",
						"          payInAdvanceProdId,",
						"          percent,",
						"          promotionAppliedBy,",
						"          promotionBillingCode,",
						"          promotionCode,",
						"          promotionCycle,",
						"          promotionId,",
						"          promotionName,",
						"          promotionType,",
						"          unitOfMeasurement,",
						"          promotionTypeDetail,",
						"          qualifyingServiceDetails",
						"     )) ~> oceOrderLosgsPromotions",
						"alterRowuse sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          ModifiedDate as timestamp,",
						"          label as string,",
						"          sequence as string,",
						"          value as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','label'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsUserDefinedLabels_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          label,",
						"          sequence,",
						"          value",
						"     )) ~> oceOrderLosgsUserDefinedLabels",
						"alterRowllpay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemId as string,",
						"          lineItemSequence as string,",
						"          paymentTenderReference as string,",
						"          amount as decimal(20,2),",
						"          currencyType as string,",
						"          numberOfInstallment as integer,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','paymentTenderReference','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsPayments_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = lineitemsequence,",
						"          paymentTenderReference,",
						"          lineItemId = LineItem_id,",
						"          amount,",
						"          currencyType,",
						"          numberOfInstallment",
						"     )) ~> oceOrderLosgsLineItemsPayments",
						"alterRowLLIhard sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          availabilityDate as timestamp,",
						"          biller as string,",
						"          byodIndicator as string,",
						"          cardSerialNumber as string,",
						"          deliveryByDateFromDate as timestamp,",
						"          deliveryByDateToDate as timestamp,",
						"          deliveryPromiseNoteEnglish as string,",
						"          deliveryPromiseNoteSpanish as string,",
						"          eid as string,",
						"          fieldId as string,",
						"          hardGoodType as string,",
						"          iccId as string,",
						"          make as string,",
						"          manufacturerCode as string,",
						"          model as string,",
						"          networkAccessDeviceType as string,",
						"          preOrderIndicator as string,",
						"          productImageUrl as string,",
						"          serialNumber as string,",
						"          shipmentCommitFromDate as timestamp,",
						"          shipmentCommitToDate as timestamp,",
						"          shippedHotIndicator as string,",
						"          whiteGloveDeliveryPartner as string,",
						"          WirelessHardGoodConnectionType as string,",
						"          WirelessHardGoodDeviceCategory as string,",
						"          WirelessHardGoodEquipmentType as string,",
						"          WirelessHardGoodEquipmentUpgrade as string,",
						"          WirelessHardGoodIMEI as string,",
						"          WirelessHardGoodIMEIType as string,",
						"          WirelessHardGoodIMSI as string,",
						"          WirelessHardGoodPhoneType as string,",
						"          WirelessHardGoodTechType as string,",
						"          WirelessHardGoodUSOC as string,",
						"          WirelessHardGoodZodiacSeqNum as string,",
						"          ModifiedDate as timestamp,",
						"          simStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemshardGood_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          availabilityDate = havailabilityDate,",
						"          biller = hardGood.biller,",
						"          byodIndicator = hardGood.byodIndicator,",
						"          cardSerialNumber = hardGood.cardSerialNumber,",
						"          deliveryByDateFromDate,",
						"          deliveryByDateToDate,",
						"          deliveryPromiseNoteEnglish = hardGood.deliveryPromiseNote.english,",
						"          deliveryPromiseNoteSpanish = hardGood.deliveryPromiseNote.spanish,",
						"          eid = hardGood.eid,",
						"          fieldId = hardGood.fieldId,",
						"          hardGoodType = hardGood.hardGoodType,",
						"          iccId = hardGood.iccId,",
						"          make = hardGood.make,",
						"          manufacturerCode = hardGood.manufacturerCode,",
						"          model = hardGood.model,",
						"          networkAccessDeviceType = hardGood.networkAccessDeviceType,",
						"          preOrderIndicator = hardGood.preOrderIndicator,",
						"          productImageUrl = hardGood.productImageUrl,",
						"          serialNumber = hardGood.serialNumber,",
						"          shipmentCommitFromDate,",
						"          shipmentCommitToDate,",
						"          shippedHotIndicator = hardGood.shippedHotIndicator,",
						"          whiteGloveDeliveryPartner = hardGood.whiteGloveDeliveryPartner,",
						"          WirelessHardGoodConnectionType = hardGood.wirelessHardGoodCharacteristics.connectionType,",
						"          WirelessHardGoodDeviceCategory = hardGood.wirelessHardGoodCharacteristics.deviceCategory,",
						"          WirelessHardGoodEquipmentType = hardGood.wirelessHardGoodCharacteristics.equipmentType,",
						"          WirelessHardGoodEquipmentUpgrade = hardGood.wirelessHardGoodCharacteristics.equipmentUpgrade,",
						"          WirelessHardGoodIMEI = hardGood.wirelessHardGoodCharacteristics.imei,",
						"          WirelessHardGoodIMEIType = hardGood.wirelessHardGoodCharacteristics.imeiType,",
						"          WirelessHardGoodIMSI = hardGood.wirelessHardGoodCharacteristics.internationalMobileSubscriberIdentity,",
						"          WirelessHardGoodPhoneType = hardGood.wirelessHardGoodCharacteristics.phoneType,",
						"          WirelessHardGoodTechType = hardGood.wirelessHardGoodCharacteristics.techType,",
						"          WirelessHardGoodUSOC = hardGood.wirelessHardGoodCharacteristics.usoc,",
						"          WirelessHardGoodZodiacSeqNum = hardGood.wirelessHardGoodCharacteristics.zodiacSequenceNumber",
						"     )) ~> oceOrderLosgsLineItemshardGood",
						"alterRowsupplychain sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          availabilityDate as timestamp,",
						"          carrier as string,",
						"          claimRMANumber as string,",
						"          exchangeDocumentId as string,",
						"          exchangeOrderId as string,",
						"          orderDocumentDetailActivity as string,",
						"          orderDocumentDetailLocation as string,",
						"          orderDocumentDetailOrderId as string,",
						"          price as decimal(20,2),",
						"          quantityBackOrdered as integer,",
						"          quantityCanceled as integer,",
						"          quantityOrdered as integer,",
						"          quantityShipped as integer,",
						"          quantityToShip as integer,",
						"          shippedDate as timestamp,",
						"          trackingNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsSupplyChainDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          availabilityDate,",
						"          carrier = supplyChainDetail.carrier,",
						"          claimRMANumber = supplyChainDetail.claimRMANumber,",
						"          exchangeDocumentId = supplyChainDetail.exchangeDocumentId,",
						"          exchangeOrderId = supplyChainDetail.exchangeOrderId,",
						"          orderDocumentDetailActivity = supplyChainDetail.orderDocumentDetail.activity,",
						"          orderDocumentDetailLocation = supplyChainDetail.orderDocumentDetail.location,",
						"          orderDocumentDetailOrderId = supplyChainDetail.orderDocumentDetail.orderId,",
						"          price = supplyChainDetail.price,",
						"          quantityBackOrdered = supplyChainDetail.quantityBackOrdered,",
						"          quantityCanceled = supplyChainDetail.quantityCanceled,",
						"          quantityOrdered = supplyChainDetail.quantityOrdered,",
						"          quantityShipped = supplyChainDetail.quantityShipped,",
						"          quantityToShip = supplyChainDetail.quantityToShip,",
						"          shippedDate,",
						"          trackingNumber = supplyChainDetail.trackingNumber",
						"     )) ~> oceOrderLosgsLineItemsSupplyChainDetail",
						"alterRowlosgserviceaddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          Id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          modifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsServiceAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          additionalDetails = serviceAddress.additionalDetails,",
						"          addressId = serviceAddress.addressId,",
						"          Id = serviceAddress.id,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          auxiliaryAddressLine1 = serviceAddress.auxiliaryAddress.line1,",
						"          dwellingType = serviceAddress.dwellingType,",
						"          auxiliaryAddressLine2 = serviceAddress.auxiliaryAddress.line2,",
						"          auxiliaryAddressLine3 = serviceAddress.auxiliaryAddress.line3,",
						"          auxiliaryAddressLine4 = serviceAddress.auxiliaryAddress.line4,",
						"          auxiliaryAddressLine5 = serviceAddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = serviceAddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddrAddInstructions = serviceAddress.parsedAddress.addInstructions,",
						"          parsedAddrAddressChanged = serviceAddress.parsedAddress.addressChanged,",
						"          parsedAddrAddressMatchCode = serviceAddress.parsedAddress.addressMatchCode,",
						"          parsedAddrAddressStreetLine = serviceAddress.parsedAddress.addressStreetLine,",
						"          parsedAddrAddressType = serviceAddress.parsedAddress.addressType,",
						"          parsedAddrApartmentUnit = serviceAddress.parsedAddress.apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = serviceAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = serviceAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddrAttention = serviceAddress.parsedAddress.attention,",
						"          parsedAddrBuildingType = serviceAddress.parsedAddress.buildingType,",
						"          parsedAddrCity = serviceAddress.parsedAddress.city,",
						"          parsedAddrCountry = serviceAddress.parsedAddress.country,",
						"          parsedAddrCounty = serviceAddress.parsedAddress.county,",
						"          parsedAddrCountyCode = serviceAddress.parsedAddress.countyCode,",
						"          parsedAddrDirection = serviceAddress.parsedAddress.direction,",
						"          parsedAddrDirectionPrefix = serviceAddress.parsedAddress.directionPrefix,",
						"          parsedAddrDisconnectDate = serviceAddress.parsedAddress.disconnectDate,",
						"          parsedAddrExchangeCode = serviceAddress.parsedAddress.exchangeCode,",
						"          parsedAddrExhaustCode = serviceAddress.parsedAddress.exhaustCode,",
						"          parsedAddrHouseNumber = serviceAddress.parsedAddress.houseNumber,",
						"          parsedAddrHouseNumberPrefix = serviceAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = serviceAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = serviceAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddrInternationalZip = serviceAddress.parsedAddress.internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = serviceAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = serviceAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = serviceAddress.parsedAddress.legalEntity,",
						"          parsedAddrLevel = serviceAddress.parsedAddress.level,",
						"          parsedAddrLevelNumber = serviceAddress.parsedAddress.levelNumber,",
						"          parsedAddrLinkKey = serviceAddress.parsedAddress.linkKey,",
						"          parsedAddrPostOfficeBox = serviceAddress.parsedAddress.postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = serviceAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = serviceAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddrProvince = serviceAddress.parsedAddress.province,",
						"          parsedAddrRateCenterCode = serviceAddress.parsedAddress.rateCenterCode,",
						"          parsedAddrRateZoneBanCode = serviceAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = serviceAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = serviceAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = serviceAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = serviceAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddrSiteAddressId = serviceAddress.parsedAddress.siteAddressId,",
						"          parsedAddrSiteId = serviceAddress.parsedAddress.siteId,",
						"          parsedAddrSmartMoves = serviceAddress.parsedAddress.smartMoves,",
						"          parsedAddrState = serviceAddress.parsedAddress.state,",
						"          parsedAddrStreetName = serviceAddress.parsedAddress.streetName,",
						"          parsedAddrStreetNameSuffix = serviceAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddrStreetType = serviceAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddrStructure = serviceAddress.parsedAddress.structure,",
						"          parsedAddrStructureNumber = serviceAddress.parsedAddress.structureNumber,",
						"          parsedAddrTarCode = serviceAddress.parsedAddress.tarCode,",
						"          parsedAddrTelephoneNumber = serviceAddress.parsedAddress.telephoneNumber,",
						"          parsedAddrUrbanizationCode = serviceAddress.parsedAddress.urbanizationCode,",
						"          parsedAddrVideoHubOffice = serviceAddress.parsedAddress.videoHubOffice,",
						"          parsedAddrZip = serviceAddress.parsedAddress.zip,",
						"          parsedAddrZipCodeExtension = serviceAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddrZipGeoCode = serviceAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddressLine1 = serviceAddress.unparsedAddress.addressLine1,",
						"          unparsedAddressLine3 = serviceAddress.unparsedAddress.addressLine3,",
						"          unparsedAddrAttention = serviceAddress.unparsedAddress.attention,",
						"          unparsedAddrElevation = serviceAddress.unparsedAddress.elevation,",
						"          unparsedAddrPostOfficeBox = serviceAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddrProvince = serviceAddress.unparsedAddress.province,",
						"          unparsedAddrRuralRoute = serviceAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddrStructure = serviceAddress.unparsedAddress.structure,",
						"          unparsedAddrUrbanizationCode = serviceAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddrCity = serviceAddress.unparsedAddress.city,",
						"          unparsedAddrCountry = serviceAddress.unparsedAddress.country,",
						"          unparsedAddrState = serviceAddress.unparsedAddress.state,",
						"          unparsedAddrZip = serviceAddress.unparsedAddress.zip,",
						"          unparsedAddrZipCodeExtension = serviceAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddrInternationalZip = serviceAddress.unparsedAddress.internationalZip,",
						"          unparsedAddressLine2 = serviceAddress.unparsedAddress.addressLine2,",
						"          placeId = serviceAddress.placeId,",
						"          connectedCommunityId = serviceAddress.connectedCommunityId,",
						"          parsedAddrStreetType = serviceAddress.parsedAddress.streetType,",
						"          unparsedAddrCounty = serviceAddress.unparsedAddress.county",
						"     )) ~> sinklosgserviceaddress",
						"alterRowDiLitem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsDirecTVCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails = direcTVLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = direcTVLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = direcTVLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = direcTVLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = direcTVLineItemCharacteristics.requestComponentGroup",
						"     )) ~> oceOrderLosgsLineItemsDirecTVCharacteristics",
						"alterRowvoipLLitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          callerId as string,",
						"          uverseMessaging as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsVoipCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails = voipLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = voipLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = voipLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = voipLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = voipLineItemCharacteristics.requestComponentGroup,",
						"          callerId = voipLineItemCharacteristics.callerId,",
						"          uverseMessaging = voipLineItemCharacteristics.uverseMessaging",
						"     )) ~> oceOrderLosgsLineItemsVoipCharacteristics",
						"alterRowiptv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsIptvCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails = iptvLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = iptvLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = iptvLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = iptvLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = iptvLineItemCharacteristics.requestComponentGroup",
						"     )) ~> oceOrderLosgsLineItemsIptvCharacteristics",
						"alterRowwire sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          attDynTrafficManagerAddlDetails as string,",
						"          attDynTrafficManagerEnterpriseId as string,",
						"          attDynTrafficManagerManifestLabel as string,",
						"          attDynTrafficManagerManifestURL as string,",
						"          availabilityType as string,",
						"          distributionChannelId as string,",
						"          nciEligibleIndicator as string,",
						"          newSalesChannelId as string,",
						"          offerType as string,",
						"          packetDataProtocolAddlDetails as string,",
						"          packetDataProtocolApnName as string,",
						"          packetDataProtocol5GIndicator as string,",
						"          packetDataProtocolDefaultIndicator as string,",
						"          packetDataProtocolDefaultSNType as string,",
						"          packetDataProtocolIpAddress as string,",
						"          packetDataProtocolIpv6Address as string,",
						"          packetDataProtocolIpversionType as string,",
						"          packetDataProtocolLteIndicator as string,",
						"          packetDataProtocolOnlineChargingIndicator as string,",
						"          packetDataProtocolType as string,",
						"          partnerCode as string,",
						"          simType as string,",
						"          tradeInModelCode as string,",
						"          tradeInDetailAddlDetails as string,",
						"          tradeInDetailClaimId as string,",
						"          tradeInDetailDeviceClearingAgreement as string,",
						"          tradeInDetailDeviceCondition as string,",
						"          tradeInDetailExchangeType as string,",
						"          tradeInDetailInstallmentPlanId as string,",
						"          tradeInDetailModelCode as string,",
						"          tradeInDetailNonComplianceFee as integer,",
						"          tradeInDetailPayupAmount as integer,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsWirelessCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails = wirelessLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = wirelessLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = wirelessLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = wirelessLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = wirelessLineItemCharacteristics.requestComponentGroup,",
						"          attDynTrafficManagerAddlDetails = wirelessLineItemCharacteristics.attDynamicTrafficManager.additionalDetails,",
						"          attDynTrafficManagerEnterpriseId = wirelessLineItemCharacteristics.attDynamicTrafficManager.enterpriseId,",
						"          attDynTrafficManagerManifestLabel = wirelessLineItemCharacteristics.attDynamicTrafficManager.manifestLabel,",
						"          attDynTrafficManagerManifestURL = wirelessLineItemCharacteristics.attDynamicTrafficManager.manifestURL,",
						"          availabilityType = wirelessLineItemCharacteristics.availabilityType,",
						"          distributionChannelId = wirelessLineItemCharacteristics.distributionChannelId,",
						"          nciEligibleIndicator = wirelessLineItemCharacteristics.nciEligibleIndicator,",
						"          newSalesChannelId = wirelessLineItemCharacteristics.newSalesChannelId,",
						"          offerType = wirelessLineItemCharacteristics.offerType,",
						"          packetDataProtocolAddlDetails = wirelessLineItemCharacteristics.packetDataProtocol.additionalDetails,",
						"          packetDataProtocolApnName = wirelessLineItemCharacteristics.packetDataProtocol.apnName,",
						"          packetDataProtocol5GIndicator = wirelessLineItemCharacteristics.packetDataProtocol.packetDataProtocol5GIndicator,",
						"          packetDataProtocolDefaultIndicator = wirelessLineItemCharacteristics.packetDataProtocol.defaultPacketDataProtocolIndicator,",
						"          packetDataProtocolDefaultSNType = wirelessLineItemCharacteristics.packetDataProtocol.defaultSNType,",
						"          packetDataProtocolIpAddress = wirelessLineItemCharacteristics.packetDataProtocol.ipAddress,",
						"          packetDataProtocolIpv6Address = wirelessLineItemCharacteristics.packetDataProtocol.ipv6Address,",
						"          packetDataProtocolIpversionType = wirelessLineItemCharacteristics.packetDataProtocol.ipversionType,",
						"          packetDataProtocolLteIndicator = wirelessLineItemCharacteristics.packetDataProtocol.ltePacketDataProtocolIndicator,",
						"          packetDataProtocolOnlineChargingIndicator = wirelessLineItemCharacteristics.packetDataProtocol.onlineChargingSystemIndicator,",
						"          packetDataProtocolType = wirelessLineItemCharacteristics.packetDataProtocol.packetDataProtocolType,",
						"          partnerCode = wirelessLineItemCharacteristics.partnerCode,",
						"          simType = wirelessLineItemCharacteristics.simType,",
						"          tradeInDetailModelCode = wirelessLineItemCharacteristics.tradeInDetail.modelCode,",
						"          tradeInDetailAddlDetails = wirelessLineItemCharacteristics.tradeInDetail.additionalDetails,",
						"          tradeInDetailClaimId = wirelessLineItemCharacteristics.tradeInDetail.claimId,",
						"          tradeInDetailDeviceClearingAgreement = wirelessLineItemCharacteristics.tradeInDetail.deviceClearingAgreement,",
						"          tradeInDetailDeviceCondition = wirelessLineItemCharacteristics.tradeInDetail.deviceCondition,",
						"          tradeInDetailExchangeType = wirelessLineItemCharacteristics.tradeInDetail.exchangeType,",
						"          tradeInDetailInstallmentPlanId = wirelessLineItemCharacteristics.tradeInDetail.installmentPlanId,",
						"          tradeInDetailNonComplianceFee = wirelessLineItemCharacteristics.tradeInDetail.nonComplianceFee,",
						"          tradeInDetailPayupAmount = wirelessLineItemCharacteristics.tradeInDetail.payupAmount,",
						"          tradeInModelCode = wirelessLineItemCharacteristics.tradeInDetail.modelCode",
						"     )) ~> oceOrderLosgsLineItemsWirelessCharacteristics",
						"alterRowIIChar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          boltOnType as string,",
						"          bucketAllowance as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          ipType as string,",
						"          maxOverageCharge as integer,",
						"          overageBucketAllowance as string,",
						"          planDownloadSpeed as string,",
						"          pricePerBucketAllowance as integer,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsInternetCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails = internetLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = internetLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = internetLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = internetLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = internetLineItemCharacteristics.requestComponentGroup,",
						"          boltOnType = internetLineItemCharacteristics.boltOnType,",
						"          bucketAllowance = internetLineItemCharacteristics.bucketAllowance,",
						"          ipType = internetLineItemCharacteristics.ipType,",
						"          maxOverageCharge = internetLineItemCharacteristics.maxOverageCharge,",
						"          overageBucketAllowance = internetLineItemCharacteristics.overageBucketAllowance,",
						"          planDownloadSpeed = internetLineItemCharacteristics.planDownloadSpeed,",
						"          pricePerBucketAllowance = internetLineItemCharacteristics.pricePerBucketAllowance",
						"     )) ~> oceOrderLosgsLineItemsInternetCharacteristics",
						"alterRowupgrad sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          approvalNumber as string,",
						"          contractExtended as string,",
						"          deviceType as string,",
						"          discountUOM as string,",
						"          maximumMRC as integer,",
						"          minimumCommitment as string,",
						"          minimumMRC as integer,",
						"          newAEUCheckerIndicator as string,",
						"          offerCategory as string,",
						"          policyCategory as string,",
						"          priceList as string,",
						"          qualificationLevel as string,",
						"          qualificationMessage as string,",
						"          qualificationType as string,",
						"          upgradeEligibilityDate as timestamp,",
						"          upgradeFeeWaivedIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsWirelessCharUpgradeQual_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          approvalNumber,",
						"          contractExtended,",
						"          deviceType,",
						"          discountUOM,",
						"          maximumMRC,",
						"          minimumCommitment,",
						"          minimumMRC,",
						"          newAEUCheckerIndicator,",
						"          offerCategory,",
						"          policyCategory,",
						"          priceList,",
						"          qualificationLevel,",
						"          qualificationMessage,",
						"          qualificationType,",
						"          upgradeEligibilityDate = date,",
						"          upgradeFeeWaivedIndicator",
						"     )) ~> oceOrderLosgsWirelessCharUpgradeQual",
						"alterRowlineitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          action as string,",
						"          addOnDomainName as string,",
						"          addOnDomainRegistration as string,",
						"          addOnParentItem as string,",
						"          addOnRegistrationType as string,",
						"          billingCode as string,",
						"          billingCodeType as string,",
						"          catalogProductType as string,",
						"          catalogSKUId as string,",
						"          contractAmountFinanced as decimal(20,2),",
						"          contractAnnualPercentageRate as decimal(20,2),",
						"          contractBalancedAmount as decimal(20,2),",
						"          contractDisplayName as string,",
						"          contractSent as string,",
						"          contractSystem as string,",
						"          contractType as string,",
						"          contractDownPayment as decimal(20,2),",
						"          contractDownPaymentPercent as decimal(20,2),",
						"          contractFinanceCharge as decimal(20,2),",
						"          contractInstallmentAmount as decimal(20,2),",
						"          contractInstallmentPlanDef as string,",
						"          contractInstallmentPlanId as string,",
						"          contractInstallmentStatus as string,",
						"          contractInstallmentType as string,",
						"          contractPrepaidFinanceCharge as string,",
						"          contractPayupAmount as decimal(20,2),",
						"          contractPayoffAmount as decimal(20,2),",
						"          contractTotalSalePrice as decimal(20,2),",
						"          contractlength as integer,",
						"          curbsideDelivery as string,",
						"          description as string,",
						"          displayName as string,",
						"          effectiveDate as timestamp,",
						"          feeId as string,",
						"          feeIdType as string,",
						"          feeWaivedIndicator as string,",
						"          feeWaivedReason as string,",
						"          fulfillmentLocation as string,",
						"          groupOptionId as string,",
						"          inventoryStoreId as string,",
						"          itemFulfillmentMethod as string,",
						"          locationId as string,",
						"          notes as string,",
						"          operation as string,",
						"          preOwnedIndicator as string,",
						"          priceAdditionalDetails as string,",
						"          priceAmount as decimal(20,2),",
						"          priceBaseAmount as decimal(20,2),",
						"          priceCreditFeeType as string,",
						"          priceCurrencyType as string,",
						"          priceInstallmentEligibility as string,",
						"          priceMsrp as decimal(20,2),",
						"          priceType as string,",
						"          priceTaxDetail as string,",
						"          priceTotal as decimal(20,2),",
						"          productCode as string,",
						"          productGroupReferences as string,",
						"          productSKU as string,",
						"          productSubType as string,",
						"          productType as string,",
						"          promotionReferences as string,",
						"          purchaseTransactionId as string,",
						"          quantity as integer,",
						"          shippingDetailReference as string,",
						"          socForPreviousDevice as string,",
						"          status as string,",
						"          storeId as string,",
						"          subscriptionId as string,",
						"          systemName as string,",
						"          taxableIndicator as string,",
						"          tier as string,",
						"          ModifiedDate as timestamp,",
						"          productInventoryStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItems_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          action,",
						"          addOnDomainName,",
						"          addOnDomainRegistration,",
						"          addOnParentItem,",
						"          addOnRegistrationType,",
						"          billingCode,",
						"          billingCodeType,",
						"          catalogProductType,",
						"          catalogSKUId,",
						"          contractAmountFinanced,",
						"          contractAnnualPercentageRate,",
						"          contractBalancedAmount,",
						"          contractDisplayName,",
						"          contractSent,",
						"          contractSystem,",
						"          contractType,",
						"          contractDownPayment,",
						"          contractDownPaymentPercent,",
						"          contractFinanceCharge,",
						"          contractInstallmentAmount,",
						"          contractInstallmentPlanDef,",
						"          contractInstallmentPlanId,",
						"          contractInstallmentStatus,",
						"          contractInstallmentType,",
						"          contractPrepaidFinanceCharge,",
						"          contractPayupAmount,",
						"          contractPayoffAmount,",
						"          contractTotalSalePrice,",
						"          contractlength = contractLength,",
						"          curbsideDelivery,",
						"          description,",
						"          displayName,",
						"          effectiveDate,",
						"          feeId,",
						"          feeIdType,",
						"          feeWaivedIndicator,",
						"          feeWaivedReason,",
						"          fulfillmentLocation,",
						"          groupOptionId,",
						"          inventoryStoreId,",
						"          itemFulfillmentMethod,",
						"          locationId,",
						"          notes,",
						"          operation,",
						"          preOwnedIndicator,",
						"          priceAdditionalDetails = price.additionalDetails,",
						"          priceAmount = price.amount,",
						"          priceBaseAmount = price.baseAmount,",
						"          priceCreditFeeType = price.creditFeeType,",
						"          priceCurrencyType = price.currencyType,",
						"          priceInstallmentEligibility = price.installmentEligibility,",
						"          priceMsrp = price.msrp,",
						"          priceType = price.priceType,",
						"          priceTaxDetail = price.taxDetail,",
						"          priceTotal = price.total,",
						"          productCode,",
						"          productGroupReferences,",
						"          productSKU,",
						"          productSubType,",
						"          productType,",
						"          promotionReferences,",
						"          purchaseTransactionId,",
						"          quantity,",
						"          shippingDetailReference,",
						"          socForPreviousDevice,",
						"          status,",
						"          storeId,",
						"          subscriptionId,",
						"          systemName,",
						"          taxableIndicator,",
						"          tier",
						"     )) ~> oceOrderLosgsLineItems",
						"alterRowProvisionSystem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          systemOrderReference as string,",
						"          systemName as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_acctProvisionSystem',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId,",
						"          acctSequence,",
						"          systemOrderReference,",
						"          systemName",
						"     )) ~> sinkacctProvisionSystem",
						"alterRowForOceOrderLosgsEventHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          status as string,",
						"          substatus as string,",
						"          eventDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','status','substatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsEventHistory_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = losg_id,",
						"          losgSequence = losgsequence,",
						"          status = losgStatus,",
						"          substatus = losgsubStatus,",
						"          eventDate,",
						"          ModifiedDate",
						"     )) ~> sinkOceOrderLosgsEventHistory",
						"alterRowtransactionlogs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          changedLosgReferenceId as string,",
						"          channel as string,",
						"          comments as string,",
						"          endTime as timestamp,",
						"          orderId as string,",
						"          orderStatus as string,",
						"          parentOrderId as string,",
						"          queueName as string,",
						"          recordId as string,",
						"          startTime as timestamp,",
						"          transactionId as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          updateInfos as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          losgReferenceId as string,",
						"          service as string,",
						"          serviceType as string,",
						"          LosgStatus as string,",
						"          LosgSubStatus as string,",
						"          wirelessNumber as string,",
						"          eventtimedate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','startTime','losgReferenceId','LosgStatus','LosgSubStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_transactionlosgnew',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          actionBy,",
						"          changedLosgReferenceId,",
						"          channel,",
						"          comments,",
						"          endTime,",
						"          orderId,",
						"          orderStatus,",
						"          parentOrderId,",
						"          queueName,",
						"          recordId,",
						"          startTime,",
						"          transactionId,",
						"          transactionName,",
						"          transactionType,",
						"          updateInfos,",
						"          ModifiedDate = modifiedDate,",
						"          eventTime,",
						"          losgReferenceId,",
						"          service,",
						"          serviceType,",
						"          LosgStatus = losgstatus,",
						"          LosgSubStatus = losgsubStatus,",
						"          wirelessNumber,",
						"          eventtimedate = lastmodified_date",
						"     )) ~> oceOrderTransactionlogs",
						"alterRowlineitemhistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          lineItemId as string,",
						"          lineItemSequence as string,",
						"          status as string,",
						"          eventDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemId','lineItemSequence','status'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsEventHistory_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = losg_id,",
						"          losgSequence = losgsequence,",
						"          lineItemId = lineitemId,",
						"          lineItemSequence = lineitemsequence,",
						"          status,",
						"          eventDate,",
						"          ModifiedDate",
						"     )) ~> sinkLosgsLineItemsEventHistory",
						"alterRowoceOrderCancelDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          cancelReason as string,",
						"          insertedDate as timestamp,",
						"          ModifiedEventDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderCancelDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          cancelReason = OrderData.cancelDetails.cancelReason,",
						"          ModifiedEventDate = dc_eventtime",
						"     )) ~> oceOrderCancelDetails",
						"alterRowcancelDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          cancelBy as string,",
						"          cancelReason as string,",
						"          insertedDate as timestamp,",
						"          ModifiedEventDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgCancelDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          cancelBy = cancelDetails.cancelBy,",
						"          cancelReason = cancelDetails.cancelReason,",
						"          ModifiedEventDate = dc_eventtime",
						"     )) ~> oceOrderLosgCancelDetails",
						"alterRowcustomerOrderNumber sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          action as string,",
						"          priority as integer,",
						"          name as string,",
						"          losgSubStatus as string,",
						"          losgStatus as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsApiExecutionDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId,",
						"          losgSequence = losgsequence,",
						"          action,",
						"          priority,",
						"          name,",
						"          losgSubStatus = subStatus,",
						"          losgStatus = status",
						"     )) ~> oceOrderLosgsApiExecutionDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderData')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderContactDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPrice')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPriceSummaryList')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderProductGroups')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPromotions')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTermsAndConditions')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAccts')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctServFacilityQualifications')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctsBillingDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsPrice')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsPriceSummaryList')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsLineItemsAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderSourceDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderSourceDetailAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgs')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderCreditPolicy')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderDebtAccts')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderErrors')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderMoveDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderTasks')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderReferenceDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsIptvCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsSubscriberName')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsTermsAndConditionAccepted')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsVoipCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsVoipCharacteristicsDirListing')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsWirelessCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsNumberPortDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsBillingDetailAddr')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctServiceAddr')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctsBussinessAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsCompensation')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsinternetCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsDirectTVCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderEvents')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCreditCheck')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsAutopayPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsAutoPayEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCardOnFilePaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCardOnFileEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsNegotiateConflictCustomer')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsUnifiedAccount')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderEmployeeDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderECommercePartner')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderIntegratedOffers')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLoginProfile')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSingleDispatchDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderPaymentTenders')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderPaymentTendersEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetailsPrice')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSalesAgent')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderReferenceDetailFalloutDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetailsAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSchedulingDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsExternalOrderReferences')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsPromotions')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsUserDefinedLabels')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsPayments')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemshardGood')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsSupplyChainDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsServiceAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsDirecTVCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsVoipCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsIptvCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsWirelessCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsInternetCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsWirelessCharUpgradeQual')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItems')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsProvisionSystem')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsEventHistory')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTransactionlogs')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsEventHistory')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderCancelDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsCancelDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsApiExecutionDetails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Iconic_DF_new_singlewindow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Iconic_Staging",
								"type": "DatasetReference"
							},
							"name": "TempOrderData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderData",
								"type": "DatasetReference"
							},
							"name": "sinkOrderData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderSourceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderSourceDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderLosgs",
								"type": "DatasetReference"
							},
							"name": "sinkOrderlosgs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderErrors",
								"type": "DatasetReference"
							},
							"name": "sinkError",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderReferenceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkorderreferencedetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderLosgsWirelessCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsWirelessCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceorderEvents",
								"type": "DatasetReference"
							},
							"name": "sinkevents",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderTransactionLosgList",
								"type": "DatasetReference"
							},
							"name": "oceOrderTransactionlogs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "Iconic_oceOrderLosgsLineItems",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItems",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "parseJsonOrderData"
						},
						{
							"name": "selectOrderData"
						},
						{
							"name": "FinalizeOrderData"
						},
						{
							"name": "ConvertDateTime"
						},
						{
							"name": "AlterRowOrderData"
						},
						{
							"name": "flattenOrderLosgs"
						},
						{
							"name": "selectOrderLosgs"
						},
						{
							"name": "flattenLosgsLineItems"
						},
						{
							"name": "selectOrderSourceDetail"
						},
						{
							"name": "FinalizeOrderSourceDetail"
						},
						{
							"name": "AlterRowOrderSourceDetail"
						},
						{
							"name": "AlterRowOrderlosgs"
						},
						{
							"name": "filter8"
						},
						{
							"name": "selecterror"
						},
						{
							"name": "alterRowerrors"
						},
						{
							"name": "flattenerror"
						},
						{
							"name": "select5"
						},
						{
							"name": "alterRowreferencedetail"
						},
						{
							"name": "filtererror"
						},
						{
							"name": "filterorderdata"
						},
						{
							"name": "derivedColumn12"
						},
						{
							"name": "select15"
						},
						{
							"name": "alterWirlessChar"
						},
						{
							"name": "select19"
						},
						{
							"name": "alterRowevent"
						},
						{
							"name": "select20"
						},
						{
							"name": "derivedColumn35"
						},
						{
							"name": "filtertransactionlogs"
						},
						{
							"name": "selectOrderTransctionLogs"
						},
						{
							"name": "flattenTransactionLosgs"
						},
						{
							"name": "AlterRowTransactionLosgs"
						},
						{
							"name": "coallosgid",
							"description": "V101.oceOrderLosgsEventHistory"
						},
						{
							"name": "select63"
						},
						{
							"name": "alterRowlineitems"
						},
						{
							"name": "derivedColumn56"
						},
						{
							"name": "derivedColumn57"
						},
						{
							"name": "coalLLseq"
						},
						{
							"name": "select64"
						},
						{
							"name": "derivedColumn66"
						},
						{
							"name": "filterreferenencedetail"
						},
						{
							"name": "filter110"
						},
						{
							"name": "derivedColumn70"
						},
						{
							"name": "window99"
						},
						{
							"name": "filter122",
							"description": "filter"
						},
						{
							"name": "window100"
						},
						{
							"name": "filter123"
						},
						{
							"name": "filterEventSource"
						},
						{
							"name": "derivedColumn71"
						},
						{
							"name": "flattenlosgs"
						},
						{
							"name": "derivedColumn72"
						},
						{
							"name": "window101"
						},
						{
							"name": "filter124"
						},
						{
							"name": "window102"
						},
						{
							"name": "filterlatestevent"
						}
					],
					"scriptLines": [
						"source(output(",
						"          orderjson_1 as string,",
						"          lastmodified_date as timestamp,",
						"          customerordernumber as string,",
						"          eventTime as long,",
						"          channel as string,",
						"          eventSource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionColumn: 'customerordernumber',",
						"     partitionBy('external', 20)) ~> TempOrderData",
						"TempOrderData parse(orderjson_1 = orderjson_1 ? (orderEvent as (eventid as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          eventTime as string,",
						"          customerOrderNumber as string,",
						"          traceId as string,",
						"          metaData as (sender as string,",
						"          channel as string,",
						"          orderType as string,",
						"          traceId as string,",
						"          isSingleTopic as string,",
						"          routingInfo as string,",
						"          automationUrl as string,",
						"          idbStatus as string,",
						"          priority as string,",
						"          customerOrderNumber as string,",
						"          version as string,",
						"          isUpgradeOrder as string,",
						"          fraudResponse as string,",
						"          originalVersion as string,",
						"          fallout as string,",
						"          callback as string),",
						"          dataMap as (traceId as string),",
						"          data as (OrderTasks as (OrderTask as (ApplicationName as string,",
						"Channel as string,",
						"CreationDate as string,",
						"CustomerOrderNumber as string,",
						"LosgIds as string,",
						"OrderNumber as string,",
						"PartnerName as string,",
						"ProgramName as string,",
						"QueueId as string,",
						"QueueName as string,",
						"QueueSlaDetails as string,",
						"TaskId as string,",
						"TaskStatus as string, CamundaTaskId as string",
						")[]),",
						"          order as (createdDate as string,",
						"          updatedDate as string,",
						"          orderId as string,",
						"          specialInstructions as string,",
						"          customerOrderNumber as string,",
						"          oceOrderNumber as string,",
						"          revisionNumber as string,",
						"          requestType as string,",
						"          submittedDate as string,",
						"          type as string,",
						"          requestId as string,",
						"          version as string,",
						"          program as string,",
						"          acceptedDate as string,",
						"          isOrderPended as string,",
						"          cancelDetails as (cancelReason as string),",
						"          losgs as (cancelDetails as (cancelReason as string,cancelBy as string),actionReasonCode as string,previousProductOrderActionId as string,accountReference as string,actionReason as string,actionType as string,addpLOSCharacteristics as (acceptEULA as string,tenantAccountId as string,tenantAccountStatus as string),aPIExecutionDetails as (name as string,priority as string,action as string, loSGStatus as (subStatus as string,status as string))[],bundleGroupId as string,childOrderId as string,companyCode as string,creditPolicySecurityType as string, conflictingServiceDetailReferences as string,divisionCode as string,effectiveDate as string,engageVideoId as string,entitlementBenefit as string,fnGuId as string,fnUserId as string,fnType as string,freeDevicePolicyId as string,fulfillerName as string,fulfillerCode as string,fwCAF2AddressIndicator as string,fwiMoveInIndicator as string, userDefinedLabels as (label as string,sequence as string,value as string)[], serviceProvider as (name as string,code as string, type as string, conversationId as string, phoneNumber as string, orderConfirmationId as string,submissionStatus as string), promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[], ",
						"installationInstructions as (answers as string,question as string)[],",
						"dslLOSCharacteristics as (additionalDetails as string, parentComponentCode as string,retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string),  lineItems as( status as string,storeId as string,subscriptionId as string,taxableIndicator as string,tier as string,shippingDetailReference as string,socForPreviousDevice as string,priceList as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string, installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float)[],   internetLineItemCharacteristics as(additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, boltOnType as string,bucketAllowance as string,ipType as string, maxOverageCharge as integer, overageBucketAllowance as string, planDownloadSpeed as string, pricePerBucketAllowance as integer), voipLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, callerId as string,uverseMessaging as string),",
						"wirelessLineItemCharacteristics as (tradeInModelCode as string,additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, attDynamicTrafficManager as (additionalDetails as string, enterpriseId as string,manifestLabel as string,manifestURL as string),availabilityType as string,distributionChannelId as string,nciEligibleIndicator as string, newSalesChannelId as string,offerType as string,packetDataProtocol as (additionalDetails as string,apnName as string,packetDataProtocol5GIndicator as string,defaultPacketDataProtocolIndicator as string,defaultSNType as string,ipAddress as string,ipv6Address as string,ipversionType as string,ltePacketDataProtocolIndicator as string,onlineChargingSystemIndicator as string,packetDataProtocolType as string), partnerCode as string,simType as string, tradeInDetail as(additionalDetails as string,claimId as string,deviceClearingAgreement as string,deviceCondition as string,exchangeType as string,installmentPlanId as string,modelCode as string,nonComplianceFee as float, payupAmount as float)), iptvLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), direcTVLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), payments as (amount as float,currencyType as string, numberOfInstallment as integer, paymentTenderReference as string)[], action as string,addOnSolutionCharacteristics as (domainName as string,domainRegistration as string,parentItem as string,registrationType as string),billingCode as string,billingCodeType as string,catalogProductType as string,catalogSKUId as string, contractDetails as (amountFinanced as float,annualPercentageRate as float,balancedAmount as float,contractDisplayName as string,contractLength as integer,contractSent as string,contractSystem as string,contractType as string,downPayment as float,downPaymentPercent as float,financeCharge as float,installmentAmount as float,installmentPlanDefinition as string,installmentPlanId as string,installmentStatus as string,installmentType as string,prepaidFinanceCharge as string,payupAmount as float,payoffAmount as float,totalSalePrice as float),curbsideDelivery as string,displayName as string,  description as string,  effectiveDate as string,fees as (feeId as string,feeIdType as string,waivedIndicator as string,waivedReason as string),fulfillmentLocation as string,groupOptionId as string,inventoryStoreId as string,itemFulfillmentMethod as string,locationId as string,notes as string,operation as string,preOwnedIndicator as string,purchaseTransactionId as string,quantity as integer,",
						"          ",
						"          supplyChainDetail as (availabilityDate as string, carrier as string, claimRMANumber as string, exchangeDocumentId as string, exchangeOrderId as string, orderDocumentDetail as (activity as string, location as string, orderId as string), price as float, quantityBackOrdered as integer, quantityCanceled as integer, quantityOrdered as integer, quantityShipped as integer, quantityToShip as integer, shippedDate as string, trackingNumber as string),                                      id as string,                                                                             productCode as string,                                         productSKU as string,                                         productType as string,productSubType as string,                                                                          sequence as string,                                         systemName as string,                                      ",
						"          hardGood as(availabilityDate as string, biller as string, byodIndicator as string, cardSerialNumber as string, deliveryByDate as(fromDate as string,toDate as string), deliveryPromiseNote as (english as string,spanish as string), eid as string,fieldId as string, hardGoodType as string,iccId as string, make as string, manufacturerCode as string, model as string, networkAccessDeviceType as string, preOrderIndicator as string, productImageUrl as string, serialNumber as string, shipmentCommitDate as (fromDate as string,toDate as string), shippedHotIndicator as string, whiteGloveDeliveryPartner as string, wirelessHardGoodCharacteristics as (connectionType as string,deviceCategory as string, equipmentType as string, equipmentUpgrade as string, imei as string, imeiType as string, internationalMobileSubscriberIdentity as string,phoneType as string, techType as string, usoc as string, zodiacSequenceNumber as string)),                                         additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],                                     price as(additionalDetails as string,amount as float, baseAmount as float,creditFeeType as string, currencyType as string,installmentEligibility as string,msrp as float,priceType as string,total as float,taxDetail as string),productGroupReferences as string,                                         promotionReferences as string)[],                               price as(additionalDetails as string, creditFeeType as string ,installmentEligibility as string, msrp as string, taxDetail as string, amount as float,                                         baseAmount as float,                                         currencyType as string,                                         priceType as string,                                         total as float)[],                               priceSummaryList as(amount as float,                                                   currencyType as string,                                                   priceType as string,                                                   total as float,                                                   taxSummary as string)[],                               ",
						"          ",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as (type as string, value as string),urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"          ",
						"          ",
						"          ,                                ",
						"          ",
						"          losgStatus as(status as string, subStatus as string, fallout as string),  internetLOSCharacteristics as(additionalDetails as string,categoryType as string,discountedInternetIndicator as string, discountedInternetAdditionalAllowance as string, gatewayCTN as string, gatewayCTNStatus as string, internetProgramType as string, internetProtocolDigitalSubscriberLineAccess as string, internetNetworkProvider as string, retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string,parentComponentCode as string, primaryNetworkType as string),subscriberName as (emailAddress as string,   middleInitial as string,   prefix as string,  suffix as string, title as string ,    preferredContactMethod as string, previousLegalLastName as string, legalLastName as string, legalFirstName as string,                                        firstName as string,                                                   id as string,                                                   lastName as string,   additionalContactPhones as string,     ",
						"          primaryContactPhones as( extension as string,",
						"          contactPhoneType as string,                                                                            phoneNumber as string,                                                                          ",
						"               consentDetails as string)[]),                        dealerCode as string,                               fulfillmentMethod as string,                               id as string,                               installType as string,                               losgType as string,market as string,migrationIndicator as string,migrationSource as string,name as string,notes as string,preferredAreaCode as string,priceCode as string,primaryIndicator as string, productCategory as string,productOfferingId as string,productOrderActionId as string,productOrderActionReference as string,profileCode as string,rateType as string,requestedExecutionDate as string,salesOfferId as string,                             schedulingDetailReference as string,serviceArea as string,serviceAreaName as string,subMarket as string,sunsetDate as string,transferSubscriberDetail as (fromBillingAccountNumber as string,fromFAN as string,fromMobileNumber as string), sequence as string,                               serviceQualificationReference as string,                               type as string,vendorAccountId as string,                 billingSystemId as string,      iptvLOSCharacteristics as (freeSTBReceiverCount as integer, parentComponentCode as string),voipLOSCharacteristics as (reservedTelephoneNumber as string, e911Detail as(homeAlarmSystem as string, noMatchFound as string, id as string , termsAndCondition911 as (accepted as string,agreementText as string,agreementType as string,agreementURL as string,category as string,documentName as string,id as string,orderLevelIndicator as string,tncId as string,tncKey as string,tncRecordingOff as string,version as string, timestamp as string), address as string),  directoryListing as (additionalDetails as string,designation as string, name as string, title2 as string,parentComponentCode as string,subscriberName as string, omitAddressIndicator as string, listing as (address as string,listingType as string,listingCategory as string,listBy as string,releaseDetailForBillingIndicator as string) )[]),  wirelessLOSCharacteristics as (accountConversionStatus as string, activationDate as string, availabilityDate as string, billingSystemId as string, calculateTaxIndicator as string,coPayData as (addendDateAndTime as string,addendVersion as string, allowanceAmount as float, cancelCTN as string, enrollingCTN as string,receivingBAN as string,receivingFAN as string ), connectedCarDetail as (make as string, model as string, trim as string, vin as string, year as string, vehicleManufacturer as string), crossUpgradeIndicator as string, curbsideDelivery as string,inventoryStoreId as string, mobileNumber as string,paymentId as string, preOrderIndicator as string , primarySharedPlanIndicator as string,shippedHotIndicator as string, shoppingZipCode as string, storeId as string, subscriberCrossmarketIndicator as string, subscriptionClass as string , tradeInQuoteId as string, upgradeDetail as (relatedMobileNumber as string, relationship as string),upgradeQualificationDetails as (approvalNumber as string,contractExtended as string,deviceType as string,discountUOM as string,maximumMRC as integer,minimumCommitment as string,minimumMRC as integer,newAEUCheckerIndicator as string,offerCategory as string,policyCategory as string,priceList as string,qualificationLevel as string,qualificationMessage as string,qualificationType as string,upgradeEligibilityDate as string,upgradeFeeWaivedIndicator as string)[],splitLiabilityData as (addendDateAndTime as string,addendVersion as string,cancelCTN as string,enrollingCTN as string,oneTimeChargeIndicator as string,splitLiabilityValueIndicator as string,targetBAN as string,targetFAN as string,telecomManagerEmailAddress as string),manageCallList as (action as string,companyAListName as string,companyCTNList as string,contactCTN as string,id as string,overrideWithCompanyAListIndicator as string)), termsAndConditionAccepted as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncld as string, tncKey as string, tncRecordingOff as string, version as string )[], compensation as (repDetails as (dealerCode as string,repAction as string,repId as string,salesCode as string,type as string)[],submittedBy as string),additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[], ",
						"               numberPortDetail as (currentServiceProviderId as string ,customerCode as string, disconnectAcknowledged as (accepted as string,deviceInstallAgreementType as string,econsentAgreementType as string, timestamp as string,version as string),e911ServiceRoutingNumber as string,lightspeedLocalRoutingNumber as string,lastFourOfSSN as string,localExchangeRoutingGuideLocalRoutingNumber as string, name as string, nonATTPortIn as string,ospAccountNumber as string,ospName as string, pinOrPassword as string, portEligibility as string,portInType as string, portRequestNumber as string,portStatus as string,portTelephoneNumber as string,shipmentInfoUpdatedIndicator as string, portstatusReasonCode as string, portRequestLineStatus as string, portstatusReasonDescription as string   ,previousAddress as string,shadowLocalRoutingNumber as string,ssn as string,taxId as string), direcTVLOSCharacteristics as( dealerId as string,freeSTBReceiverCount as string, hasMoreThanThreeFloors as string, marketingSourceCode as string,moveInOrder as string, offerLanguage as string, parentComponentCode as string, serviceAgreement as string),",
						"               externalOrderReferences as (systemName as string,systemOrderReference as string, systemOrderReferenceType as string)[]",
						"               ",
						"               )[],",
						"          moveDetail as (additionalDetails as string,",
						"          actualDisconnectDate as string,",
						"          fromBillingAddress as string,",
						"          fromServiceAddress as string,",
						"          fromTelephoneNumber as string,",
						"          fullyAuthenticatedIndicator as string),",
						"          eCommercePartner as (additionalDetails as string,",
						"          affiliateName as string,",
						"          code as string,",
						"          name as string,",
						"          email as string,",
						"          phoneNumber as string,",
						"          referredDate as string,",
						"          type as string),",
						"          employeeDetail as (centralizedTableId as string,",
						"          class as string,",
						"          status as string,",
						"          uid as string),",
						"          deliveryPromiseNote as (english as string,",
						"          spanish as string),",
						"          integratedOffers as (category as string,ioId as string,ioSequence as string, qualifyingServiceDetails as string)[],",
						"          fleetDetail as (callBackDateTime as string,",
						"          customerAssignToId as string,",
						"          lineCount as string,",
						"          locationCount as string,",
						"          projectBillTo as string,",
						"          projectType as string,",
						"          timeZone as string,",
						"          companyName as string,",
						"          companyCreationIndicator as string,",
						"          erpAccount as string,",
						"          shipToId as string,",
						"          shippingFeeId as string),",
						"          loginProfile as (email as string,",
						"          orderInitiator as string,",
						"          profileId as string,",
						"          userGuId as string,",
						"          userId as string),",
						"          miscellaneousDetails as (code as string,parentType as string,type as string,value as string)[],",
						"          salesAgent as (agentCode as string,",
						"          location as string,",
						"          salesCode as string,",
						"          uid as string),",
						"          paymentTenders as ( paymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string,paymentMethodId as string,ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as string, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),additionalDetails as string, depositOption as string, fixedAmount as float, id as string, selectedOptionId as string,sequence as string, collectedInOtherSystem as string)[],",
						"          accounts as (provisioningSystems as (provisioningSystem as (systemName as string,systemOrderReference as string)[]),contractAcceptance as (acceptance as string,contractLength as string,versionNumber as string), creditAlert as (fraudAlert as string, generalMessage as string), ctnValidatedIndicator as string,customerCode as string,delinquentAccountIndicator as string, electronicLetterOfAuthorization as (electronicDisclosureAuthorization as string, internetServiceAuthorization as string,letterOfAuthorizationURL as string, localServiceAuthorization as string, localTollProviderAuthorization as string, longDistanceServiceProvider as string), emailValidatedIndicator as string, existingAutoBillStatus as string, existingAutoBillIndicator as string, landLineNumber as string, liabilityType as string, marketingSourceCode as string, mdmProfileSetting as (additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],profileName as string), partnerJointBillType as string, pmoIndicator as string, priceCode as string, priceMatch as string, subMarket as string, targetCTN as string, thirdPartyCombinedBill as string, winBackIndicator as string, consentToCCIndicator as string ,bankingPartner as (customerId as string, name as string), bigData as string, billPaymentDueDate as string, cardOnFileStatus as string, conflictingServiceDetails as (accountNumber as string, btn as (customerCode as string,paymentAmount as string,tn as string), changeType as string, customerCode as string, disconnectDate as string , dslmemberDetail as (authenticatedIndicator as string ,memberId as string,reuseDSLMemberIdIndicator as string),id as string, legacyExistIndicator as string, productDetails as (action as string, packageCode as string, previousProductTransportType as string,productCode as string,productDescription as string)[], referallOfCallsIndicator as string , region as string, state as string)[], accountCrossmarketIndicator as string, acpEligibility as (acpTransactionId as string, acpClassification as string), anchorCTN as string, unifiedAccount as(convergeOrderIndicator as string, convergeValidationIndicator as string, convergedBilling as string,premierIndicator as string, unifiedAccountDiscount as string, unifiedAccountExisting as string,unifiedAccountPending as string, unifiedAccountRebate as string, unifiedAccountReference as string, unifiedAccountReward as string)     ,negotiateConflictCustomer as(conflictCustomerType as string, conflictLandlordDetail as (approvalDate as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string, phoneNumberType as string), landlordApproval as string), existingCustomerDetail as (billingTelephoneNumber as string,billingAccountNumber as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string,phoneNumberType as string),moveOrCeaseOrderNumber as string)),   cardOnFilePaymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as string, tn as string), cash as (paymentAmount as string,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as string,paymentToken as string), store as (last4Digits as string, paymentAmount as string, profileOwnerId as string),                       ePaymentMethod as( address as string , ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),                    accountCategory as string,                          accountSubCategory as string,                          accountSubType as string,                          accountType as string,                          autoPayReason as string,                          b2bReference as string,                          billingDeliveryPreference as string,                          billingLanguagePreference as string,                          businessAccountName as string,                          cpni as string,                          ebillReason as string,                          enterpriseType as string,                          gigaPower as string,                          id as string,                          langId as string,                          market as string,                          passCode as string,                          paymentArrangement as string,                          sequence as string,                          spokenLanguagePreference as string,                         billingAccountNumber as string, billingAccountTelephoneNumber as string,   ",
						"          primaryCTN as  string,",
						"          additionalDetails as string,                       ",
						"          autopayPaymentMethod as( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string, paymentMethodId as string,  ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),",
						"          ",
						"billingDetail as(billingType as string,",
						"accountStatus as string,",
						"nextBillingCycleDate as string,                                                   ",
						"          address as(additionalDetails as  string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),                                                                  unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),                                                  ",
						"authentication as(dob as string,driversLicense as (licenseExpirationDate as string,licenseNumber as string,state as string),employerDetail as (employerName as string,employerPhoneNumber as string),federalTaxId as string,gender as string,lastFourOfSSN as string,motherMaidenName as string,                                                                       ssn as string,ssnRefusedIndicator as string,stateId as (idNumber as string,state as string),                                                                       securityVerification as(                                                                           pin as string,                                                                            securityAnswer as string,                                                                            securityQuestion as string)),",
						"previousAddress as string,previousPhoneNumber as string,",
						"  name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]) )[],   ",
						"",
						"          businessAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                ",
						"          parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),",
						"          unparsedAddress as(          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),",
						"          ",
						"          creditCheck as( writeOffDate as string, creditReferenceDate as string,currentAccountBalance as float, currentDeniablePastDueAmount as string, currentNonDeniablePastDueAmount as string,currentNonRegulatedPastDueAmount as string,currentPastDueAmount as string,currentRegulatedPastDueAmount as string, customerApprovalSystemTransactionId as string, debtPaidStatus as string, depositAmount as string, depositStatus as string, electronicIdVerifierLaunched as string, electronicIdVerifierRequired as string,  electronicIdVerifierResults as string,exchangeListFound as string,expressPayDetailHeld as string, finalBillAccounts as string, ignoreDeposit as string, minimumAmountDue as string , nonRefundableCreditFee as string, numberApprovedLines as string, numberLinesRequired as string, productsInclude as string, proprietarySegment as string, reasonCode as string, reasonCodeDescription as string, safeScanAlertIndicator as string, safeScanPassIndicator as string, writeOffAmount as string, addAccountGUId as string,applicationApprovalDate as string, applicationExpiresDate as string,creditInquiryOpen as string,creditPolicyToken as string,creditScoreResult as string, creditStatus as string,creditVerified as string, applicationNumber as string,    debtAccounts as (accountBalance as string, affiliateId as string, customerAgreementCode as string, debtAccountNumber as string, disconnectDate as string, individualCustomerKey as string, minimumAmountDue as string)[],                                creditBand as string,                                    creditCheckManagementTransactionId as string,                                    creditCheckRanIndicator as string,                                    creditClass as string,                                    depositRequired as string,                                    electronicIdNumber as string,                                    individualCustomerKey as string,                                    singleCreditQueryWirelessIndicator as string,                                    treatmentCode as string,                                    treatmentMessage as string),",
						"          ",
						"                                ",
						"",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),   ",
						"          ",
						"          serviceFacilityQualifications as (additionalDetails as string, cpeRequiredIndicator as string, facilityCheck as string,  gfastDeviceWireType as string, potsAvailableIndicator as string,                                      dslAvailableIndicator as string,                                         frequency17MhzIndicator as string,                                         id as string,                                         preferredNetworkType as string,                                         profileCode as string,                                         vectoringIndicator as string,                                        address as string)[])[],",
						"          additionalDetails as (type as string, value as string, code as string, parentType as string, sequence as integer)[],",
						"          debtAccounts as (accountCategory as string, accountSubCategory as string, affiliateId as string,  amount    as string, debtAccountNumber    as string, debtPaidStatus    as string, id   as string, paymentMethodReference   as string, provider   as string, settledBy   as string, system   as string, systemDivision    as string)[],",
						"          employeeReferralDetail as (appId as string,",
						"          employeeUId as string,",
						"          packageId as string),",
						"          relatedParty as (endDateTime as string, id as string,role as string, startDateTime as string, type as string, name as string)[],",
						"          b2bDetail as string,",
						"          contactDetail as (additionalDetails as string,",
						"          additionalEmailRecipients as string,",
						"          authorizedContacts as string,",
						"          orderConfirmationByEmailPermissionIndicator as string,",
						"          orderPickUpCTN as string,",
						"          permissionForOutboundCallIndicator as string,",
						"          personalDetail as (additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          id as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          primaryContactPhones as (consentDetails as string,",
						"contactPhoneType as string,",
						"smsValidatedIndicator as string,",
						"extension as string,",
						"phoneNumber as string)[],",
						"          suffix as string,",
						"          title as string),",
						"          preferredContactMethod as string,",
						"          preferredTimeOfDayForContact as string,",
						"          primaryEmailAddress as string,",
						"          productUpdatesByEmailPermissionIndicator as string,",
						"          secondaryEmailAddress as string,",
						"          timeZone as string,",
						"          unpublishedContactByPhonePermissionIndicator as string),",
						"          creditPolicy as (additionalDetails as string,",
						"          creditPolicyTransactionId as string,",
						"          crsmOnFlag as string,",
						"          previousCreditPolicyTransactionId as string,",
						"          policyAcceptedIndicator as string,",
						"          uucpStatus as string),",
						"          installmentDetail as (multiIndicator as string,",
						"          numberOfInstallments as string),",
						"          priceList as (additionalDetails as string,amount as float,  baseAmount as float,    creditFeeType as string,                              currencyType as string,      installmentEligibility as string,      msrp as float,     taxDetail as string,  total as float,                priceType as string)[],",
						"          priceSummaryList as (amount as float,                                    currencyType as string,                                    priceType as string,                                    total as float,                                    taxSummary as string)[],",
						"          productGroups as (additionalDetails as string, id as string,                                         name as string,                                         sequence as integer,                                         type as string,                                         packageCharacteristics as(description as string, code as string, type as string),",
						"          discountOffer as string,  characteristics as (id as string),",
						"          sharedPlanCharacteristics as (",
						"          dataGroupId as string,",
						"familyGroupId as string,",
						"groupReferencesCode as string,",
						"planType as string,",
						"primarySubscriberNumber as string))[],",
						"          promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[],",
						"          referenceDetail as (commonOrderIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          fraudDetectionDetail as (additionalDetails as (type as string, parentType as string, code as string, value as string, sequence as integer)[],",
						"          authenticationRequestId as string,",
						"          efcCallIndicator as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string),",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          falloutDetails as (code as string, dateTime as string, description as string, operation as string)[],",
						"          encryptedIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          bulkIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          associatedRequestID as string),",
						"          schedulingDetails as ( serviceLevel as string, timeZone as string, valueSegmentationTier as string,",
						"          landlordDetail as (landlordName as string,landlordPermission as string,landlordPhoneNumber as string),",
						"          nffl as (fulfillerName as string, fulfillerTN as string, nfflFlag as string), ",
						"          preference as string, reservationId as string, scheduleType as string, dispatchType as string, deferredInstallationDuration as string, eventCode as string, eventCodeEnteredManuallyIndicator as string, ",
						"          installationPartner as(partnerName as string, projectPurchaseOrderAmount as string , projectPurchaseOrderDate as string , projectPurchaseOrderNumber as string, projectBilling as string), appointmentComment as string, bestTimeToReach as string, billingInstallmentsIndicator as string, businessName as string, ",
						"          connecTechInstallationOptions as string,",
						"          additionalDetails as string,id as string,                                                   installType as string,                                                   realTimeCalendarIndicator as string,                                                   scheduleAsSoonAsPossibleIndicator as string,                                                   ",
						"          ",
						"          ",
						"           name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"",
						"          scheduleByDayAndTime as (anyDayOfTheWeek as string,friday as string, monday as string, saturday as string, sunday as string, thursday as string, tuesday as string , wednesday as string),",
						"          actualSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string),",
						"          confirmedSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string))[],",
						"          shippingDetails as (",
						"          additionalDetails as (code as string,parentType as string,type as string,value as string,sequence as integer)[],",
						"               billingCode as string,carrierPreference as string,id as string,sequence as integer,",
						"               ",
						"               price as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string,installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float),",
						"               recipientName as (",
						"                         ",
						"                         emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"                         ",
						"                         ",
						"                         ",
						"                    shipmentCommitDate as (fromDate as string,toDate as string),shippingCode as string,shippingMethod as string,shippingPriceCode as string,",
						"                    ",
						"               address as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,clli8 as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"               ",
						"               ",
						"               ",
						"                    )[],",
						"          singleDispatchDetail as (eligibleIndicator as string,",
						"          geoAreaAvailableIndicator as string,",
						"          satelliteTVOnlyEligibleIndicator as string),",
						"          sourceDetail as (application as string,",
						"          expressCheckOutIndicator as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetail as (groupId as string,",
						"          groupName as string,",
						"          resourceCenterTicketNumber as string),",
						"          responseMode as string,",
						"          sequence as integer,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          region as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          zip as string,",
						"          additionalDetails as (code as string, type as string, value as string, parentType as string, sequence as integer )[]),",
						"          statusDetail as (status as string,",
						"          subStatus as string,",
						"          fallout as (code as string,",
						"          dateTime as string,",
						"          description as string,",
						"          operation as string)),",
						"          termsAndConditions as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncld as string, tncKey as string, tncRecordingOff as string, version as string )[]),",
						"          transactionLogs as (comments as string,",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          updateInfos as string,",
						"          channel as string,",
						"          orderStatus as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          changedLosgReferenceId as string,",
						"          recordId as string,",
						"          queueName as string,",
						"          parentOrderId as string,",
						"          startTime as string,",
						"          endTime as string,",
						"          transactionId as string,",
						"          orderId as string,",
						"          losgs as (losgReferenceId as string,                                                       service as string,                                                       serviceType as string,                                                       status as string,                                                       subStatus as string,wirelessNumber as string)[])[],",
						"          Errors as (Error as (ErrorCode as string,ErrorDescription as string , Reference as ( IdRef as string, Type as string))[])))),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJsonOrderData",
						"filterlatestevent select(mapColumn(",
						"          OrderData = orderjson_1.orderEvent.data.order,",
						"          customerOrderNumber = customerordernumber,",
						"          ordertask_channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          lastmodified_date,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          dc_eventtime",
						"     ),",
						"     partitionBy('roundRobin', 8),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderData",
						"selectOrderData select(mapColumn(",
						"          createdDate = OrderData.createdDate,",
						"          updatedDate = OrderData.updatedDate,",
						"          customerOrderNumber,",
						"          oceOrderNumber = OrderData.oceOrderNumber,",
						"          revisionNumber = OrderData.revisionNumber,",
						"          requestType = OrderData.requestType,",
						"          submittedDate = OrderData.submittedDate,",
						"          type = OrderData.type,",
						"          requestId = OrderData.requestId,",
						"          version = OrderData.version,",
						"          program = OrderData.program,",
						"          acceptedDate = OrderData.acceptedDate,",
						"          isOrderPended = OrderData.isOrderPended,",
						"          b2bDetail = OrderData.b2bDetail,",
						"          numberOfInstallments = OrderData.installmentDetail.numberOfInstallments,",
						"          status = OrderData.statusDetail.status,",
						"          subStatus = OrderData.statusDetail.subStatus,",
						"          orderId = OrderData.orderId,",
						"          ordertask_channel,",
						"          specialInstructions = OrderData.specialInstructions,",
						"          lastmodified_date,",
						"          sourcedetail_channel,",
						"          installmentMultiIndicator = OrderData.installmentDetail.multiIndicator,",
						"          dc_eventtime,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeOrderData",
						"FinalizeOrderData derive(submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          channel = coalesce(ordertask_channel,sourcedetail_channel),",
						"          updatedDate = toTimestamp(toLong(toString(byName('updatedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> ConvertDateTime",
						"ConvertDateTime alterRow(upsertIf(true())) ~> AlterRowOrderData",
						"selectOrderData foldDown(unroll(OrderData.losgs, OrderData.losgs),",
						"     mapColumn(",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          accountReference = OrderData.losgs.accountReference,",
						"          actionReasonCode = OrderData.losgs.actionReasonCode,",
						"          previousProductOrderActionId = OrderData.losgs.previousProductOrderActionId,",
						"          actionReason = OrderData.losgs.actionReason,",
						"          actionType = OrderData.losgs.actionType,",
						"          acceptEULA = OrderData.losgs.addpLOSCharacteristics.acceptEULA,",
						"          tenantAccountId = OrderData.losgs.addpLOSCharacteristics.tenantAccountId,",
						"          tenantAccountStatus = OrderData.losgs.addpLOSCharacteristics.tenantAccountStatus,",
						"          billingSystemId = OrderData.losgs.billingSystemId,",
						"          bundleGroupId = OrderData.losgs.bundleGroupId,",
						"          childOrderId = OrderData.losgs.childOrderId,",
						"          companyCode = OrderData.losgs.companyCode,",
						"          creditPolicySecurityType = OrderData.losgs.creditPolicySecurityType,",
						"          conflictingServiceDetailReferences = OrderData.losgs.conflictingServiceDetailReferences,",
						"          iptvLOSCharacteristics = OrderData.losgs.iptvLOSCharacteristics,",
						"          dealerCode = OrderData.losgs.dealerCode,",
						"          divisionCode = OrderData.losgs.divisionCode,",
						"          effectiveDate = OrderData.losgs.effectiveDate,",
						"          engageVideoId = OrderData.losgs.engageVideoId,",
						"          entitlementBenefit = OrderData.losgs.entitlementBenefit,",
						"          fnGuId = OrderData.losgs.fnGuId,",
						"          fnUserId = OrderData.losgs.fnUserId,",
						"          fnType = OrderData.losgs.fnType,",
						"          freeDevicePolicyId = OrderData.losgs.freeDevicePolicyId,",
						"          fulfillmentMethod = OrderData.losgs.fulfillmentMethod,",
						"          fulfillerName = OrderData.losgs.fulfillerName,",
						"          fulfillerCode = OrderData.losgs.fulfillerCode,",
						"          fwCAF2AddressIndicator = OrderData.losgs.fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator = OrderData.losgs.fwiMoveInIndicator,",
						"          Losg_id = OrderData.losgs.id,",
						"          installType = OrderData.losgs.installType,",
						"          losgType = OrderData.losgs.losgType,",
						"          name = OrderData.losgs.name,",
						"          productCategory = OrderData.losgs.productCategory,",
						"          schedulingDetailReference = OrderData.losgs.schedulingDetailReference,",
						"          sequence = OrderData.losgs.sequence,",
						"          serviceQualificationReference = OrderData.losgs.serviceQualificationReference,",
						"          subscriberName = OrderData.losgs.subscriberName,",
						"          type = OrderData.losgs.type,",
						"          wirelessLOSCharacteristics = OrderData.losgs.wirelessLOSCharacteristics,",
						"          internetLOSCharacteristics = OrderData.losgs.internetLOSCharacteristics,",
						"          lineItems = OrderData.losgs.lineItems,",
						"          serviceProvider = OrderData.losgs.serviceProvider,",
						"          price = OrderData.losgs.price,",
						"          priceSummaryList = OrderData.losgs.priceSummaryList,",
						"          serviceAddress = OrderData.losgs.serviceAddress,",
						"          losgStatus = OrderData.losgs.losgStatus,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          termsAndConditionAccepted = OrderData.losgs.termsAndConditionAccepted,",
						"          voipLOSCharacteristics = OrderData.losgs.voipLOSCharacteristics,",
						"          numberPortDetail = OrderData.losgs.numberPortDetail,",
						"          compensation = OrderData.losgs.compensation,",
						"          additionalDetails = OrderData.losgs.additionalDetails,",
						"          direcTVLOSCharacteristics = OrderData.losgs.direcTVLOSCharacteristics,",
						"          externalOrderReferences = OrderData.losgs.externalOrderReferences,",
						"          dslLOSCharacteristics = OrderData.losgs.dslLOSCharacteristics,",
						"          installationInstructions = OrderData.losgs.installationInstructions,",
						"          promotions = OrderData.losgs.promotions,",
						"          userDefinedLabels = OrderData.losgs.userDefinedLabels,",
						"          market = OrderData.losgs.market,",
						"          migrationIndicator = OrderData.losgs.migrationIndicator,",
						"          migrationSource = OrderData.losgs.migrationSource,",
						"          notes = OrderData.losgs.notes,",
						"          preferredAreaCode = OrderData.losgs.preferredAreaCode,",
						"          priceCode = OrderData.losgs.priceCode,",
						"          primaryIndicator = OrderData.losgs.primaryIndicator,",
						"          productOfferingId = OrderData.losgs.productOfferingId,",
						"          productOrderActionId = OrderData.losgs.productOrderActionId,",
						"          productOrderActionReference = OrderData.losgs.productOrderActionReference,",
						"          profileCode = OrderData.losgs.profileCode,",
						"          rateType = OrderData.losgs.rateType,",
						"          requestedExecutionDate = OrderData.losgs.requestedExecutionDate,",
						"          salesOfferId = OrderData.losgs.salesOfferId,",
						"          serviceArea = OrderData.losgs.serviceArea,",
						"          serviceAreaName = OrderData.losgs.serviceAreaName,",
						"          subMarket = OrderData.losgs.subMarket,",
						"          sunsetDate = OrderData.losgs.sunsetDate,",
						"          vendorAccountId = OrderData.losgs.vendorAccountId,",
						"          transferfromBAN = OrderData.losgs.transferSubscriberDetail.fromBillingAccountNumber,",
						"          transferfromFAN = OrderData.losgs.transferSubscriberDetail.fromFAN,",
						"          transferfromMobileNumber = OrderData.losgs.transferSubscriberDetail.fromMobileNumber,",
						"          directoryListing = OrderData.losgs.voipLOSCharacteristics.directoryListing",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderLosgs",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          losg_id = Losg_id,",
						"          losgSequence = sequence,",
						"          accountReference,",
						"          actionReason,",
						"          previousProductOrderActionId,",
						"          actionReasonCode,",
						"          actionType,",
						"          acceptEULA,",
						"          tenantAccountId,",
						"          tenantAccountStatus,",
						"          billingSystemId,",
						"          bundleGroupId,",
						"          childOrderId,",
						"          companyCode,",
						"          creditPolicySecurityType,",
						"          dealerCode,",
						"          divisionCode,",
						"          effectiveDate,",
						"          engageVideoId,",
						"          entitlementBenefit,",
						"          fnGuId,",
						"          fnUserId,",
						"          fnType,",
						"          freeDevicePolicyId,",
						"          fulfillmentMethod,",
						"          fulfillerName,",
						"          fulfillerCode,",
						"          fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator,",
						"          installType,",
						"          status = losgStatus.status,",
						"          subStatus = losgStatus.subStatus,",
						"          fallout = losgStatus.fallout,",
						"          losgType,",
						"          market,",
						"          migrationIndicator,",
						"          migrationSource,",
						"          name,",
						"          notes,",
						"          preferredAreaCode,",
						"          priceCode,",
						"          primaryIndicator,",
						"          productCategory,",
						"          productOfferingId,",
						"          productOrderActionId,",
						"          productOrderActionReference,",
						"          profileCode,",
						"          rateType,",
						"          requestedExecutionDate,",
						"          salesOfferId,",
						"          schedulingDetailReference,",
						"          serviceArea,",
						"          serviceAreaName,",
						"          serviceQualificationReference,",
						"          subMarket,",
						"          sunsetDate,",
						"          type,",
						"          vendorAccountId,",
						"          transferfromBAN,",
						"          transferfromFAN,",
						"          transferfromMobileNumber,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderLosgs",
						"coallosgid foldDown(unroll(lineItems, lineItems),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          action = lineItems.action,",
						"          addOnDomainName = lineItems.addOnSolutionCharacteristics.domainName,",
						"          addOnDomainRegistration = lineItems.addOnSolutionCharacteristics.domainRegistration,",
						"          addOnParentItem = lineItems.addOnSolutionCharacteristics.parentItem,",
						"          addOnRegistrationType = lineItems.addOnSolutionCharacteristics.registrationType,",
						"          billingCode = lineItems.billingCode,",
						"          billingCodeType = lineItems.billingCodeType,",
						"          catalogProductType = lineItems.catalogProductType,",
						"          catalogSKUId = lineItems.catalogSKUId,",
						"          contractAmountFinanced = lineItems.contractDetails.amountFinanced,",
						"          contractAnnualPercentageRate = lineItems.contractDetails.annualPercentageRate,",
						"          contractBalancedAmount = lineItems.contractDetails.balancedAmount,",
						"          contractDisplayName = lineItems.contractDetails.contractDisplayName,",
						"          contractLength = lineItems.contractDetails.contractLength,",
						"          contractSent = lineItems.contractDetails.contractSent,",
						"          contractSystem = lineItems.contractDetails.contractSystem,",
						"          contractType = lineItems.contractDetails.contractType,",
						"          contractDownPayment = lineItems.contractDetails.downPayment,",
						"          contractDownPaymentPercent = lineItems.contractDetails.downPaymentPercent,",
						"          contractFinanceCharge = lineItems.contractDetails.financeCharge,",
						"          contractInstallmentAmount = lineItems.contractDetails.installmentAmount,",
						"          contractInstallmentPlanDef = lineItems.contractDetails.installmentPlanDefinition,",
						"          contractInstallmentPlanId = lineItems.contractDetails.installmentPlanId,",
						"          contractInstallmentStatus = lineItems.contractDetails.installmentStatus,",
						"          contractInstallmentType = lineItems.contractDetails.installmentType,",
						"          contractPrepaidFinanceCharge = lineItems.contractDetails.prepaidFinanceCharge,",
						"          contractPayupAmount = lineItems.contractDetails.payupAmount,",
						"          contractPayoffAmount = lineItems.contractDetails.payoffAmount,",
						"          contractTotalSalePrice = lineItems.contractDetails.totalSalePrice,",
						"          curbsideDelivery = lineItems.curbsideDelivery,",
						"          description = lineItems.description,",
						"          effectiveDate = lineItems.effectiveDate,",
						"          feeId = lineItems.fees.feeId,",
						"          feeIdType = lineItems.fees.feeIdType,",
						"          feeWaivedIndicator = lineItems.fees.waivedIndicator,",
						"          feeWaivedReason = lineItems.fees.waivedReason,",
						"          fulfillmentLocation = lineItems.fulfillmentLocation,",
						"          displayName = lineItems.displayName,",
						"          groupOptionId = lineItems.groupOptionId,",
						"          inventoryStoreId = lineItems.inventoryStoreId,",
						"          itemFulfillmentMethod = lineItems.itemFulfillmentMethod,",
						"          LineItem_id = lineItems.id,",
						"          locationId = lineItems.locationId,",
						"          notes = lineItems.notes,",
						"          operation = lineItems.operation,",
						"          preOwnedIndicator = lineItems.preOwnedIndicator,",
						"          productCode = lineItems.productCode,",
						"          productSKU = lineItems.productSKU,",
						"          productType = lineItems.productType,",
						"          quantity = lineItems.quantity,",
						"          sequence = lineItems.sequence,",
						"          systemName = lineItems.systemName,",
						"          hardGood = lineItems.hardGood,",
						"          additionalDetails = lineItems.additionalDetails,",
						"          internetLineItemCharacteristics = lineItems.internetLineItemCharacteristics,",
						"          price = lineItems.price,",
						"          productGroupReferences = lineItems.productGroupReferences,",
						"          promotionReferences = lineItems.promotionReferences,",
						"          productSubType = lineItems.productSubType,",
						"          purchaseTransactionId = lineItems.purchaseTransactionId,",
						"          payments = lineItems.payments,",
						"          lastmodified_date,",
						"          losgsequence = sequence,",
						"          dc_eventtime,",
						"          supplyChainDetail = lineItems.supplyChainDetail,",
						"          supplyChainDetail_trackingNumber = lineItems.supplyChainDetail.trackingNumber,",
						"          hardgood_shipmentCommitDate_fromDate = lineItems.hardGood.shipmentCommitDate.fromDate,",
						"          hardgood_DeliveryByDate_fromDate = lineItems.hardGood.deliveryByDate.fromDate,",
						"          direcTVLineItemCharacteristics = lineItems.direcTVLineItemCharacteristics,",
						"          voipLineItemCharacteristics = lineItems.voipLineItemCharacteristics,",
						"          iptvLineItemCharacteristics = lineItems.iptvLineItemCharacteristics,",
						"          wirelessLineItemCharacteristics = lineItems.wirelessLineItemCharacteristics,",
						"          priceList = lineItems.priceList,",
						"          shippingDetailReference = lineItems.shippingDetailReference,",
						"          socForPreviousDevice = lineItems.socForPreviousDevice,",
						"          status = lineItems.status,",
						"          storeId = lineItems.storeId,",
						"          subscriptionId = lineItems.subscriptionId,",
						"          taxableIndicator = lineItems.taxableIndicator,",
						"          tier = lineItems.tier",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsLineItems",
						"selectOrderData select(mapColumn(",
						"          customerOrderNumber,",
						"          sourceDetail = OrderData.sourceDetail,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderSourceDetail",
						"selectOrderSourceDetail select(mapColumn(",
						"          customerOrderNumber,",
						"          application = sourceDetail.application,",
						"          browserId = sourceDetail.browserId,",
						"          channel = sourceDetail.channel,",
						"          city = sourceDetail.city,",
						"          clientIP = sourceDetail.clientIP,",
						"          clientType = sourceDetail.clientType,",
						"          countryCode = sourceDetail.countryCode,",
						"          county = sourceDetail.county,",
						"          externalOrderSource = sourceDetail.externalOrderSource,",
						"          locale = sourceDetail.locale,",
						"          region = sourceDetail.region,",
						"          salesChannel = sourceDetail.salesChannel,",
						"          salesChannelType = sourceDetail.salesChannelType,",
						"          sender = sourceDetail.sender,",
						"          zip = sourceDetail.zip,",
						"          lastmodified_date,",
						"          expressCheckOutIndicator = sourceDetail.expressCheckOutIndicator,",
						"          mediaSource = sourceDetail.mediaSource,",
						"          originatingApplication = sourceDetail.originatingApplication,",
						"          initiatingApplication = sourceDetail.initiatingApplication,",
						"          premierDetailGroupId = sourceDetail.premierDetail.groupId,",
						"          premierDetailGroupName = sourceDetail.premierDetail.groupName,",
						"          premierDetailGroupTick = sourceDetail.premierDetail.resourceCenterTicketNumber,",
						"          responseMode = sourceDetail.responseMode,",
						"          sequence = sourceDetail.sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeOrderSourceDetail",
						"filter8 alterRow(upsertIf(true())) ~> AlterRowOrderSourceDetail",
						"derivedColumn12 alterRow(upsertIf(true())) ~> AlterRowOrderlosgs",
						"FinalizeOrderSourceDetail filter(!isNull(channel)) ~> filter8",
						"filtererror select(mapColumn(",
						"          Errors = orderjson_1.orderEvent.data.Errors.Error,",
						"          customerOrderNumber,",
						"          lastmodified_date = dc_eventtime,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecterror",
						"filter122 alterRow(upsertIf(true())) ~> alterRowerrors",
						"selecterror foldDown(unroll(Errors, Errors),",
						"     mapColumn(",
						"          ErrorCode = Errors.ErrorCode,",
						"          ErrorDescription = Errors.ErrorDescription,",
						"          IdRef = Errors.Reference.IdRef,",
						"          Type = Errors.Reference.Type,",
						"          customerOrderNumber,",
						"          eventtime = eventTime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenerror",
						"filterreferenencedetail select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          encryptedIndicator = OrderData.referenceDetail.encryptedIndicator,",
						"          posReferenceId = OrderData.referenceDetail.posReferenceId,",
						"          posUUID = OrderData.referenceDetail.posUUID,",
						"          associatedRequestID = OrderData.referenceDetail.associatedRequestID,",
						"          passThroughIndicator = OrderData.referenceDetail.passThroughIndicator,",
						"          testOrderIndicator = OrderData.referenceDetail.testOrderIndicator,",
						"          bulkIndicator = OrderData.referenceDetail.bulkIndicator,",
						"          bulkOrderWorkRequestNumber = OrderData.referenceDetail.bulkOrderWorkRequestNumber,",
						"          chatId = OrderData.referenceDetail.chatId,",
						"          commonOrderIndicator = OrderData.referenceDetail.commonOrderIndicator,",
						"          fraudDetectionAdditionalDetails = OrderData.referenceDetail.fraudDetectionDetail.additionalDetails,",
						"          authenticationRequestId = OrderData.referenceDetail.fraudDetectionDetail.authenticationRequestId,",
						"          orderFraudCheckStatus = OrderData.referenceDetail.fraudDetectionDetail.orderFraudCheckStatus,",
						"          orderModifiedAfterPinValidation = OrderData.referenceDetail.fraudDetectionDetail.orderModifiedAfterPinValidation,",
						"          pinValidationSource = OrderData.referenceDetail.fraudDetectionDetail.pinValidationSource,",
						"          pinValidationStatus = OrderData.referenceDetail.fraudDetectionDetail.pinValidationStatus,",
						"          proofOfIdentityUrl = OrderData.referenceDetail.fraudDetectionDetail.proofOfIdentityUrl,",
						"          smsCTN = OrderData.referenceDetail.fraudDetectionDetail.smsCTN,",
						"          validationType = OrderData.referenceDetail.fraudDetectionDetail.validationType,",
						"          efcCallIndicator = OrderData.referenceDetail.fraudDetectionDetail.efcCallIndicator,",
						"          orderStatusUrl = OrderData.referenceDetail.orderStatusUrl,",
						"          parentOrderId = OrderData.referenceDetail.parentOrderId,",
						"          partialOrderIndicator = OrderData.referenceDetail.partialOrderIndicator,",
						"          productCombinationCode = OrderData.referenceDetail.productCombinationCode,",
						"          referenceOrderId = OrderData.referenceDetail.referenceOrderId,",
						"          resubmitOrderIndicator = OrderData.referenceDetail.resubmitOrderIndicator,",
						"          summaryCreatedIndicator = OrderData.referenceDetail.summaryCreatedIndicator,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 alterRow(upsertIf(true())) ~> alterRowreferencedetail",
						"derivedColumn35 filter(not(isNull(orderjson_1.orderEvent.data.Errors))) ~> filtererror",
						"parseJsonOrderData filter(not(isNull(orderjson_1.orderEvent.data.order.customerOrderNumber))) ~> filterorderdata",
						"selectOrderLosgs derive(sunsetDate = toTimestamp(toLong(toString(byName('sunsetDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          requestedExecutionDate = toTimestamp(toLong(toString(byName('requestedExecutionDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn12",
						"filter110 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          accountConversion = wirelessLOSCharacteristics.accountConversionStatus,",
						"          activationDate = wirelessLOSCharacteristics.activationDate,",
						"          availabilityDate = wirelessLOSCharacteristics.availabilityDate,",
						"          billingSystemId = wirelessLOSCharacteristics.billingSystemId,",
						"          calculateTaxIndicator = wirelessLOSCharacteristics.calculateTaxIndicator,",
						"          addendDateAndTime = wirelessLOSCharacteristics.coPayData.addendDateAndTime,",
						"          addendVersion = wirelessLOSCharacteristics.coPayData.addendVersion,",
						"          allowanceAmount = wirelessLOSCharacteristics.coPayData.allowanceAmount,",
						"          cancelCTN = wirelessLOSCharacteristics.coPayData.cancelCTN,",
						"          enrollingCTN = wirelessLOSCharacteristics.coPayData.enrollingCTN,",
						"          receivingBAN = wirelessLOSCharacteristics.coPayData.receivingBAN,",
						"          receivingFAN = wirelessLOSCharacteristics.coPayData.receivingFAN,",
						"          CCar_make = wirelessLOSCharacteristics.connectedCarDetail.make,",
						"          CCar_model = wirelessLOSCharacteristics.connectedCarDetail.model,",
						"          CCar_trim = wirelessLOSCharacteristics.connectedCarDetail.trim,",
						"          CCar_vehicleManufacturer = wirelessLOSCharacteristics.connectedCarDetail.vehicleManufacturer,",
						"          CCar_vin = wirelessLOSCharacteristics.connectedCarDetail.vin,",
						"          CCar_year = wirelessLOSCharacteristics.connectedCarDetail.year,",
						"          crossUpgradeIndicator = wirelessLOSCharacteristics.crossUpgradeIndicator,",
						"          curbsideDelivery = wirelessLOSCharacteristics.curbsideDelivery,",
						"          inventoryStoreId = wirelessLOSCharacteristics.inventoryStoreId,",
						"          mobileNumber = wirelessLOSCharacteristics.mobileNumber,",
						"          paymentId = wirelessLOSCharacteristics.paymentId,",
						"          preOrderIndicator = wirelessLOSCharacteristics.preOrderIndicator,",
						"          primarySharedPlanIndicator = wirelessLOSCharacteristics.primarySharedPlanIndicator,",
						"          shippedHotIndicator = wirelessLOSCharacteristics.shippedHotIndicator,",
						"          shoppingZipCode = wirelessLOSCharacteristics.shoppingZipCode,",
						"          storeId = wirelessLOSCharacteristics.storeId,",
						"          subscriberCrossmarketIndicator = wirelessLOSCharacteristics.subscriberCrossmarketIndicator,",
						"          subscriptionClass = wirelessLOSCharacteristics.subscriptionClass,",
						"          tradeInQuoteId = wirelessLOSCharacteristics.tradeInQuoteId,",
						"          upgrade_relatedMobileNumber = wirelessLOSCharacteristics.upgradeDetail.relatedMobileNumber,",
						"          upgrade_relationship = wirelessLOSCharacteristics.upgradeDetail.relationship,",
						"          manageCallListaction = wirelessLOSCharacteristics.manageCallList.action,",
						"          manageCallListCompAListName = wirelessLOSCharacteristics.manageCallList.companyAListName,",
						"          manageCallListcompCTNList = wirelessLOSCharacteristics.manageCallList.companyCTNList,",
						"          manageCallListcontactCTN = wirelessLOSCharacteristics.manageCallList.contactCTN,",
						"          manageCallListId = wirelessLOSCharacteristics.manageCallList.id,",
						"          manageCallListOverrideInd = wirelessLOSCharacteristics.manageCallList.overrideWithCompanyAListIndicator,",
						"          splitLiabilityDataAddendDateAndTime = wirelessLOSCharacteristics.splitLiabilityData.addendDateAndTime,",
						"          splitLiabilityDataAddendVersion = wirelessLOSCharacteristics.splitLiabilityData.addendVersion,",
						"          splitLiabilityDataCancelCTN = wirelessLOSCharacteristics.splitLiabilityData.cancelCTN,",
						"          splitLiabilityDataEnrollingCTN = wirelessLOSCharacteristics.splitLiabilityData.enrollingCTN,",
						"          splitLiabilityDataOneTimeChargeInd = wirelessLOSCharacteristics.splitLiabilityData.oneTimeChargeIndicator,",
						"          splitLiabilityValueIndicator = wirelessLOSCharacteristics.splitLiabilityData.splitLiabilityValueIndicator,",
						"          splitLiabilityDataTargetBAN = wirelessLOSCharacteristics.splitLiabilityData.targetBAN,",
						"          splitLiabilityDataTargetFAN = wirelessLOSCharacteristics.splitLiabilityData.targetFAN,",
						"          splitLiabilityDataTelecomManagerEmail = wirelessLOSCharacteristics.splitLiabilityData.telecomManagerEmailAddress,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select15",
						"derivedColumn56 alterRow(upsertIf(true())) ~> alterWirlessChar",
						"derivedColumn35 select(mapColumn(",
						"          eventid = orderjson_1.orderEvent.eventid,",
						"          eventSource = orderjson_1.orderEvent.eventSource,",
						"          eventType = orderjson_1.orderEvent.eventType,",
						"          customerOrderNumber,",
						"          orderType = orderjson_1.orderEvent.metaData.orderType,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          dc_eventTime = dc_eventtime,",
						"          traceId = orderjson_1.orderEvent.metaData.traceId,",
						"          sender = orderjson_1.orderEvent.metaData.sender,",
						"          channel = orderjson_1.orderEvent.metaData.channel,",
						"          channel1 = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          channel2 = orderjson_1.orderEvent.data.transactionLogs[1].channel,",
						"          isSingleTopic = orderjson_1.orderEvent.metaData.isSingleTopic,",
						"          routingInfo = orderjson_1.orderEvent.metaData.routingInfo,",
						"          automationUrl = orderjson_1.orderEvent.metaData.automationUrl,",
						"          priority = orderjson_1.orderEvent.metaData.priority,",
						"          version = orderjson_1.orderEvent.metaData.version,",
						"          isUpgradeOrder = orderjson_1.orderEvent.metaData.isUpgradeOrder,",
						"          fraudResponse = orderjson_1.orderEvent.metaData.fraudResponse,",
						"          originalVersion = orderjson_1.orderEvent.metaData.originalVersion,",
						"          fallout = orderjson_1.orderEvent.metaData.fallout,",
						"          callback = orderjson_1.orderEvent.metaData.callback,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select19",
						"filter123 alterRow(upsertIf(true())) ~> alterRowevent",
						"parseJsonOrderData select(mapColumn(",
						"          orderjson_1,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          metedata_channel = orderjson_1.orderEvent.metaData.channel,",
						"          order_task_Channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          lastmodified_date,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select20",
						"select20 derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          customerOrderNumber = coalesce(customerOrderNumber,customerOrderNumber2),",
						"          channel = coalesce(sourcedetail_channel,order_task_Channel,metedata_channel)) ~> derivedColumn35",
						"derivedColumn35 filter(not(isNull(orderjson_1.orderEvent.data.transactionLogs))) ~> filtertransactionlogs",
						"filtertransactionlogs select(mapColumn(",
						"          TransactionLogs = orderjson_1.orderEvent.data.transactionLogs,",
						"          customerOrderNumber,",
						"          channel,",
						"          eventTime,",
						"          lastmodified_date = dc_eventtime,",
						"          idbStatus = orderjson_1.orderEvent.metaData.idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderTransctionLogs",
						"selectOrderTransctionLogs foldDown(unroll(TransactionLogs, TransactionLogs),",
						"     mapColumn(",
						"          comments = TransactionLogs.comments,",
						"          actionBy = TransactionLogs.actionBy,",
						"          updateInfos = TransactionLogs.updateInfos,",
						"          channel = TransactionLogs.channel,",
						"          orderStatus = TransactionLogs.orderStatus,",
						"          transactionName = TransactionLogs.transactionName,",
						"          transactionType = TransactionLogs.transactionType,",
						"          changedLosgReferenceId = TransactionLogs.changedLosgReferenceId,",
						"          recordId = TransactionLogs.recordId,",
						"          queueName = TransactionLogs.queueName,",
						"          parentOrderId = TransactionLogs.parentOrderId,",
						"          startTime = TransactionLogs.startTime,",
						"          endTime = TransactionLogs.endTime,",
						"          transactionId = TransactionLogs.transactionId,",
						"          orderId = TransactionLogs.orderId,",
						"          losgs = TransactionLogs.losgs,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime,",
						"          idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTransactionLosgs",
						"filter124 alterRow(upsertIf(true())) ~> AlterRowTransactionLosgs",
						"flattenOrderLosgs derive(Losg_id = coalesce(Losg_id,' '),",
						"          sequence = coalesce(sequence,'')) ~> coallosgid",
						"coalLLseq select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          action,",
						"          addOnDomainName,",
						"          addOnDomainRegistration,",
						"          addOnParentItem,",
						"          addOnRegistrationType,",
						"          billingCode,",
						"          billingCodeType,",
						"          catalogProductType,",
						"          catalogSKUId,",
						"          contractAmountFinanced,",
						"          contractAnnualPercentageRate,",
						"          contractBalancedAmount,",
						"          contractDisplayName,",
						"          contractLength,",
						"          contractSent,",
						"          contractSystem,",
						"          contractType,",
						"          contractDownPayment,",
						"          contractDownPaymentPercent,",
						"          contractFinanceCharge,",
						"          contractInstallmentAmount,",
						"          contractInstallmentPlanDef,",
						"          contractInstallmentPlanId,",
						"          contractInstallmentStatus,",
						"          contractInstallmentType,",
						"          contractPrepaidFinanceCharge,",
						"          contractPayupAmount,",
						"          contractPayoffAmount,",
						"          contractTotalSalePrice,",
						"          curbsideDelivery,",
						"          description,",
						"          effectiveDate,",
						"          feeId,",
						"          feeIdType,",
						"          feeWaivedIndicator,",
						"          feeWaivedReason,",
						"          fulfillmentLocation,",
						"          displayName,",
						"          groupOptionId,",
						"          inventoryStoreId,",
						"          itemFulfillmentMethod,",
						"          LineItem_id,",
						"          locationId,",
						"          notes,",
						"          operation,",
						"          preOwnedIndicator,",
						"          productCode,",
						"          productSKU,",
						"          productType,",
						"          quantity,",
						"          sequence,",
						"          systemName,",
						"          hardGood,",
						"          additionalDetails,",
						"          internetLineItemCharacteristics,",
						"          priceAdditionalDetails = price.additionalDetails,",
						"          priceAmount = price.amount,",
						"          priceBaseAmount = price.baseAmount,",
						"          priceCreditFeeType = price.creditFeeType,",
						"          priceCurrencyType = price.currencyType,",
						"          priceInstallmentEligibility = price.installmentEligibility,",
						"          priceMsrp = price.msrp,",
						"          priceType = price.priceType,",
						"          priceTaxDetail = price.taxDetail,",
						"          priceTotal = price.total,",
						"          productCode,",
						"          productSKU,",
						"          productGroupReferences,",
						"          productType,",
						"          productSubType,",
						"          promotionReferences,",
						"          tier,",
						"          taxableIndicator,",
						"          systemName,",
						"          subscriptionId,",
						"          storeId,",
						"          status,",
						"          socForPreviousDevice,",
						"          shippingDetailReference,",
						"          purchaseTransactionId,",
						"          quantity,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select63",
						"derivedColumn57 alterRow(upsertIf(true())) ~> alterRowlineitems",
						"select15 derive(splitLiabilityDataAddendDateAndTime = toTimestamp(toLong(toString(byName('splitLiabilityDataAddendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          addendDateAndTime = toTimestamp(toLong(toString(byName('addendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          activationDate = toTimestamp(toLong(toString(byName('activationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          availabilityDate = toTimestamp(toLong(toString(byName('availabilityDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn56",
						"select63 derive(effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn57",
						"flattenLosgsLineItems derive(sequence = coalesce(sequence,''),",
						"          LineItem_id = coalesce(LineItem_id,''),",
						"          status = coalesce(status,'')) ~> coalLLseq",
						"filterEventSource select(mapColumn(",
						"          orderjson_1,",
						"          lastmodified_date,",
						"          customerordernumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          eventTime,",
						"          channel = orderjson_1.orderEvent.metaData.channel,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select64",
						"select64 derive(customerordernumber = coalesce(customerordernumber,customerOrderNumber2),",
						"          channel = coalesce(channel,sourcedetail_channel),",
						"          dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn66",
						"selectOrderData filter(not(isNull(OrderData.referenceDetail))) ~> filterreferenencedetail",
						"coallosgid filter(not(isNull(wirelessLOSCharacteristics))) ~> filter110",
						"select19 derive(channel = coalesce(channel,channel1,channel2)) ~> derivedColumn70",
						"flattenerror window(over(customerOrderNumber,",
						"          ErrorCode),",
						"     desc(lastmodified_date, true),",
						"     prank = rowNumber()) ~> window99",
						"window99 filter(prank==1) ~> filter122",
						"derivedColumn70 window(over(customerOrderNumber,",
						"          eventTime,",
						"          eventType),",
						"     desc(eventTime, true),",
						"     prank = rowNumber()) ~> window100",
						"window100 filter(prank==1) ~> filter123",
						"filterorderdata filter(in(['OrderMs','OrderRepoMS','OrderTaskQueueMs'],eventSource)) ~> filterEventSource",
						"flattenTransactionLosgs derive(endTime = toTimestamp(case((instr(endTime,'T'))>0,toString(toTimestamp(substring(endTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),toString(toTimestamp(toLong(toString(byName('endTime'))),'yyyy-MM-dd HH:mm:ss.SSS'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          startTime = case((instr(startTime,'T'))>0,toTimestamp(substring(startTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss'),    toTimestamp(toLong(toString(byName('startTime'))),'yyyy-MM-dd HH:mm:ss'))) ~> derivedColumn71",
						"derivedColumn71 foldDown(unroll(losgs, losgs),",
						"     mapColumn(",
						"          comments,",
						"          actionBy,",
						"          updateInfos,",
						"          channel,",
						"          orderStatus,",
						"          transactionName,",
						"          transactionType,",
						"          changedLosgReferenceId,",
						"          recordId,",
						"          queueName,",
						"          parentOrderId,",
						"          startTime,",
						"          endTime,",
						"          transactionId,",
						"          orderId,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime,",
						"          idbStatus,",
						"          losgReferenceId = losgs.losgReferenceId,",
						"          service = losgs.service,",
						"          serviceType = losgs.serviceType,",
						"          losgstatus = losgs.status,",
						"          losgsubStatus = losgs.subStatus,",
						"          wirelessNumber = losgs.wirelessNumber",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenlosgs",
						"flattenlosgs derive(losgstatus = coalesce(losgstatus,''),",
						"          losgsubStatus = coalesce(losgsubStatus,''),",
						"          losgReferenceId = coalesce(losgReferenceId,''),",
						"          modifiedDate = currentUTC()) ~> derivedColumn72",
						"derivedColumn72 window(over(customerOrderNumber,",
						"          losgReferenceId,",
						"          losgstatus,",
						"          losgsubStatus,",
						"          startTime),",
						"     asc(startTime, true),",
						"     prank = rowNumber()) ~> window101",
						"window101 filter(prank==1) ~> filter124",
						"derivedColumn66 window(over(customerordernumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window102",
						"window102 filter(prank==1) ~> filterlatestevent",
						"AlterRowOrderData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acceptedDate as timestamp,",
						"          b2bDetail as string,",
						"          channel as string,",
						"          status as string,",
						"          subStatus as string,",
						"          installmentMultiIndicator as string,",
						"          isOrderPended as string,",
						"          numberOfInstallments as string,",
						"          oceOrderNumber as string,",
						"          orderId as string,",
						"          program as string,",
						"          requestId as string,",
						"          requestType as string,",
						"          revisionNumber as string,",
						"          specialInstructions as string,",
						"          createdDate as timestamp,",
						"          submittedDate as timestamp,",
						"          updatedDate as timestamp,",
						"          type as string,",
						"          version as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'Iconic_orderdata_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acceptedDate,",
						"          b2bDetail,",
						"          channel,",
						"          status,",
						"          subStatus,",
						"          installmentMultiIndicator,",
						"          isOrderPended,",
						"          numberOfInstallments,",
						"          oceOrderNumber,",
						"          orderId,",
						"          program,",
						"          requestId,",
						"          requestType,",
						"          revisionNumber,",
						"          specialInstructions,",
						"          createdDate,",
						"          submittedDate,",
						"          updatedDate,",
						"          type,",
						"          version,",
						"          eventTime",
						"     )) ~> sinkOrderData",
						"AlterRowOrderSourceDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          application as string,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          expressCheckOutIndicator as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetailGroupId as string,",
						"          premierDetailGroupName as string,",
						"          premierDetailResourceCenterTicketNumber as string,",
						"          region as string,",
						"          responseMode as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          sequence as string,",
						"          zip as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'iconic_ordersourcedetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          application,",
						"          browserId,",
						"          channel,",
						"          city,",
						"          clientIP,",
						"          clientType,",
						"          countryCode,",
						"          county,",
						"          externalOrderSource,",
						"          locale,",
						"          region,",
						"          salesChannel,",
						"          salesChannelType,",
						"          sender,",
						"          zip,",
						"          expressCheckOutIndicator,",
						"          mediaSource,",
						"          originatingApplication,",
						"          initiatingApplication,",
						"          premierDetailGroupId,",
						"          premierDetailGroupName,",
						"          premierDetailResourceCenterTicketNumber = premierDetailGroupTick,",
						"          responseMode,",
						"          sequence",
						"     )) ~> sinkOrderSourceDetail",
						"AlterRowOrderlosgs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          acceptEULA as string,",
						"          accountReference as string,",
						"          actionReason as string,",
						"          actionType as string,",
						"          apiExecutionDetailsErrorCode as string,",
						"          apiExecutionDetailsLosgStatus as string,",
						"          apiExecutionDetailsName as string,",
						"          apiExecutionDetailsPriority as string,",
						"          billingsystemid as string,",
						"          bundleGroupId as string,",
						"          childOrderId as string,",
						"          companyCode as string,",
						"          creditPolicySecurityType as string,",
						"          dealercode as string,",
						"          divisionCode as string,",
						"          effectiveDate as timestamp,",
						"          engageVideoId as string,",
						"          entitlementBenefit as string,",
						"          fallout as string,",
						"          fnGuId as string,",
						"          fnType as string,",
						"          fnUserId as string,",
						"          freeDevicePolicyId as string,",
						"          fulfillerCode as string,",
						"          fulfillerName as string,",
						"          fulfillmentmethod as string,",
						"          fwCAF2AddressIndicator as string,",
						"          fwiMoveInIndicator as string,",
						"          installtype as string,",
						"          losgType as string,",
						"          market as string,",
						"          migrationIndicator as string,",
						"          migrationSource as string,",
						"          name as string,",
						"          notes as string,",
						"          preferredAreaCode as string,",
						"          priceCode as string,",
						"          primaryIndicator as string,",
						"          productcategory as string,",
						"          productOfferingId as string,",
						"          productOrderActionId as string,",
						"          productOrderActionReference as string,",
						"          profileCode as string,",
						"          rateType as string,",
						"          requestedExecutionDate as timestamp,",
						"          salesOfferId as string,",
						"          schedulingdetailreference as string,",
						"          serviceArea as string,",
						"          serviceAreaName as string,",
						"          servicequalificationreference as string,",
						"          status as string,",
						"          subMarket as string,",
						"          substatus as string,",
						"          sunsetDate as timestamp,",
						"          tenantAccountId as string,",
						"          tenantAccountStatus as string,",
						"          transferFromBAN as string,",
						"          transferFromFAN as string,",
						"          transferFromMobileNumber as string,",
						"          type as string,",
						"          vendorAccountId as string,",
						"          ModifiedDate as timestamp,",
						"          actionReasonCode as string,",
						"          previousProductOrderActionId as string",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'Iconic_orderlosgs_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence,",
						"          losgId = losg_id,",
						"          accountReference,",
						"          actionReason,",
						"          actionType,",
						"          acceptEULA,",
						"          tenantAccountId,",
						"          tenantAccountStatus,",
						"          billingsystemid = billingSystemId,",
						"          bundleGroupId,",
						"          childOrderId,",
						"          companyCode,",
						"          creditPolicySecurityType,",
						"          dealercode = dealerCode,",
						"          divisionCode,",
						"          effectiveDate,",
						"          engageVideoId,",
						"          entitlementBenefit,",
						"          fnGuId,",
						"          fnUserId,",
						"          fnType,",
						"          freeDevicePolicyId,",
						"          fulfillmentmethod = fulfillmentMethod,",
						"          fulfillerName,",
						"          fulfillerCode,",
						"          fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator,",
						"          installtype = installType,",
						"          status,",
						"          substatus = subStatus,",
						"          fallout,",
						"          losgType,",
						"          market,",
						"          migrationIndicator,",
						"          migrationSource,",
						"          name,",
						"          notes,",
						"          preferredAreaCode,",
						"          priceCode,",
						"          primaryIndicator,",
						"          productcategory = productCategory,",
						"          productOfferingId,",
						"          productOrderActionId,",
						"          productOrderActionReference,",
						"          profileCode,",
						"          rateType,",
						"          requestedExecutionDate,",
						"          salesOfferId,",
						"          schedulingdetailreference = schedulingDetailReference,",
						"          serviceArea,",
						"          serviceAreaName,",
						"          servicequalificationreference = serviceQualificationReference,",
						"          subMarket,",
						"          sunsetDate,",
						"          transferFromBAN = transferfromBAN,",
						"          transferFromFAN = transferfromFAN,",
						"          transferFromMobileNumber = transferfromMobileNumber,",
						"          type,",
						"          vendorAccountId,",
						"          previousProductOrderActionId,",
						"          actionReasonCode",
						"     )) ~> sinkOrderlosgs",
						"alterRowerrors sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          ErrorCode as string,",
						"          ErrorDescription as string,",
						"          IdRef as string,",
						"          Type as string,",
						"          eventhub_adx_ingest_time as timestamp,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','ErrorCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'Iconic_Errors_error',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          ErrorCode,",
						"          ErrorDescription,",
						"          IdRef,",
						"          Type,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          eventTime = eventtime",
						"     )) ~> sinkError",
						"alterRowreferencedetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          associatedRequestID as string,",
						"          bulkIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          commonOrderIndicator as string,",
						"          encryptedIndicator as string,",
						"          fraudDetectionAdditionalDetails as string,",
						"          authenticationRequestId as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string,",
						"          efcCallIndicator as string,",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          eventhub_adx_ingest_time as timestamp,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'iconic_order_referenceDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          encryptedIndicator,",
						"          posReferenceId,",
						"          posUUID,",
						"          associatedRequestID,",
						"          passThroughIndicator,",
						"          testOrderIndicator,",
						"          bulkIndicator,",
						"          bulkOrderWorkRequestNumber,",
						"          chatId,",
						"          commonOrderIndicator,",
						"          fraudDetectionAdditionalDetails,",
						"          authenticationRequestId,",
						"          orderFraudCheckStatus,",
						"          orderModifiedAfterPinValidation,",
						"          pinValidationSource,",
						"          pinValidationStatus,",
						"          proofOfIdentityUrl,",
						"          smsCTN,",
						"          validationType,",
						"          efcCallIndicator,",
						"          orderStatusUrl,",
						"          parentOrderId,",
						"          partialOrderIndicator,",
						"          productCombinationCode,",
						"          referenceOrderId,",
						"          resubmitOrderIndicator,",
						"          summaryCreatedIndicator",
						"     )) ~> sinkorderreferencedetail",
						"alterWirlessChar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          accountConversionStatus as string,",
						"          activationDate as timestamp,",
						"          availabilityDate as timestamp,",
						"          billingSystemId as string,",
						"          calculateTaxIndicator as string,",
						"          coPayDataAddendDateAndTime as timestamp,",
						"          coPayDataAddendVersion as string,",
						"          coPayDataAllowanceAmount as double,",
						"          coPayDataCancelCTN as string,",
						"          coPayDataEnrollingCTN as string,",
						"          coPayDataReceivingBAN as string,",
						"          coPayDataReceivingFAN as string,",
						"          cCarDetailMake as string,",
						"          cCarDetailModel as string,",
						"          cCarDetailTrim as string,",
						"          cCarDetailVehicleManufacturer as string,",
						"          cCarVin as string,",
						"          cCarYear as string,",
						"          crossUpgradeIndicator as string,",
						"          curbsideDelivery as string,",
						"          inventoryStoreId as string,",
						"          manageCallListaction as string,",
						"          manageCallListCompAListName as string,",
						"          manageCallListcompCTNList as string,",
						"          manageCallListcontactCTN as string,",
						"          manageCallListId as string,",
						"          manageCallListOverrideInd as string,",
						"          mobileNumber as string,",
						"          paymentId as string,",
						"          preOrderIndicator as string,",
						"          primarySharedPlanIndicator as string,",
						"          shippedHotIndicator as string,",
						"          shoppingZipCode as string,",
						"          splitLiabilityDataAddendDateAndTime as timestamp,",
						"          splitLiabilityDataAddendVersion as string,",
						"          splitLiabilityDataCancelCTN as string,",
						"          splitLiabilityDataEnrollingCTN as string,",
						"          splitLiabilityDataOneTimeChargeInd as string,",
						"          splitLiabilityDataValueIndicator as string,",
						"          splitLiabilityDataTargetBAN as string,",
						"          splitLiabilityDataTargetFAN as string,",
						"          splitLiabilityDataTelecomManagerEmail as string,",
						"          storeId as string,",
						"          subscriberCrossmarketIndicator as string,",
						"          subscriptionClass as string,",
						"          tradeInQuoteId as string,",
						"          upgradeDetailRelatedMobNumber as string,",
						"          upgradeDetailRelationship as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'Iconic_oceOrderLosgsWirelessCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          accountConversionStatus = accountConversion,",
						"          activationDate,",
						"          availabilityDate,",
						"          billingSystemId,",
						"          calculateTaxIndicator,",
						"          coPayDataAddendDateAndTime = addendDateAndTime,",
						"          coPayDataAddendVersion = addendVersion,",
						"          coPayDataAllowanceAmount = allowanceAmount,",
						"          coPayDataCancelCTN = cancelCTN,",
						"          coPayDataEnrollingCTN = enrollingCTN,",
						"          coPayDataReceivingBAN = receivingBAN,",
						"          coPayDataReceivingFAN = receivingFAN,",
						"          cCarDetailMake = CCar_make,",
						"          cCarDetailModel = CCar_model,",
						"          cCarDetailTrim = CCar_trim,",
						"          cCarDetailVehicleManufacturer = CCar_vehicleManufacturer,",
						"          cCarVin = CCar_vin,",
						"          cCarYear = CCar_year,",
						"          crossUpgradeIndicator,",
						"          curbsideDelivery,",
						"          inventoryStoreId,",
						"          manageCallListaction,",
						"          manageCallListCompAListName,",
						"          manageCallListcompCTNList,",
						"          manageCallListcontactCTN,",
						"          manageCallListId,",
						"          manageCallListOverrideInd,",
						"          mobileNumber,",
						"          paymentId,",
						"          preOrderIndicator,",
						"          primarySharedPlanIndicator,",
						"          shippedHotIndicator,",
						"          shoppingZipCode,",
						"          splitLiabilityDataAddendDateAndTime,",
						"          splitLiabilityDataAddendVersion,",
						"          splitLiabilityDataCancelCTN,",
						"          splitLiabilityDataEnrollingCTN,",
						"          splitLiabilityDataOneTimeChargeInd,",
						"          splitLiabilityDataValueIndicator = splitLiabilityValueIndicator,",
						"          splitLiabilityDataTargetBAN,",
						"          splitLiabilityDataTargetFAN,",
						"          splitLiabilityDataTelecomManagerEmail,",
						"          storeId,",
						"          subscriberCrossmarketIndicator,",
						"          subscriptionClass,",
						"          tradeInQuoteId,",
						"          upgradeDetailRelatedMobNumber = upgrade_relatedMobileNumber,",
						"          upgradeDetailRelationship = upgrade_relationship",
						"     )) ~> oceOrderLosgsWirelessCharacteristics",
						"alterRowevent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          automationUrl as string,",
						"          callBack as string,",
						"          channel as string,",
						"          eventId as string,",
						"          eventSource as string,",
						"          eventTime as timestamp,",
						"          eventType as string,",
						"          fallOut as string,",
						"          fraudResponse as string,",
						"          isSingleTopic as string,",
						"          isUpgradeOrder as string,",
						"          orderType as string,",
						"          originalVersion as string,",
						"          priority as string,",
						"          routingInfo as string,",
						"          sender as string,",
						"          traceId as string,",
						"          version as string,",
						"          eventHubAdxIngestTime as timestamp,",
						"          modifiedDate as timestamp,",
						"          eventTimeInt as string",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','eventTimeInt','eventType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'Iconic_Events_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          automationUrl,",
						"          callBack = callback,",
						"          channel,",
						"          eventId = eventid,",
						"          eventSource,",
						"          eventTime = dc_eventTime,",
						"          eventType,",
						"          fallOut = fallout,",
						"          fraudResponse,",
						"          isSingleTopic,",
						"          isUpgradeOrder,",
						"          orderType,",
						"          originalVersion,",
						"          priority,",
						"          routingInfo,",
						"          sender,",
						"          traceId,",
						"          version,",
						"          eventHubAdxIngestTime = lastmodified_date,",
						"          eventTimeInt = eventTime",
						"     )) ~> sinkevents",
						"AlterRowTransactionLosgs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          changedLosgReferenceId as string,",
						"          channel as string,",
						"          comments as string,",
						"          endTime as timestamp,",
						"          orderId as string,",
						"          orderStatus as string,",
						"          parentOrderId as string,",
						"          queueName as string,",
						"          recordId as string,",
						"          startTime as timestamp,",
						"          transactionId as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          updateInfos as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          losgReferenceId as string,",
						"          service as string,",
						"          serviceType as string,",
						"          LosgStatus as string,",
						"          LosgSubStatus as string,",
						"          wirelessNumber as string,",
						"          eventtimedate as timestamp",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','startTime','losgReferenceId','LosgStatus','LosgSubStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'Iconic_transactionlogs_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          actionBy,",
						"          changedLosgReferenceId,",
						"          channel,",
						"          comments,",
						"          endTime,",
						"          orderId,",
						"          orderStatus,",
						"          parentOrderId,",
						"          queueName,",
						"          recordId,",
						"          startTime,",
						"          transactionId,",
						"          transactionName,",
						"          transactionType,",
						"          updateInfos,",
						"          ModifiedDate = modifiedDate,",
						"          eventTime,",
						"          losgReferenceId,",
						"          service,",
						"          serviceType,",
						"          LosgStatus = losgstatus,",
						"          LosgSubStatus = losgsubStatus,",
						"          wirelessNumber,",
						"          eventtimedate = lastmodified_date",
						"     )) ~> oceOrderTransactionlogs",
						"alterRowlineitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          action as string,",
						"          addOnDomainName as string,",
						"          addOnDomainRegistration as string,",
						"          addOnParentItem as string,",
						"          addOnRegistrationType as string,",
						"          billingCode as string,",
						"          billingCodeType as string,",
						"          catalogProductType as string,",
						"          catalogSKUId as string,",
						"          contractAmountFinanced as decimal(20,2),",
						"          contractAnnualPercentageRate as decimal(20,2),",
						"          contractBalancedAmount as decimal(20,2),",
						"          contractDisplayName as string,",
						"          contractSent as string,",
						"          contractSystem as string,",
						"          contractType as string,",
						"          contractDownPayment as decimal(20,2),",
						"          contractDownPaymentPercent as decimal(20,2),",
						"          contractFinanceCharge as decimal(20,2),",
						"          contractInstallmentAmount as decimal(20,2),",
						"          contractInstallmentPlanDef as string,",
						"          contractInstallmentPlanId as string,",
						"          contractInstallmentStatus as string,",
						"          contractInstallmentType as string,",
						"          contractPrepaidFinanceCharge as string,",
						"          contractPayupAmount as decimal(20,2),",
						"          contractPayoffAmount as decimal(20,2),",
						"          contractTotalSalePrice as decimal(20,2),",
						"          contractlength as integer,",
						"          curbsideDelivery as string,",
						"          description as string,",
						"          displayName as string,",
						"          effectiveDate as timestamp,",
						"          feeId as string,",
						"          feeIdType as string,",
						"          feeWaivedIndicator as string,",
						"          feeWaivedReason as string,",
						"          fulfillmentLocation as string,",
						"          groupOptionId as string,",
						"          inventoryStoreId as string,",
						"          itemFulfillmentMethod as string,",
						"          locationId as string,",
						"          notes as string,",
						"          operation as string,",
						"          preOwnedIndicator as string,",
						"          priceAdditionalDetails as string,",
						"          priceAmount as decimal(20,2),",
						"          priceBaseAmount as decimal(20,2),",
						"          priceCreditFeeType as string,",
						"          priceCurrencyType as string,",
						"          priceInstallmentEligibility as string,",
						"          priceMsrp as decimal(20,2),",
						"          priceType as string,",
						"          priceTaxDetail as string,",
						"          priceTotal as decimal(20,2),",
						"          productCode as string,",
						"          productGroupReferences as string,",
						"          productSKU as string,",
						"          productSubType as string,",
						"          productType as string,",
						"          promotionReferences as string,",
						"          purchaseTransactionId as string,",
						"          quantity as integer,",
						"          shippingDetailReference as string,",
						"          socForPreviousDevice as string,",
						"          status as string,",
						"          storeId as string,",
						"          subscriptionId as string,",
						"          systemName as string,",
						"          taxableIndicator as string,",
						"          tier as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'iconic',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'Iconic_OrderLosgsLineItems_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          action,",
						"          addOnDomainName,",
						"          addOnDomainRegistration,",
						"          addOnParentItem,",
						"          addOnRegistrationType,",
						"          billingCode,",
						"          billingCodeType,",
						"          catalogProductType,",
						"          catalogSKUId,",
						"          contractAmountFinanced,",
						"          contractAnnualPercentageRate,",
						"          contractBalancedAmount,",
						"          contractDisplayName,",
						"          contractSent,",
						"          contractSystem,",
						"          contractType,",
						"          contractDownPayment,",
						"          contractDownPaymentPercent,",
						"          contractFinanceCharge,",
						"          contractInstallmentAmount,",
						"          contractInstallmentPlanDef,",
						"          contractInstallmentPlanId,",
						"          contractInstallmentStatus,",
						"          contractInstallmentType,",
						"          contractPrepaidFinanceCharge,",
						"          contractPayupAmount,",
						"          contractPayoffAmount,",
						"          contractTotalSalePrice,",
						"          contractlength = contractLength,",
						"          curbsideDelivery,",
						"          description,",
						"          displayName,",
						"          effectiveDate,",
						"          feeId,",
						"          feeIdType,",
						"          feeWaivedIndicator,",
						"          feeWaivedReason,",
						"          fulfillmentLocation,",
						"          groupOptionId,",
						"          inventoryStoreId,",
						"          itemFulfillmentMethod,",
						"          locationId,",
						"          notes,",
						"          operation,",
						"          preOwnedIndicator,",
						"          priceAdditionalDetails,",
						"          priceAmount,",
						"          priceBaseAmount,",
						"          priceCreditFeeType,",
						"          priceCurrencyType,",
						"          priceInstallmentEligibility,",
						"          priceMsrp,",
						"          priceType,",
						"          priceTaxDetail,",
						"          priceTotal,",
						"          productCode,",
						"          productGroupReferences,",
						"          productSKU,",
						"          productSubType,",
						"          productType,",
						"          promotionReferences,",
						"          purchaseTransactionId,",
						"          quantity,",
						"          shippingDetailReference,",
						"          socForPreviousDevice,",
						"          status,",
						"          storeId,",
						"          subscriptionId,",
						"          systemName,",
						"          taxableIndicator,",
						"          tier",
						"     )) ~> oceOrderLosgsLineItems"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Iconic_Staging')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderData')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderSourceDetail')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderLosgs')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderErrors')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderReferenceDetail')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderLosgsWirelessCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceorderEvents')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderTransactionLosgList')]",
				"[concat(variables('factoryId'), '/datasets/Iconic_oceOrderLosgsLineItems')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMF_PROD_DF_optimised')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TMF_StagingTable",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tmf_oce_order",
								"type": "DatasetReference"
							},
							"name": "OrderData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_validation",
								"type": "DatasetReference"
							},
							"name": "OrderValidation",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_validationconfig",
								"type": "DatasetReference"
							},
							"name": "OrderValidationConfiguration",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_related_party",
								"type": "DatasetReference"
							},
							"name": "OrderRelatedParty",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_payment",
								"type": "DatasetReference"
							},
							"name": "OrderPayment",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_total_price",
								"type": "DatasetReference"
							},
							"name": "OrderTotalPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_extension",
								"type": "DatasetReference"
							},
							"name": "OrderExtensions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_promo",
								"type": "DatasetReference"
							},
							"name": "OrderImmediatePromotion",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_channel",
								"type": "DatasetReference"
							},
							"name": "OrderChannel",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_agreement",
								"type": "DatasetReference"
							},
							"name": "OrderAgreement",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_event",
								"type": "DatasetReference"
							},
							"name": "OrderEventData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_translog",
								"type": "DatasetReference"
							},
							"name": "Ordereventtransactionlogs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_total_price_alteration",
								"type": "DatasetReference"
							},
							"name": "totalpricealteration",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_promo_benefitItem",
								"type": "DatasetReference"
							},
							"name": "oceorderpromobenefitItem",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "tmf_oce_order_promo_triggerItem",
								"type": "DatasetReference"
							},
							"name": "oceorderpromotriggerItem",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "oce_order_channel_extension",
								"type": "DatasetReference"
							},
							"name": "OrderchannelExtension",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "parseOrderEventJSON"
						},
						{
							"name": "selectOrderData"
						},
						{
							"name": "FInalizeOrderColumns"
						},
						{
							"name": "flattenRelatedParty"
						},
						{
							"name": "SelectFinalValidation"
						},
						{
							"name": "flattenValidationConfiguration"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRow3"
						},
						{
							"name": "AlterRow4"
						},
						{
							"name": "flattenPayment"
						},
						{
							"name": "flattenOrderTotalPrice"
						},
						{
							"name": "FlattenOrderExtensions"
						},
						{
							"name": "AlterRow15"
						},
						{
							"name": "flattenImmediatePromotion"
						},
						{
							"name": "AlterRow16"
						},
						{
							"name": "flattenOrderChannel"
						},
						{
							"name": "AlterRow17"
						},
						{
							"name": "flattenAgreement"
						},
						{
							"name": "AlterRow18"
						},
						{
							"name": "AlterRow19"
						},
						{
							"name": "SelectEventData"
						},
						{
							"name": "flattenTransactionLogs"
						},
						{
							"name": "AlterRow20"
						},
						{
							"name": "AlterRow21"
						},
						{
							"name": "AlterRow22"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "alerteration"
						},
						{
							"name": "filter4"
						},
						{
							"name": "filter5"
						},
						{
							"name": "filter6"
						},
						{
							"name": "filter7"
						},
						{
							"name": "filter9"
						},
						{
							"name": "filter22"
						},
						{
							"name": "window22"
						},
						{
							"name": "filter24"
						},
						{
							"name": "stringify1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "flattenbenefititem"
						},
						{
							"name": "flatten2"
						},
						{
							"name": "flatten3"
						},
						{
							"name": "filter27"
						},
						{
							"name": "alterRow136"
						},
						{
							"name": "flattentriggerItem"
						},
						{
							"name": "flatten4"
						},
						{
							"name": "filter28"
						},
						{
							"name": "alterRow137"
						},
						{
							"name": "select3"
						},
						{
							"name": "flatten5"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "filtereventsource"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "window27"
						},
						{
							"name": "filter29"
						},
						{
							"name": "select4"
						},
						{
							"name": "derivedColumn9"
						},
						{
							"name": "window28"
						},
						{
							"name": "filter30"
						},
						{
							"name": "flattenorderchannelextensions"
						},
						{
							"name": "filter31"
						},
						{
							"name": "alterRow138"
						},
						{
							"name": "flattenlosgs"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_event_data as string,",
						"          last_modified_date as timestamp,",
						"          customer_order_id as string,",
						"          ingestionTime as timestamp,",
						"          eventTime as long,",
						"          eventSource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionColumn: 'customer_order_id',",
						"     partitionBy('external', 20)) ~> source1",
						"source1 parse(order_event_data = replace(replace(order_event_data,'@type','type'),'@referredType','referredType') ? (orderEvent as (eventSource as string,",
						"          eventType as string,",
						"          eventTime as string,",
						"          customerOrderNumber as string,",
						"          traceId as string,",
						"          metaData as (sender as string,",
						"          channel as string,",
						"          routingInfo as string,",
						"          fallout as string,",
						"          callback as string,",
						"          automationUrl as string,",
						"          customerOrderNumber as string,",
						"          version as string),",
						"          dataMap as (traceId as string),",
						"          data as (transactionLogs as (transactionType as string,           errorCode as string,      httpStatusCode as string,      errorMessage as string,         comments as string,                               actionBy as string,                               orderStatus as string,                               startTime as string,                               endTime as string,                               losgs as (serviceType as string,                                              service as string,                                              losgReferenceId as string,                                              subStatus as string,                                              wirelessNumber as string,                                              status as string)[]                               )[],",
						"          order as (type as string,",
						"          category as string,",
						"          externalId as string,",
						"          id as string,",
						"          lastUpdate as string,",
						"          orderDate as string,",
						"          state as string,",
						"          validation as (readyToCheckout as string,",
						"          readyToSubmit as string,",
						"          status as string,",
						"          configuration as (                                                                   required as string,                                                                   status as string,                                                                   subtype as string,                                                                   type as string,                                                                   properties as (                                                                                      name as string,                                                                                      value as string                                                                                      )[]                                                                                                                                                    )[]),",
						"          relatedParty as (                                              referredType as string,                                              type as string,                                              id as string,                                              role as string,                                              extensions as (                                                                  name as string,                                                                  value as string                                                             )[]                                                                                                                                                              )[],",
						"          productOrderItem as (                                                   action as string,                                                   productOrderItemRelationship as (id as string, relationshipType as string)[],                                                   characteristic as (name as string, value as string) [],                                                 fulfillmentMethod as string,                                                   id as string,                                                   quantity as string,                                                   state as string,                                                   subState as string,                                                   billingAccount as (type as string, id as string),                                                   productOffering as (id as string, name as string, productOfferingType as string),                                                   product as (referenceId as string,                                                                  isBundle as string,                                                                  place as (id as string, name as string, role as string)[],                                                                  productCharacteristic as (name as string, value as string)[],                                                                  productSpecification as (id as string, name as string, productSpecificationType as string),                                                                  productRelationship as (relationshipSubtype as string,                                                                                                 relationshipType as string,                                                                                                product as (id as string, referenceId as string)                                                                                                )[]                                                                  ),                                                   itemTotalPrice as (priceType as string, priceAlteration as (alterationType as string,   chargeType as string,  priceType as string , price as (dutyFreeAmount as (unit as string, value as string),taxAmount as (unit as string, value as string),taxIncludedAmount as (unit as string, value as string))  )[]   ,                                          role as string,                                                                             recurringChargePeriod as string,                                                                            recurringChargePeriodLength as string,                                                                            immediatePayOption as (payImmediately as string, payOption as string),                                                                            finalPrice as (dutyFreeAmount as (unit as string, value as string),                                                                                                taxAmount as (unit as string, value as string),                                                                                                taxIncludedAmount as (unit as string, value as string)                                                                                                ),                                                                            price as (dutyFreeAmount as (unit as string, value as string),                                                                                           taxAmount as (unit as string, value as string),                                                                                           taxIncludedAmount as (unit as string, value as string)                                                                                           )                                                                            )[],                                                   itemPrice as (name as string,                                                                        priceType as string,                                                                       recurringChargePeriod as string,                                                                       recurringChargePeriodLength as string,                                                                       role as string,                                                                       taxIncluded as string,                                                                       finalPrice as ( dutyFreeAmount as (unit as string, value as string),                                                                                                taxAmount as (unit as string, value as string),                                                                                                taxIncludedAmount as (unit as string, value as string),                                                                                                appliedTax as (taxAmount as (unit as string, value as string),                                                                                                                    taxableAmount as (unit as string, value as string),                                                                                                                    taxDefinition as (exemptionType as string,                                                                                                                                              isExemption as string,                                                                                                                                             name as string,                                                                                                                                             taxRate as string,                                                                                                                                             taxType as string,                                                                                                                                             taxJurisdiction as (id as string, level as string, name as string)                                                                                                                                             )                                                                                                               )[]                                                                                                                                                                  ),                                                                       immediatePayOption as (payImmediately as string),                                                                       price as (dutyFreeAmount as (unit as string, value as string),                                                                                      taxAmount as (unit as string, value as string),                                                                                      taxIncludedAmount as (unit as string, value as string),                                                                                      appliedTax as (taxAmount as (unit as string, value as string),                                                                                                                    taxableAmount as (unit as string, value as string),                                                                                                                    taxDefinition as (exemptionType as string,                                                                                                                                              isExemption as string,                                                                                                                                             name as string,                                                                                                                                             taxRate as string,                                                                                                                                             taxType as string,                                                                                                                                             taxJurisdiction as (id as string, level as string, name as string)                                                                                                                                             ),                                                                                                                    extensions as (Tax as (key as string, value as string)[])                                                                                                                    )[]                                                                                                                                                                       )                                                                       )[]                                                   )[],",
						"          payment as (id as string,                                          role as string,                                         amount as (unit as string, value as string),                                         characteristic as (name as string, value as string)[], account as (id as string)[], authorizationcode as string                                         )[],",
						"          orderTotalPrice as (priceType as string,                                          role as string,                                                   recurringChargePeriod as string,                                                   recurringChargePeriodLength as string,                                                   finalPrice as (dutyFreeAmount as (unit as string, value as string),                                                                       taxAmount as (unit as string, value as string),                                                                       taxIncludedAmount as (unit as string, value as string)                                                                       ),                                                   immediatePayOption as (payImmediately as string, payOption as string),                                                   price as (dutyFreeAmount as (unit as string, value as string),                                                                       taxAmount as (unit as string, value as string),                                                                       taxIncludedAmount as (unit as string, value as string)),                                                   priceAlteration as (alterationType as string,                                                                            chargeType as string,                                                                            priceType as string,                                                                            price as (dutyFreeAmount as (unit as string, value as string),                                                                       taxAmount as (unit as string, value as string),                                                                       taxIncludedAmount as (unit as string, value as string))                                                                            )[]                                                   )[],",
						"          orderExtensions as (name as string, value as string)[],",
						"          immediatePromotion as (id as string,                                                        triggerItem as (id as string, itemStatus as string,itemType as string,pathToRoot as string,promotionCriteriaGroupId as string)[],                                                        benefitItem as ( id as string ,itemStatus as string, itemType as string, pathToRoot as string,promotionCriteriaGroupId as string, action as(actionType as string,actionValue as string, id as string,name as string, promotionPriceAlteration as (id as string, priceType as string))[] )[],                                                        promotion as (applyPolicy as string,                                                        type as string,                                                                             description as string,                                                                             validFor as (endDateTime as string, startDateTime as string),                                                                            id as string,                                                                            name as string)                                                        )[],",
						"          channel as (id as string, name as string, role as string,extensions as (name as string,value as string)[])[],",
						"          agreement as (name as string,                                               extensions as (name as string, value as string)[]                                              )[])))),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseOrderEventJSON",
						"filter30 select(mapColumn(",
						"          customerOrderNumber = order_event_data.orderEvent.customerOrderNumber,",
						"          OrderData,",
						"          traceId = order_event_data.orderEvent.traceId,",
						"          eventTime = order_event_data.orderEvent.eventTime,",
						"          order_Channel = order_event_data.orderEvent.data.order.channel[1].name,",
						"          metadata_channel = order_event_data.orderEvent.metaData.channel,",
						"          lastmodified_date = last_modified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderData",
						"selectOrderData select(mapColumn(",
						"          customerOrderNumber,",
						"          traceId,",
						"          type = OrderData.order.type,",
						"          category = OrderData.order.category,",
						"          externalId = OrderData.order.externalId,",
						"          id = OrderData.order.id,",
						"          order_channel = order_Channel,",
						"          metadata_channel,",
						"          lastUpdate = OrderData.order.lastUpdate,",
						"          eventTime,",
						"          lastmodified_date,",
						"          orderDate = OrderData.order.orderDate,",
						"          state = OrderData.order.state",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FInalizeOrderColumns",
						"selectOrderData foldDown(unroll(OrderData.order.relatedParty.extensions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          referredType = OrderData.order.relatedParty.referredType,",
						"          type = OrderData.order.relatedParty.type,",
						"          RelatedParty_id = OrderData.order.relatedParty.id,",
						"          role = OrderData.order.relatedParty.role,",
						"          name = OrderData.order.relatedParty.extensions.name,",
						"          value = OrderData.order.relatedParty.extensions.value,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenRelatedParty",
						"selectOrderData select(mapColumn(",
						"          customerOrderNumber,",
						"          readyToCheckout = OrderData.order.validation.readyToCheckout,",
						"          readyToSubmit = OrderData.order.validation.readyToSubmit,",
						"          status = OrderData.order.validation.status,",
						"          configuration = OrderData.order.validation.configuration,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFinalValidation",
						"SelectFinalValidation foldDown(unroll(configuration.properties),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          required = configuration.required,",
						"          status = configuration.status,",
						"          subtype = configuration.subtype,",
						"          type = configuration.type,",
						"          name = configuration.properties.name,",
						"          value = configuration.properties.value,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenValidationConfiguration",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"derivedColumn5 alterRow(upsertIf(true())) ~> AlterRow2",
						"SelectFinalValidation alterRow(upsertIf(true())) ~> AlterRow3",
						"derivedColumn4 alterRow(upsertIf(true())) ~> AlterRow4",
						"selectOrderData foldDown(unroll(OrderData.order.payment.characteristic, OrderData.order.payment),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Payment_id = OrderData.order.payment.id,",
						"          role = OrderData.order.payment.role,",
						"          amt_Unit = OrderData.order.payment.amount.unit,",
						"          Characteristice_name = OrderData.order.payment.characteristic.name,",
						"          Characteristice_value = OrderData.order.payment.characteristic.value,",
						"          value = OrderData.order.payment.amount.value,",
						"          authorizationcode = OrderData.order.payment.authorizationcode,",
						"          account = OrderData.order.payment.account,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenPayment",
						"selectOrderData foldDown(unroll(OrderData.order.orderTotalPrice.priceAlteration, OrderData.order.orderTotalPrice),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          payOption = OrderData.order.orderTotalPrice.immediatePayOption.payOption,",
						"          priceType = OrderData.order.orderTotalPrice.priceType,",
						"          recurringChargePeriod = OrderData.order.orderTotalPrice.recurringChargePeriod,",
						"          recurringChargePeriodLength = OrderData.order.orderTotalPrice.recurringChargePeriodLength,",
						"          FinalPriceDutyFree_unit = OrderData.order.orderTotalPrice.finalPrice.dutyFreeAmount.unit,",
						"          FinalPriceDutyFree_value = OrderData.order.orderTotalPrice.finalPrice.dutyFreeAmount.value,",
						"          FinalPriceTaxAmount_unit = OrderData.order.orderTotalPrice.finalPrice.taxAmount.unit,",
						"          FinalPriceTaxAmount_value = OrderData.order.orderTotalPrice.finalPrice.taxAmount.value,",
						"          FinalPricetaxIncludedAmount_unit = OrderData.order.orderTotalPrice.finalPrice.taxIncludedAmount.unit,",
						"          FinalPricetaxIncludedAmount_value = OrderData.order.orderTotalPrice.finalPrice.taxIncludedAmount.value,",
						"          payImmediately = OrderData.order.orderTotalPrice.immediatePayOption.payImmediately,",
						"          PriceDutyFreeAmount_unit = OrderData.order.orderTotalPrice.price.dutyFreeAmount.unit,",
						"          PriceDutyFreeAmount_value = OrderData.order.orderTotalPrice.price.dutyFreeAmount.value,",
						"          PriceTaxAmount_unit = OrderData.order.orderTotalPrice.price.taxAmount.unit,",
						"          PriceTaxAmount_value = OrderData.order.orderTotalPrice.price.taxAmount.value,",
						"          PriceTaxIncludedAmount_unit = OrderData.order.orderTotalPrice.price.taxIncludedAmount.unit,",
						"          PriceTaxIncludedAmount_value = OrderData.order.orderTotalPrice.price.taxIncludedAmount.value,",
						"          PriceAlteration_alterationType = OrderData.order.orderTotalPrice.priceAlteration.alterationType,",
						"          PriceAlteration_chargeType = OrderData.order.orderTotalPrice.priceAlteration.chargeType,",
						"          PriceAlteration_priceType = OrderData.order.orderTotalPrice.priceAlteration.priceType,",
						"          PriceAlterationDutyFreeAmount_unit = OrderData.order.orderTotalPrice.priceAlteration.price.dutyFreeAmount.unit,",
						"          PriceAlterationDutyFreeAmount_value = OrderData.order.orderTotalPrice.priceAlteration.price.dutyFreeAmount.value,",
						"          PriceAlterationTaxAmount_unit = OrderData.order.orderTotalPrice.priceAlteration.price.taxAmount.unit,",
						"          PriceAlterationTaxAmount_value = OrderData.order.orderTotalPrice.priceAlteration.price.taxAmount.value,",
						"          PriceAlterationTaxIncludedAmount_unit = OrderData.order.orderTotalPrice.priceAlteration.price.taxIncludedAmount.unit,",
						"          PriceAlterationTaxIncludedAmount_value = OrderData.order.orderTotalPrice.priceAlteration.price.taxIncludedAmount.value,",
						"          role = OrderData.order.orderTotalPrice.role,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderTotalPrice",
						"selectOrderData foldDown(unroll(OrderData.order.orderExtensions, OrderData.order.orderExtensions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          name = OrderData.order.orderExtensions.name,",
						"          value = OrderData.order.orderExtensions.value,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenOrderExtensions",
						"derivedColumn6 alterRow(upsertIf(true())) ~> AlterRow15",
						"selectOrderData foldDown(unroll(OrderData.order.immediatePromotion, OrderData.order.immediatePromotion),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id = OrderData.order.immediatePromotion.id,",
						"          applyPolicy = OrderData.order.immediatePromotion.promotion.applyPolicy,",
						"          description = OrderData.order.immediatePromotion.promotion.description,",
						"          promotion_id = OrderData.order.immediatePromotion.promotion.id,",
						"          name = OrderData.order.immediatePromotion.promotion.name,",
						"          lastmodified_date,",
						"          Valid_Endtime = OrderData.order.immediatePromotion.promotion.validFor.endDateTime,",
						"          Valid_Starttime = OrderData.order.immediatePromotion.promotion.validFor.startDateTime,",
						"          type = OrderData.order.immediatePromotion.promotion.type",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenImmediatePromotion",
						"filter7 alterRow(upsertIf(true())) ~> AlterRow16",
						"selectOrderData foldDown(unroll(OrderData.order.channel, OrderData.order.channel),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id = OrderData.order.channel.id,",
						"          name = OrderData.order.channel.name,",
						"          role = OrderData.order.channel.role,",
						"          lastmodified_date,",
						"          extensions = OrderData.order.channel.extensions",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderChannel",
						"derivedColumn3 alterRow(upsertIf(true())) ~> AlterRow17",
						"selectOrderData foldDown(unroll(OrderData.order.agreement.extensions, OrderData.order.agreement),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Agreement_name = OrderData.order.agreement.name,",
						"          Extension_name = OrderData.order.agreement.extensions.name,",
						"          Extension_value = OrderData.order.agreement.extensions.value,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAgreement",
						"filter5 alterRow(upsertIf(true())) ~> AlterRow18",
						"filter4 alterRow(upsertIf(true())) ~> AlterRow19",
						"stringify1 select(mapColumn(",
						"          customerOrderNumber = order_event_data.orderEvent.customerOrderNumber,",
						"          eventSource = order_event_data.orderEvent.eventSource,",
						"          eventType = order_event_data.orderEvent.eventType,",
						"          sender = order_event_data.orderEvent.metaData.sender,",
						"          channel = order_event_data.orderEvent.metaData.channel,",
						"          routingInfo = order_event_data.orderEvent.metaData.routingInfo,",
						"          fallout = order_event_data.orderEvent.metaData.fallout,",
						"          callback = order_event_data.orderEvent.metaData.callback,",
						"          automationUrl = order_event_data.orderEvent.metaData.automationUrl,",
						"          version = order_event_data.orderEvent.metaData.version,",
						"          traceId = order_event_data.orderEvent.dataMap.traceId,",
						"          state = order_event_data.orderEvent.data.order.state,",
						"          eventTime = order_event_data.orderEvent.eventTime,",
						"          josn_string = josn_string_as",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectEventData",
						"parseOrderEventJSON foldDown(unroll(order_event_data.orderEvent.data.transactionLogs, order_event_data.orderEvent.data.transactionLogs),",
						"     mapColumn(",
						"          customerOrderNumber = order_event_data.orderEvent.customerOrderNumber,",
						"          transactionType = order_event_data.orderEvent.data.transactionLogs.transactionType,",
						"          comments = order_event_data.orderEvent.data.transactionLogs.comments,",
						"          actionBy = order_event_data.orderEvent.data.transactionLogs.actionBy,",
						"          orderStatus = order_event_data.orderEvent.data.transactionLogs.orderStatus,",
						"          startTime = order_event_data.orderEvent.data.transactionLogs.startTime,",
						"          endTime = order_event_data.orderEvent.data.transactionLogs.endTime,",
						"          eventTime = order_event_data.orderEvent.eventTime,",
						"          losgarray = order_event_data.orderEvent.data.transactionLogs.losgs,",
						"          errorCode = order_event_data.orderEvent.data.transactionLogs.errorCode,",
						"          errrorMessage = order_event_data.orderEvent.data.transactionLogs.errorMessage,",
						"          httpStatusCode = order_event_data.orderEvent.data.transactionLogs.httpStatusCode,",
						"          last_modified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTransactionLogs",
						"derivedColumn8 alterRow(upsertIf(true())) ~> AlterRow20",
						"derivedColumn2 alterRow(upsertIf(true())) ~> AlterRow21",
						"select3 alterRow(upsertIf(true())) ~> AlterRow22",
						"FInalizeOrderColumns derive(lastUpdate = toTimestamp(substring(lastUpdate,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          orderDate = toTimestamp(substring(orderDate,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          channel = coalesce(metadata_channel,order_channel)) ~> derivedColumn1",
						"flattenOrderTotalPrice select(mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          payImmediately,",
						"          PriceAlteration_alterationType,",
						"          PriceAlteration_chargeType,",
						"          PriceAlteration_priceType,",
						"          PriceAlterationDutyFreeAmount_unit,",
						"          PriceAlterationDutyFreeAmount_value,",
						"          PriceAlterationTaxAmount_unit,",
						"          PriceAlterationTaxAmount_value,",
						"          PriceAlterationTaxIncludedAmount_unit,",
						"          PriceAlterationTaxIncludedAmount_value,",
						"          role,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"flattenOrderTotalPrice select(mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          recurringChargePeriod,",
						"          recurringChargePeriodLength,",
						"          FinalPriceDutyFree_unit,",
						"          FinalPriceDutyFree_value,",
						"          FinalPriceTaxAmount_unit,",
						"          FinalPriceTaxAmount_value,",
						"          FinalPricetaxIncludedAmount_unit,",
						"          FinalPricetaxIncludedAmount_value,",
						"          payImmediately,",
						"          PriceDutyFreeAmount_unit,",
						"          PriceDutyFreeAmount_value,",
						"          PriceTaxAmount_unit,",
						"          PriceTaxAmount_value,",
						"          PriceTaxIncludedAmount_unit,",
						"          role,",
						"          PriceTaxIncludedAmount_value,",
						"          lastmodified_date,",
						"          payOption",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn7 alterRow(upsertIf(true())) ~> alerteration",
						"flattenAgreement filter(!isNull(Extension_name)) ~> filter4",
						"flattenOrderChannel filter(!isNull(id)) ~> filter5",
						"flattenImmediatePromotion filter(!isNull(id)) ~> filter6",
						"FlattenOrderExtensions filter(!isNull(name)) ~> filter7",
						"select1 filter(!isNull(PriceAlteration_alterationType)) ~> filter9",
						"flattenRelatedParty filter(!isNull(role)) ~> filter22",
						"flattenlosgs window(over(customerOrderNumber,",
						"          orderStatus,",
						"          service,",
						"          subStatus,",
						"          status,",
						"          losgReferenceId),",
						"     desc(last_modified_date, true),",
						"     prank = rowNumber()) ~> window22",
						"window22 filter(prank==1) ~> filter24",
						"parseOrderEventJSON stringify(josn_string_as = order_event_data ? string,",
						"     format: 'json') ~> stringify1",
						"filter24 derive(startTime = iif(length(toString(startTime)) >13, currentTimestamp(), toTimestamp(toLong(startTime),'yyyy-MM-dd HH:mm:ss')),",
						"          endTime = iif(length(toString(endTime)) >13, currentTimestamp(), toTimestamp(toLong(endTime),'yyyy-MM-dd HH:mm:ss'))) ~> derivedColumn2",
						"filter6 derive(Valid_Endtime = toTimestamp(substring(Valid_Endtime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          Valid_Starttime = toTimestamp(substring(Valid_Starttime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')) ~> derivedColumn3",
						"selectOrderData foldDown(unroll(OrderData.order.immediatePromotion, OrderData.order.immediatePromotion),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id = OrderData.order.immediatePromotion.id,",
						"          lastmodified_date,",
						"          benefitItem = OrderData.order.immediatePromotion.benefitItem",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenbenefititem",
						"flattenbenefititem foldDown(unroll(benefitItem, benefitItem),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id,",
						"          lastmodified_date,",
						"          benefitItem_id = benefitItem.id,",
						"          itemStatus = benefitItem.itemStatus,",
						"          itemType = benefitItem.itemType,",
						"          pathToRoot = benefitItem.pathToRoot,",
						"          promotionCriteriaGroupId = benefitItem.promotionCriteriaGroupId,",
						"          action = benefitItem.action",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 foldDown(unroll(action, action),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id,",
						"          lastmodified_date,",
						"          benefitItem_id,",
						"          itemStatus,",
						"          itemType,",
						"          pathToRoot,",
						"          promotionCriteriaGroupId,",
						"          action_type = action.actionType,",
						"          action_Value = action.actionValue,",
						"          action_name = action.name,",
						"          action_id = action.id,",
						"          promoPriceAlteration_id = action.promotionPriceAlteration.id,",
						"          promoPriceAlteration_priceType = action.promotionPriceAlteration.priceType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten3",
						"flatten3 filter(!isNull(benefitItem_id)) ~> filter27",
						"filter27 alterRow(upsertIf(true())) ~> alterRow136",
						"selectOrderData foldDown(unroll(OrderData.order.immediatePromotion, OrderData.order.immediatePromotion),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id = OrderData.order.immediatePromotion.id,",
						"          lastmodified_date,",
						"          eventTime,",
						"          triggerItem = OrderData.order.immediatePromotion.triggerItem",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattentriggerItem",
						"flattentriggerItem foldDown(unroll(triggerItem, triggerItem),",
						"     mapColumn(",
						"          triggerItem_id = triggerItem.id,",
						"          itemStatus = triggerItem.itemStatus,",
						"          itemType = triggerItem.itemType,",
						"          pathToRoot = triggerItem.pathToRoot,",
						"          promotionCriteriaGroupId = triggerItem.promotionCriteriaGroupId,",
						"          customerOrderNumber,",
						"          id,",
						"          lastmodified_date,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten4",
						"flatten4 filter(!isNull(triggerItem_id)) ~> filter28",
						"filter28 alterRow(upsertIf(true())) ~> alterRow137",
						"flatten5 select(mapColumn(",
						"          customerOrderNumber,",
						"          Payment_id,",
						"          role,",
						"          amt_Unit,",
						"          Characteristice_name,",
						"          Characteristice_value,",
						"          value = amt_value,",
						"          authorizationcode,",
						"          account = account_id,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"flattenPayment foldDown(unroll(account),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Payment_id,",
						"          role,",
						"          amt_Unit,",
						"          Characteristice_name,",
						"          Characteristice_value,",
						"          amt_value = value,",
						"          authorizationcode,",
						"          account_id = account.id,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten5",
						"filter22 derive(name = coalesce(name,''),",
						"          referredType = coalesce(referredType,'')) ~> derivedColumn4",
						"flattenValidationConfiguration derive(name = coalesce(name,''),",
						"          subtype = coalesce(subtype,'')) ~> derivedColumn5",
						"select2 derive(role = coalesce(role,''),",
						"          payImmediately = coalesce(payImmediately,'')) ~> derivedColumn6",
						"filter9 derive(role = coalesce(role,''),",
						"          payImmediately = coalesce(payImmediately,'')) ~> derivedColumn7",
						"parseOrderEventJSON filter(in(['OrderMs','OrderRepoMS','OrderTaskQueueMs'],eventSource)) ~> filtereventsource",
						"filter29 derive(eventTimeStandard = iif(length(toString(eventTime)) >\r",
						"15\r",
						", currentTimestamp(), toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')\r",
						")) ~> derivedColumn8",
						"SelectEventData window(over(customerOrderNumber,",
						"          eventSource,",
						"          eventType,",
						"          eventTime),",
						"     desc(eventTime, true),",
						"     prank = rowNumber()) ~> window27",
						"window27 filter(prank==1) ~> filter29",
						"filtereventsource select(mapColumn(",
						"          customerOrderNumber = order_event_data.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = order_event_data.orderEvent.metaData.customerOrderNumber,",
						"          eventTime = order_event_data.orderEvent.eventTime,",
						"          OrderData = order_event_data.orderEvent.data,",
						"          order_event_data,",
						"          last_modified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4 derive(customerOrderNumber = coalesce(customerOrderNumber,customerOrderNumber2)) ~> derivedColumn9",
						"derivedColumn9 window(over(customerOrderNumber),",
						"     desc(eventTime, true),",
						"     prank = rowNumber()) ~> window28",
						"window28 filter(prank==1) ~> filter30",
						"flattenOrderChannel foldDown(unroll(extensions, extensions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id,",
						"          lastmodified_date,",
						"          extensions_name = extensions.name,",
						"          value = extensions.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenorderchannelextensions",
						"flattenorderchannelextensions filter(!isNull(extensions_name)) ~> filter31",
						"filter31 alterRow(upsertIf(true())) ~> alterRow138",
						"flattenTransactionLogs foldDown(unroll(losgarray, losgarray),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          transactionType,",
						"          comments,",
						"          actionBy,",
						"          orderStatus,",
						"          startTime,",
						"          endTime,",
						"          eventTime,",
						"          serviceType = losgarray.serviceType,",
						"          service = losgarray.service,",
						"          losgReferenceId = losgarray.losgReferenceId,",
						"          subStatus = losgarray.subStatus,",
						"          status = losgarray.status,",
						"          wirelessNumber = losgarray.wirelessNumber,",
						"          last_modified_date,",
						"          errorCode,",
						"          errrorMessage,",
						"          httpStatusCode",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenlosgs",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          traceId as string,",
						"          type as string,",
						"          category as string,",
						"          externalId as string,",
						"          cartId as string,",
						"          lastUpdate as timestamp,",
						"          orderDate as timestamp,",
						"          state as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          channel as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_event_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          traceId,",
						"          type,",
						"          category,",
						"          externalId,",
						"          cartId = id,",
						"          lastUpdate,",
						"          orderDate,",
						"          state,",
						"          eventTime,",
						"          channel",
						"     )) ~> OrderData",
						"AlterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          readyToCheckOut as string,",
						"          readyToSubmit as string,",
						"          status as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_validation_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          readyToCheckOut = readyToCheckout,",
						"          readyToSubmit,",
						"          status",
						"     )) ~> OrderValidation",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          required as string,",
						"          status as string,",
						"          subType as string,",
						"          type as string,",
						"          name as string,",
						"          value as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','subType','type','name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_validationconfig_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          required,",
						"          status,",
						"          subType = subtype,",
						"          type,",
						"          name,",
						"          value",
						"     )) ~> OrderValidationConfiguration",
						"AlterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          referredType as string,",
						"          type as string,",
						"          relatedPartyId as string,",
						"          role as string,",
						"          name as string,",
						"          value as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','relatedPartyId','role','name','referredType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_related_party_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          referredType,",
						"          type,",
						"          relatedPartyId = RelatedParty_id,",
						"          role,",
						"          name,",
						"          value",
						"     )) ~> OrderRelatedParty",
						"AlterRow22 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          paymentId as string,",
						"          role as string,",
						"          amountUnit as string,",
						"          characteristicName as string,",
						"          characteristicValue as string,",
						"          ModifiedDate as timestamp,",
						"          authorizationCode as string,",
						"          accountId as string,",
						"          amountValue as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','paymentId','role'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_payment_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          paymentId = Payment_id,",
						"          role,",
						"          amountUnit = amt_Unit,",
						"          characteristicName = Characteristice_name,",
						"          characteristicValue = Characteristice_value,",
						"          authorizationCode = authorizationcode,",
						"          accountId = account,",
						"          amountValue = value",
						"     )) ~> OrderPayment",
						"AlterRow15 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          payImmediately as string,",
						"          role as string,",
						"          recurringChargePeriod as string,",
						"          recurringChargePeriodLength as string,",
						"          finalPriceDutyFreeUnit as string,",
						"          finalPriceDutyFreeValue as string,",
						"          finalPriceTaxAmountUnit as string,",
						"          finalPriceTaxAmountValue as string,",
						"          finalPriceTaxIncludedAmountUnit as string,",
						"          finalPriceTaxIncludedAmountValue as string,",
						"          priceDutyFreeAmountUnit as string,",
						"          priceDutyFreeAmountValue as string,",
						"          priceTaxAmountUnit as string,",
						"          priceTaxAmountValue as string,",
						"          priceTaxIncludedAmountUnit as string,",
						"          priceTaxIncludedAmountValue as string,",
						"          payOption as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','payImmediately','role'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_total_price_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          payImmediately,",
						"          role,",
						"          recurringChargePeriod,",
						"          recurringChargePeriodLength,",
						"          finalPriceDutyFreeUnit = FinalPriceDutyFree_unit,",
						"          finalPriceDutyFreeValue = FinalPriceDutyFree_value,",
						"          finalPriceTaxAmountUnit = FinalPriceTaxAmount_unit,",
						"          finalPriceTaxAmountValue = FinalPriceTaxAmount_value,",
						"          finalPriceTaxIncludedAmountUnit = FinalPricetaxIncludedAmount_unit,",
						"          finalPriceTaxIncludedAmountValue = FinalPricetaxIncludedAmount_value,",
						"          priceDutyFreeAmountUnit = PriceDutyFreeAmount_unit,",
						"          priceDutyFreeAmountValue = PriceDutyFreeAmount_value,",
						"          priceTaxAmountUnit = PriceTaxAmount_unit,",
						"          priceTaxAmountValue = PriceTaxAmount_value,",
						"          priceTaxIncludedAmountUnit = PriceTaxIncludedAmount_unit,",
						"          priceTaxIncludedAmountValue = PriceTaxIncludedAmount_value,",
						"          payOption",
						"     )) ~> OrderTotalPrice",
						"AlterRow16 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          name as string,",
						"          value as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_extension_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          name,",
						"          value",
						"     )) ~> OrderExtensions",
						"AlterRow17 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          promotionId as string,",
						"          applyPolicy as string,",
						"          description as string,",
						"          id as string,",
						"          validEndDate as timestamp,",
						"          validStartDate as timestamp,",
						"          type as string,",
						"          name as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_promo_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          promotionId = promotion_id,",
						"          applyPolicy,",
						"          description,",
						"          id,",
						"          validEndDate = Valid_Endtime,",
						"          validStartDate = Valid_Starttime,",
						"          type,",
						"          name",
						"     )) ~> OrderImmediatePromotion",
						"AlterRow18 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          id as string,",
						"          name as string,",
						"          role as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_channel_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id,",
						"          name,",
						"          role",
						"     )) ~> OrderChannel",
						"AlterRow19 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          agreementName as string,",
						"          extensionName as string,",
						"          extensionValue as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','agreementName','extensionName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_agreement_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          agreementName = Agreement_name,",
						"          extensionName = Extension_name,",
						"          extensionValue = Extension_value",
						"     )) ~> OrderAgreement",
						"AlterRow20 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          SK_event_ID as long,",
						"          eventSource as string,",
						"          eventType as string,",
						"          sender as string,",
						"          channel as string,",
						"          routingInfo as string,",
						"          fallout as string,",
						"          callback as string,",
						"          automationUrl as string,",
						"          version as string,",
						"          traceId as string,",
						"          state as string,",
						"          ModifiedDate as timestamp,",
						"          order_json as string,",
						"          eventTime as string,",
						"          eventTimeStandard as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','eventSource','eventType','eventTime'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_event_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eventSource,",
						"          eventType,",
						"          sender,",
						"          channel,",
						"          routingInfo,",
						"          fallout,",
						"          callback,",
						"          automationUrl,",
						"          traceId,",
						"          state,",
						"          version,",
						"          order_json = josn_string,",
						"          eventTime,",
						"          eventTimeStandard",
						"     )) ~> OrderEventData",
						"AlterRow21 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          transactionType as string,",
						"          comments as string,",
						"          actionBy as string,",
						"          orderStatus as string,",
						"          startTime as timestamp,",
						"          endTime as timestamp,",
						"          serviceType as string,",
						"          service as string,",
						"          losgReferenceId as string,",
						"          subStatus as string,",
						"          wirelessNumber as string,",
						"          status as string,",
						"          ModifiedDate as timestamp,",
						"          errorCode as string,",
						"          errorMessage as string,",
						"          httpStatusCode as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','service','orderStatus','subStatus','status','losgReferenceId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_translog_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          transactionType,",
						"          comments,",
						"          actionBy,",
						"          orderStatus,",
						"          startTime,",
						"          endTime,",
						"          serviceType,",
						"          service,",
						"          losgReferenceId,",
						"          subStatus,",
						"          wirelessNumber,",
						"          status,",
						"          errorCode,",
						"          errorMessage = errrorMessage,",
						"          httpStatusCode",
						"     )) ~> Ordereventtransactionlogs",
						"alerteration sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          payImmediately as string,",
						"          role as string,",
						"          priceAlterationAlterationType as string,",
						"          priceAlterationChargeType as string,",
						"          priceAlterationPriceType as string,",
						"          priceAlterationDutyFreeAmountUnit as string,",
						"          priceAlterationDutyFreeAmountValue as string,",
						"          priceAlterationTaxAmountUnit as string,",
						"          priceAlterationTaxAmountValue as string,",
						"          priceAlterationTaxIncludedAmountUnit as string,",
						"          priceAlterationTaxIncludedAmountValue as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','payImmediately','role'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_total_price_alteration_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          payImmediately,",
						"          role,",
						"          priceAlterationAlterationType = PriceAlteration_alterationType,",
						"          priceAlterationChargeType = PriceAlteration_chargeType,",
						"          priceAlterationPriceType = PriceAlteration_priceType,",
						"          priceAlterationDutyFreeAmountUnit = PriceAlterationDutyFreeAmount_unit,",
						"          priceAlterationDutyFreeAmountValue = PriceAlterationDutyFreeAmount_value,",
						"          priceAlterationTaxAmountUnit = PriceAlterationTaxAmount_unit,",
						"          priceAlterationTaxAmountValue = PriceAlterationTaxAmount_value,",
						"          priceAlterationTaxIncludedAmountUnit = PriceAlterationTaxIncludedAmount_unit,",
						"          priceAlterationTaxIncludedAmountValue = PriceAlterationTaxIncludedAmount_value",
						"     )) ~> totalpricealteration",
						"alterRow136 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          id as string,",
						"          benefitItemId as string,",
						"          itemStatus as string,",
						"          itemType as string,",
						"          pathToRoot as string,",
						"          actionType as string,",
						"          promoCriteriaGroupId as string,",
						"          actionValue as string,",
						"          actionId as string,",
						"          actionName as string,",
						"          promoPriceAlterationId as string,",
						"          promoPriceAlterationPriceType as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','benefitItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_promo_benefitItem_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id,",
						"          benefitItemId = benefitItem_id,",
						"          itemStatus,",
						"          itemType,",
						"          pathToRoot,",
						"          actionType = action_type,",
						"          promoCriteriaGroupId = promotionCriteriaGroupId,",
						"          actionValue = action_Value,",
						"          actionId = action_id,",
						"          actionName = action_name,",
						"          promoPriceAlterationId = promoPriceAlteration_id,",
						"          promoPriceAlterationPriceType = promoPriceAlteration_priceType",
						"     )) ~> oceorderpromobenefitItem",
						"alterRow137 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          id as string,",
						"          triggerItemId as string,",
						"          itemStatus as string,",
						"          itemType as string,",
						"          pathToRoot as string,",
						"          promoCriteriaGroupId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','triggerItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_promo_triggerItem_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id,",
						"          triggerItemId = triggerItem_id,",
						"          itemStatus,",
						"          itemType,",
						"          pathToRoot,",
						"          promoCriteriaGroupId = promotionCriteriaGroupId",
						"     )) ~> oceorderpromotriggerItem",
						"alterRow138 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          id as string,",
						"          name as string,",
						"          value as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'tmftableerrors',",
						"     rejectedData_folderPath: 'oce_order_channel_extensions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          id,",
						"          name = extensions_name,",
						"          value",
						"     )) ~> OrderchannelExtension"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TMF_StagingTable')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_validation')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_validationconfig')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_related_party')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_payment')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_total_price')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_extension')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_promo')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_channel')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_agreement')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_event')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_translog')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_total_price_alteration')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_promo_benefitItem')]",
				"[concat(variables('factoryId'), '/datasets/tmf_oce_order_promo_triggerItem')]",
				"[concat(variables('factoryId'), '/datasets/oce_order_channel_extension')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_PROD_DF_Main_bkp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference"
							},
							"name": "TempOrderData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "V101_oceOrderData",
								"type": "DatasetReference"
							},
							"name": "sinkOrderData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAddlDetails",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAdditionalDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderContactDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderContactDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPrice",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPriceSummaryList",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPriceSummaryList",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderProductGroups",
								"type": "DatasetReference"
							},
							"name": "sinkOrderProductGroups",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPromotions",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPromotions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTermsAndConditions",
								"type": "DatasetReference"
							},
							"name": "sinkOrderTermsandConditions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAccts",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctServFacilityQualifications",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccountsServiceFacilityQualification",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctsBillingDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccountsBillingDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsPrice",
								"type": "DatasetReference"
							},
							"name": "sinkOrderLosgsPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsPriceSummaryList",
								"type": "DatasetReference"
							},
							"name": "sinkOrderLosgsPriceSummaryList",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsLineItemsAddlDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsAddlDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderSourceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderSourceDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderSourceDetailAddlDetails",
								"type": "DatasetReference"
							},
							"name": "SourceDetailAdditionalDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgs",
								"type": "DatasetReference"
							},
							"name": "sinkOrderlosgs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderCreditPolicy",
								"type": "DatasetReference"
							},
							"name": "sinkcreditpolicy",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderDebtAccts",
								"type": "DatasetReference"
							},
							"name": "sinkdebtaccounts",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderRelatedParty",
								"type": "DatasetReference"
							},
							"name": "sinkrelatedparty",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderErrors",
								"type": "DatasetReference"
							},
							"name": "sinkError",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderMoveDetail",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderMoveDetail",
							"description": "Export data to v101_oceOrderMoveDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderTasks",
								"type": "DatasetReference"
							},
							"name": "sinkordertask",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderReferenceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkorderreferencedetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsIptvCharacteristics",
								"type": "DatasetReference"
							},
							"name": "iptvLOSCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsSubscriberName",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsSubscriberName",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsTermsAndConditionAccepted",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsTermsAndConditionAccepted",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsVoipCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsVoipCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsVoipCharacteristicsDirListing",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsVoipCharacteristicsDirListing",
							"description": "Export data to oceOrderLosgsVoipCharacteristicsDirListing",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsWirelessCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsWirelessCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgServiceProvider",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgServiceProvider",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsNumberPortDetail",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderLosgsPortDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsBillingDetailAddr",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderAcctsBillingDetailAddr",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctServiceAddr",
								"type": "DatasetReference"
							},
							"name": "sinkorderaccountsserviceaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctsBussinessAddr",
								"type": "DatasetReference"
							},
							"name": "sinkorderaccountsbusinessaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsCompensation",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsCompensation",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsAddlDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsAdditionDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsinternetCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsinternetCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsDirectTVCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsDirectTVCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderEvents",
								"type": "DatasetReference"
							},
							"name": "sinkevents",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTransactionLogsHistory",
								"type": "DatasetReference"
							},
							"name": "sinkTransactionLosgsHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTransactionLosgList",
								"type": "DatasetReference"
							},
							"name": "transactionloglist",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCreditCheck",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderAcctsCreditCheck",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsAutopayPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsAutopayPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsAutoPayEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsAutoPayEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCardOnFilePaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsCardOnFilePaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCardOnFileEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsCardOnFileEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsNegotiateConflictCustomer",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsNegotiateConflictCustomer",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsUnifiedAccount",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsUnifiedAccount",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCreditCheckDebtAccounts",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsCreditCheckDebtAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderEmployeeDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderEmployeeDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderEmployeeReferralDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderEmployeeReferralDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderECommercePartner",
								"type": "DatasetReference"
							},
							"name": "oceOrderECommercePartner",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderDeliveryPromiseNote",
								"type": "DatasetReference"
							},
							"name": "oceOrderDeliveryPromiseNote",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderIntegratedOffers",
								"type": "DatasetReference"
							},
							"name": "oceOrderIntegratedOffers",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderFleetDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderFleetDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLoginProfile",
								"type": "DatasetReference"
							},
							"name": "oceOrderLoginProfile",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSingleDispatchDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderSingleDispatchDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderMiscellaneousDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderMiscellaneousDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderPaymentTenders",
								"type": "DatasetReference"
							},
							"name": "oceOrderPaymentTenders",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderPaymentTendersEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderPaymentTendersEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetails",
								"type": "DatasetReference"
							},
							"name": "sinkshippingdetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetailsPrice",
								"type": "DatasetReference"
							},
							"name": "sinkShippingDetailsPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSalesAgent",
								"type": "DatasetReference"
							},
							"name": "oceOrderSalesAgent",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderStatusDetailFallout",
								"type": "DatasetReference"
							},
							"name": "oceOrderStatusDetailFallout",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderReferenceDetailFalloutDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderReferenceDetailFalloutDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetailsAddr",
								"type": "DatasetReference"
							},
							"name": "sinkShippingDetailsAddr",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSchedulingDetails",
								"type": "DatasetReference"
							},
							"name": "sinkschedulingdetailsflat",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsDSLCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsDSLCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsExternalOrderReferences",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsExternalOrderReferences",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsInstallationInstructions",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsInstallationInstructions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsPromotions",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsPromotions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsUserDefinedLabels",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsUserDefinedLabels",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsPayments",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsPayments",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemshardGood",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemshardGood",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsSupplyChainDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsSupplyChainDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsServiceAddr",
								"type": "DatasetReference"
							},
							"name": "sinklosgserviceaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsDirecTVCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsDirecTVCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsVoipCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsVoipCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsIptvCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsIptvCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsWirelessCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsWirelessCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsPriceList",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsPriceList",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsInternetCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsInternetCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsConflictingServiceDetailReferences",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsConflictingServiceDetailReferences",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsWirelessCharUpgradeQual",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsWirelessCharUpgradeQual",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItems",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItems",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsProvisionSystem",
								"type": "DatasetReference"
							},
							"name": "sinkacctProvisionSystem",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsEventHistory",
								"type": "DatasetReference"
							},
							"name": "sinkLosgsLineItemsEventHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsEventHistory",
								"type": "DatasetReference"
							},
							"name": "sinkOceOrderLosgsEventHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTransactionlogs",
								"type": "DatasetReference"
							},
							"name": "Transactionlogs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsApiExecutionDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsApiExecutionDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderCancelDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderCancelDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsCancelDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgCancelDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "parseJsonOrderData"
						},
						{
							"name": "selectOrderData"
						},
						{
							"name": "FinalizeOrderData"
						},
						{
							"name": "ConvertDateTime"
						},
						{
							"name": "AlterRowOrderData"
						},
						{
							"name": "flattenOrderAdditionalDetail"
						},
						{
							"name": "AlterRowOrderAdditionalDetails"
						},
						{
							"name": "selectContactDetail"
						},
						{
							"name": "FinalizeContactDetail"
						},
						{
							"name": "AlterRowOrderContactDetails"
						},
						{
							"name": "flattenPriceList"
						},
						{
							"name": "AlterRowOrderPriceList"
						},
						{
							"name": "flattenProductGroups"
						},
						{
							"name": "AlterRowOrderProductGroups"
						},
						{
							"name": "flattenOrderPromotions"
						},
						{
							"name": "AlterRowOrderPromotions"
						},
						{
							"name": "selectSchedulingDetails"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "flattenTermsandConditions"
						},
						{
							"name": "ConvertTimestamp"
						},
						{
							"name": "flattenServiceFacilityQualifications"
						},
						{
							"name": "flattenBillingDetails"
						},
						{
							"name": "selectOrderAccountsBillingDetails"
						},
						{
							"name": "AlterRowOrderAccounts"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRowOrderAccountsServiceAddress"
						},
						{
							"name": "AlterRowOrderAccountsServiceFacilityQualification"
						},
						{
							"name": "AlterRowOrderAccountsBillingDetails"
						},
						{
							"name": "flattenOrderLosgs"
						},
						{
							"name": "selectOrderLosgs"
						},
						{
							"name": "flattenLosgsPrice"
						},
						{
							"name": "flattenLosgsPriceSummaryList"
						},
						{
							"name": "flattenLosgsLineItems"
						},
						{
							"name": "flattenLosgsAdditionalDetail"
						},
						{
							"name": "AlterRowOrderLosgsPrice"
						},
						{
							"name": "AlterRowOrderLosgsPriceSummaryList"
						},
						{
							"name": "AlterRowlosgsLineitemsAdditionalDetail"
						},
						{
							"name": "selectOrderSourceDetail"
						},
						{
							"name": "flattenSourceDetailAdditionalDetail"
						},
						{
							"name": "FinalizeOrderSourceDetail"
						},
						{
							"name": "AlterRowOrderSourceDetail"
						},
						{
							"name": "AlterRowOrderSourceDetailAdditionalDetail"
						},
						{
							"name": "AlterRowOrderlosgs"
						},
						{
							"name": "AlterRow4"
						},
						{
							"name": "flattenAllAccounts"
						},
						{
							"name": "selectAllAccounts"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectBusinessAddress"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "selectServiceAddress"
						},
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "window2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "window3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "window5"
						},
						{
							"name": "filter5"
						},
						{
							"name": "window8"
						},
						{
							"name": "window9"
						},
						{
							"name": "filter9"
						},
						{
							"name": "window10"
						},
						{
							"name": "filter10"
						},
						{
							"name": "filter8"
						},
						{
							"name": "window17"
						},
						{
							"name": "filter17"
						},
						{
							"name": "window18"
						},
						{
							"name": "filter18"
						},
						{
							"name": "window19"
						},
						{
							"name": "filter19"
						},
						{
							"name": "window20"
						},
						{
							"name": "filter20"
						},
						{
							"name": "window23"
						},
						{
							"name": "filter23"
						},
						{
							"name": "window24"
						},
						{
							"name": "filter24"
						},
						{
							"name": "window25"
						},
						{
							"name": "filter25"
						},
						{
							"name": "window26"
						},
						{
							"name": "filter26"
						},
						{
							"name": "window28"
						},
						{
							"name": "filter28"
						},
						{
							"name": "window29"
						},
						{
							"name": "filter29"
						},
						{
							"name": "window30"
						},
						{
							"name": "filter30"
						},
						{
							"name": "window6"
						},
						{
							"name": "filter6"
						},
						{
							"name": "selectcreditpolicy"
						},
						{
							"name": "window33"
						},
						{
							"name": "filter33"
						},
						{
							"name": "alterRowcreditpolicy"
						},
						{
							"name": "flattendebitaccounts"
						},
						{
							"name": "selectdebitaccounts"
						},
						{
							"name": "window34"
						},
						{
							"name": "filter34"
						},
						{
							"name": "alterRowdebitaccounts"
						},
						{
							"name": "flattenrelatedparty"
						},
						{
							"name": "window35"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter35"
						},
						{
							"name": "alterRowrelatedparty"
						},
						{
							"name": "selecterror"
						},
						{
							"name": "alterRowerrors"
						},
						{
							"name": "flattenerror"
						},
						{
							"name": "selectmoveorder"
						},
						{
							"name": "alterRowmoveorder"
						},
						{
							"name": "window37"
						},
						{
							"name": "filter38"
						},
						{
							"name": "selectOrderTask"
						},
						{
							"name": "flattenOrderTask"
						},
						{
							"name": "window38"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "filter39"
						},
						{
							"name": "alterRowtaskid"
						},
						{
							"name": "select5"
						},
						{
							"name": "window39"
						},
						{
							"name": "filter40"
						},
						{
							"name": "alterRowreferencedetail"
						},
						{
							"name": "filtertask"
						},
						{
							"name": "filtererror"
						},
						{
							"name": "filterorderdata"
						},
						{
							"name": "derivedColumn12"
						},
						{
							"name": "derivedColumn14"
						},
						{
							"name": "select9"
						},
						{
							"name": "derivedColumn20"
						},
						{
							"name": "derivedColumn21"
						},
						{
							"name": "derivedColumn22"
						},
						{
							"name": "derivedColumn23"
						},
						{
							"name": "select10"
						},
						{
							"name": "window40"
						},
						{
							"name": "filter41"
						},
						{
							"name": "IPtvalterrow"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "window41"
						},
						{
							"name": "filter42"
						},
						{
							"name": "AlterSubcribeName"
						},
						{
							"name": "select12"
						},
						{
							"name": "window42"
						},
						{
							"name": "filter43"
						},
						{
							"name": "select13"
						},
						{
							"name": "window43"
						},
						{
							"name": "filter44"
						},
						{
							"name": "altervoipc"
						},
						{
							"name": "select14"
						},
						{
							"name": "window44"
						},
						{
							"name": "filter45"
						},
						{
							"name": "altere11"
						},
						{
							"name": "select15"
						},
						{
							"name": "window45"
						},
						{
							"name": "filter46"
						},
						{
							"name": "alterWirlessChar"
						},
						{
							"name": "window46"
						},
						{
							"name": "filter47"
						},
						{
							"name": "alterServiceProvider"
						},
						{
							"name": "window48"
						},
						{
							"name": "filter49"
						},
						{
							"name": "alterRowOrderAccountsCreditCheck"
						},
						{
							"name": "window49"
						},
						{
							"name": "filter50"
						},
						{
							"name": "alterRowPortDetail"
						},
						{
							"name": "derivedColumn31"
						},
						{
							"name": "window50"
						},
						{
							"name": "filter51"
						},
						{
							"name": "alterRowv101oceOrderAcctsBillingDetailAddr"
						},
						{
							"name": "select18"
						},
						{
							"name": "derivedColumn33"
						},
						{
							"name": "flattencompensationrepdetail"
						},
						{
							"name": "windowCompensation"
						},
						{
							"name": "filter52"
						},
						{
							"name": "alterCompensation"
						},
						{
							"name": "flatten5"
						},
						{
							"name": "window51"
						},
						{
							"name": "filter53"
						},
						{
							"name": "alteradditonalDetails"
						},
						{
							"name": "window52"
						},
						{
							"name": "filter54"
						},
						{
							"name": "alterRowlosginternetchar"
						},
						{
							"name": "window53"
						},
						{
							"name": "filter55"
						},
						{
							"name": "alterRowDIrectvchar"
						},
						{
							"name": "select19"
						},
						{
							"name": "alterRowevent"
						},
						{
							"name": "select20"
						},
						{
							"name": "derivedColumn35"
						},
						{
							"name": "filtertransactionlogs"
						},
						{
							"name": "selectOrderTransctionLogs"
						},
						{
							"name": "flattenTransactionLosgHistory"
						},
						{
							"name": "derivedColumn36"
						},
						{
							"name": "AlterRowTransactionLogsHistory"
						},
						{
							"name": "flattenTransactionLosgs"
						},
						{
							"name": "AlterRowTransactionLosgs"
						},
						{
							"name": "select21"
						},
						{
							"name": "select22"
						},
						{
							"name": "alterRowtermsandconditins"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "select25"
						},
						{
							"name": "select26"
						},
						{
							"name": "select27"
						},
						{
							"name": "select28"
						},
						{
							"name": "window54"
						},
						{
							"name": "filter56"
						},
						{
							"name": "alterRowautopay"
						},
						{
							"name": "select29"
						},
						{
							"name": "window55"
						},
						{
							"name": "filter57"
						},
						{
							"name": "alterRowautoepay"
						},
						{
							"name": "select30"
						},
						{
							"name": "window56"
						},
						{
							"name": "filter58"
						},
						{
							"name": "alterRowcardonfile"
						},
						{
							"name": "select31"
						},
						{
							"name": "window57"
						},
						{
							"name": "filter59"
						},
						{
							"name": "alterRowcardepay"
						},
						{
							"name": "select33"
						},
						{
							"name": "window58"
						},
						{
							"name": "filter60"
						},
						{
							"name": "alterRownego"
						},
						{
							"name": "select34"
						},
						{
							"name": "window59"
						},
						{
							"name": "filter61"
						},
						{
							"name": "alterRowunified"
						},
						{
							"name": "flatten7"
						},
						{
							"name": "window60"
						},
						{
							"name": "filter62"
						},
						{
							"name": "alterRowdebtaccounts"
						},
						{
							"name": "select35"
						},
						{
							"name": "window61"
						},
						{
							"name": "filter63"
						},
						{
							"name": "alterRowEmployeeDetail"
						},
						{
							"name": "select36"
						},
						{
							"name": "derivedColumn39"
						},
						{
							"name": "window62"
						},
						{
							"name": "filter64"
						},
						{
							"name": "alterRoweReferrel"
						},
						{
							"name": "select37"
						},
						{
							"name": "window63"
						},
						{
							"name": "filter65"
						},
						{
							"name": "alterRowecommerce"
						},
						{
							"name": "flatten9"
						},
						{
							"name": "select38"
						},
						{
							"name": "window65"
						},
						{
							"name": "filter67"
						},
						{
							"name": "alterRowdelivery"
						},
						{
							"name": "flatten10"
						},
						{
							"name": "window66"
						},
						{
							"name": "filter68"
						},
						{
							"name": "alterRowInte"
						},
						{
							"name": "select40"
						},
						{
							"name": "window67"
						},
						{
							"name": "filter69"
						},
						{
							"name": "alterRowfleet"
						},
						{
							"name": "select41"
						},
						{
							"name": "window68"
						},
						{
							"name": "filter70"
						},
						{
							"name": "alterRowlogin"
						},
						{
							"name": "select42"
						},
						{
							"name": "window69"
						},
						{
							"name": "filter71"
						},
						{
							"name": "alterRowSingleDispatch"
						},
						{
							"name": "select43"
						},
						{
							"name": "flatten11"
						},
						{
							"name": "window70"
						},
						{
							"name": "alterRowmisc"
						},
						{
							"name": "filter72"
						},
						{
							"name": "flatten12"
						},
						{
							"name": "select44"
						},
						{
							"name": "window71"
						},
						{
							"name": "filter73"
						},
						{
							"name": "alterRowPaymentTender"
						},
						{
							"name": "select45"
						},
						{
							"name": "window72"
						},
						{
							"name": "filter74"
						},
						{
							"name": "alterRowpayment"
						},
						{
							"name": "window73"
						},
						{
							"name": "filter75"
						},
						{
							"name": "alterRowshippingdetail"
						},
						{
							"name": "select46"
						},
						{
							"name": "window74"
						},
						{
							"name": "filter76"
						},
						{
							"name": "alterRowshippingprice"
						},
						{
							"name": "select47"
						},
						{
							"name": "window75"
						},
						{
							"name": "filter77"
						},
						{
							"name": "alterRowsalesagent"
						},
						{
							"name": "select48"
						},
						{
							"name": "window76"
						},
						{
							"name": "filter78"
						},
						{
							"name": "alterRowFallout"
						},
						{
							"name": "flatten14"
						},
						{
							"name": "window77"
						},
						{
							"name": "filter79"
						},
						{
							"name": "alterRowRFallout"
						},
						{
							"name": "select49"
						},
						{
							"name": "window78"
						},
						{
							"name": "filter80"
						},
						{
							"name": "alterRowshippingaddress"
						},
						{
							"name": "flatten15"
						},
						{
							"name": "window79"
						},
						{
							"name": "derivedColumn40"
						},
						{
							"name": "filter81"
						},
						{
							"name": "alterRowschedulingdetailflat"
						},
						{
							"name": "select50"
						},
						{
							"name": "flatten16"
						},
						{
							"name": "derivedColumn42"
						},
						{
							"name": "window80"
						},
						{
							"name": "filter82"
						},
						{
							"name": "alterRowdslos"
						},
						{
							"name": "select52"
						},
						{
							"name": "flatten18"
						},
						{
							"name": "window81"
						},
						{
							"name": "filter83"
						},
						{
							"name": "alterRowext"
						},
						{
							"name": "flatten19"
						},
						{
							"name": "window82"
						},
						{
							"name": "filter84"
						},
						{
							"name": "alterRowinstall"
						},
						{
							"name": "flatten20"
						},
						{
							"name": "window83"
						},
						{
							"name": "filter85"
						},
						{
							"name": "alterRowpromo"
						},
						{
							"name": "flatten21"
						},
						{
							"name": "window84"
						},
						{
							"name": "filter86"
						},
						{
							"name": "alterRowuse"
						},
						{
							"name": "flatten22"
						},
						{
							"name": "window85"
						},
						{
							"name": "filter87"
						},
						{
							"name": "alterRowllpay"
						},
						{
							"name": "select53"
						},
						{
							"name": "window86"
						},
						{
							"name": "filter88"
						},
						{
							"name": "alterRowLLIhard"
						},
						{
							"name": "select54"
						},
						{
							"name": "window87"
						},
						{
							"name": "filter89"
						},
						{
							"name": "alterRowsupplychain"
						},
						{
							"name": "derivedColumn43"
						},
						{
							"name": "coalacc"
						},
						{
							"name": "coallosgid",
							"description": "V101.oceOrderLosgsEventHistory"
						},
						{
							"name": "select55"
						},
						{
							"name": "window88"
						},
						{
							"name": "alterRowlosgserviceaddress"
						},
						{
							"name": "filter90"
						},
						{
							"name": "flatten23"
						},
						{
							"name": "window89"
						},
						{
							"name": "filter91"
						},
						{
							"name": "alterRowDiLitem"
						},
						{
							"name": "select56"
						},
						{
							"name": "select57"
						},
						{
							"name": "window90"
						},
						{
							"name": "filter92"
						},
						{
							"name": "alterRowvoipLLitems"
						},
						{
							"name": "select58"
						},
						{
							"name": "window91"
						},
						{
							"name": "filter93"
						},
						{
							"name": "alterRowiptv"
						},
						{
							"name": "select59"
						},
						{
							"name": "window92"
						},
						{
							"name": "filter94"
						},
						{
							"name": "alterRowwire"
						},
						{
							"name": "window93"
						},
						{
							"name": "filter95"
						},
						{
							"name": "alterRowllPricelist"
						},
						{
							"name": "select60"
						},
						{
							"name": "window94"
						},
						{
							"name": "filter96"
						},
						{
							"name": "alterRowIIChar"
						},
						{
							"name": "select61"
						},
						{
							"name": "window95"
						},
						{
							"name": "filter97"
						},
						{
							"name": "alterRowlostcon"
						},
						{
							"name": "flatten25"
						},
						{
							"name": "select62"
						},
						{
							"name": "derivedColumn44"
						},
						{
							"name": "flatten26"
						},
						{
							"name": "flatten27"
						},
						{
							"name": "flatten28"
						},
						{
							"name": "window96"
						},
						{
							"name": "filter98"
						},
						{
							"name": "alterRowupgrad"
						},
						{
							"name": "select63"
						},
						{
							"name": "window97"
						},
						{
							"name": "filter99"
						},
						{
							"name": "alterRowlineitems"
						},
						{
							"name": "derivedColumn45"
						},
						{
							"name": "flatten29"
						},
						{
							"name": "derivedColumn46"
						},
						{
							"name": "derivedColumn47"
						},
						{
							"name": "derivedColumn48"
						},
						{
							"name": "derivedColumn49"
						},
						{
							"name": "derivedColumn50"
						},
						{
							"name": "derivedColumn51"
						},
						{
							"name": "derivedColumn52"
						},
						{
							"name": "flatten30"
						},
						{
							"name": "derivedColumn53"
						},
						{
							"name": "derivedColumn54"
						},
						{
							"name": "derivedColumn55"
						},
						{
							"name": "derivedColumn56"
						},
						{
							"name": "derivedColumn57"
						},
						{
							"name": "derivedColumn58"
						},
						{
							"name": "derivedColumn59"
						},
						{
							"name": "derivedColumn60"
						},
						{
							"name": "derivedColumn61"
						},
						{
							"name": "derivedColumn62"
						},
						{
							"name": "derivedColumn63"
						},
						{
							"name": "coalLLseq"
						},
						{
							"name": "derivedColumn64"
						},
						{
							"name": "derivedColumn65"
						},
						{
							"name": "select64"
						},
						{
							"name": "derivedColumn66"
						},
						{
							"name": "derivedColumn67"
						},
						{
							"name": "filterFalloutstructure"
						},
						{
							"name": "derivedColumn68"
						},
						{
							"name": "derivedColumn69"
						},
						{
							"name": "filtereCommercePartner"
						},
						{
							"name": "filteremployeeReferralDetail"
						},
						{
							"name": "filteremployeeDetail"
						},
						{
							"name": "filterfleetDetail"
						},
						{
							"name": "filterloginProfile"
						},
						{
							"name": "filterSalesAgent"
						},
						{
							"name": "filterreferenencedetail"
						},
						{
							"name": "filtercreditPolicy"
						},
						{
							"name": "filter100"
						},
						{
							"name": "filterunifiedaccount"
						},
						{
							"name": "filternegotiateCC"
						},
						{
							"name": "filtecardOnFilePaymentMethod"
						},
						{
							"name": "filtercreditCheck"
						},
						{
							"name": "filter101"
						},
						{
							"name": "filtehardGood"
						},
						{
							"name": "filter"
						},
						{
							"name": "filter102"
						},
						{
							"name": "filter103"
						},
						{
							"name": "filter104"
						},
						{
							"name": "filter105"
						},
						{
							"name": "filter106"
						},
						{
							"name": "filter107"
						},
						{
							"name": "filter108"
						},
						{
							"name": "filter109"
						},
						{
							"name": "filter110"
						},
						{
							"name": "filter111"
						},
						{
							"name": "filter112"
						},
						{
							"name": "filter113"
						},
						{
							"name": "filter114"
						},
						{
							"name": "filter115"
						},
						{
							"name": "filter116"
						},
						{
							"name": "filter117"
						},
						{
							"name": "filter118"
						},
						{
							"name": "filter119"
						},
						{
							"name": "derivedColumn70"
						},
						{
							"name": "derivedColumn71"
						},
						{
							"name": "filter120"
						},
						{
							"name": "flatten31"
						},
						{
							"name": "select65"
						},
						{
							"name": "window98"
						},
						{
							"name": "filter121"
						},
						{
							"name": "alterRowProvisionSystem"
						},
						{
							"name": "derivedColumn72"
						},
						{
							"name": "window99"
						},
						{
							"name": "filter122",
							"description": "filter"
						},
						{
							"name": "selectOceOrderLosgsEventHistory",
							"description": "Select Required Columns for oceOrderLosgsEventHistory"
						},
						{
							"name": "windowStreamBasedLosg"
						},
						{
							"name": "getLatestLosgInfoFromWindow",
							"description": "Filtering rows using expressions on columns 'prank'"
						},
						{
							"name": "alterRowForOceOrderLosgsEventHistory",
							"description": "Add expressions to alter rows"
						},
						{
							"name": "selectOceOrderLosgsLineItemsEventHistory"
						},
						{
							"name": "windowLosgsLineItemsEventHistory"
						},
						{
							"name": "filterLatestLosgsLineItemsEvent"
						},
						{
							"name": "setModifiedDateForLosgEventHistory"
						},
						{
							"name": "addModifiedDateToLosgLineItemHistory"
						},
						{
							"name": "alterRowOrderLosgsLineItemsEventHistory"
						},
						{
							"name": "filterEventsource"
						},
						{
							"name": "flatten32"
						},
						{
							"name": "derivedColumn73"
						},
						{
							"name": "window100"
						},
						{
							"name": "filter123"
						},
						{
							"name": "altertransactinlogs"
						},
						{
							"name": "flattenApiExecutionArray"
						},
						{
							"name": "windowApiExecutionDetails"
						},
						{
							"name": "filterLatestApiExecutionRecord"
						},
						{
							"name": "AlterRowApiExecutionDetails"
						},
						{
							"name": "selectOrderCancelDetails"
						},
						{
							"name": "windowOrderCancel"
						},
						{
							"name": "filterOrderCancel"
						},
						{
							"name": "AlterRowCancelDetails"
						},
						{
							"name": "filteroceOrderCancelDetails"
						},
						{
							"name": "selectoceOrderLosgCancelDetails"
						},
						{
							"name": "windowoceOrderLosgCancelDetails"
						},
						{
							"name": "filteroceOrderLosgCancelDetails"
						},
						{
							"name": "alterRowoceOrderLosgCancelDetails"
						}
					],
					"scriptLines": [
						"source(output(",
						"          orderjson_1 as string,",
						"          lastmodified_date as timestamp,",
						"          customerordernumber as string,",
						"          eventTime as long,",
						"          channel as string,",
						"          eventSource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionColumn: 'customerordernumber',",
						"     partitionBy('external', 20)) ~> TempOrderData",
						"TempOrderData parse(orderjson_1 = orderjson_1 ? (orderEvent as (eventid as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          eventTime as string,",
						"          customerOrderNumber as string,",
						"          traceId as string,",
						"          metaData as (sender as string,",
						"          channel as string,",
						"          orderType as string,",
						"          traceId as string,",
						"          isSingleTopic as string,",
						"          routingInfo as string,",
						"          automationUrl as string,",
						"          idbStatus as string,",
						"          priority as string,",
						"          customerOrderNumber as string,",
						"          version as string,",
						"          isUpgradeOrder as string,",
						"          fraudResponse as string,",
						"          originalVersion as string,",
						"          fallout as string,",
						"          callback as string),",
						"          dataMap as (traceId as string),",
						"          data as (OrderTasks as (OrderTask as (ApplicationName as string,",
						"Channel as string,",
						"CreationDate as string,",
						"CustomerOrderNumber as string,",
						"LosgIds as string,",
						"OrderNumber as string,",
						"PartnerName as string,",
						"ProgramName as string,",
						"QueueId as string,",
						"QueueName as string,",
						"QueueSlaDetails as string,",
						"TaskId as string,",
						"TaskStatus as string, CamundaTaskId as string",
						")[]),",
						"          order as (createdDate as string,",
						"          updatedDate as string,",
						"          orderId as string,",
						"          specialInstructions as string,",
						"          customerOrderNumber as string,",
						"          oceOrderNumber as string,",
						"          revisionNumber as string,",
						"          requestType as string,",
						"          submittedDate as string,",
						"          type as string,",
						"          requestId as string,",
						"          version as string,",
						"          program as string,",
						"          acceptedDate as string,",
						"          isOrderPended as string,",
						"          cancelDetails as (cancelReason as string),",
						"          losgs as (cancelDetails as (cancelReason as string,cancelBy as string),actionReasonCode as string,previousProductOrderActionId as string,accountReference as string,actionReason as string,actionType as string,addpLOSCharacteristics as (acceptEULA as string,tenantAccountId as string,tenantAccountStatus as string),aPIExecutionDetails as (name as string,priority as string,action as string, loSGStatus as (subStatus as string,status as string))[],bundleGroupId as string,childOrderId as string,companyCode as string,creditPolicySecurityType as string, conflictingServiceDetailReferences as string,divisionCode as string,effectiveDate as string,engageVideoId as string,entitlementBenefit as string,fnGuId as string,fnUserId as string,fnType as string,freeDevicePolicyId as string,fulfillerName as string,fulfillerCode as string,fwCAF2AddressIndicator as string,fwiMoveInIndicator as string, userDefinedLabels as (label as string,sequence as string,value as string)[], serviceProvider as (name as string,code as string, type as string, conversationId as string, phoneNumber as string, orderConfirmationId as string,submissionStatus as string), promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[], ",
						"installationInstructions as (answers as string,question as string)[],",
						"dslLOSCharacteristics as (additionalDetails as string, parentComponentCode as string,retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string),  lineItems as( status as string,storeId as string,subscriptionId as string,taxableIndicator as string,tier as string,shippingDetailReference as string,socForPreviousDevice as string,priceList as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string, installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float)[],   internetLineItemCharacteristics as(additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, boltOnType as string,bucketAllowance as string,ipType as string, maxOverageCharge as integer, overageBucketAllowance as string, planDownloadSpeed as string, pricePerBucketAllowance as integer), voipLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, callerId as string,uverseMessaging as string),",
						"wirelessLineItemCharacteristics as (tradeInModelCode as string,additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, attDynamicTrafficManager as (additionalDetails as string, enterpriseId as string,manifestLabel as string,manifestURL as string),availabilityType as string,distributionChannelId as string,nciEligibleIndicator as string, newSalesChannelId as string,offerType as string,packetDataProtocol as (additionalDetails as string,apnName as string,packetDataProtocol5GIndicator as string,defaultPacketDataProtocolIndicator as string,defaultSNType as string,ipAddress as string,ipv6Address as string,ipversionType as string,ltePacketDataProtocolIndicator as string,onlineChargingSystemIndicator as string,packetDataProtocolType as string), partnerCode as string,simType as string, tradeInDetail as(additionalDetails as string,claimId as string,deviceClearingAgreement as string,deviceCondition as string,exchangeType as string,installmentPlanId as string,modelCode as string,nonComplianceFee as float, payupAmount as float)), iptvLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), direcTVLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), payments as (amount as float,currencyType as string, numberOfInstallment as integer, paymentTenderReference as string)[], action as string,addOnSolutionCharacteristics as (domainName as string,domainRegistration as string,parentItem as string,registrationType as string),billingCode as string,billingCodeType as string,catalogProductType as string,catalogSKUId as string, contractDetails as (amountFinanced as float,annualPercentageRate as float,balancedAmount as float,contractDisplayName as string,contractLength as integer,contractSent as string,contractSystem as string,contractType as string,downPayment as float,downPaymentPercent as float,financeCharge as float,installmentAmount as float,installmentPlanDefinition as string,installmentPlanId as string,installmentStatus as string,installmentType as string,prepaidFinanceCharge as string,payupAmount as float,payoffAmount as float,totalSalePrice as float),curbsideDelivery as string,displayName as string,  description as string,  effectiveDate as string,fees as (feeId as string,feeIdType as string,waivedIndicator as string,waivedReason as string),fulfillmentLocation as string,groupOptionId as string,inventoryStoreId as string,itemFulfillmentMethod as string,locationId as string,notes as string,operation as string,preOwnedIndicator as string,purchaseTransactionId as string,quantity as integer,",
						"          ",
						"          supplyChainDetail as (availabilityDate as string, carrier as string, claimRMANumber as string, exchangeDocumentId as string, exchangeOrderId as string, orderDocumentDetail as (activity as string, location as string, orderId as string), price as float, quantityBackOrdered as integer, quantityCanceled as integer, quantityOrdered as integer, quantityShipped as integer, quantityToShip as integer, shippedDate as string, trackingNumber as string),                                      id as string,                                                                             productCode as string,                                         productSKU as string,                                         productType as string,productSubType as string,                                                                          sequence as string,                                         systemName as string,                                      ",
						"          hardGood as(availabilityDate as string, biller as string, byodIndicator as string, cardSerialNumber as string, deliveryByDate as(fromDate as string,toDate as string), deliveryPromiseNote as (english as string,spanish as string), eid as string,fieldId as string, hardGoodType as string,iccId as string, make as string, manufacturerCode as string, model as string, networkAccessDeviceType as string, preOrderIndicator as string, productImageUrl as string, serialNumber as string, shipmentCommitDate as (fromDate as string,toDate as string), shippedHotIndicator as string, whiteGloveDeliveryPartner as string, wirelessHardGoodCharacteristics as (connectionType as string,deviceCategory as string, equipmentType as string, equipmentUpgrade as string, imei as string, imeiType as string, internationalMobileSubscriberIdentity as string,phoneType as string, techType as string, usoc as string, zodiacSequenceNumber as string)),                                         additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],                                     price as(additionalDetails as string,amount as float, baseAmount as float,creditFeeType as string, currencyType as string,installmentEligibility as string,msrp as float,priceType as string,total as float,taxDetail as string),productGroupReferences as string,                                         promotionReferences as string)[],                               price as(additionalDetails as string, creditFeeType as string ,installmentEligibility as string, msrp as string, taxDetail as string, amount as float,                                         baseAmount as float,                                         currencyType as string,                                         priceType as string,                                         total as float)[],                               priceSummaryList as(amount as float,                                                   currencyType as string,                                                   priceType as string,                                                   total as float,                                                   taxSummary as string)[],                               ",
						"          ",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as (type as string, value as string),urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"          ",
						"          ",
						"          ,                                ",
						"          ",
						"          losgStatus as(status as string, subStatus as string, fallout as string),  internetLOSCharacteristics as(additionalDetails as string,categoryType as string,discountedInternetIndicator as string, discountedInternetAdditionalAllowance as string, gatewayCTN as string, gatewayCTNStatus as string, internetProgramType as string, internetProtocolDigitalSubscriberLineAccess as string, internetNetworkProvider as string, retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string,parentComponentCode as string, primaryNetworkType as string),subscriberName as (emailAddress as string,   middleInitial as string,   prefix as string,  suffix as string, title as string ,    preferredContactMethod as string, previousLegalLastName as string, legalLastName as string, legalFirstName as string,                                        firstName as string,                                                   id as string,                                                   lastName as string,   additionalContactPhones as string,     ",
						"          primaryContactPhones as( extension as string,",
						"          contactPhoneType as string,                                                                            phoneNumber as string,                                                                          ",
						"               consentDetails as string)[]),                        dealerCode as string,                               fulfillmentMethod as string,                               id as string,                               installType as string,                               losgType as string,market as string,migrationIndicator as string,migrationSource as string,name as string,notes as string,preferredAreaCode as string,priceCode as string,primaryIndicator as string, productCategory as string,productOfferingId as string,productOrderActionId as string,productOrderActionReference as string,profileCode as string,rateType as string,requestedExecutionDate as string,salesOfferId as string,                             schedulingDetailReference as string,serviceArea as string,serviceAreaName as string,subMarket as string,sunsetDate as string,transferSubscriberDetail as (fromBillingAccountNumber as string,fromFAN as string,fromMobileNumber as string), sequence as string,                               serviceQualificationReference as string,                               type as string,vendorAccountId as string,                 billingSystemId as string,      iptvLOSCharacteristics as (freeSTBReceiverCount as integer, parentComponentCode as string),voipLOSCharacteristics as (reservedTelephoneNumber as string, e911Detail as(homeAlarmSystem as string, noMatchFound as string, id as string , termsAndCondition911 as (accepted as string,agreementText as string,agreementType as string,agreementURL as string,category as string,documentName as string,id as string,orderLevelIndicator as string,tncId as string,tncKey as string,tncRecordingOff as string,version as string, timestamp as string), address as string),  directoryListing as (additionalDetails as string,designation as string, name as string, title2 as string,parentComponentCode as string,subscriberName as string, omitAddressIndicator as string, listing as (address as string,listingType as string,listingCategory as string,listBy as string,releaseDetailForBillingIndicator as string) )[]),  wirelessLOSCharacteristics as (accountConversionStatus as string, activationDate as string, availabilityDate as string, billingSystemId as string, calculateTaxIndicator as string,coPayData as (addendDateAndTime as string,addendVersion as string, allowanceAmount as float, cancelCTN as string, enrollingCTN as string,receivingBAN as string,receivingFAN as string ), connectedCarDetail as (make as string, model as string, trim as string, vin as string, year as string, vehicleManufacturer as string), crossUpgradeIndicator as string, curbsideDelivery as string,inventoryStoreId as string, mobileNumber as string,paymentId as string, preOrderIndicator as string , primarySharedPlanIndicator as string,shippedHotIndicator as string, shoppingZipCode as string, storeId as string, subscriberCrossmarketIndicator as string, subscriptionClass as string , tradeInQuoteId as string, upgradeDetail as (relatedMobileNumber as string, relationship as string),upgradeQualificationDetails as (approvalNumber as string,contractExtended as string,deviceType as string,discountUOM as string,maximumMRC as integer,minimumCommitment as string,minimumMRC as integer,newAEUCheckerIndicator as string,offerCategory as string,policyCategory as string,priceList as string,qualificationLevel as string,qualificationMessage as string,qualificationType as string,upgradeEligibilityDate as string,upgradeFeeWaivedIndicator as string)[],splitLiabilityData as (addendDateAndTime as string,addendVersion as string,cancelCTN as string,enrollingCTN as string,oneTimeChargeIndicator as string,splitLiabilityValueIndicator as string,targetBAN as string,targetFAN as string,telecomManagerEmailAddress as string),manageCallList as (action as string,companyAListName as string,companyCTNList as string,contactCTN as string,id as string,overrideWithCompanyAListIndicator as string)), termsAndConditionAccepted as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncld as string, tncKey as string, tncRecordingOff as string, version as string )[], compensation as (repDetails as (dealerCode as string,repAction as string,repId as string,salesCode as string,type as string)[],submittedBy as string),additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[], ",
						"               numberPortDetail as (currentServiceProviderId as string ,customerCode as string, disconnectAcknowledged as (accepted as string,deviceInstallAgreementType as string,econsentAgreementType as string, timestamp as string,version as string),e911ServiceRoutingNumber as string,lightspeedLocalRoutingNumber as string,lastFourOfSSN as string,localExchangeRoutingGuideLocalRoutingNumber as string, name as string, nonATTPortIn as string,ospAccountNumber as string,ospName as string, pinOrPassword as string, portEligibility as string,portInType as string, portRequestNumber as string,portStatus as string,portTelephoneNumber as string,shipmentInfoUpdatedIndicator as string, portstatusReasonCode as string, portRequestLineStatus as string, portstatusReasonDescription as string   ,previousAddress as string,shadowLocalRoutingNumber as string,ssn as string,taxId as string), direcTVLOSCharacteristics as( dealerId as string,freeSTBReceiverCount as string, hasMoreThanThreeFloors as string, marketingSourceCode as string,moveInOrder as string, offerLanguage as string, parentComponentCode as string, serviceAgreement as string),",
						"               externalOrderReferences as (systemName as string,systemOrderReference as string, systemOrderReferenceType as string)[]",
						"               ",
						"               )[],",
						"          moveDetail as (additionalDetails as string,",
						"          actualDisconnectDate as string,",
						"          fromBillingAddress as string,",
						"          fromServiceAddress as string,",
						"          fromTelephoneNumber as string,",
						"          fullyAuthenticatedIndicator as string),",
						"          eCommercePartner as (additionalDetails as string,",
						"          affiliateName as string,",
						"          code as string,",
						"          name as string,",
						"          email as string,",
						"          phoneNumber as string,",
						"          referredDate as string,",
						"          type as string),",
						"          employeeDetail as (centralizedTableId as string,",
						"          class as string,",
						"          status as string,",
						"          uid as string),",
						"          deliveryPromiseNote as (english as string,",
						"          spanish as string),",
						"          integratedOffers as (category as string,ioId as string,ioSequence as string, qualifyingServiceDetails as string)[],",
						"          fleetDetail as (callBackDateTime as string,",
						"          customerAssignToId as string,",
						"          lineCount as string,",
						"          locationCount as string,",
						"          projectBillTo as string,",
						"          projectType as string,",
						"          timeZone as string,",
						"          companyName as string,",
						"          companyCreationIndicator as string,",
						"          erpAccount as string,",
						"          shipToId as string,",
						"          shippingFeeId as string),",
						"          loginProfile as (email as string,",
						"          orderInitiator as string,",
						"          profileId as string,",
						"          userGuId as string,",
						"          userId as string),",
						"          miscellaneousDetails as (code as string,parentType as string,type as string,value as string)[],",
						"          salesAgent as (agentCode as string,",
						"          location as string,",
						"          salesCode as string,",
						"          uid as string),",
						"          paymentTenders as ( paymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string,paymentMethodId as string,ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as string, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),additionalDetails as string, depositOption as string, fixedAmount as float, id as string, selectedOptionId as string,sequence as string, collectedInOtherSystem as string)[],",
						"          accounts as (provisioningSystems as (provisioningSystem as (systemName as string,systemOrderReference as string)[]),contractAcceptance as (acceptance as string,contractLength as string,versionNumber as string), creditAlert as (fraudAlert as string, generalMessage as string), ctnValidatedIndicator as string,customerCode as string,delinquentAccountIndicator as string, electronicLetterOfAuthorization as (electronicDisclosureAuthorization as string, internetServiceAuthorization as string,letterOfAuthorizationURL as string, localServiceAuthorization as string, localTollProviderAuthorization as string, longDistanceServiceProvider as string), emailValidatedIndicator as string, existingAutoBillStatus as string, existingAutoBillIndicator as string, landLineNumber as string, liabilityType as string, marketingSourceCode as string, mdmProfileSetting as (additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],profileName as string), partnerJointBillType as string, pmoIndicator as string, priceCode as string, priceMatch as string, subMarket as string, targetCTN as string, thirdPartyCombinedBill as string, winBackIndicator as string, consentToCCIndicator as string ,bankingPartner as (customerId as string, name as string), bigData as string, billPaymentDueDate as string, cardOnFileStatus as string, conflictingServiceDetails as (accountNumber as string, btn as (customerCode as string,paymentAmount as string,tn as string), changeType as string, customerCode as string, disconnectDate as string , dslmemberDetail as (authenticatedIndicator as string ,memberId as string,reuseDSLMemberIdIndicator as string),id as string, legacyExistIndicator as string, productDetails as (action as string, packageCode as string, previousProductTransportType as string,productCode as string,productDescription as string)[], referallOfCallsIndicator as string , region as string, state as string)[], accountCrossmarketIndicator as string, acpEligibility as (acpTransactionId as string, acpClassification as string), anchorCTN as string, unifiedAccount as(convergeOrderIndicator as string, convergeValidationIndicator as string, convergedBilling as string,premierIndicator as string, unifiedAccountDiscount as string, unifiedAccountExisting as string,unifiedAccountPending as string, unifiedAccountRebate as string, unifiedAccountReference as string, unifiedAccountReward as string)     ,negotiateConflictCustomer as(conflictCustomerType as string, conflictLandlordDetail as (approvalDate as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string, phoneNumberType as string), landlordApproval as string), existingCustomerDetail as (billingTelephoneNumber as string,billingAccountNumber as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string,phoneNumberType as string),moveOrCeaseOrderNumber as string)),   cardOnFilePaymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as string, tn as string), cash as (paymentAmount as string,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as string,paymentToken as string), store as (last4Digits as string, paymentAmount as string, profileOwnerId as string),                       ePaymentMethod as( address as string , ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),                    accountCategory as string,                          accountSubCategory as string,                          accountSubType as string,                          accountType as string,                          autoPayReason as string,                          b2bReference as string,                          billingDeliveryPreference as string,                          billingLanguagePreference as string,                          businessAccountName as string,                          cpni as string,                          ebillReason as string,                          enterpriseType as string,                          gigaPower as string,                          id as string,                          langId as string,                          market as string,                          passCode as string,                          paymentArrangement as string,                          sequence as string,                          spokenLanguagePreference as string,                         billingAccountNumber as string, billingAccountTelephoneNumber as string,   ",
						"          primaryCTN as  string,",
						"          additionalDetails as string,                       ",
						"          autopayPaymentMethod as( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string, paymentMethodId as string,  ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),",
						"          ",
						"billingDetail as(billingType as string,",
						"accountStatus as string,",
						"nextBillingCycleDate as string,                                                   ",
						"          address as(additionalDetails as  string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),                                                                  unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),                                                  ",
						"authentication as(dob as string,driversLicense as (licenseExpirationDate as string,licenseNumber as string,state as string),employerDetail as (employerName as string,employerPhoneNumber as string),federalTaxId as string,gender as string,lastFourOfSSN as string,motherMaidenName as string,                                                                       ssn as string,ssnRefusedIndicator as string,stateId as (idNumber as string,state as string),                                                                       securityVerification as(                                                                           pin as string,                                                                            securityAnswer as string,                                                                            securityQuestion as string)),",
						"previousAddress as string,previousPhoneNumber as string,",
						"  name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]) )[],   ",
						"",
						"          businessAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                ",
						"          parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),",
						"          unparsedAddress as(          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),",
						"          ",
						"          creditCheck as( writeOffDate as string, creditReferenceDate as string,currentAccountBalance as float, currentDeniablePastDueAmount as string, currentNonDeniablePastDueAmount as string,currentNonRegulatedPastDueAmount as string,currentPastDueAmount as string,currentRegulatedPastDueAmount as string, customerApprovalSystemTransactionId as string, debtPaidStatus as string, depositAmount as string, depositStatus as string, electronicIdVerifierLaunched as string, electronicIdVerifierRequired as string,  electronicIdVerifierResults as string,exchangeListFound as string,expressPayDetailHeld as string, finalBillAccounts as string, ignoreDeposit as string, minimumAmountDue as string , nonRefundableCreditFee as string, numberApprovedLines as string, numberLinesRequired as string, productsInclude as string, proprietarySegment as string, reasonCode as string, reasonCodeDescription as string, safeScanAlertIndicator as string, safeScanPassIndicator as string, writeOffAmount as string, addAccountGUId as string,applicationApprovalDate as string, applicationExpiresDate as string,creditInquiryOpen as string,creditPolicyToken as string,creditScoreResult as string, creditStatus as string,creditVerified as string, applicationNumber as string,    debtAccounts as (accountBalance as string, affiliateId as string, customerAgreementCode as string, debtAccountNumber as string, disconnectDate as string, individualCustomerKey as string, minimumAmountDue as string)[],                                creditBand as string,                                    creditCheckManagementTransactionId as string,                                    creditCheckRanIndicator as string,                                    creditClass as string,                                    depositRequired as string,                                    electronicIdNumber as string,                                    individualCustomerKey as string,                                    singleCreditQueryWirelessIndicator as string,                                    treatmentCode as string,                                    treatmentMessage as string),",
						"          ",
						"                                ",
						"",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),   ",
						"          ",
						"          serviceFacilityQualifications as (additionalDetails as string, cpeRequiredIndicator as string, facilityCheck as string,  gfastDeviceWireType as string, potsAvailableIndicator as string,                                      dslAvailableIndicator as string,                                         frequency17MhzIndicator as string,                                         id as string,                                         preferredNetworkType as string,                                         profileCode as string,                                         vectoringIndicator as string,                                        address as string)[])[],",
						"          additionalDetails as (type as string, value as string, code as string, parentType as string, sequence as integer)[],",
						"          debtAccounts as (accountCategory as string, accountSubCategory as string, affiliateId as string,  amount    as string, debtAccountNumber    as string, debtPaidStatus    as string, id   as string, paymentMethodReference   as string, provider   as string, settledBy   as string, system   as string, systemDivision    as string)[],",
						"          employeeReferralDetail as (appId as string,",
						"          employeeUId as string,",
						"          packageId as string),",
						"          relatedParty as (endDateTime as string, id as string,role as string, startDateTime as string, type as string, name as string)[],",
						"          b2bDetail as string,",
						"          contactDetail as (additionalDetails as string,",
						"          additionalEmailRecipients as string,",
						"          authorizedContacts as string,",
						"          orderConfirmationByEmailPermissionIndicator as string,",
						"          orderPickUpCTN as string,",
						"          permissionForOutboundCallIndicator as string,",
						"          personalDetail as (additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          id as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          primaryContactPhones as (consentDetails as string,",
						"contactPhoneType as string,",
						"smsValidatedIndicator as string,",
						"extension as string,",
						"phoneNumber as string)[],",
						"          suffix as string,",
						"          title as string),",
						"          preferredContactMethod as string,",
						"          preferredTimeOfDayForContact as string,",
						"          primaryEmailAddress as string,",
						"          productUpdatesByEmailPermissionIndicator as string,",
						"          secondaryEmailAddress as string,",
						"          timeZone as string,",
						"          unpublishedContactByPhonePermissionIndicator as string),",
						"          creditPolicy as (additionalDetails as string,",
						"          creditPolicyTransactionId as string,",
						"          crsmOnFlag as string,",
						"          previousCreditPolicyTransactionId as string,",
						"          policyAcceptedIndicator as string,",
						"          uucpStatus as string),",
						"          installmentDetail as (multiIndicator as string,",
						"          numberOfInstallments as string),",
						"          priceList as (additionalDetails as string,amount as float,  baseAmount as float,    creditFeeType as string,                              currencyType as string,      installmentEligibility as string,      msrp as float,     taxDetail as string,  total as float,                priceType as string)[],",
						"          priceSummaryList as (amount as float,                                    currencyType as string,                                    priceType as string,                                    total as float,                                    taxSummary as string)[],",
						"          productGroups as (additionalDetails as string, id as string,                                         name as string,                                         sequence as integer,                                         type as string,                                         packageCharacteristics as(description as string, code as string, type as string),",
						"          discountOffer as string,  characteristics as (id as string),",
						"          sharedPlanCharacteristics as (",
						"          dataGroupId as string,",
						"familyGroupId as string,",
						"groupReferencesCode as string,",
						"planType as string,",
						"primarySubscriberNumber as string))[],",
						"          promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[],",
						"          referenceDetail as (commonOrderIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          fraudDetectionDetail as (additionalDetails as (type as string, parentType as string, code as string, value as string, sequence as integer)[],",
						"          authenticationRequestId as string,",
						"          efcCallIndicator as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string),",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          falloutDetails as (code as string, dateTime as string, description as string, operation as string)[],",
						"          encryptedIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          bulkIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          associatedRequestID as string),",
						"          schedulingDetails as ( serviceLevel as string, timeZone as string, valueSegmentationTier as string,",
						"          landlordDetail as (landlordName as string,landlordPermission as string,landlordPhoneNumber as string),",
						"          nffl as (fulfillerName as string, fulfillerTN as string, nfflFlag as string), ",
						"          preference as string, reservationId as string, scheduleType as string, dispatchType as string, deferredInstallationDuration as string, eventCode as string, eventCodeEnteredManuallyIndicator as string, ",
						"          installationPartner as(partnerName as string, projectPurchaseOrderAmount as string , projectPurchaseOrderDate as string , projectPurchaseOrderNumber as string, projectBilling as string), appointmentComment as string, bestTimeToReach as string, billingInstallmentsIndicator as string, businessName as string, ",
						"          connecTechInstallationOptions as string,",
						"          additionalDetails as string,id as string,                                                   installType as string,                                                   realTimeCalendarIndicator as string,                                                   scheduleAsSoonAsPossibleIndicator as string,                                                   ",
						"          ",
						"          ",
						"           name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"",
						"          scheduleByDayAndTime as (anyDayOfTheWeek as string,friday as string, monday as string, saturday as string, sunday as string, thursday as string, tuesday as string , wednesday as string),",
						"          actualSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string),",
						"          confirmedSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string))[],",
						"          shippingDetails as (",
						"          additionalDetails as (code as string,parentType as string,type as string,value as string,sequence as integer)[],",
						"               billingCode as string,carrierPreference as string,id as string,sequence as integer,",
						"               ",
						"               price as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string,installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float),",
						"               recipientName as (",
						"                         ",
						"                         emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"                         ",
						"                         ",
						"                         ",
						"                    shipmentCommitDate as (fromDate as string,toDate as string),shippingCode as string,shippingMethod as string,shippingPriceCode as string,",
						"                    ",
						"               address as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addInstructions as string,clli8 as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"               ",
						"               ",
						"               ",
						"                    )[],",
						"          singleDispatchDetail as (eligibleIndicator as string,",
						"          geoAreaAvailableIndicator as string,",
						"          satelliteTVOnlyEligibleIndicator as string),",
						"          sourceDetail as (application as string,",
						"          expressCheckOutIndicator as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetail as (groupId as string,",
						"          groupName as string,",
						"          resourceCenterTicketNumber as string),",
						"          responseMode as string,",
						"          sequence as integer,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          region as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          zip as string,",
						"          additionalDetails as (code as string, type as string, value as string, parentType as string, sequence as integer )[]),",
						"          statusDetail as (status as string,",
						"          subStatus as string,",
						"          fallout as (code as string,",
						"          dateTime as string,",
						"          description as string,",
						"          operation as string)),",
						"          termsAndConditions as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncld as string, tncKey as string, tncRecordingOff as string, version as string )[]),",
						"          transactionLogs as (comments as string,",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          updateInfos as string,",
						"          channel as string,",
						"          orderStatus as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          changedLosgReferenceId as string,",
						"          recordId as string,",
						"          queueName as string,",
						"          parentOrderId as string,",
						"          startTime as string,",
						"          endTime as string,",
						"          transactionId as string,",
						"          orderId as string,",
						"          losgs as (losgReferenceId as string,                                                       service as string,                                                       serviceType as string,                                                       status as string,                                                       subStatus as string,wirelessNumber as string)[])[],",
						"          Errors as (Error as (ErrorCode as string,ErrorDescription as string , Reference as ( IdRef as string, Type as string))[])))),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJsonOrderData",
						"derivedColumn66 select(mapColumn(",
						"          OrderData = orderjson_1.orderEvent.data.order,",
						"          customerOrderNumber = customerordernumber,",
						"          ordertask_channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          lastmodified_date,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderData",
						"derivedColumn20 select(mapColumn(",
						"          createdDate = OrderData.createdDate,",
						"          updatedDate = OrderData.updatedDate,",
						"          customerOrderNumber,",
						"          oceOrderNumber = OrderData.oceOrderNumber,",
						"          revisionNumber = OrderData.revisionNumber,",
						"          requestType = OrderData.requestType,",
						"          submittedDate = OrderData.submittedDate,",
						"          type = OrderData.type,",
						"          requestId = OrderData.requestId,",
						"          version = OrderData.version,",
						"          program = OrderData.program,",
						"          acceptedDate = OrderData.acceptedDate,",
						"          isOrderPended = OrderData.isOrderPended,",
						"          b2bDetail = OrderData.b2bDetail,",
						"          numberOfInstallments = OrderData.installmentDetail.numberOfInstallments,",
						"          status = OrderData.statusDetail.status,",
						"          subStatus = OrderData.statusDetail.subStatus,",
						"          orderId = OrderData.orderId,",
						"          ordertask_channel,",
						"          specialInstructions = OrderData.specialInstructions,",
						"          lastmodified_date,",
						"          sourcedetail_channel,",
						"          installmentMultiIndicator = OrderData.installmentDetail.multiIndicator,",
						"          dc_eventtime,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeOrderData",
						"filter30 derive(submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          channel = coalesce(ordertask_channel,sourcedetail_channel),",
						"          updatedDate = toTimestamp(toLong(toString(byName('updatedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> ConvertDateTime",
						"ConvertDateTime alterRow(upsertIf(true())) ~> AlterRowOrderData",
						"derivedColumn20 foldDown(unroll(OrderData.additionalDetails, OrderData.additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          type = OrderData.additionalDetails.type,",
						"          parentType = OrderData.additionalDetails.parentType,",
						"          sequence = OrderData.additionalDetails.sequence,",
						"          value = OrderData.additionalDetails.value,",
						"          code = OrderData.additionalDetails.code,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderAdditionalDetail",
						"derivedColumn65 alterRow(upsertIf(true())) ~> AlterRowOrderAdditionalDetails",
						"derivedColumn20 select(mapColumn(",
						"          contactDetails = OrderData.contactDetail,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectContactDetail",
						"selectContactDetail select(mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails = contactDetails.additionalDetails,",
						"          additionalEmailRecipients = contactDetails.additionalEmailRecipients,",
						"          authorizedContacts = contactDetails.authorizedContacts,",
						"          orderConfirmationByEmailPermissionIndicator = contactDetails.orderConfirmationByEmailPermissionIndicator,",
						"          permissionForOutboundCallIndicator = contactDetails.permissionForOutboundCallIndicator,",
						"          preferredContactMethod = contactDetails.preferredContactMethod,",
						"          preferredTimeOfDayForContact = contactDetails.preferredTimeOfDayForContact,",
						"          timeZone = contactDetails.timeZone,",
						"          unpublishedContactByPhonePermissionIndicator = contactDetails.unpublishedContactByPhonePermissionIndicator,",
						"          additionalContactPhones = contactDetails.personalDetail.additionalContactPhones,",
						"          legalFirstName = contactDetails.personalDetail.legalFirstName,",
						"          lastName = contactDetails.personalDetail.lastName,",
						"          legalLastName = contactDetails.personalDetail.legalLastName,",
						"          middleInitial = contactDetails.personalDetail.middleInitial,",
						"          personaldetail_preferredContactMethod = contactDetails.personalDetail.preferredContactMethod,",
						"          primaryEmailAddress = contactDetails.primaryEmailAddress,",
						"          secondaryEmailAddress = contactDetails.secondaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator = contactDetails.productUpdatesByEmailPermissionIndicator,",
						"          emailAddress = contactDetails.personalDetail.emailAddress,",
						"          firstName = contactDetails.personalDetail.firstName,",
						"          nameid = contactDetails.personalDetail.id,",
						"          lastName = contactDetails.personalDetail.lastName,",
						"          lastmodified_date,",
						"          orderPickUpCTN = contactDetails.orderPickUpCTN,",
						"          prefix = contactDetails.personalDetail.prefix,",
						"          previousLegalLastName = contactDetails.personalDetail.previousLegalLastName,",
						"          primaryContactPhones = contactDetails.personalDetail.primaryContactPhones,",
						"          title = contactDetails.personalDetail.title,",
						"          suffix = contactDetails.personalDetail.suffix,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeContactDetail",
						"filter28 alterRow(upsertIf(true())) ~> AlterRowOrderContactDetails",
						"derivedColumn20 foldDown(unroll(OrderData.priceList, OrderData.priceList),",
						"     mapColumn(",
						"          additionalDetails = OrderData.priceList.additionalDetails,",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          amount = OrderData.priceList.amount,",
						"          baseAmount = OrderData.priceList.baseAmount,",
						"          creditFeeType = OrderData.priceList.creditFeeType,",
						"          currencyType = OrderData.priceList.currencyType,",
						"          installmentEligibility = OrderData.priceList.installmentEligibility,",
						"          msrp = OrderData.priceList.msrp,",
						"          taxDetail = OrderData.priceList.taxDetail,",
						"          total = OrderData.priceList.total,",
						"          priceType = OrderData.priceList.priceType,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenPriceList",
						"filter26 alterRow(upsertIf(true())) ~> AlterRowOrderPriceList",
						"derivedColumn20 foldDown(unroll(OrderData.productGroups, OrderData.productGroups),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Product_id = OrderData.productGroups.id,",
						"          name = OrderData.productGroups.name,",
						"          sequence = OrderData.productGroups.sequence,",
						"          ProductGrouptype = OrderData.productGroups.type,",
						"          description = OrderData.productGroups.packageCharacteristics.description,",
						"          code = OrderData.productGroups.packageCharacteristics.code,",
						"          packageCharacteristicstype = OrderData.productGroups.packageCharacteristics.type,",
						"          lastmodified_date,",
						"          discountOffer = OrderData.productGroups.discountOffer,",
						"          additionalDetails = OrderData.productGroups.additionalDetails,",
						"          characteristicsid = OrderData.productGroups.characteristics.id,",
						"          sharedPlandataGroupId = OrderData.productGroups.sharedPlanCharacteristics.dataGroupId,",
						"          sharedPlanfamilyGroupId = OrderData.productGroups.sharedPlanCharacteristics.familyGroupId,",
						"          sharedPlangroupReferencesCode = OrderData.productGroups.sharedPlanCharacteristics.groupReferencesCode,",
						"          sharedPlanplanType = OrderData.productGroups.sharedPlanCharacteristics.planType,",
						"          sharedPlanprimarySubscriberNumber = OrderData.productGroups.sharedPlanCharacteristics.primarySubscriberNumber,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenProductGroups",
						"filter24 alterRow(upsertIf(true())) ~> AlterRowOrderProductGroups",
						"derivedColumn20 foldDown(unroll(OrderData.promotions, OrderData.promotions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          amount = OrderData.promotions.amount,",
						"          duration = OrderData.promotions.duration,",
						"          Promotion_id = OrderData.promotions.id,",
						"          promotionAppliedBy = OrderData.promotions.promotionAppliedBy,",
						"          baseOfferId = OrderData.promotions.baseOfferId,",
						"          Promotionpercent = OrderData.promotions.percent,",
						"          promotionCode = OrderData.promotions.promotionCode,",
						"          promotionCycle = OrderData.promotions.promotionCycle,",
						"          promotionId = OrderData.promotions.promotionId,",
						"          promotionName = OrderData.promotions.promotionName,",
						"          promotionType = OrderData.promotions.promotionType,",
						"          promotionTypeDetail = OrderData.promotions.promotionTypeDetail,",
						"          sequence = OrderData.promotions.sequence,",
						"          unitOfMeasurement = OrderData.promotions.unitOfMeasurement,",
						"          lastmodified_date,",
						"          additionalDetails = OrderData.promotions.additionalDetails,",
						"          complexDiscountIndicator = OrderData.promotions.complexDiscountIndicator,",
						"          componentConfigurations = OrderData.promotions.componentConfigurations,",
						"          couponCode = OrderData.promotions.couponCode,",
						"          displayLevel = OrderData.promotions.displayLevel,",
						"          ioId = OrderData.promotions.ioId,",
						"          effectiveDate = OrderData.promotions.effectiveDate,",
						"          effectiveInDays = OrderData.promotions.effectiveInDays,",
						"          endDate = OrderData.promotions.endDate,",
						"          fixedAmount = OrderData.promotions.fixedAmount,",
						"          ioSequence = OrderData.promotions.ioSequence,",
						"          parentPricePlanCode = OrderData.promotions.parentPricePlanCode,",
						"          payInAdvanceProdId = OrderData.promotions.payInAdvanceProdId,",
						"          promotionBillingCode = OrderData.promotions.promotionBillingCode,",
						"          qualifyingServiceDetails = OrderData.promotions.qualifyingServiceDetails,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderPromotions",
						"derivedColumn68 alterRow(upsertIf(true())) ~> AlterRowOrderPromotions",
						"derivedColumn20 select(mapColumn(",
						"          customerOrderNumber,",
						"          schedulingDetails = OrderData.schedulingDetails,",
						"          lastmodified_date,",
						"          eventTime,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSchedulingDetails",
						"filter25 alterRow(upsertIf(true())) ~> AlterRow1",
						"derivedColumn42 foldDown(unroll(OrderData.termsAndConditions, OrderData.termsAndConditions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accepted = OrderData.termsAndConditions.accepted,",
						"          agreementText = OrderData.termsAndConditions.agreementText,",
						"          agreementType = OrderData.termsAndConditions.agreementType,",
						"          category = OrderData.termsAndConditions.category,",
						"          id = OrderData.termsAndConditions.id,",
						"          agreementURL = OrderData.termsAndConditions.agreementURL,",
						"          documentName = OrderData.termsAndConditions.documentName,",
						"          orderLevelIndicator = OrderData.termsAndConditions.orderLevelIndicator,",
						"          tncId = OrderData.termsAndConditions.tncld,",
						"          timestamp = OrderData.termsAndConditions.timestamp,",
						"          tncKey = OrderData.termsAndConditions.tncKey,",
						"          tncRecordingOff = OrderData.termsAndConditions.tncRecordingOff,",
						"          version = OrderData.termsAndConditions.version,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTermsandConditions",
						"filter20 derive(timestamp = toTimestamp(toLong(toString(byName('timestamp'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> ConvertTimestamp",
						"coalacc foldDown(unroll(serviceFacilityQualifications, serviceFacilityQualifications),",
						"     mapColumn(",
						"          additionalDetails = serviceFacilityQualifications.additionalDetails,",
						"          customerOrderNumber,",
						"          Account_id,",
						"          Actsequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          cpeRequiredIndicator = serviceFacilityQualifications.cpeRequiredIndicator,",
						"          facilityCheck = serviceFacilityQualifications.facilityCheck,",
						"          gfastDeviceWireType = serviceFacilityQualifications.gfastDeviceWireType,",
						"          potsAvailableIndicator = serviceFacilityQualifications.potsAvailableIndicator,",
						"          dslAvailableIndicator = serviceFacilityQualifications.dslAvailableIndicator,",
						"          frequency17MhzIndicator = serviceFacilityQualifications.frequency17MhzIndicator,",
						"          id = serviceFacilityQualifications.id,",
						"          preferredNetworkType = serviceFacilityQualifications.preferredNetworkType,",
						"          profileCode = serviceFacilityQualifications.profileCode,",
						"          vectoringIndicator = serviceFacilityQualifications.vectoringIndicator,",
						"          address = serviceFacilityQualifications.address",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenServiceFacilityQualifications",
						"filter101 foldDown(unroll(billingDetail, billingDetail),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          accountStatus = billingDetail.accountStatus,",
						"          billingType = billingDetail.billingType,",
						"          placeId = billingDetail.address.placeId,",
						"          addressId = billingDetail.address.addressId,",
						"          connectedCommunityId = billingDetail.address.connectedCommunityId,",
						"          BillingAddress_id = billingDetail.address.id,",
						"          dwellingType = billingDetail.address.dwellingType,",
						"          validatedIndicator = billingDetail.address.validatedIndicator,",
						"          auxillaryaddress_line1 = billingDetail.address.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = billingDetail.address.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = billingDetail.address.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = billingDetail.address.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = billingDetail.address.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = billingDetail.address.codingAccuracySupportSystemAddress,",
						"          addressLines = billingDetail.address.codingAccuracySupportSystemAddress.addressLines,",
						"          parsed_addInstructions = billingDetail.address.parsedAddress.addInstructions,",
						"          parsed_addressChanged = billingDetail.address.parsedAddress.addressChanged,",
						"          parsed_addressMatchCode = billingDetail.address.parsedAddress.addressMatchCode,",
						"          parsed_addressStreetLine = billingDetail.address.parsedAddress.addressStreetLine,",
						"          parsed_addressType = billingDetail.address.parsedAddress.addressType,",
						"          parsed_apartmentUnit = billingDetail.address.parsedAddress.apartmentUnit,",
						"          parsed_apartmentUnitNumber = billingDetail.address.parsedAddress.apartmentUnitNumber,",
						"          parsed_assignedStreetNumber = billingDetail.address.parsedAddress.assignedStreetNumber,",
						"          parsed_attention = billingDetail.address.parsedAddress.attention,",
						"          parsed_buildingType = billingDetail.address.parsedAddress.buildingType,",
						"          parsed_city = billingDetail.address.parsedAddress.city,",
						"          parsed_country = billingDetail.address.parsedAddress.country,",
						"          parsed_county = billingDetail.address.parsedAddress.county,",
						"          parsed_countyCode = billingDetail.address.parsedAddress.countyCode,",
						"          parsed_direction = billingDetail.address.parsedAddress.direction,",
						"          parsed_directionPrefix = billingDetail.address.parsedAddress.directionPrefix,",
						"          parsed_disconnectDate = billingDetail.address.parsedAddress.disconnectDate,",
						"          parsed_exchangeCode = billingDetail.address.parsedAddress.exchangeCode,",
						"          parsed_exhaustCode = billingDetail.address.parsedAddress.exhaustCode,",
						"          parsed_houseNumber = billingDetail.address.parsedAddress.houseNumber,",
						"          parsed_houseNumberPrefix = billingDetail.address.parsedAddress.houseNumberPrefix,",
						"          parsed_houseNumberSuffix = billingDetail.address.parsedAddress.houseNumberSuffix,",
						"          parsed_incorporatedIndicator = billingDetail.address.parsedAddress.incorporatedIndicator,",
						"          parsed_internationalZip = billingDetail.address.parsedAddress.internationalZip,",
						"          parsed_lastDisconnectedTransportType = billingDetail.address.parsedAddress.lastDisconnectedTransportType,",
						"          parsed_lastNetworkAccessDeviceType = billingDetail.address.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsed_legalEntity = billingDetail.address.parsedAddress.legalEntity,",
						"          parsed_level = billingDetail.address.parsedAddress.level,",
						"          parsed_levelNumber = billingDetail.address.parsedAddress.levelNumber,",
						"          parsed_linkKey = billingDetail.address.parsedAddress.linkKey,",
						"          parsed_postOfficeBox = billingDetail.address.parsedAddress.postOfficeBox,",
						"          parsed_primaryAddressLine = billingDetail.address.parsedAddress.primaryAddressLine,",
						"          parsed_primaryNPANXX = billingDetail.address.parsedAddress.primaryNPANXX,",
						"          parsed_province = billingDetail.address.parsedAddress.province,",
						"          parsed_rateCenterCode = billingDetail.address.parsedAddress.rateCenterCode,",
						"          parsed_rateZoneBanCode = billingDetail.address.parsedAddress.rateZoneBanCode,",
						"          parsed_rsagValidationIndicator = billingDetail.address.parsedAddress.rsagValidationIndicator,",
						"          parsed_ruralRouteBoxNumber = billingDetail.address.parsedAddress.ruralRouteBoxNumber,",
						"          parsed_ruralRouteCenterNumber = billingDetail.address.parsedAddress.ruralRouteCenterNumber,",
						"          parsed_secondaryAddressLine = billingDetail.address.parsedAddress.secondaryAddressLine,",
						"          parsed_siteAddressId = billingDetail.address.parsedAddress.siteAddressId,",
						"          parsed_siteId = billingDetail.address.parsedAddress.siteId,",
						"          parsed_smartMoves = billingDetail.address.parsedAddress.smartMoves,",
						"          parsed_state = billingDetail.address.parsedAddress.state,",
						"          parsed_streetName = billingDetail.address.parsedAddress.streetName,",
						"          parsed_streetNameSuffix = billingDetail.address.parsedAddress.streetNameSuffix,",
						"          parsed_streetType = billingDetail.address.parsedAddress.streetType,",
						"          parsed_structure = billingDetail.address.parsedAddress.structure,",
						"          parsed_structureNumber = billingDetail.address.parsedAddress.structureNumber,",
						"          parsed_tarCode = billingDetail.address.parsedAddress.tarCode,",
						"          parsed_telephoneNumber = billingDetail.address.parsedAddress.telephoneNumber,",
						"          parsed_urbanizationCode = billingDetail.address.parsedAddress.urbanizationCode,",
						"          parsed_videoHubOffice = billingDetail.address.parsedAddress.videoHubOffice,",
						"          parsed_zip = billingDetail.address.parsedAddress.zip,",
						"          parsed_zipCodeExtension = billingDetail.address.parsedAddress.zipCodeExtension,",
						"          parsed_zipGeoCode = billingDetail.address.parsedAddress.zipGeoCode,",
						"          unparsed_addressLine1 = billingDetail.address.unparsedAddress.addressLine1,",
						"          unparsed_addressLine3 = billingDetail.address.unparsedAddress.addressLine3,",
						"          unparsed_attention = billingDetail.address.unparsedAddress.attention,",
						"          unparsed_elevation = billingDetail.address.unparsedAddress.elevation,",
						"          unparsed_postOfficeBox = billingDetail.address.unparsedAddress.postOfficeBox,",
						"          unparsed_province = billingDetail.address.unparsedAddress.province,",
						"          unparsed_ruralRoute = billingDetail.address.unparsedAddress.ruralRoute,",
						"          unparsed_structure = billingDetail.address.unparsedAddress.structure,",
						"          unparsed_unit = billingDetail.address.unparsedAddress.unit,",
						"          unparsed_urbanizationCode = billingDetail.address.unparsedAddress.urbanizationCode,",
						"          unparsed_city = billingDetail.address.unparsedAddress.city,",
						"          unparsed_country = billingDetail.address.unparsedAddress.country,",
						"          unparsed_county = billingDetail.address.unparsedAddress.county,",
						"          unparsed_state = billingDetail.address.unparsedAddress.state,",
						"          unparsed_zip = billingDetail.address.unparsedAddress.zip,",
						"          unparsed_zipCodeExtension = billingDetail.address.unparsedAddress.zipCodeExtension,",
						"          unparsed_internationalZip = billingDetail.address.unparsedAddress.internationalZip,",
						"          unparsed_addressLine2 = billingDetail.address.unparsedAddress.addressLine2,",
						"          dob = billingDetail.authentication.dob,",
						"          ssn = billingDetail.authentication.ssn,",
						"          pin = billingDetail.authentication.securityVerification.pin,",
						"          securityAnswer = billingDetail.authentication.securityVerification.securityAnswer,",
						"          securityQuestion = billingDetail.authentication.securityVerification.securityQuestion,",
						"          motherMaidenName = billingDetail.authentication.motherMaidenName,",
						"          name = billingDetail.name,",
						"          additionalDetails = billingDetail.address.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          emailAddress = billingDetail.name.emailAddress,",
						"          firstName = billingDetail.name.firstName,",
						"          id = billingDetail.name.id,",
						"          middleInitial = billingDetail.name.middleInitial,",
						"          lastName = billingDetail.name.lastName,",
						"          additional_contactPhones = billingDetail.name.additionalContactPhones,",
						"          consentDetails = billingDetail.name.primaryContactPhones.consentDetails,",
						"          extension = billingDetail.name.primaryContactPhones.extension,",
						"          legalFirstName = billingDetail.name.legalFirstName,",
						"          legalLastName = billingDetail.name.legalLastName,",
						"          previousLegalLastName = billingDetail.name.previousLegalLastName,",
						"          suffix = billingDetail.name.suffix,",
						"          title = billingDetail.name.title,",
						"          previousAddress = billingDetail.previousAddress,",
						"          previousPhoneNumber = billingDetail.previousPhoneNumber,",
						"          preferredContactMethod = billingDetail.name.preferredContactMethod,",
						"          phoneNumber = billingDetail.name.primaryContactPhones.phoneNumber,",
						"          contactPhoneType = billingDetail.name.primaryContactPhones.contactPhoneType,",
						"          licenseExpirationDate = billingDetail.authentication.driversLicense.licenseExpirationDate,",
						"          licenseNumber = billingDetail.authentication.driversLicense.licenseNumber,",
						"          licensestate = billingDetail.authentication.driversLicense.state,",
						"          employerName = billingDetail.authentication.employerDetail.employerName,",
						"          employerPhoneNumber = billingDetail.authentication.employerDetail.employerPhoneNumber,",
						"          federalTaxId = billingDetail.authentication.federalTaxId,",
						"          gender = billingDetail.authentication.gender,",
						"          lastFourOfSSN = billingDetail.authentication.lastFourOfSSN,",
						"          ssnRefusedIndicator = billingDetail.authentication.ssnRefusedIndicator,",
						"          StateidNumber = billingDetail.authentication.stateId.idNumber,",
						"          stateIdIssuedState = billingDetail.authentication.stateId.state,",
						"          nextBillingCycleDate = billingDetail.nextBillingCycleDate,",
						"          sequence,",
						"          line1 = billingDetail.address.auxiliaryAddress.line1",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenBillingDetails",
						"flatten23 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          accountStatus,",
						"          dob,",
						"          licenseNumber,",
						"          licenseExpirationDate,",
						"          licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          federalTaxId,",
						"          gender,",
						"          lastFourOfSSN,",
						"          motherMaidenName,",
						"          securityVerificationPin = pin,",
						"          securityQuestion,",
						"          securityAnswer,",
						"          ssn,",
						"          ssnRefusedIndicator,",
						"          StateidNumber = stateidNumber,",
						"          stateIdIssuedState,",
						"          nextBillingCycleDate,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          previousLegalLastName,",
						"          prefix,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          sequence,",
						"          billingType,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderAccountsBillingDetails",
						"derivedColumn2 alterRow(upsertIf(true())) ~> AlterRowOrderAccounts",
						"derivedColumn3 alterRow(upsertIf(true())) ~> AlterRow2",
						"filter1 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsServiceAddress",
						"filter6 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsServiceFacilityQualification",
						"filter5 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsBillingDetails",
						"derivedColumn23 foldDown(unroll(OrderData.losgs, OrderData.losgs),",
						"     mapColumn(",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          accountReference = OrderData.losgs.accountReference,",
						"          actionReasonCode = OrderData.losgs.actionReasonCode,",
						"          previousProductOrderActionId = OrderData.losgs.previousProductOrderActionId,",
						"          actionReason = OrderData.losgs.actionReason,",
						"          actionType = OrderData.losgs.actionType,",
						"          apiExecutionDetails = OrderData.losgs.aPIExecutionDetails,",
						"          acceptEULA = OrderData.losgs.addpLOSCharacteristics.acceptEULA,",
						"          tenantAccountId = OrderData.losgs.addpLOSCharacteristics.tenantAccountId,",
						"          tenantAccountStatus = OrderData.losgs.addpLOSCharacteristics.tenantAccountStatus,",
						"          billingSystemId = OrderData.losgs.billingSystemId,",
						"          bundleGroupId = OrderData.losgs.bundleGroupId,",
						"          childOrderId = OrderData.losgs.childOrderId,",
						"          companyCode = OrderData.losgs.companyCode,",
						"          creditPolicySecurityType = OrderData.losgs.creditPolicySecurityType,",
						"          conflictingServiceDetailReferences = OrderData.losgs.conflictingServiceDetailReferences,",
						"          iptvLOSCharacteristics = OrderData.losgs.iptvLOSCharacteristics,",
						"          dealerCode = OrderData.losgs.dealerCode,",
						"          divisionCode = OrderData.losgs.divisionCode,",
						"          effectiveDate = OrderData.losgs.effectiveDate,",
						"          engageVideoId = OrderData.losgs.engageVideoId,",
						"          entitlementBenefit = OrderData.losgs.entitlementBenefit,",
						"          fnGuId = OrderData.losgs.fnGuId,",
						"          fnUserId = OrderData.losgs.fnUserId,",
						"          fnType = OrderData.losgs.fnType,",
						"          freeDevicePolicyId = OrderData.losgs.freeDevicePolicyId,",
						"          fulfillmentMethod = OrderData.losgs.fulfillmentMethod,",
						"          fulfillerName = OrderData.losgs.fulfillerName,",
						"          fulfillerCode = OrderData.losgs.fulfillerCode,",
						"          fwCAF2AddressIndicator = OrderData.losgs.fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator = OrderData.losgs.fwiMoveInIndicator,",
						"          Losg_id = OrderData.losgs.id,",
						"          installType = OrderData.losgs.installType,",
						"          losgType = OrderData.losgs.losgType,",
						"          name = OrderData.losgs.name,",
						"          productCategory = OrderData.losgs.productCategory,",
						"          schedulingDetailReference = OrderData.losgs.schedulingDetailReference,",
						"          sequence = OrderData.losgs.sequence,",
						"          serviceQualificationReference = OrderData.losgs.serviceQualificationReference,",
						"          subscriberName = OrderData.losgs.subscriberName,",
						"          type = OrderData.losgs.type,",
						"          wirelessLOSCharacteristics = OrderData.losgs.wirelessLOSCharacteristics,",
						"          internetLOSCharacteristics = OrderData.losgs.internetLOSCharacteristics,",
						"          lineItems = OrderData.losgs.lineItems,",
						"          serviceProvider = OrderData.losgs.serviceProvider,",
						"          price = OrderData.losgs.price,",
						"          priceSummaryList = OrderData.losgs.priceSummaryList,",
						"          serviceAddress = OrderData.losgs.serviceAddress,",
						"          losgStatus = OrderData.losgs.losgStatus,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          termsAndConditionAccepted = OrderData.losgs.termsAndConditionAccepted,",
						"          voipLOSCharacteristics = OrderData.losgs.voipLOSCharacteristics,",
						"          numberPortDetail = OrderData.losgs.numberPortDetail,",
						"          compensation = OrderData.losgs.compensation,",
						"          additionalDetails = OrderData.losgs.additionalDetails,",
						"          direcTVLOSCharacteristics = OrderData.losgs.direcTVLOSCharacteristics,",
						"          externalOrderReferences = OrderData.losgs.externalOrderReferences,",
						"          dslLOSCharacteristics = OrderData.losgs.dslLOSCharacteristics,",
						"          installationInstructions = OrderData.losgs.installationInstructions,",
						"          promotions = OrderData.losgs.promotions,",
						"          userDefinedLabels = OrderData.losgs.userDefinedLabels,",
						"          market = OrderData.losgs.market,",
						"          migrationIndicator = OrderData.losgs.migrationIndicator,",
						"          migrationSource = OrderData.losgs.migrationSource,",
						"          notes = OrderData.losgs.notes,",
						"          preferredAreaCode = OrderData.losgs.preferredAreaCode,",
						"          priceCode = OrderData.losgs.priceCode,",
						"          primaryIndicator = OrderData.losgs.primaryIndicator,",
						"          productOfferingId = OrderData.losgs.productOfferingId,",
						"          productOrderActionId = OrderData.losgs.productOrderActionId,",
						"          productOrderActionReference = OrderData.losgs.productOrderActionReference,",
						"          profileCode = OrderData.losgs.profileCode,",
						"          rateType = OrderData.losgs.rateType,",
						"          requestedExecutionDate = OrderData.losgs.requestedExecutionDate,",
						"          salesOfferId = OrderData.losgs.salesOfferId,",
						"          serviceArea = OrderData.losgs.serviceArea,",
						"          serviceAreaName = OrderData.losgs.serviceAreaName,",
						"          subMarket = OrderData.losgs.subMarket,",
						"          sunsetDate = OrderData.losgs.sunsetDate,",
						"          vendorAccountId = OrderData.losgs.vendorAccountId,",
						"          transferfromBAN = OrderData.losgs.transferSubscriberDetail.fromBillingAccountNumber,",
						"          transferfromFAN = OrderData.losgs.transferSubscriberDetail.fromFAN,",
						"          transferfromMobileNumber = OrderData.losgs.transferSubscriberDetail.fromMobileNumber,",
						"          directoryListing = OrderData.losgs.voipLOSCharacteristics.directoryListing,",
						"          cancelDetails = OrderData.losgs.cancelDetails,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderLosgs",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          losg_id = Losg_id,",
						"          losgSequence = sequence,",
						"          accountReference,",
						"          actionReason,",
						"          previousProductOrderActionId,",
						"          actionReasonCode,",
						"          actionType,",
						"          acceptEULA,",
						"          tenantAccountId,",
						"          tenantAccountStatus,",
						"          billingSystemId,",
						"          bundleGroupId,",
						"          childOrderId,",
						"          companyCode,",
						"          creditPolicySecurityType,",
						"          dealerCode,",
						"          divisionCode,",
						"          effectiveDate,",
						"          engageVideoId,",
						"          entitlementBenefit,",
						"          fnGuId,",
						"          fnUserId,",
						"          fnType,",
						"          freeDevicePolicyId,",
						"          fulfillmentMethod,",
						"          fulfillerName,",
						"          fulfillerCode,",
						"          fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator,",
						"          installType,",
						"          status = losgStatus.status,",
						"          subStatus = losgStatus.subStatus,",
						"          fallout = losgStatus.fallout,",
						"          losgType,",
						"          market,",
						"          migrationIndicator,",
						"          migrationSource,",
						"          name,",
						"          notes,",
						"          preferredAreaCode,",
						"          priceCode,",
						"          primaryIndicator,",
						"          productCategory,",
						"          productOfferingId,",
						"          productOrderActionId,",
						"          productOrderActionReference,",
						"          profileCode,",
						"          rateType,",
						"          requestedExecutionDate,",
						"          salesOfferId,",
						"          schedulingDetailReference,",
						"          serviceArea,",
						"          serviceAreaName,",
						"          serviceQualificationReference,",
						"          subMarket,",
						"          sunsetDate,",
						"          type,",
						"          vendorAccountId,",
						"          transferfromBAN,",
						"          transferfromFAN,",
						"          transferfromMobileNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderLosgs",
						"coallosgid foldDown(unroll(price, price),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount = price.amount,",
						"          baseAmount = price.baseAmount,",
						"          currencyType = price.currencyType,",
						"          pricetype = price.priceType,",
						"          total = price.total,",
						"          losgsequence = sequence,",
						"          creditFeeType = price.creditFeeType,",
						"          installmentEligibility = price.installmentEligibility,",
						"          msrp = price.msrp,",
						"          additionalDetails = price.additionalDetails,",
						"          J_tax = price.taxDetail,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsPrice",
						"coallosgid foldDown(unroll(priceSummaryList, priceSummaryList),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount = priceSummaryList.amount,",
						"          currencyType = priceSummaryList.currencyType,",
						"          priceType = priceSummaryList.priceType,",
						"          total = priceSummaryList.total,",
						"          taxSummary = priceSummaryList.taxSummary,",
						"          lastmodified_date,",
						"          Losgsequence = sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsPriceSummaryList",
						"coallosgid foldDown(unroll(lineItems, lineItems),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          action = lineItems.action,",
						"          addOnDomainName = lineItems.addOnSolutionCharacteristics.domainName,",
						"          addOnDomainRegistration = lineItems.addOnSolutionCharacteristics.domainRegistration,",
						"          addOnParentItem = lineItems.addOnSolutionCharacteristics.parentItem,",
						"          addOnRegistrationType = lineItems.addOnSolutionCharacteristics.registrationType,",
						"          billingCode = lineItems.billingCode,",
						"          billingCodeType = lineItems.billingCodeType,",
						"          catalogProductType = lineItems.catalogProductType,",
						"          catalogSKUId = lineItems.catalogSKUId,",
						"          contractAmountFinanced = lineItems.contractDetails.amountFinanced,",
						"          contractAnnualPercentageRate = lineItems.contractDetails.annualPercentageRate,",
						"          contractBalancedAmount = lineItems.contractDetails.balancedAmount,",
						"          contractDisplayName = lineItems.contractDetails.contractDisplayName,",
						"          contractLength = lineItems.contractDetails.contractLength,",
						"          contractSent = lineItems.contractDetails.contractSent,",
						"          contractSystem = lineItems.contractDetails.contractSystem,",
						"          contractType = lineItems.contractDetails.contractType,",
						"          contractDownPayment = lineItems.contractDetails.downPayment,",
						"          contractDownPaymentPercent = lineItems.contractDetails.downPaymentPercent,",
						"          contractFinanceCharge = lineItems.contractDetails.financeCharge,",
						"          contractInstallmentAmount = lineItems.contractDetails.installmentAmount,",
						"          contractInstallmentPlanDef = lineItems.contractDetails.installmentPlanDefinition,",
						"          contractInstallmentPlanId = lineItems.contractDetails.installmentPlanId,",
						"          contractInstallmentStatus = lineItems.contractDetails.installmentStatus,",
						"          contractInstallmentType = lineItems.contractDetails.installmentType,",
						"          contractPrepaidFinanceCharge = lineItems.contractDetails.prepaidFinanceCharge,",
						"          contractPayupAmount = lineItems.contractDetails.payupAmount,",
						"          contractPayoffAmount = lineItems.contractDetails.payoffAmount,",
						"          contractTotalSalePrice = lineItems.contractDetails.totalSalePrice,",
						"          curbsideDelivery = lineItems.curbsideDelivery,",
						"          description = lineItems.description,",
						"          effectiveDate = lineItems.effectiveDate,",
						"          feeId = lineItems.fees.feeId,",
						"          feeIdType = lineItems.fees.feeIdType,",
						"          feeWaivedIndicator = lineItems.fees.waivedIndicator,",
						"          feeWaivedReason = lineItems.fees.waivedReason,",
						"          fulfillmentLocation = lineItems.fulfillmentLocation,",
						"          displayName = lineItems.displayName,",
						"          groupOptionId = lineItems.groupOptionId,",
						"          inventoryStoreId = lineItems.inventoryStoreId,",
						"          itemFulfillmentMethod = lineItems.itemFulfillmentMethod,",
						"          LineItem_id = lineItems.id,",
						"          locationId = lineItems.locationId,",
						"          notes = lineItems.notes,",
						"          operation = lineItems.operation,",
						"          preOwnedIndicator = lineItems.preOwnedIndicator,",
						"          productCode = lineItems.productCode,",
						"          productSKU = lineItems.productSKU,",
						"          productType = lineItems.productType,",
						"          quantity = lineItems.quantity,",
						"          sequence = lineItems.sequence,",
						"          systemName = lineItems.systemName,",
						"          hardGood = lineItems.hardGood,",
						"          additionalDetails = lineItems.additionalDetails,",
						"          internetLineItemCharacteristics = lineItems.internetLineItemCharacteristics,",
						"          price = lineItems.price,",
						"          productGroupReferences = lineItems.productGroupReferences,",
						"          promotionReferences = lineItems.promotionReferences,",
						"          productSubType = lineItems.productSubType,",
						"          purchaseTransactionId = lineItems.purchaseTransactionId,",
						"          payments = lineItems.payments,",
						"          lastmodified_date,",
						"          losgsequence = sequence,",
						"          dc_eventtime,",
						"          supplyChainDetail = lineItems.supplyChainDetail,",
						"          supplyChainDetail_trackingNumber = lineItems.supplyChainDetail.trackingNumber,",
						"          hardgood_shipmentCommitDate_fromDate = lineItems.hardGood.shipmentCommitDate.fromDate,",
						"          hardgood_DeliveryByDate_fromDate = lineItems.hardGood.deliveryByDate.fromDate,",
						"          direcTVLineItemCharacteristics = lineItems.direcTVLineItemCharacteristics,",
						"          voipLineItemCharacteristics = lineItems.voipLineItemCharacteristics,",
						"          iptvLineItemCharacteristics = lineItems.iptvLineItemCharacteristics,",
						"          wirelessLineItemCharacteristics = lineItems.wirelessLineItemCharacteristics,",
						"          priceList = lineItems.priceList,",
						"          shippingDetailReference = lineItems.shippingDetailReference,",
						"          socForPreviousDevice = lineItems.socForPreviousDevice,",
						"          status = lineItems.status,",
						"          storeId = lineItems.storeId,",
						"          subscriptionId = lineItems.subscriptionId,",
						"          taxableIndicator = lineItems.taxableIndicator,",
						"          tier = lineItems.tier",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsLineItems",
						"coalLLseq foldDown(unroll(additionalDetails, additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          type = additionalDetails.type,",
						"          LineItemsequence = sequence,",
						"          parentType = additionalDetails.parentType,",
						"          code = additionalDetails.code,",
						"          value = additionalDetails.value,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          sequence = additionalDetails.sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsAdditionalDetail",
						"filter18 alterRow(upsertIf(true())) ~> AlterRowOrderLosgsPrice",
						"filter17 alterRow(upsertIf(true())) ~> AlterRowOrderLosgsPriceSummaryList",
						"filter10 alterRow(upsertIf(true())) ~> AlterRowlosgsLineitemsAdditionalDetail",
						"derivedColumn22 select(mapColumn(",
						"          customerOrderNumber,",
						"          sourceDetail = OrderData.sourceDetail,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderSourceDetail",
						"selectOrderSourceDetail foldDown(unroll(sourceDetail.additionalDetails, sourceDetail.additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code = sourceDetail.additionalDetails.code,",
						"          type = sourceDetail.additionalDetails.type,",
						"          value = sourceDetail.additionalDetails.value,",
						"          lastmodified_date,",
						"          sequence = sourceDetail.additionalDetails.sequence,",
						"          parentType = sourceDetail.additionalDetails.parentType,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenSourceDetailAdditionalDetail",
						"selectOrderSourceDetail select(mapColumn(",
						"          customerOrderNumber,",
						"          application = sourceDetail.application,",
						"          browserId = sourceDetail.browserId,",
						"          channel = sourceDetail.channel,",
						"          city = sourceDetail.city,",
						"          clientIP = sourceDetail.clientIP,",
						"          clientType = sourceDetail.clientType,",
						"          countryCode = sourceDetail.countryCode,",
						"          county = sourceDetail.county,",
						"          externalOrderSource = sourceDetail.externalOrderSource,",
						"          locale = sourceDetail.locale,",
						"          region = sourceDetail.region,",
						"          salesChannel = sourceDetail.salesChannel,",
						"          salesChannelType = sourceDetail.salesChannelType,",
						"          sender = sourceDetail.sender,",
						"          zip = sourceDetail.zip,",
						"          lastmodified_date,",
						"          expressCheckOutIndicator = sourceDetail.expressCheckOutIndicator,",
						"          mediaSource = sourceDetail.mediaSource,",
						"          originatingApplication = sourceDetail.originatingApplication,",
						"          initiatingApplication = sourceDetail.initiatingApplication,",
						"          premierDetailGroupId = sourceDetail.premierDetail.groupId,",
						"          premierDetailGroupName = sourceDetail.premierDetail.groupName,",
						"          premierDetailGroupTick = sourceDetail.premierDetail.resourceCenterTicketNumber,",
						"          responseMode = sourceDetail.responseMode,",
						"          sequence = sourceDetail.sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeOrderSourceDetail",
						"filter8 alterRow(upsertIf(true())) ~> AlterRowOrderSourceDetail",
						"filter9 alterRow(upsertIf(true())) ~> AlterRowOrderSourceDetailAdditionalDetail",
						"filter19 alterRow(upsertIf(true())) ~> AlterRowOrderlosgs",
						"ConvertTimestamp alterRow(upsertIf(true())) ~> AlterRow4",
						"derivedColumn21 foldDown(unroll(OrderData.accounts, OrderData.accounts),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          createdDate = OrderData.createdDate,",
						"          submittedDate = OrderData.submittedDate,",
						"          acceptedDate = OrderData.acceptedDate,",
						"          accountCategory = OrderData.accounts.accountCategory,",
						"          accountSubCategory = OrderData.accounts.accountSubCategory,",
						"          accountSubType = OrderData.accounts.accountSubType,",
						"          accountType = OrderData.accounts.accountType,",
						"          autoPayReason = OrderData.accounts.autoPayReason,",
						"          b2bReference = OrderData.accounts.b2bReference,",
						"          cardOnFilePaymentMethod = OrderData.accounts.cardOnFilePaymentMethod,",
						"          billingDeliveryPreference = OrderData.accounts.billingDeliveryPreference,",
						"          billingLanguagePreference = OrderData.accounts.billingLanguagePreference,",
						"          businessAccountName = OrderData.accounts.businessAccountName,",
						"          cpni = OrderData.accounts.cpni,",
						"          ebillReason = OrderData.accounts.ebillReason,",
						"          enterpriseType = OrderData.accounts.enterpriseType,",
						"          gigaPower = OrderData.accounts.gigaPower,",
						"          Account_id = OrderData.accounts.id,",
						"          langId = OrderData.accounts.langId,",
						"          market = OrderData.accounts.market,",
						"          passCode = OrderData.accounts.passCode,",
						"          paymentArrangement = OrderData.accounts.paymentArrangement,",
						"          sequence = OrderData.accounts.sequence,",
						"          spokenLanguagePreference = OrderData.accounts.spokenLanguagePreference,",
						"          billingAccountNumber = OrderData.accounts.billingAccountNumber,",
						"          additionalDetails = OrderData.accounts.additionalDetails,",
						"          autopayPaymentMethod = OrderData.accounts.autopayPaymentMethod,",
						"          billingDetail = OrderData.accounts.billingDetail,",
						"          businessAddress = OrderData.accounts.businessAddress,",
						"          creditCheck = OrderData.accounts.creditCheck,",
						"          negotiateConflictCustomer = OrderData.accounts.negotiateConflictCustomer,",
						"          serviceAddress = OrderData.accounts.serviceAddress,",
						"          unifiedAccount = OrderData.accounts.unifiedAccount,",
						"          serviceFacilityQualifications = OrderData.accounts.serviceFacilityQualifications,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          billingAccountTelephoneNumber = OrderData.accounts.billingAccountTelephoneNumber,",
						"          primaryCTN = OrderData.accounts.primaryCTN,",
						"          employeeReferralDetail = OrderData.employeeReferralDetail,",
						"          accountCrossmarketIndicator = OrderData.accounts.accountCrossmarketIndicator,",
						"          acpTransactionId = OrderData.accounts.acpEligibility.acpTransactionId,",
						"          acpClassification = OrderData.accounts.acpEligibility.acpClassification,",
						"          anchorCTN = OrderData.accounts.anchorCTN,",
						"          bankingPartnerCustomerId = OrderData.accounts.bankingPartner.customerId,",
						"          bankingPartnerName = OrderData.accounts.bankingPartner.name,",
						"          bigData = OrderData.accounts.bigData,",
						"          billPaymentDueDate = OrderData.accounts.billPaymentDueDate,",
						"          cardOnFileStatus = OrderData.accounts.cardOnFileStatus,",
						"          conflictingServiceDetails = OrderData.accounts.conflictingServiceDetails,",
						"          consentToCCIndicator = OrderData.accounts.consentToCCIndicator,",
						"          contractAcceptance = OrderData.accounts.contractAcceptance.acceptance,",
						"          contractLength = OrderData.accounts.contractAcceptance.contractLength,",
						"          contractVersionNumber = OrderData.accounts.contractAcceptance.versionNumber,",
						"          creditAlertFraudAlert = OrderData.accounts.creditAlert.fraudAlert,",
						"          creditAlertGeneralMessage = OrderData.accounts.creditAlert.generalMessage,",
						"          ctnValidatedIndicator = OrderData.accounts.ctnValidatedIndicator,",
						"          customerCode = OrderData.accounts.customerCode,",
						"          delinquentAccountIndicator = OrderData.accounts.delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization = OrderData.accounts.electronicLetterOfAuthorization.electronicDisclosureAuthorization,",
						"          internetServiceAuthorization = OrderData.accounts.electronicLetterOfAuthorization.internetServiceAuthorization,",
						"          letterOfAuthorizationURL = OrderData.accounts.electronicLetterOfAuthorization.letterOfAuthorizationURL,",
						"          localServiceAuthorization = OrderData.accounts.electronicLetterOfAuthorization.localServiceAuthorization,",
						"          localTollProviderAuthorization = OrderData.accounts.electronicLetterOfAuthorization.localTollProviderAuthorization,",
						"          longDistanceServiceProvider = OrderData.accounts.electronicLetterOfAuthorization.longDistanceServiceProvider,",
						"          emailValidatedIndicator = OrderData.accounts.emailValidatedIndicator,",
						"          existingAutoBillStatus = OrderData.accounts.existingAutoBillStatus,",
						"          existingAutoBillIndicator = OrderData.accounts.existingAutoBillIndicator,",
						"          landLineNumber = OrderData.accounts.landLineNumber,",
						"          liabilityType = OrderData.accounts.liabilityType,",
						"          marketingSourceCode = OrderData.accounts.marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails = OrderData.accounts.mdmProfileSetting.additionalDetails,",
						"          mdmProfileSettingProfileName = OrderData.accounts.mdmProfileSetting.profileName,",
						"          partnerJointBillType = OrderData.accounts.partnerJointBillType,",
						"          pmoIndicator = OrderData.accounts.pmoIndicator,",
						"          priceCode = OrderData.accounts.priceCode,",
						"          priceMatch = OrderData.accounts.priceMatch,",
						"          subMarket = OrderData.accounts.subMarket,",
						"          targetCTN = OrderData.accounts.targetCTN,",
						"          thirdPartyCombinedBill = OrderData.accounts.thirdPartyCombinedBill,",
						"          winBackIndicator = OrderData.accounts.winBackIndicator,",
						"          provisioningSystem = OrderData.accounts.provisioningSystems.provisioningSystem,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAllAccounts",
						"coalacc select(mapColumn(",
						"          customerOrderNumber,",
						"          createdDate,",
						"          submittedDate,",
						"          acceptedDate,",
						"          accountCategory,",
						"          accountSubCategory,",
						"          accountSubType,",
						"          accountType,",
						"          autoPayReason,",
						"          b2bReference,",
						"          cardOnFilePaymentMethod,",
						"          billingDeliveryPreference,",
						"          billingLanguagePreference,",
						"          businessAccountName,",
						"          cpni,",
						"          ebillReason,",
						"          enterpriseType,",
						"          gigaPower,",
						"          Account_id,",
						"          langId,",
						"          market,",
						"          passCode,",
						"          paymentArrangement,",
						"          sequence,",
						"          spokenLanguagePreference,",
						"          billingAccountNumber,",
						"          additionalDetails,",
						"          autopayPaymentMethod,",
						"          billingDetail,",
						"          businessAddress,",
						"          creditCheck,",
						"          negotiateConflictCustomer,",
						"          serviceAddress,",
						"          unifiedAccount,",
						"          serviceFacilityQualifications,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          billingAccountTelephoneNumber,",
						"          primaryCTN,",
						"          employeeReferralDetail,",
						"          accountCrossmarketIndicator,",
						"          acpTransactionId,",
						"          acpClassification,",
						"          anchorCTN,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          bigData,",
						"          billPaymentDueDate,",
						"          cardOnFileStatus,",
						"          conflictingServiceDetails,",
						"          consentToCCIndicator,",
						"          contractAcceptance,",
						"          contractLength,",
						"          contractVersionNumber,",
						"          creditAlertFraudAlert,",
						"          creditAlertGeneralMessage,",
						"          ctnValidatedIndicator,",
						"          customerCode,",
						"          delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization,",
						"          internetServiceAuthorization,",
						"          letterOfAuthorizationURL,",
						"          localServiceAuthorization,",
						"          localTollProviderAuthorization,",
						"          longDistanceServiceProvider,",
						"          emailValidatedIndicator,",
						"          existingAutoBillStatus,",
						"          existingAutoBillIndicator,",
						"          landLineNumber,",
						"          liabilityType,",
						"          marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails,",
						"          mdmProfileSettingProfileName,",
						"          partnerJointBillType,",
						"          pmoIndicator,",
						"          priceCode,",
						"          priceMatch,",
						"          subMarket,",
						"          targetCTN,",
						"          thirdPartyCombinedBill,",
						"          winBackIndicator,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectAllAccounts",
						"filter3 derive(createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn2",
						"coalacc select(mapColumn(",
						"          customerOrderNumber,",
						"          createdDate,",
						"          placeId = businessAddress.placeId,",
						"          connectedCommunityId = businessAddress.connectedCommunityId,",
						"          submittedDate,",
						"          acceptedDate,",
						"          Account_id,",
						"          addressId = businessAddress.addressId,",
						"          BusinessAddress_id = businessAddress.id,",
						"          dwellingType = businessAddress.dwellingType,",
						"          validatedIndicator = businessAddress.validatedIndicator,",
						"          auxillaryaddress_line1 = businessAddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = businessAddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = businessAddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = businessAddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = businessAddress.auxiliaryAddress.line5,",
						"          addressLines = businessAddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddr_addInstructions = businessAddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = businessAddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = businessAddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = businessAddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = businessAddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = businessAddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = businessAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = businessAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = businessAddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = businessAddress.parsedAddress.buildingType,",
						"          parsedAddr_city = businessAddress.parsedAddress.city,",
						"          parsedAddr_country = businessAddress.parsedAddress.country,",
						"          parsedAddr_county = businessAddress.parsedAddress.county,",
						"          parsedAddr_countyCode = businessAddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = businessAddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = businessAddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = businessAddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = businessAddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = businessAddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = businessAddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = businessAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = businessAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = businessAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = businessAddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = businessAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = businessAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = businessAddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = businessAddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = businessAddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = businessAddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = businessAddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = businessAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = businessAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = businessAddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = businessAddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = businessAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = businessAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = businessAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = businessAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = businessAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = businessAddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = businessAddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = businessAddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = businessAddress.parsedAddress.state,",
						"          parsedAddr_streetName = businessAddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = businessAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = businessAddress.parsedAddress.streetType,",
						"          parsedAddr_structure = businessAddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = businessAddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = businessAddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = businessAddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = businessAddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = businessAddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = businessAddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = businessAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddr_zipGeoCode = businessAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = businessAddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = businessAddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = businessAddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = businessAddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = businessAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = businessAddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = businessAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = businessAddress.unparsedAddress.structure,",
						"          unparsedAddr_unit = businessAddress.unparsedAddress.unit,",
						"          unparsedAddr_urbanizationCode = businessAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = businessAddress.unparsedAddress.city,",
						"          unparsedAddr_country = businessAddress.unparsedAddress.country,",
						"          unparsedAddr_state = businessAddress.unparsedAddress.state,",
						"          unparsedAddr_zip = businessAddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = businessAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = businessAddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = businessAddress.unparsedAddress.addressLine2,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          json_additionaldetails = businessAddress.additionalDetails,",
						"          unparsedAddrCounty = businessAddress.unparsedAddress.county,",
						"          additionalDetails = businessAddress.additionalDetails,",
						"          acct_sequence = sequence",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBusinessAddress",
						"filter2 derive(createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          dc_addresslines = regexReplace(addressLines,'\\\",\\\"',' || ')) ~> derivedColumn3",
						"coalacc select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          addressid = serviceAddress.addressId,",
						"          ServiceAddress_id = serviceAddress.id,",
						"          placeId = serviceAddress.placeId,",
						"          connectedCommunityId = serviceAddress.connectedCommunityId,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          line1 = serviceAddress.auxiliaryAddress.line1,",
						"          dwellingType = serviceAddress.dwellingType,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          auxiliaryaddress_line1 = serviceAddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = serviceAddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = serviceAddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = serviceAddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = serviceAddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = serviceAddress.codingAccuracySupportSystemAddress,",
						"          addressLines = serviceAddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddr_addInstructions = serviceAddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = serviceAddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = serviceAddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = serviceAddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = serviceAddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = serviceAddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = serviceAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = serviceAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = serviceAddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = serviceAddress.parsedAddress.buildingType,",
						"          parsedAddr_city = serviceAddress.parsedAddress.city,",
						"          parsedAddr_country = serviceAddress.parsedAddress.country,",
						"          parsedAddr_county = serviceAddress.parsedAddress.county,",
						"          parsedAddr_countyCode = serviceAddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = serviceAddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = serviceAddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = serviceAddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = serviceAddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = serviceAddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = serviceAddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = serviceAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = serviceAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = serviceAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = serviceAddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = serviceAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = serviceAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = serviceAddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = serviceAddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = serviceAddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = serviceAddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = serviceAddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = serviceAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = serviceAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = serviceAddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = serviceAddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = serviceAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = serviceAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = serviceAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = serviceAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = serviceAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = serviceAddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = serviceAddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = serviceAddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = serviceAddress.parsedAddress.state,",
						"          parsedAddr_streetName = serviceAddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = serviceAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = serviceAddress.parsedAddress.streetType,",
						"          parsedAddr_structure = serviceAddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = serviceAddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = serviceAddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = serviceAddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = serviceAddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = serviceAddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = serviceAddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = serviceAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddr_zipGeoCode = serviceAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = serviceAddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = serviceAddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = serviceAddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = serviceAddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = serviceAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = serviceAddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = serviceAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = serviceAddress.unparsedAddress.structure,",
						"          unparsedAddr_unit = serviceAddress.unparsedAddress.unit,",
						"          unparsedAddr_urbanizationCode = serviceAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = serviceAddress.unparsedAddress.city,",
						"          unparsedAddr_country = serviceAddress.unparsedAddress.country,",
						"          unparsedAddr_state = serviceAddress.unparsedAddress.state,",
						"          unparsedAddr_zip = serviceAddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = serviceAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = serviceAddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = serviceAddress.unparsedAddress.addressLine2,",
						"          json_additionalDetails = serviceAddress.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          acct_sequence = sequence,",
						"          unparsedAddrCounty = serviceAddress.unparsedAddress.county",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectServiceAddress",
						"derivedColumn33 window(over(customerOrderNumber,",
						"          Account_id,",
						"          ServiceAddress_id,",
						"          acct_sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window1",
						"window1 filter(prank ==1 && not(isNull(ServiceAddress_id))) ~> filter1",
						"selectBusinessAddress window(over(customerOrderNumber,",
						"          Account_id,",
						"          BusinessAddress_id,",
						"          acct_sequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window2",
						"window2 filter(prank == 1 && not(isNull(BusinessAddress_id))) ~> filter2",
						"selectAllAccounts window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window3",
						"window3 filter(prank == 1) ~> filter3",
						"selectOrderAccountsBillingDetails window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window5",
						"window5 filter(prank == 1 && !isNull(nameId)) ~> filter5",
						"FinalizeOrderSourceDetail window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window8",
						"flattenSourceDetailAdditionalDetail window(over(customerOrderNumber,",
						"          code,",
						"          value),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window9",
						"derivedColumn64 filter(prank == 1 && !isNull(code)) ~> filter9",
						"flattenLosgsAdditionalDetail window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          code,",
						"          LineItemsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window10",
						"window10 filter(prank == 1 && !isNull(code)) ~> filter10",
						"window8 filter(prank == 1 && !isNull(channel)) ~> filter8",
						"flattenLosgsPriceSummaryList window(over(customerOrderNumber,",
						"          priceType,",
						"          Losgsequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window17",
						"window17 filter(prank ==1 && !isNull(priceType)) ~> filter17",
						"select50 window(over(customerOrderNumber,",
						"          losgsequence,",
						"          Losg_id,",
						"          pricetype),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window18",
						"window18 filter(prank == 1 && !isNull(pricetype)) ~> filter18",
						"derivedColumn12 window(over(customerOrderNumber,",
						"          losg_id,",
						"          losgSequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window19",
						"window19 filter(prank == 1) ~> filter19",
						"flattenTermsandConditions window(over(customerOrderNumber,",
						"          id),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window20",
						"window20 filter(prank == 1 && !isNull(id)) ~> filter20",
						"flattenOrderPromotions window(over(customerOrderNumber,",
						"          Promotion_id,",
						"          sequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window23",
						"window23 filter(prank == 1 && (!isNull(Promotion_id) || !isNull(sequence))) ~> filter23",
						"flattenProductGroups window(over(customerOrderNumber,",
						"          Product_id,",
						"          sequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window24",
						"window24 filter(prank ==1 && (!isNull(Product_id) || !isNull(sequence))) ~> filter24",
						"flatten27 window(over(customerOrderNumber,",
						"          priceType),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window25",
						"window25 filter(prank == 1 && !isNull(priceType)) ~> filter25",
						"flattenPriceList window(over(customerOrderNumber,",
						"          priceType),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window26",
						"window26 filter(prank ==1 && !isNull(customerOrderNumber)) ~> filter26",
						"flatten16 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window28",
						"window28 filter(prank ==1 && !isNull(nameid)) ~> filter28",
						"flattenOrderAdditionalDetail window(over(customerOrderNumber,",
						"          code,",
						"          value),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window29",
						"window29 filter(prank ==1 && !isNull(code)) ~> filter29",
						"FinalizeOrderData window(over(customerOrderNumber),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window30",
						"window30 filter(prank ==1 && !isNull(customerOrderNumber)) ~> filter30",
						"flattenServiceFacilityQualifications window(over(customerOrderNumber,",
						"          Account_id,",
						"          Actsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window6",
						"window6 filter(prank == 1) ~> filter6",
						"filtercreditPolicy select(mapColumn(",
						"          customerOrderNumber,",
						"          creditPolicyTransactionId = OrderData.creditPolicy.creditPolicyTransactionId,",
						"          crsmOnFlag = OrderData.creditPolicy.crsmOnFlag,",
						"          previousCreditPolicyTransactionId = OrderData.creditPolicy.previousCreditPolicyTransactionId,",
						"          policyAcceptedIndicator = OrderData.creditPolicy.policyAcceptedIndicator,",
						"          uucpStatus = OrderData.creditPolicy.uucpStatus,",
						"          additionalDetails = OrderData.creditPolicy.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcreditpolicy",
						"selectcreditpolicy window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window33",
						"window33 filter(prank ==1) ~> filter33",
						"filter33 alterRow(upsertIf(true())) ~> alterRowcreditpolicy",
						"derivedColumn20 foldDown(unroll(OrderData.debtAccounts, OrderData.debtAccounts),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          debtAccounts = OrderData.debtAccounts,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattendebitaccounts",
						"flattendebitaccounts select(mapColumn(",
						"          customerOrderNumber,",
						"          accountCategory = debtAccounts.accountCategory,",
						"          accountSubCategory = debtAccounts.accountSubCategory,",
						"          affiliateId = debtAccounts.affiliateId,",
						"          amount = debtAccounts.amount,",
						"          debtAccountNumber = debtAccounts.debtAccountNumber,",
						"          debtPaidStatus = debtAccounts.debtPaidStatus,",
						"          id = debtAccounts.id,",
						"          paymentMethodReference = debtAccounts.paymentMethodReference,",
						"          provider = debtAccounts.provider,",
						"          settledBy = debtAccounts.settledBy,",
						"          system = debtAccounts.system,",
						"          systemDivision = debtAccounts.systemDivision,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdebitaccounts",
						"derivedColumn43 window(over(customerOrderNumber,",
						"          debtAccountNumber,",
						"          id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window34",
						"window34 filter(prank ==1) ~> filter34",
						"filter34 alterRow(upsertIf(true())) ~> alterRowdebitaccounts",
						"derivedColumn20 foldDown(unroll(OrderData.relatedParty, OrderData.relatedParty),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          relatedparty = OrderData.relatedParty,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenrelatedparty",
						"derivedColumn63 window(over(customerOrderNumber,",
						"          id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window35",
						"flattenrelatedparty select(mapColumn(",
						"          customerOrderNumber,",
						"          endDateTime = relatedparty.endDateTime,",
						"          id = relatedparty.id,",
						"          role = relatedparty.role,",
						"          startDateTime = relatedparty.startDateTime,",
						"          name = relatedparty.name,",
						"          type = relatedparty.type,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"window35 filter(prank == 1 && !isNull(id)) ~> filter35",
						"filter35 alterRow(upsertIf(true())) ~> alterRowrelatedparty",
						"filtererror select(mapColumn(",
						"          Errors = orderjson_1.orderEvent.data.Errors.Error,",
						"          customerOrderNumber,",
						"          lastmodified_date = dc_eventtime,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecterror",
						"filter122 alterRow(upsertIf(true())) ~> alterRowerrors",
						"selecterror foldDown(unroll(Errors, Errors),",
						"     mapColumn(",
						"          ErrorCode = Errors.ErrorCode,",
						"          ErrorDescription = Errors.ErrorDescription,",
						"          IdRef = Errors.Reference.IdRef,",
						"          Type = Errors.Reference.Type,",
						"          customerOrderNumber,",
						"          eventtime = eventTime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenerror",
						"filter100 select(mapColumn(",
						"          fullyAuthenticatedIndicator = orderjson_1.orderEvent.data.order.moveDetail.fullyAuthenticatedIndicator,",
						"          additionalDetails = orderjson_1.orderEvent.data.order.moveDetail.additionalDetails,",
						"          disconnectDate,",
						"          fromBillingAddress = orderjson_1.orderEvent.data.order.moveDetail.fromBillingAddress,",
						"          fromServiceAddress = orderjson_1.orderEvent.data.order.moveDetail.fromServiceAddress,",
						"          fromTelephoneNumber = orderjson_1.orderEvent.data.order.moveDetail.fromTelephoneNumber,",
						"          lastmodified_date = dc_eventtime,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmoveorder",
						"filter38 alterRow(upsertIf(true())) ~> alterRowmoveorder",
						"selectmoveorder window(over(customerOrderNumber),",
						"     desc(lastmodified_date, true),",
						"     PRANK = rowNumber()) ~> window37",
						"window37 filter(PRANK==1&& not(isNull(customerOrderNumber))) ~> filter38",
						"filtertask select(mapColumn(",
						"          orderjson_1 = orderjson_1.orderEvent.data.OrderTasks.OrderTask,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          CustomerOrderNumber2 = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].CustomerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderTask",
						"derivedColumn67 foldDown(unroll(orderjson_1, orderjson_1),",
						"     mapColumn(",
						"          ApplicationName = orderjson_1.ApplicationName,",
						"          Channel = orderjson_1.Channel,",
						"          CreationDate = orderjson_1.CreationDate,",
						"          CustomerOrderNumber = customerOrderNumber,",
						"          LosgIds = orderjson_1.LosgIds,",
						"          OrderNumber = orderjson_1.OrderNumber,",
						"          PartnerName = orderjson_1.PartnerName,",
						"          ProgramName = orderjson_1.ProgramName,",
						"          QueueId = orderjson_1.QueueId,",
						"          QueueName = orderjson_1.QueueName,",
						"          QueueSlaDetails = orderjson_1.QueueSlaDetails,",
						"          TaskId = orderjson_1.TaskId,",
						"          TaskStatus = orderjson_1.TaskStatus,",
						"          CamundaTaskId = orderjson_1.CamundaTaskId,",
						"          lastmodified_date,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderTask",
						"derivedColumn6 window(over(CustomerOrderNumber,",
						"          dc_taskid),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window38",
						"flattenOrderTask derive(dc_taskid = coalesce(TaskId,CamundaTaskId),",
						"          dc_camuda = coalesce(CamundaTaskId,TaskId),",
						"          dc_losgids = regexReplace(regexReplace(regexReplace(regexReplace(LosgIds,'\",\"',' || '),\"\\\\[\",\"\"),\"\\\"\",''),\"\\\\]\",\"\"),",
						"          dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          CreationDate = toTimestamp(toLong(toString(byName('CreationDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn6",
						"window38 filter(prank==1  && !isNull(dc_taskid)) ~> filter39",
						"filter39 alterRow(upsertIf(true())) ~> alterRowtaskid",
						"filterreferenencedetail select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          encryptedIndicator = OrderData.referenceDetail.encryptedIndicator,",
						"          posReferenceId = OrderData.referenceDetail.posReferenceId,",
						"          posUUID = OrderData.referenceDetail.posUUID,",
						"          associatedRequestID = OrderData.referenceDetail.associatedRequestID,",
						"          passThroughIndicator = OrderData.referenceDetail.passThroughIndicator,",
						"          testOrderIndicator = OrderData.referenceDetail.testOrderIndicator,",
						"          bulkIndicator = OrderData.referenceDetail.bulkIndicator,",
						"          bulkOrderWorkRequestNumber = OrderData.referenceDetail.bulkOrderWorkRequestNumber,",
						"          chatId = OrderData.referenceDetail.chatId,",
						"          commonOrderIndicator = OrderData.referenceDetail.commonOrderIndicator,",
						"          fraudDetectionAdditionalDetails = OrderData.referenceDetail.fraudDetectionDetail.additionalDetails,",
						"          authenticationRequestId = OrderData.referenceDetail.fraudDetectionDetail.authenticationRequestId,",
						"          orderFraudCheckStatus = OrderData.referenceDetail.fraudDetectionDetail.orderFraudCheckStatus,",
						"          orderModifiedAfterPinValidation = OrderData.referenceDetail.fraudDetectionDetail.orderModifiedAfterPinValidation,",
						"          pinValidationSource = OrderData.referenceDetail.fraudDetectionDetail.pinValidationSource,",
						"          pinValidationStatus = OrderData.referenceDetail.fraudDetectionDetail.pinValidationStatus,",
						"          proofOfIdentityUrl = OrderData.referenceDetail.fraudDetectionDetail.proofOfIdentityUrl,",
						"          smsCTN = OrderData.referenceDetail.fraudDetectionDetail.smsCTN,",
						"          validationType = OrderData.referenceDetail.fraudDetectionDetail.validationType,",
						"          efcCallIndicator = OrderData.referenceDetail.fraudDetectionDetail.efcCallIndicator,",
						"          orderStatusUrl = OrderData.referenceDetail.orderStatusUrl,",
						"          parentOrderId = OrderData.referenceDetail.parentOrderId,",
						"          partialOrderIndicator = OrderData.referenceDetail.partialOrderIndicator,",
						"          productCombinationCode = OrderData.referenceDetail.productCombinationCode,",
						"          referenceOrderId = OrderData.referenceDetail.referenceOrderId,",
						"          resubmitOrderIndicator = OrderData.referenceDetail.resubmitOrderIndicator,",
						"          summaryCreatedIndicator = OrderData.referenceDetail.summaryCreatedIndicator,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window39",
						"window39 filter(prank==1) ~> filter40",
						"filter40 alterRow(upsertIf(true())) ~> alterRowreferencedetail",
						"parseJsonOrderData filter(not(isNull(orderjson_1.orderEvent.data.OrderTasks))) ~> filtertask",
						"derivedColumn35 filter(not(isNull(orderjson_1.orderEvent.data.Errors))) ~> filtererror",
						"parseJsonOrderData filter(not(isNull(orderjson_1.orderEvent.data.order.customerOrderNumber))) ~> filterorderdata",
						"selectOrderLosgs derive(sunsetDate = toTimestamp(toLong(toString(byName('sunsetDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          requestedExecutionDate = toTimestamp(toLong(toString(byName('requestedExecutionDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn12",
						"select9 derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          disconnectDate = toTimestamp(toLong(toString(byName('disconnectDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          customerOrderNumber = coalesce(customerOrderNumber,customerOrderNumber2)) ~> derivedColumn14",
						"filterorderdata select(mapColumn(",
						"          orderjson_1,",
						"          lastmodified_date,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          eventTime,",
						"          disconnectDate = orderjson_1.orderEvent.data.order.moveDetail.actualDisconnectDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn20",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn21",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn22",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn23",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          emailAddress = subscriberName.emailAddress,",
						"          firstName = subscriberName.firstName,",
						"          id = subscriberName.id,",
						"          lastName = subscriberName.lastName,",
						"          prefix = subscriberName.prefix,",
						"          suffix = subscriberName.suffix,",
						"          title = subscriberName.title,",
						"          preferredContactMethod = subscriberName.preferredContactMethod,",
						"          previousLegalLastName = subscriberName.previousLegalLastName,",
						"          primaryContactPhones = subscriberName.primaryContactPhones,",
						"          middleInitial = subscriberName.middleInitial,",
						"          legalLastName = subscriberName.legalLastName,",
						"          legalFirstName = subscriberName.legalFirstName,",
						"          additionalContactPhones = subscriberName.additionalContactPhones,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"select12 window(over(customerOrderNumber,",
						"          losg_sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window40",
						"window40 filter(prank==1) ~> filter41",
						"filter41 alterRow(upsertIf(true())) ~> IPtvalterrow",
						"select10 foldDown(unroll(primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = id,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneType = primaryContactPhones.contactPhoneType,",
						"          primaryContactPhoneNumber = primaryContactPhones.phoneNumber,",
						"          primaryContactextension = primaryContactPhones.extension,",
						"          primarycontactPhoneConsentDetails = primaryContactPhones.consentDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 window(over(customerOrderNumber,",
						"          losg_sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window41",
						"window41 filter(prank==1 && !isNull(nameId)) ~> filter42",
						"filter42 alterRow(upsertIf(true())) ~> AlterSubcribeName",
						"filter112 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          freeSTBReceiverCount = iptvLOSCharacteristics.freeSTBReceiverCount,",
						"          parentComponentCode = iptvLOSCharacteristics.parentComponentCode,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select12",
						"flatten30 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          termsandconditions_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window42",
						"window42 filter(prank==1  && !isNull(termsandconditions_id)) ~> filter43",
						"filter111 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          reservedTelephoneNumber = voipLOSCharacteristics.reservedTelephoneNumber,",
						"          e911Id = voipLOSCharacteristics.e911Detail.id,",
						"          e911HomeAlarmSystem = voipLOSCharacteristics.e911Detail.homeAlarmSystem,",
						"          e911NoMatchFound = voipLOSCharacteristics.e911Detail.noMatchFound,",
						"          e911address = voipLOSCharacteristics.e911Detail.address,",
						"          e911TermsAndConditionId = voipLOSCharacteristics.e911Detail.termsAndCondition911.id,",
						"          e911TnCaccepted = voipLOSCharacteristics.e911Detail.termsAndCondition911.accepted,",
						"          e911TnCcategory = voipLOSCharacteristics.e911Detail.termsAndCondition911.category,",
						"          e911TnCagreementText = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementText,",
						"          e911TnCagreementType = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementType,",
						"          e911TnCagreementURL = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementURL,",
						"          e911TnCtimestamp = voipLOSCharacteristics.e911Detail.termsAndCondition911.timestamp,",
						"          e911TnCversion = voipLOSCharacteristics.e911Detail.termsAndCondition911.version,",
						"          e911TnCdocumentName = voipLOSCharacteristics.e911Detail.termsAndCondition911.documentName,",
						"          e911TnCorderLevelIndicator = voipLOSCharacteristics.e911Detail.termsAndCondition911.orderLevelIndicator,",
						"          e911TnCId = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncId,",
						"          e911TnCKey = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncKey,",
						"          e911TnCRecordingOff = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncRecordingOff,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select13",
						"select13 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window43",
						"derivedColumn44 filter(prank == 1) ~> filter44",
						"filter44 alterRow(upsertIf(true())) ~> altervoipc",
						"flatten26 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = losgSequence,",
						"          dirListingName,",
						"          dirListingAdditionalDetails,",
						"          dirListingDesignation,",
						"          dirListingAddress,",
						"          dirListingListingType,",
						"          dirListingListingCategory,",
						"          dirListingListBy,",
						"          releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator,",
						"          dirListingParentComponentCode,",
						"          dirListingTitle2,",
						"          dirListingSubscriberName,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select14",
						"select14 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence,",
						"          dirListingName),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window44",
						"derivedColumn69 filter(prank==1) ~> filter45",
						"filter45 alterRow(upsertIf(true())) ~> altere11",
						"filter110 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          accountConversion = wirelessLOSCharacteristics.accountConversionStatus,",
						"          activationDate = wirelessLOSCharacteristics.activationDate,",
						"          availabilityDate = wirelessLOSCharacteristics.availabilityDate,",
						"          billingSystemId = wirelessLOSCharacteristics.billingSystemId,",
						"          calculateTaxIndicator = wirelessLOSCharacteristics.calculateTaxIndicator,",
						"          addendDateAndTime = wirelessLOSCharacteristics.coPayData.addendDateAndTime,",
						"          addendVersion = wirelessLOSCharacteristics.coPayData.addendVersion,",
						"          allowanceAmount = wirelessLOSCharacteristics.coPayData.allowanceAmount,",
						"          cancelCTN = wirelessLOSCharacteristics.coPayData.cancelCTN,",
						"          enrollingCTN = wirelessLOSCharacteristics.coPayData.enrollingCTN,",
						"          receivingBAN = wirelessLOSCharacteristics.coPayData.receivingBAN,",
						"          receivingFAN = wirelessLOSCharacteristics.coPayData.receivingFAN,",
						"          CCar_make = wirelessLOSCharacteristics.connectedCarDetail.make,",
						"          CCar_model = wirelessLOSCharacteristics.connectedCarDetail.model,",
						"          CCar_trim = wirelessLOSCharacteristics.connectedCarDetail.trim,",
						"          CCar_vehicleManufacturer = wirelessLOSCharacteristics.connectedCarDetail.vehicleManufacturer,",
						"          CCar_vin = wirelessLOSCharacteristics.connectedCarDetail.vin,",
						"          CCar_year = wirelessLOSCharacteristics.connectedCarDetail.year,",
						"          crossUpgradeIndicator = wirelessLOSCharacteristics.crossUpgradeIndicator,",
						"          curbsideDelivery = wirelessLOSCharacteristics.curbsideDelivery,",
						"          inventoryStoreId = wirelessLOSCharacteristics.inventoryStoreId,",
						"          mobileNumber = wirelessLOSCharacteristics.mobileNumber,",
						"          paymentId = wirelessLOSCharacteristics.paymentId,",
						"          preOrderIndicator = wirelessLOSCharacteristics.preOrderIndicator,",
						"          primarySharedPlanIndicator = wirelessLOSCharacteristics.primarySharedPlanIndicator,",
						"          shippedHotIndicator = wirelessLOSCharacteristics.shippedHotIndicator,",
						"          shoppingZipCode = wirelessLOSCharacteristics.shoppingZipCode,",
						"          storeId = wirelessLOSCharacteristics.storeId,",
						"          subscriberCrossmarketIndicator = wirelessLOSCharacteristics.subscriberCrossmarketIndicator,",
						"          subscriptionClass = wirelessLOSCharacteristics.subscriptionClass,",
						"          tradeInQuoteId = wirelessLOSCharacteristics.tradeInQuoteId,",
						"          upgrade_relatedMobileNumber = wirelessLOSCharacteristics.upgradeDetail.relatedMobileNumber,",
						"          upgrade_relationship = wirelessLOSCharacteristics.upgradeDetail.relationship,",
						"          manageCallListaction = wirelessLOSCharacteristics.manageCallList.action,",
						"          manageCallListCompAListName = wirelessLOSCharacteristics.manageCallList.companyAListName,",
						"          manageCallListcompCTNList = wirelessLOSCharacteristics.manageCallList.companyCTNList,",
						"          manageCallListcontactCTN = wirelessLOSCharacteristics.manageCallList.contactCTN,",
						"          manageCallListId = wirelessLOSCharacteristics.manageCallList.id,",
						"          manageCallListOverrideInd = wirelessLOSCharacteristics.manageCallList.overrideWithCompanyAListIndicator,",
						"          splitLiabilityDataAddendDateAndTime = wirelessLOSCharacteristics.splitLiabilityData.addendDateAndTime,",
						"          splitLiabilityDataAddendVersion = wirelessLOSCharacteristics.splitLiabilityData.addendVersion,",
						"          splitLiabilityDataCancelCTN = wirelessLOSCharacteristics.splitLiabilityData.cancelCTN,",
						"          splitLiabilityDataEnrollingCTN = wirelessLOSCharacteristics.splitLiabilityData.enrollingCTN,",
						"          splitLiabilityDataOneTimeChargeInd = wirelessLOSCharacteristics.splitLiabilityData.oneTimeChargeIndicator,",
						"          splitLiabilityValueIndicator = wirelessLOSCharacteristics.splitLiabilityData.splitLiabilityValueIndicator,",
						"          splitLiabilityDataTargetBAN = wirelessLOSCharacteristics.splitLiabilityData.targetBAN,",
						"          splitLiabilityDataTargetFAN = wirelessLOSCharacteristics.splitLiabilityData.targetFAN,",
						"          splitLiabilityDataTelecomManagerEmail = wirelessLOSCharacteristics.splitLiabilityData.telecomManagerEmailAddress,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select15",
						"derivedColumn56 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window45",
						"window45 filter(prank==1) ~> filter46",
						"filter46 alterRow(upsertIf(true())) ~> alterWirlessChar",
						"select25 window(over(customerOrderNumber,",
						"          sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window46",
						"window46 filter(prank==1) ~> filter47",
						"filter47 alterRow(upsertIf(true())) ~> alterServiceProvider",
						"derivedColumn51 window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window48",
						"window48 filter(prank ==1) ~> filter49",
						"filter49 alterRow(upsertIf(true())) ~> alterRowOrderAccountsCreditCheck",
						"derivedColumn55 window(over(customerOrderNumber,",
						"          sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window49",
						"window49 filter(prank==1) ~> filter50",
						"filter50 alterRow(upsertIf(true())) ~> alterRowPortDetail",
						"select18 derive(dc_codingaccuracysupport = regexReplace(addressLines,'\\\",\\\"',' || ')) ~> derivedColumn31",
						"derivedColumn31 window(over(customerOrderNumber,",
						"          Account_id,",
						"          BillingAddress_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window50",
						"window50 filter(prank==1  && !isNull(BillingAddress_id)) ~> filter51",
						"filter51 alterRow(upsertIf(true())) ~> alterRowv101oceOrderAcctsBillingDetailAddr",
						"flattenBillingDetails select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          billingType,",
						"          placeId,",
						"          addressId,",
						"          connectedCommunityId,",
						"          BillingAddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxillaryaddress_line1,",
						"          auxillaryaddress_line2,",
						"          auxillaryaddress_line3,",
						"          auxillaryaddress_line4,",
						"          auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress,",
						"          addressLines,",
						"          parsed_addInstructions,",
						"          parsed_addressChanged,",
						"          parsed_addressMatchCode,",
						"          parsed_addressStreetLine,",
						"          parsed_addressType,",
						"          parsed_apartmentUnit,",
						"          parsed_apartmentUnitNumber,",
						"          parsed_assignedStreetNumber,",
						"          parsed_attention,",
						"          parsed_buildingType,",
						"          parsed_city,",
						"          parsed_country,",
						"          parsed_county,",
						"          parsed_countyCode,",
						"          parsed_direction,",
						"          parsed_directionPrefix,",
						"          parsed_disconnectDate,",
						"          parsed_exchangeCode,",
						"          parsed_exhaustCode,",
						"          parsed_houseNumber,",
						"          parsed_houseNumberPrefix,",
						"          parsed_houseNumberSuffix,",
						"          parsed_incorporatedIndicator,",
						"          parsed_internationalZip,",
						"          parsed_lastDisconnectedTransportType,",
						"          parsed_lastNetworkAccessDeviceType,",
						"          parsed_legalEntity,",
						"          parsed_level,",
						"          parsed_levelNumber,",
						"          parsed_linkKey,",
						"          parsed_postOfficeBox,",
						"          parsed_primaryAddressLine,",
						"          parsed_primaryNPANXX,",
						"          parsed_province,",
						"          parsed_rateCenterCode,",
						"          parsed_rateZoneBanCode,",
						"          parsed_rsagValidationIndicator,",
						"          parsed_ruralRouteBoxNumber,",
						"          parsed_ruralRouteCenterNumber,",
						"          parsed_secondaryAddressLine,",
						"          parsed_siteAddressId,",
						"          parsed_siteId,",
						"          parsed_smartMoves,",
						"          parsed_state,",
						"          parsed_streetName,",
						"          parsed_streetNameSuffix,",
						"          parsed_streetType,",
						"          parsed_structure,",
						"          parsed_structureNumber,",
						"          parsed_tarCode,",
						"          parsed_telephoneNumber,",
						"          parsed_urbanizationCode,",
						"          parsed_videoHubOffice,",
						"          parsed_zip,",
						"          parsed_zipCodeExtension,",
						"          parsed_zipGeoCode,",
						"          unparsed_addressLine1,",
						"          unparsed_addressLine3,",
						"          unparsed_attention,",
						"          unparsed_elevation,",
						"          unparsed_postOfficeBox,",
						"          unparsed_province,",
						"          unparsed_ruralRoute,",
						"          unparsed_structure,",
						"          unparsed_unit,",
						"          unparsed_urbanizationCode,",
						"          unparsed_city,",
						"          unparsed_country,",
						"          unparsed_state,",
						"          unparsed_zip,",
						"          unparsed_zipCodeExtension,",
						"          unparsed_internationalZip,",
						"          unparsed_addressLine2,",
						"          dob,",
						"          ssn,",
						"          pin,",
						"          securityAnswer,",
						"          securityQuestion,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          line1,",
						"          stringify_additionaldetails = additionalDetails,",
						"          sequence,",
						"          unparsed_county",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select18",
						"selectServiceAddress derive(dc_addressLines = regexReplace(codingAccuracySupportSystemAddress.addressLines,'\\\",\\\"',' || ')) ~> derivedColumn33",
						"select26 foldDown(unroll(repDetails, repDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          dealerCode = repDetails.dealerCode,",
						"          repAction = repDetails.repAction,",
						"          repId = repDetails.repId,",
						"          salesCode = repDetails.salesCode,",
						"          type = repDetails.type,",
						"          submittedBy",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattencompensationrepdetail",
						"flattencompensationrepdetail window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          repId),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowCompensation",
						"windowCompensation filter(prank==1) ~> filter52",
						"filter52 alterRow(upsertIf(true())) ~> alterCompensation",
						"coallosgid foldDown(unroll(additionalDetails, additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          type = additionalDetails.type,",
						"          parentType = additionalDetails.parentType,",
						"          code = additionalDetails.code,",
						"          value = additionalDetails.value,",
						"          sequence = additionalDetails.sequence",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten5",
						"flatten5 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence,",
						"          code),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window51",
						"window51 filter(prank==1 && !isNull(code)) ~> filter53",
						"filter53 alterRow(upsertIf(true())) ~> alteradditonalDetails",
						"select62 window(over(customerOrderNumber,",
						"          sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window52",
						"window52 filter(prank==1) ~> filter54",
						"filter54 alterRow(upsertIf(true())) ~> alterRowlosginternetchar",
						"select21 window(over(customerOrderNumber,",
						"          sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window53",
						"window53 filter(prank==1) ~> filter55",
						"filter55 alterRow(upsertIf(true())) ~> alterRowDIrectvchar",
						"derivedColumn35 select(mapColumn(",
						"          eventid = orderjson_1.orderEvent.eventid,",
						"          eventSource = orderjson_1.orderEvent.eventSource,",
						"          eventType = orderjson_1.orderEvent.eventType,",
						"          customerOrderNumber,",
						"          orderType = orderjson_1.orderEvent.metaData.orderType,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          dc_eventTime = dc_eventtime,",
						"          traceId = orderjson_1.orderEvent.metaData.traceId,",
						"          sender = orderjson_1.orderEvent.metaData.sender,",
						"          channel = orderjson_1.orderEvent.metaData.channel,",
						"          channel1 = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          channel2 = orderjson_1.orderEvent.data.transactionLogs[1].channel,",
						"          isSingleTopic = orderjson_1.orderEvent.metaData.isSingleTopic,",
						"          routingInfo = orderjson_1.orderEvent.metaData.routingInfo,",
						"          automationUrl = orderjson_1.orderEvent.metaData.automationUrl,",
						"          priority = orderjson_1.orderEvent.metaData.priority,",
						"          version = orderjson_1.orderEvent.metaData.version,",
						"          isUpgradeOrder = orderjson_1.orderEvent.metaData.isUpgradeOrder,",
						"          fraudResponse = orderjson_1.orderEvent.metaData.fraudResponse,",
						"          originalVersion = orderjson_1.orderEvent.metaData.originalVersion,",
						"          fallout = orderjson_1.orderEvent.metaData.fallout,",
						"          callback = orderjson_1.orderEvent.metaData.callback,",
						"          idbStatus = orderjson_1.orderEvent.metaData.idbStatus,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select19",
						"derivedColumn70 alterRow(insertIf(true())) ~> alterRowevent",
						"parseJsonOrderData select(mapColumn(",
						"          orderjson_1,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          metedata_channel = orderjson_1.orderEvent.metaData.channel,",
						"          order_task_Channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          lastmodified_date,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select20",
						"select20 derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          customerOrderNumber = coalesce(customerOrderNumber,customerOrderNumber2),",
						"          channel = coalesce(sourcedetail_channel,order_task_Channel,metedata_channel)) ~> derivedColumn35",
						"derivedColumn35 filter(not(isNull(orderjson_1.orderEvent.data.transactionLogs))) ~> filtertransactionlogs",
						"filtertransactionlogs select(mapColumn(",
						"          TransactionLogs = orderjson_1.orderEvent.data.transactionLogs,",
						"          customerOrderNumber,",
						"          channel,",
						"          eventTime,",
						"          lastmodified_date = dc_eventtime,",
						"          idbStatus = orderjson_1.orderEvent.metaData.idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderTransctionLogs",
						"selectOrderTransctionLogs foldDown(unroll(TransactionLogs, TransactionLogs),",
						"     mapColumn(",
						"          comments = TransactionLogs.comments,",
						"          actionBy = TransactionLogs.actionBy,",
						"          updateInfos = TransactionLogs.updateInfos,",
						"          channel = TransactionLogs.channel,",
						"          orderStatus = TransactionLogs.orderStatus,",
						"          transactionName = TransactionLogs.transactionName,",
						"          transactionType = TransactionLogs.transactionType,",
						"          changedLosgReferenceId = TransactionLogs.changedLosgReferenceId,",
						"          recordId = TransactionLogs.recordId,",
						"          queueName = TransactionLogs.queueName,",
						"          parentOrderId = TransactionLogs.parentOrderId,",
						"          startTime = TransactionLogs.startTime,",
						"          endTime = TransactionLogs.endTime,",
						"          transactionId = TransactionLogs.transactionId,",
						"          orderId = TransactionLogs.orderId,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime,",
						"          losgs = TransactionLogs.losgs,",
						"          idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTransactionLosgHistory",
						"flattenTransactionLosgHistory derive(endTime = toTimestamp(case((instr(endTime,'T'))>0,toString(toTimestamp(substring(endTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),toString(toTimestamp(toLong(toString(byName('endTime'))),'yyyy-MM-dd HH:mm:ss.SSS'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          startTime = case((instr(startTime,'T'))>0,toTimestamp(substring(startTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss'),    toTimestamp(toLong(toString(byName('startTime'))),'yyyy-MM-dd HH:mm:ss'))) ~> derivedColumn36",
						"derivedColumn36 alterRow(insertIf(true())) ~> AlterRowTransactionLogsHistory",
						"selectOrderTransctionLogs foldDown(unroll(TransactionLogs.losgs, TransactionLogs),",
						"     mapColumn(",
						"          transactionName = TransactionLogs.transactionName,",
						"          transactionType = TransactionLogs.transactionType,",
						"          changedLosgReferenceId = TransactionLogs.changedLosgReferenceId,",
						"          transactionId = TransactionLogs.transactionId,",
						"          orderId = TransactionLogs.orderId,",
						"          losgReferenceId = TransactionLogs.losgs.losgReferenceId,",
						"          service = TransactionLogs.losgs.service,",
						"          serviceType = TransactionLogs.losgs.serviceType,",
						"          status = TransactionLogs.losgs.status,",
						"          subStatus = TransactionLogs.losgs.subStatus,",
						"          wirelessNumber = TransactionLogs.losgs.wirelessNumber,",
						"          customerOrderNumber,",
						"          channel,",
						"          eventTime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTransactionLosgs",
						"flattenTransactionLosgs alterRow(insertIf(true())) ~> AlterRowTransactionLosgs",
						"filter108 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          dealerId = direcTVLOSCharacteristics.dealerId,",
						"          freeSTBReceiverCount = direcTVLOSCharacteristics.freeSTBReceiverCount,",
						"          hasMoreThanThreeFloors = direcTVLOSCharacteristics.hasMoreThanThreeFloors,",
						"          marketingSourceCode = direcTVLOSCharacteristics.marketingSourceCode,",
						"          moveInOrder = direcTVLOSCharacteristics.moveInOrder,",
						"          offerLanguage = direcTVLOSCharacteristics.offerLanguage,",
						"          parentComponentCode = direcTVLOSCharacteristics.parentComponentCode,",
						"          serviceAgreement = direcTVLOSCharacteristics.serviceAgreement",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select21",
						"filtercreditCheck select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          addAccountGUId = creditCheck.addAccountGUId,",
						"          applicationApprovalDate = creditCheck.applicationApprovalDate,",
						"          applicationExpiresDate = creditCheck.applicationExpiresDate,",
						"          creditBand = creditCheck.creditBand,",
						"          creditCheckMcreditCheckManagementTransactionIdanagementTransactionId = creditCheck.creditCheckManagementTransactionId,",
						"          creditCheckRanIndicator = creditCheck.creditCheckRanIndicator,",
						"          creditClass = creditCheck.creditClass,",
						"          creditInquiryOpen = creditCheck.creditInquiryOpen,",
						"          creditPolicyToken = creditCheck.creditPolicyToken,",
						"          creditReferenceDate = creditCheck.creditReferenceDate,",
						"          creditScoreResult = creditCheck.creditScoreResult,",
						"          creditStatus = creditCheck.creditStatus,",
						"          creditVerified = creditCheck.creditVerified,",
						"          currentAccountBalance = creditCheck.currentAccountBalance,",
						"          currentDeniablePastDueAmount = creditCheck.currentDeniablePastDueAmount,",
						"          currentNonDeniablePastDueAmount = creditCheck.currentNonDeniablePastDueAmount,",
						"          currentNonRegulatedPastDueAmount = creditCheck.currentNonRegulatedPastDueAmount,",
						"          currentPastDueAmount = creditCheck.currentPastDueAmount,",
						"          currentRegulatedPastDueAmount = creditCheck.currentRegulatedPastDueAmount,",
						"          customerApprovalSystemTransactionId = creditCheck.customerApprovalSystemTransactionId,",
						"          debtPaidStatus = creditCheck.debtPaidStatus,",
						"          depositAmount = creditCheck.depositAmount,",
						"          depositRequired = creditCheck.depositRequired,",
						"          depositStatus = creditCheck.depositStatus,",
						"          electronicIdNumber = creditCheck.electronicIdNumber,",
						"          electronicIdVerifierLaunched = creditCheck.electronicIdVerifierLaunched,",
						"          electronicIdVerifierRequired = creditCheck.electronicIdVerifierRequired,",
						"          electronicIdVerifierResults = creditCheck.electronicIdVerifierResults,",
						"          exchangeListFound = creditCheck.exchangeListFound,",
						"          expressPayDetailHeld = creditCheck.expressPayDetailHeld,",
						"          finalBillAccounts = creditCheck.finalBillAccounts,",
						"          ignoreDeposit = creditCheck.ignoreDeposit,",
						"          individualCustomerKey = creditCheck.individualCustomerKey,",
						"          minimumAmountDue = creditCheck.minimumAmountDue,",
						"          nonRefundableCreditFee = creditCheck.nonRefundableCreditFee,",
						"          numberApprovedLines = creditCheck.numberApprovedLines,",
						"          numberLinesRequired = creditCheck.numberLinesRequired,",
						"          productsInclude = creditCheck.productsInclude,",
						"          proprietarySegment = creditCheck.proprietarySegment,",
						"          reasonCode = creditCheck.reasonCode,",
						"          reasonCodeDescription = creditCheck.reasonCodeDescription,",
						"          safeScanAlertIndicator = creditCheck.safeScanAlertIndicator,",
						"          safeScanPassIndicator = creditCheck.safeScanPassIndicator,",
						"          singleCreditQueryWirelessIndicator = creditCheck.singleCreditQueryWirelessIndicator,",
						"          treatmentCode = creditCheck.treatmentCode,",
						"          treatmentMessage = creditCheck.treatmentMessage,",
						"          writeOffAmount = creditCheck.writeOffAmount,",
						"          writeOffDate = creditCheck.writeOffDate,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          finalBillAccounts = creditCheck.finalBillAccounts",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select22",
						"filter43 alterRow(upsertIf(true())) ~> alterRowtermsandconditins",
						"alterRowtermsandconditins derive(timestamp = toTimestamp(toLong(toString(byName('timestamp'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> MapDrifted1",
						"filter109 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          serviceProvidername = serviceProvider.name,",
						"          serviceProvidercode = serviceProvider.code,",
						"          serviceProvidertype = serviceProvider.type,",
						"          conversationId = serviceProvider.conversationId,",
						"          phoneNumber = serviceProvider.phoneNumber,",
						"          orderConfirmationId = serviceProvider.orderConfirmationId,",
						"          submissionStatus = serviceProvider.submissionStatus,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select25",
						"filter107 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          sequence,",
						"          repDetails = compensation.repDetails,",
						"          submittedBy = compensation.submittedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select26",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          portTelephoneNumber = numberPortDetail.portTelephoneNumber,",
						"          currentServiceProviderId = numberPortDetail.currentServiceProviderId,",
						"          customerCode = numberPortDetail.customerCode,",
						"          disconAccepted = numberPortDetail.disconnectAcknowledged.accepted,",
						"          disconDevInstallAgreementType = numberPortDetail.disconnectAcknowledged.deviceInstallAgreementType,",
						"          disconEConsentAgreementType = numberPortDetail.disconnectAcknowledged.econsentAgreementType,",
						"          disconTimestamp = numberPortDetail.disconnectAcknowledged.timestamp,",
						"          disconVersion = numberPortDetail.disconnectAcknowledged.version,",
						"          e911ServiceRoutingNumber = numberPortDetail.e911ServiceRoutingNumber,",
						"          lightspeedLocalRoutingNumber = numberPortDetail.lightspeedLocalRoutingNumber,",
						"          lastFourOfSSN = numberPortDetail.lastFourOfSSN,",
						"          localRoutingNumber = numberPortDetail.localExchangeRoutingGuideLocalRoutingNumber,",
						"          name = numberPortDetail.name,",
						"          nonATTPortIn = numberPortDetail.nonATTPortIn,",
						"          ospAccountNumber = numberPortDetail.ospAccountNumber,",
						"          ospName = numberPortDetail.ospName,",
						"          pinOrPassword = numberPortDetail.pinOrPassword,",
						"          portEligibility = numberPortDetail.portEligibility,",
						"          portInType = numberPortDetail.portInType,",
						"          portRequestNumber = numberPortDetail.portRequestNumber,",
						"          portStatus = numberPortDetail.portStatus,",
						"          previousAddress = numberPortDetail.previousAddress,",
						"          shadowLocalRoutingNumber = numberPortDetail.shadowLocalRoutingNumber,",
						"          ssn = numberPortDetail.ssn,",
						"          taxId = numberPortDetail.taxId,",
						"          shipmentInfoUpdatedIndicator = numberPortDetail.shipmentInfoUpdatedIndicator,",
						"          portstatusReasonCode = numberPortDetail.portstatusReasonCode,",
						"          portRequestLineStatus = numberPortDetail.portRequestLineStatus,",
						"          portstatusReasonDescription = numberPortDetail.portstatusReasonDescription",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select27",
						"filter105 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          acctsequence = sequence,",
						"          purchaseOrderNumber = autopayPaymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          accountsReceivableIndicator = autopayPaymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          btmEquipmentType = autopayPaymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = autopayPaymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = autopayPaymentMethod.btm.totalAmount,",
						"          btnCustomerCode = autopayPaymentMethod.btn.customerCode,",
						"          btnPaymentAmount = autopayPaymentMethod.btn.paymentAmount,",
						"          btnTn = autopayPaymentMethod.btn.tn,",
						"          cashPaymentAmount = autopayPaymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = autopayPaymentMethod.cash.paymentToken,",
						"          lpmCustomerAgreementVersion = autopayPaymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmLast4Digits = autopayPaymentMethod.lastPaymentMethod.lpmLast4Digits,",
						"          lpmPaymentType = autopayPaymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = autopayPaymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = autopayPaymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          ipmTotalAmount = autopayPaymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = autopayPaymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = autopayPaymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = autopayPaymentMethod.store.last4Digits,",
						"          storePaymentAmount = autopayPaymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = autopayPaymentMethod.store.profileOwnerId,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select28",
						"select28 window(over(customerOrderNumber,",
						"          Account_id,",
						"          acctsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window54",
						"window54 filter(prank==1) ~> filter56",
						"filter56 alterRow(upsertIf(true())) ~> alterRowautopay",
						"filter104 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          accsequence = sequence,",
						"          paymentMethodId = autopayPaymentMethod.ePaymentMethod.paymentMethodId,",
						"          achAccountHolderName = autopayPaymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountNumber = autopayPaymentMethod.ePaymentMethod.ach.accountNumber,",
						"          achAccountNumberLast4Digits = autopayPaymentMethod.ePaymentMethod.ach.accountNumberLast4Digits,",
						"          achAccountType = autopayPaymentMethod.ePaymentMethod.ach.accountType,",
						"          achRoutingNumber = autopayPaymentMethod.ePaymentMethod.ach.routingNumber,",
						"          bankingPartnerCustomerId = autopayPaymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = autopayPaymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = autopayPaymentMethod.ePaymentMethod.cardCryptogram,",
						"          cardBillingZipCode = autopayPaymentMethod.ePaymentMethod.cardBillingZipCode,",
						"          ccCardNotValidatedIndicator = autopayPaymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = autopayPaymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          ccCreditCardNumber = autopayPaymentMethod.ePaymentMethod.cc.creditCardNumber,",
						"          ccExpirationYearMonth = autopayPaymentMethod.ePaymentMethod.cc.expirationYearMonth,",
						"          creditCardLast4Digits = autopayPaymentMethod.ePaymentMethod.creditCardLast4Digits,",
						"          creditCardType = autopayPaymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = autopayPaymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          lastmodified_date,",
						"          giftCardIndicator = autopayPaymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailPaymentHandle = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = autopayPaymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = autopayPaymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = autopayPaymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileType = autopayPaymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentProfileOwnerId = autopayPaymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          paymentTenderConfigMerchantId = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = autopayPaymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = autopayPaymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = autopayPaymentMethod.ePaymentMethod.payType,",
						"          paymentMethodId = autopayPaymentMethod.ePaymentMethod.paymentMethodId,",
						"          payPalEmailAddress = autopayPaymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = autopayPaymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = autopayPaymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = autopayPaymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = autopayPaymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationDate,",
						"          preAuthAuthorizationExpirationDate = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate,",
						"          preAuthAuthorizationKey = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = autopayPaymentMethod.ePaymentMethod.profileAction,",
						"          token = autopayPaymentMethod.ePaymentMethod.token,",
						"          totalAmount = autopayPaymentMethod.ePaymentMethod.totalAmount,",
						"          last4Digits = autopayPaymentMethod.ePaymentMethod.last4Digits,",
						"          verificationIndicator = autopayPaymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = autopayPaymentMethod.ePaymentMethod.skipAuthorization,",
						"          dc_eventtime,",
						"          address = autopayPaymentMethod.ePaymentMethod.address",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select29",
						"derivedColumn62 window(over(customerOrderNumber,",
						"          Account_id,",
						"          accsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window55",
						"window55 filter(prank==1) ~> filter57",
						"filter57 alterRow(upsertIf(true())) ~> alterRowautoepay",
						"filter103 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          purchaseOrderNumber = cardOnFilePaymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          accountsReceivableIndicator = cardOnFilePaymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          btmEquipmentType = cardOnFilePaymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = cardOnFilePaymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = cardOnFilePaymentMethod.btm.totalAmount,",
						"          btnCustomerCode = cardOnFilePaymentMethod.btn.customerCode,",
						"          btnPaymentAmount = cardOnFilePaymentMethod.btn.paymentAmount,",
						"          btnTn = cardOnFilePaymentMethod.btn.tn,",
						"          cashPaymentAmount = cardOnFilePaymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = cardOnFilePaymentMethod.cash.paymentToken,",
						"          ipmCustomerAgreementVersion = cardOnFilePaymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmLast4Digits = cardOnFilePaymentMethod.lastPaymentMethod.lpmLast4Digits,",
						"          lpmPaymentType = cardOnFilePaymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = cardOnFilePaymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = cardOnFilePaymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          ipmTotalAmount = cardOnFilePaymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = cardOnFilePaymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = cardOnFilePaymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = cardOnFilePaymentMethod.store.last4Digits,",
						"          storePaymentAmount = cardOnFilePaymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = cardOnFilePaymentMethod.store.profileOwnerId,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select30",
						"select30 window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window56",
						"window56 filter(prank==1) ~> filter58",
						"filter58 alterRow(upsertIf(true())) ~> alterRowcardonfile",
						"filtecardOnFilePaymentMethod select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          acctsequence = sequence,",
						"          cardOnFilePaymentMethod,",
						"          achAccountHolderName = cardOnFilePaymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountNumber = cardOnFilePaymentMethod.ePaymentMethod.ach.accountNumber,",
						"          achAccountNumberLast4Digits = cardOnFilePaymentMethod.ePaymentMethod.ach.accountNumberLast4Digits,",
						"          achAccountType = cardOnFilePaymentMethod.ePaymentMethod.ach.accountType,",
						"          achRoutingNumber = cardOnFilePaymentMethod.ePaymentMethod.ach.routingNumber,",
						"          bankingPartnerCustomerId = cardOnFilePaymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = cardOnFilePaymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = cardOnFilePaymentMethod.ePaymentMethod.cardCryptogram,",
						"          cardBillingZipCode = cardOnFilePaymentMethod.ePaymentMethod.cardBillingZipCode,",
						"          ccCardNotValidatedIndicator = cardOnFilePaymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = cardOnFilePaymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          ccCreditCardNumber = cardOnFilePaymentMethod.ePaymentMethod.cc.creditCardNumber,",
						"          ccExpirationYearMonth = cardOnFilePaymentMethod.ePaymentMethod.cc.expirationYearMonth,",
						"          creditCardLast4Digits = cardOnFilePaymentMethod.ePaymentMethod.creditCardLast4Digits,",
						"          creditCardType = cardOnFilePaymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = cardOnFilePaymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          giftCardIndicator = cardOnFilePaymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailPaymentHandle = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileType = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentProfileOwnerId = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          paymentTenderConfigMerchantId = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = cardOnFilePaymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = cardOnFilePaymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = cardOnFilePaymentMethod.ePaymentMethod.payType,",
						"          payPalEmailAddress = cardOnFilePaymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = cardOnFilePaymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = cardOnFilePaymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = cardOnFilePaymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationDate,",
						"          preAuthAuthorizationExpirationDate = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate,",
						"          preAuthAuthorizationKey = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = cardOnFilePaymentMethod.ePaymentMethod.profileAction,",
						"          token = cardOnFilePaymentMethod.ePaymentMethod.token,",
						"          totalAmount = cardOnFilePaymentMethod.ePaymentMethod.totalAmount,",
						"          lastmodified_date,",
						"          last4Digits = cardOnFilePaymentMethod.ePaymentMethod.last4Digits,",
						"          verificationIndicator = cardOnFilePaymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = cardOnFilePaymentMethod.ePaymentMethod.skipAuthorization,",
						"          dc_eventtime,",
						"          address = cardOnFilePaymentMethod.ePaymentMethod.address",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select31",
						"derivedColumn61 window(over(customerOrderNumber,",
						"          Account_id,",
						"          acctsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window57",
						"window57 filter(prank==1) ~> filter59",
						"filter59 alterRow(upsertIf(true())) ~> alterRowcardepay",
						"filternegotiateCC select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          acctsequence = sequence,",
						"          conflictCustomerType = negotiateConflictCustomer.conflictCustomerType,",
						"          conflictLandlordDetailApprovalDate = negotiateConflictCustomer.conflictLandlordDetail.approvalDate,",
						"          conflictLandlordDetailCompanyName = negotiateConflictCustomer.conflictLandlordDetail.contact.companyName,",
						"          conflictLandlordDetailEmail = negotiateConflictCustomer.conflictLandlordDetail.contact.email,",
						"          phoneNumber = negotiateConflictCustomer.conflictLandlordDetail.contact.phoneNumber,",
						"          conflictLandlordDetailFirstName = negotiateConflictCustomer.conflictLandlordDetail.contact.firstName,",
						"          conflictLandlordDetailLastName = negotiateConflictCustomer.conflictLandlordDetail.contact.lastName,",
						"          conflictLandlordDetailPhoneNumberType = negotiateConflictCustomer.conflictLandlordDetail.contact.phoneNumberType,",
						"          conflictLandlordDetailLandlordApproval = negotiateConflictCustomer.conflictLandlordDetail.landlordApproval,",
						"          existingCustomerDetailBillingTelephoneNumber = negotiateConflictCustomer.existingCustomerDetail.billingTelephoneNumber,",
						"          existingCustomerDetailBillingAccountNumber = negotiateConflictCustomer.existingCustomerDetail.billingAccountNumber,",
						"          existingCustomerDetailCompanyName = negotiateConflictCustomer.existingCustomerDetail.contact.companyName,",
						"          existingCustomerDetailEmail = negotiateConflictCustomer.existingCustomerDetail.contact.email,",
						"          existingCustomerDetailFirstName = negotiateConflictCustomer.existingCustomerDetail.contact.firstName,",
						"          existingCustomerDetailLastName = negotiateConflictCustomer.existingCustomerDetail.contact.lastName,",
						"          existingCustomerDetailPhoneNumber = negotiateConflictCustomer.existingCustomerDetail.contact.phoneNumber,",
						"          existingCustomerDetailPhoneNumberType = negotiateConflictCustomer.existingCustomerDetail.contact.phoneNumberType,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber = negotiateConflictCustomer.existingCustomerDetail.moveOrCeaseOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select33",
						"derivedColumn60 window(over(customerOrderNumber,",
						"          Account_id,",
						"          acctsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window58",
						"window58 filter(prank==1) ~> filter60",
						"filter60 alterRow(upsertIf(true())) ~> alterRownego",
						"filterunifiedaccount select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          convergeOrderIndicator = unifiedAccount.convergeOrderIndicator,",
						"          convergeValidationIndicator = unifiedAccount.convergeValidationIndicator,",
						"          convergedBilling = unifiedAccount.convergedBilling,",
						"          premierIndicator = unifiedAccount.premierIndicator,",
						"          unifiedAccountDiscount = unifiedAccount.unifiedAccountDiscount,",
						"          unifiedAccountExisting = unifiedAccount.unifiedAccountExisting,",
						"          unifiedAccountPending = unifiedAccount.unifiedAccountPending,",
						"          unifiedAccountRebate = unifiedAccount.unifiedAccountRebate,",
						"          unifiedAccountReference = unifiedAccount.unifiedAccountReference,",
						"          unifiedAccountReward = unifiedAccount.unifiedAccountReward,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select34",
						"select34 window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window59",
						"window59 filter(prank==1) ~> filter61",
						"filter61 alterRow(upsertIf(true())) ~> alterRowunified",
						"coalacc foldDown(unroll(creditCheck.debtAccounts, creditCheck.debtAccounts),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          accountBalance = creditCheck.debtAccounts.accountBalance,",
						"          customerAgreementCode = creditCheck.debtAccounts.customerAgreementCode,",
						"          affiliateId = creditCheck.debtAccounts.affiliateId,",
						"          debtAccountNumber = creditCheck.debtAccounts.debtAccountNumber,",
						"          disconnectDate = creditCheck.debtAccounts.disconnectDate,",
						"          individualCustomerKey = creditCheck.debtAccounts.individualCustomerKey,",
						"          minimumAmountDue = creditCheck.debtAccounts.minimumAmountDue,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten7",
						"derivedColumn59 window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          debtAccountNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window60",
						"window60 filter(prank==1  && !isNull(debtAccountNumber)) ~> filter62",
						"filter62 alterRow(upsertIf(true())) ~> alterRowdebtaccounts",
						"filteremployeeDetail select(mapColumn(",
						"          centralizedTableId = OrderData.employeeDetail.centralizedTableId,",
						"          class = OrderData.employeeDetail.class,",
						"          status = OrderData.employeeDetail.status,",
						"          uid = OrderData.employeeDetail.uid,",
						"          customerOrderNumber,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select35",
						"select35 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window61",
						"window61 filter(prank==1) ~> filter63",
						"filter63 alterRow(upsertIf(true())) ~> alterRowEmployeeDetail",
						"filteremployeeReferralDetail select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          appId = OrderData.employeeReferralDetail.appId,",
						"          packageId = OrderData.employeeReferralDetail.packageId,",
						"          employeeUId = OrderData.employeeReferralDetail.employeeUId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select36",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn39",
						"select36 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window62",
						"window62 filter(prank==1) ~> filter64",
						"filter64 alterRow(upsertIf(true())) ~> alterRoweReferrel",
						"filtereCommercePartner select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          additionalDetails = OrderData.eCommercePartner.additionalDetails,",
						"          affiliateName = OrderData.eCommercePartner.affiliateName,",
						"          code = OrderData.eCommercePartner.code,",
						"          name = OrderData.eCommercePartner.name,",
						"          email = OrderData.eCommercePartner.email,",
						"          phoneNumber = OrderData.eCommercePartner.phoneNumber,",
						"          type = OrderData.eCommercePartner.type,",
						"          referredDate = OrderData.eCommercePartner.referredDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select37",
						"select37 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window63",
						"window63 filter(prank==1) ~> filter65",
						"derivedColumn50 alterRow(upsertIf(true())) ~> alterRowecommerce",
						"derivedColumn39 foldDown(unroll(OrderData.shippingDetails, OrderData.shippingDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          price = OrderData.shippingDetails.price,",
						"          shippingaddress = OrderData.shippingDetails.address,",
						"          shippingDetailsid = OrderData.shippingDetails.id,",
						"          billingCode = OrderData.shippingDetails.billingCode,",
						"          carrierPreference = OrderData.shippingDetails.carrierPreference,",
						"          fromDate = OrderData.shippingDetails.shipmentCommitDate.fromDate,",
						"          toDate = OrderData.shippingDetails.shipmentCommitDate.toDate,",
						"          sequence = OrderData.shippingDetails.sequence,",
						"          shippingCode = OrderData.shippingDetails.shippingCode,",
						"          shippingMethod = OrderData.shippingDetails.shippingMethod,",
						"          shippingPriceCode = OrderData.shippingDetails.shippingPriceCode,",
						"          additionalContactPhones = OrderData.shippingDetails.recipientName.additionalContactPhones,",
						"          id = OrderData.shippingDetails.recipientName.id,",
						"          emailAddress = OrderData.shippingDetails.recipientName.emailAddress,",
						"          firstName = OrderData.shippingDetails.recipientName.firstName,",
						"          middleInitial = OrderData.shippingDetails.recipientName.middleInitial,",
						"          lastName = OrderData.shippingDetails.recipientName.lastName,",
						"          legalFirstName = OrderData.shippingDetails.recipientName.legalFirstName,",
						"          legalLastName = OrderData.shippingDetails.recipientName.legalLastName,",
						"          preferredContactMethod = OrderData.shippingDetails.recipientName.preferredContactMethod,",
						"          suffix = OrderData.shippingDetails.recipientName.suffix,",
						"          prefix = OrderData.shippingDetails.recipientName.prefix,",
						"          title = OrderData.shippingDetails.recipientName.title,",
						"          previousLegalLastName = OrderData.shippingDetails.recipientName.previousLegalLastName,",
						"          recipientPrimaryContact = OrderData.shippingDetails.recipientName.primaryContactPhones",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten9",
						"derivedColumn39 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          deliveryPromiseNoteSpanish = OrderData.deliveryPromiseNote.spanish,",
						"          deliveryPromiseNoteEnglish = OrderData.deliveryPromiseNote.english",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select38",
						"select38 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window65",
						"window65 filter(prank==1 && ( !isNull(deliveryPromiseNoteSpanish) ||",
						"!isNull(deliveryPromiseNoteEnglish))) ~> filter67",
						"filter67 alterRow(upsertIf(true())) ~> alterRowdelivery",
						"derivedColumn39 foldDown(unroll(OrderData.integratedOffers, OrderData.integratedOffers),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          category = OrderData.integratedOffers.category,",
						"          ioId = OrderData.integratedOffers.ioId,",
						"          ioSequence = OrderData.integratedOffers.ioSequence,",
						"          qualifyingServiceDetails = OrderData.integratedOffers.qualifyingServiceDetails",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten10",
						"flatten10 window(over(customerOrderNumber,",
						"          ioId,",
						"          ioSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window66",
						"window66 filter(prank==1 && !isNull(ioId)) ~> filter68",
						"filter68 alterRow(upsertIf(true())) ~> alterRowInte",
						"filterfleetDetail select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          callBackDateTime = OrderData.fleetDetail.callBackDateTime,",
						"          customerAssignToId = OrderData.fleetDetail.customerAssignToId,",
						"          lineCount = OrderData.fleetDetail.lineCount,",
						"          locationCount = OrderData.fleetDetail.locationCount,",
						"          projectBillTo = OrderData.fleetDetail.projectBillTo,",
						"          projectType = OrderData.fleetDetail.projectType,",
						"          timeZone = OrderData.fleetDetail.timeZone,",
						"          companyName = OrderData.fleetDetail.companyName,",
						"          companyCreationIndicator = OrderData.fleetDetail.companyCreationIndicator,",
						"          erpAccount = OrderData.fleetDetail.erpAccount,",
						"          shipToId = OrderData.fleetDetail.shipToId,",
						"          shippingFeeId = OrderData.fleetDetail.shippingFeeId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select40",
						"select40 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window67",
						"window67 filter(prank==1) ~> filter69",
						"filter69 alterRow(upsertIf(true())) ~> alterRowfleet",
						"filterloginProfile select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          email = OrderData.loginProfile.email,",
						"          orderInitiator = OrderData.loginProfile.orderInitiator,",
						"          profileId = OrderData.loginProfile.profileId,",
						"          userGuId = OrderData.loginProfile.userGuId,",
						"          userId = OrderData.loginProfile.userId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select41",
						"select41 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window68",
						"window68 filter(prank==1) ~> filter70",
						"filter70 alterRow(upsertIf(true())) ~> alterRowlogin",
						"derivedColumn39 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          eligibleIndicator = OrderData.singleDispatchDetail.eligibleIndicator,",
						"          geoAreaAvailableIndicator = OrderData.singleDispatchDetail.geoAreaAvailableIndicator,",
						"          satelliteTVOnlyEligibleIndicator = OrderData.singleDispatchDetail.satelliteTVOnlyEligibleIndicator",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select42",
						"select42 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window69",
						"window69 filter(prank==1 && !isNull(eligibleIndicator)) ~> filter71",
						"filter71 alterRow(upsertIf(true())) ~> alterRowSingleDispatch",
						"derivedColumn39 select(mapColumn(",
						"          customerOrderNumber,",
						"          miscellaneousDetails = OrderData.miscellaneousDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select43",
						"select43 foldDown(unroll(miscellaneousDetails, miscellaneousDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          code = miscellaneousDetails.code,",
						"          parentType = miscellaneousDetails.parentType,",
						"          type = miscellaneousDetails.type,",
						"          value = miscellaneousDetails.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten11",
						"flatten11 window(over(customerOrderNumber,",
						"          code,",
						"          value),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window70",
						"filter72 alterRow(upsertIf(true())) ~> alterRowmisc",
						"window70 filter(prank==1 && ( !isNull(code) || !isNull(value))) ~> filter72",
						"derivedColumn39 foldDown(unroll(OrderData.paymentTenders, OrderData.paymentTenders),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          paymentTenders = OrderData.paymentTenders",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten12",
						"flatten12 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          depositOption = paymentTenders.depositOption,",
						"          fixedAmount = paymentTenders.fixedAmount,",
						"          selectedOptionId = paymentTenders.selectedOptionId,",
						"          collectedInOtherSystem = paymentTenders.collectedInOtherSystem,",
						"          additionalDetails = paymentTenders.additionalDetails,",
						"          paymentTenderId = paymentTenders.id,",
						"          paymentTenderSequence = paymentTenders.sequence,",
						"          accountsReceivableIndicator = paymentTenders.paymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          purchaseOrderNumber = paymentTenders.paymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          btmEquipmentType = paymentTenders.paymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = paymentTenders.paymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = paymentTenders.paymentMethod.btm.totalAmount,",
						"          btnCustomerCode = paymentTenders.paymentMethod.btn.customerCode,",
						"          btnPaymentAmount = paymentTenders.paymentMethod.btn.paymentAmount,",
						"          btnTn = paymentTenders.paymentMethod.btn.tn,",
						"          cashPaymentAmount = paymentTenders.paymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = paymentTenders.paymentMethod.cash.paymentToken,",
						"          lpmCustomerAgreementVersion = paymentTenders.paymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmLast4Digits = paymentTenders.paymentMethod.lastPaymentMethod.lpmLast4Digits,",
						"          lpmPaymentType = paymentTenders.paymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = paymentTenders.paymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = paymentTenders.paymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          lpmTotalAmount = paymentTenders.paymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = paymentTenders.paymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = paymentTenders.paymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = paymentTenders.paymentMethod.store.last4Digits,",
						"          storePaymentAmount = paymentTenders.paymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = paymentTenders.paymentMethod.store.profileOwnerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select44",
						"select44 window(over(customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window71",
						"window71 filter(prank==1 && ( !isNull(paymentTenderId) || !isNull(paymentTenderSequence))) ~> filter73",
						"filter73 alterRow(upsertIf(true())) ~> alterRowPaymentTender",
						"flatten12 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          paymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.paymentMethodId,",
						"          paymentTenderId = paymentTenders.id,",
						"          paymentTenderSequence = paymentTenders.sequence,",
						"          paymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.paymentMethodId,",
						"          address = paymentTenders.paymentMethod.ePaymentMethod.address,",
						"          achAccountHolderName = paymentTenders.paymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountNumber = paymentTenders.paymentMethod.ePaymentMethod.ach.accountNumber,",
						"          achAccountNumberLast4Digits = paymentTenders.paymentMethod.ePaymentMethod.ach.accountNumberLast4Digits,",
						"          achAccountType = paymentTenders.paymentMethod.ePaymentMethod.ach.accountType,",
						"          achRoutingNumber = paymentTenders.paymentMethod.ePaymentMethod.ach.routingNumber,",
						"          bankingPartnerCustomerId = paymentTenders.paymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = paymentTenders.paymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = paymentTenders.paymentMethod.ePaymentMethod.cardCryptogram,",
						"          cardBillingZipCode = paymentTenders.paymentMethod.ePaymentMethod.cardBillingZipCode,",
						"          ccCardNotValidatedIndicator = paymentTenders.paymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = paymentTenders.paymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          ccCreditCardNumber = paymentTenders.paymentMethod.ePaymentMethod.cc.creditCardNumber,",
						"          ccExpirationYearMonth = paymentTenders.paymentMethod.ePaymentMethod.cc.expirationYearMonth,",
						"          creditCardLast4Digits = paymentTenders.paymentMethod.ePaymentMethod.creditCardLast4Digits,",
						"          creditCardType = paymentTenders.paymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = paymentTenders.paymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          giftCardIndicator = paymentTenders.paymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailPaymentHandle = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileOwnerId = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          ptype = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentTenderConfigMerchantId = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = paymentTenders.paymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = paymentTenders.paymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = paymentTenders.paymentMethod.ePaymentMethod.payType,",
						"          payPalEmailAddress = paymentTenders.paymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = paymentTenders.paymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = paymentTenders.paymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationDate,",
						"          preAuthAuthorizationExpirationDate = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate,",
						"          preAuthAuthorizationKey = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = paymentTenders.paymentMethod.ePaymentMethod.profileAction,",
						"          token = paymentTenders.paymentMethod.ePaymentMethod.token,",
						"          totalAmount = paymentTenders.paymentMethod.ePaymentMethod.totalAmount,",
						"          last4Digits = paymentTenders.paymentMethod.ePaymentMethod.last4Digits,",
						"          verificationIndicator = paymentTenders.paymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = paymentTenders.paymentMethod.ePaymentMethod.skipAuthorization",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select45",
						"derivedColumn53 window(over(customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window72",
						"window72 filter(prank==1) ~> filter74",
						"filter74 alterRow(upsertIf(true())) ~> alterRowpayment",
						"flatten25 window(over(customerOrderNumber,",
						"          shippingDetailsid,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window73",
						"window73 filter(prank==1  && !isNull(shippingDetailsid)) ~> filter75",
						"filter75 alterRow(upsertIf(true())) ~> alterRowshippingdetail",
						"flatten9 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          shippingDetailsid,",
						"          str_additionalDetails = price.additionalDetails,",
						"          shippingsequence = sequence,",
						"          priceType = price.priceType,",
						"          amount = price.amount,",
						"          baseAmount = price.baseAmount,",
						"          creditFeeType = price.creditFeeType,",
						"          currencyType = price.currencyType,",
						"          installmentEligibility = price.installmentEligibility,",
						"          msrp = price.msrp,",
						"          taxDetail = price.taxDetail,",
						"          total = price.total",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select46",
						"derivedColumn72 window(over(customerOrderNumber,",
						"          shippingDetailsid,",
						"          shippingsequence,",
						"          priceType),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window74",
						"window74 filter(prank==1) ~> filter76",
						"filter76 alterRow(upsertIf(true())) ~> alterRowshippingprice",
						"filterSalesAgent select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          agentCode = OrderData.salesAgent.agentCode,",
						"          location = OrderData.salesAgent.location,",
						"          salesCode = OrderData.salesAgent.salesCode,",
						"          uid = OrderData.salesAgent.uid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select47",
						"select47 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window75",
						"window75 filter(prank==1) ~> filter77",
						"filter77 alterRow(upsertIf(true())) ~> alterRowsalesagent",
						"filterFalloutstructure select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          code = OrderData.statusDetail.fallout.code,",
						"          dateTime = OrderData.statusDetail.fallout.dateTime,",
						"          description = OrderData.statusDetail.fallout.description,",
						"          operation = OrderData.statusDetail.fallout.operation",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select48",
						"select48 window(over(customerOrderNumber,",
						"          code),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window76",
						"window76 filter(prank==1) ~> filter78",
						"filter78 alterRow(upsertIf(true())) ~> alterRowFallout",
						"derivedColumn39 foldDown(unroll(OrderData.referenceDetail.falloutDetails, OrderData.referenceDetail.falloutDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          code = OrderData.referenceDetail.falloutDetails.code,",
						"          dateTime = OrderData.referenceDetail.falloutDetails.dateTime,",
						"          description = OrderData.referenceDetail.falloutDetails.description,",
						"          operation = OrderData.referenceDetail.falloutDetails.operation",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten14",
						"flatten14 window(over(customerOrderNumber,",
						"          code),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window77",
						"derivedColumn48 filter(prank==1) ~> filter79",
						"filter79 alterRow(upsertIf(true())) ~> alterRowRFallout",
						"flatten9 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          shippingDetailsid,",
						"          addressId = shippingaddress.addressId,",
						"          shippingaddress_id = shippingaddress.id,",
						"          dwellingType = shippingaddress.dwellingType,",
						"          validatedIndicator = shippingaddress.validatedIndicator,",
						"          auxillaryaddress_line1 = shippingaddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = shippingaddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = shippingaddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = shippingaddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = shippingaddress.auxiliaryAddress.line5,",
						"          addressLines = shippingaddress.codingAccuracySupportSystemAddress.addressLines,",
						"          paresed_clli8 = shippingaddress.parsedAddress.clli8,",
						"          parsedAddr_addInstructions = shippingaddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = shippingaddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = shippingaddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = shippingaddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = shippingaddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = shippingaddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = shippingaddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = shippingaddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = shippingaddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = shippingaddress.parsedAddress.buildingType,",
						"          parsedAddr_city = shippingaddress.parsedAddress.city,",
						"          parsedAddr_country = shippingaddress.parsedAddress.country,",
						"          parsedAddr_county = shippingaddress.parsedAddress.county,",
						"          parsedAddr_countyCode = shippingaddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = shippingaddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = shippingaddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = shippingaddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = shippingaddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = shippingaddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = shippingaddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = shippingaddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = shippingaddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = shippingaddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = shippingaddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = shippingaddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = shippingaddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = shippingaddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = shippingaddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = shippingaddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = shippingaddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = shippingaddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = shippingaddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = shippingaddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = shippingaddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = shippingaddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = shippingaddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = shippingaddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = shippingaddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = shippingaddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = shippingaddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = shippingaddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = shippingaddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = shippingaddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = shippingaddress.parsedAddress.state,",
						"          parsedAddr_streetName = shippingaddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = shippingaddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = shippingaddress.parsedAddress.streetType,",
						"          parsedAddr_structure = shippingaddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = shippingaddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = shippingaddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = shippingaddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = shippingaddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = shippingaddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = shippingaddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = shippingaddress.parsedAddress.zipCodeExtension,",
						"          parsedAddr_zipGeoCode = shippingaddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = shippingaddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = shippingaddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = shippingaddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = shippingaddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = shippingaddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = shippingaddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = shippingaddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = shippingaddress.unparsedAddress.structure,",
						"          unparsedAddr_unit = shippingaddress.unparsedAddress.unit,",
						"          unparsedAddr_urbanizationCode = shippingaddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = shippingaddress.unparsedAddress.city,",
						"          unparsedAddr_country = shippingaddress.unparsedAddress.country,",
						"          unparsedAddr_state = shippingaddress.unparsedAddress.state,",
						"          unparsedAddr_zip = shippingaddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = shippingaddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = shippingaddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = shippingaddress.unparsedAddress.addressLine2,",
						"          json_additionaldetails = shippingaddress.additionalDetails,",
						"          unparessed_county = shippingaddress.unparsedAddress.county,",
						"          sequence,",
						"          placeId = shippingaddress.placeId,",
						"          connectedCommunityId = shippingaddress.connectedCommunityId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select49",
						"select49 window(over(customerOrderNumber,",
						"          shippingaddress_id,",
						"          sequence,",
						"          shippingDetailsid),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window78",
						"window78 filter(prank==1 &&",
						"!isNull(shippingaddress_id)) ~> filter80",
						"filter80 alterRow(upsertIf(true())) ~> alterRowshippingaddress",
						"selectSchedulingDetails foldDown(unroll(schedulingDetails.name.primaryContactPhones, schedulingDetails),",
						"     mapColumn(",
						"          serviceLevel = schedulingDetails.serviceLevel,",
						"          customerOrderNumber,",
						"          eventTime,",
						"          lastmodified_date,",
						"          timeZone = schedulingDetails.timeZone,",
						"          valueSegmentationTier = schedulingDetails.valueSegmentationTier,",
						"          landlordDetail_landlordName = schedulingDetails.landlordDetail.landlordName,",
						"          landlordDetail_landlordPermission = schedulingDetails.landlordDetail.landlordPermission,",
						"          landlordDetail_landlordPhoneNumber = schedulingDetails.landlordDetail.landlordPhoneNumber,",
						"          nffl_fulfillerName = schedulingDetails.nffl.fulfillerName,",
						"          nffl_ffulfillerTN = schedulingDetails.nffl.fulfillerTN,",
						"          nffl_fnfflFlag = schedulingDetails.nffl.nfflFlag,",
						"          preference = schedulingDetails.preference,",
						"          reservationId = schedulingDetails.reservationId,",
						"          scheduleType = schedulingDetails.scheduleType,",
						"          dispatchType = schedulingDetails.dispatchType,",
						"          deferredInstallationDuration = schedulingDetails.deferredInstallationDuration,",
						"          eventCode = schedulingDetails.eventCode,",
						"          eventCodeEnteredManuallyIndicator = schedulingDetails.eventCodeEnteredManuallyIndicator,",
						"          partnerName_installationPartner = schedulingDetails.installationPartner.partnerName,",
						"          partnerName_projectPurchaseOrderAmount = schedulingDetails.installationPartner.projectPurchaseOrderAmount,",
						"          partnerName_projectPurchaseOrderDate = schedulingDetails.installationPartner.projectPurchaseOrderDate,",
						"          partnerName_projectPurchaseOrderNumber = schedulingDetails.installationPartner.projectPurchaseOrderNumber,",
						"          partnerName_projectBilling = schedulingDetails.installationPartner.projectBilling,",
						"          appointmentComment = schedulingDetails.appointmentComment,",
						"          bestTimeToReach = schedulingDetails.bestTimeToReach,",
						"          billingInstallmentsIndicator = schedulingDetails.billingInstallmentsIndicator,",
						"          businessName = schedulingDetails.businessName,",
						"          str_additionalDetails = schedulingDetails.additionalDetails,",
						"          schedulingdetails_id = schedulingDetails.id,",
						"          installType = schedulingDetails.installType,",
						"          realTimeCalendarIndicator = schedulingDetails.realTimeCalendarIndicator,",
						"          scheduleAsSoonAsPossibleIndicator = schedulingDetails.scheduleAsSoonAsPossibleIndicator,",
						"          emailAddress = schedulingDetails.name.emailAddress,",
						"          firstName = schedulingDetails.name.firstName,",
						"          schedulingdetails_name_id = schedulingDetails.name.id,",
						"          lastName = schedulingDetails.name.lastName,",
						"          contactPhoneType = schedulingDetails.name.primaryContactPhones.contactPhoneType,",
						"          phoneNumber = schedulingDetails.name.primaryContactPhones.phoneNumber,",
						"          scheduleByDayAndTime_DayOfTheWeek = schedulingDetails.scheduleByDayAndTime.anyDayOfTheWeek,",
						"          scheduleByDayAndTime_friday = schedulingDetails.scheduleByDayAndTime.friday,",
						"          scheduleByDayAndTime_monday = schedulingDetails.scheduleByDayAndTime.monday,",
						"          scheduleByDayAndTime_saturday = schedulingDetails.scheduleByDayAndTime.saturday,",
						"          scheduleByDayAndTime_sunday = schedulingDetails.scheduleByDayAndTime.sunday,",
						"          scheduleByDayAndTime_thursday = schedulingDetails.scheduleByDayAndTime.thursday,",
						"          scheduleByDayAndTime_tuesday = schedulingDetails.scheduleByDayAndTime.tuesday,",
						"          scheduleByDayAndTime_wednesday = schedulingDetails.scheduleByDayAndTime.wednesday,",
						"          actualSchedule_workOrderId = schedulingDetails.actualSchedule.workOrderId,",
						"          actualSchedule_startTime = schedulingDetails.actualSchedule.startTime,",
						"          actualSchedule_selectedAppointmentDate = schedulingDetails.actualSchedule.selectedAppointmentDate,",
						"          actualSchedule_selectedAppointmentTime = schedulingDetails.actualSchedule.selectedAppointmentTime,",
						"          actualSchedule_endTime = schedulingDetails.actualSchedule.endTime,",
						"          confirmedSchedule_workOrderId = schedulingDetails.confirmedSchedule.workOrderId,",
						"          confirmedSchedule_startTime = schedulingDetails.confirmedSchedule.startTime,",
						"          confirmedSchedule_selectedAppointmentDate = schedulingDetails.confirmedSchedule.selectedAppointmentDate,",
						"          confirmedSchedule_selectedAppointmentTime = schedulingDetails.confirmedSchedule.selectedAppointmentTime,",
						"          confirmedSchedule_endTime = schedulingDetails.confirmedSchedule.endTime,",
						"          middleInitial = schedulingDetails.name.middleInitial,",
						"          legalLastName = schedulingDetails.name.legalLastName,",
						"          legalFirstName = schedulingDetails.name.legalFirstName,",
						"          suffix = schedulingDetails.name.suffix,",
						"          prefix = schedulingDetails.name.prefix,",
						"          previousLegalLastName = schedulingDetails.name.previousLegalLastName,",
						"          title = schedulingDetails.name.title,",
						"          additionalContactPhones = schedulingDetails.name.additionalContactPhones,",
						"          preferredContactMethod = schedulingDetails.name.preferredContactMethod,",
						"          primarycontactPhoneConsentDetails = schedulingDetails.name.primaryContactPhones.consentDetails,",
						"          anyDayOfTheWeek = schedulingDetails.scheduleByDayAndTime.anyDayOfTheWeek,",
						"          primaryContactextension = schedulingDetails.name.primaryContactPhones.extension,",
						"          connecTechInstallationOptions = schedulingDetails.connecTechInstallationOptions,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten15",
						"derivedColumn40 window(over(customerOrderNumber,",
						"          schedulingdetails_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window79",
						"flatten15 derive(actualSchedule_selectedAppointmentDate = toDate(toString(byName('actualSchedule_selectedAppointmentDate')),'yyyy-MM-dd'),",
						"          confirmedSchedule_selectedAppointmentDate = toDate(toString(byName('confirmedSchedule_selectedAppointmentDate')),'yyyy-MM-dd'),",
						"          partnerName_projectPurchaseOrderDate = toDate(toString(byName('partnerName_projectPurchaseOrderDate')),'yyyy-MM-dd'),",
						"          schedulingdetails_id = coalesce(schedulingdetails_id,' ')) ~> derivedColumn40",
						"window79 filter(prank==1 && !isNull(schedulingdetails_id)) ~> filter81",
						"filter81 alterRow(upsertIf(true())) ~> alterRowschedulingdetailflat",
						"flattenLosgsPrice select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount,",
						"          baseAmount,",
						"          currencyType,",
						"          pricetype,",
						"          total,",
						"          losgsequence,",
						"          creditFeeType,",
						"          installmentEligibility,",
						"          msrp,",
						"          additionalDetails,",
						"          taxDetail = J_tax,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select50",
						"FinalizeContactDetail foldDown(unroll(primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails,",
						"          additionalEmailRecipients,",
						"          authorizedContacts,",
						"          orderConfirmationByEmailPermissionIndicator,",
						"          permissionForOutboundCallIndicator,",
						"          preferredContactMethod,",
						"          preferredTimeOfDayForContact,",
						"          timeZone,",
						"          unpublishedContactByPhonePermissionIndicator,",
						"          additionalContactPhones,",
						"          legalFirstName,",
						"          lastName,",
						"          legalLastName,",
						"          middleInitial,",
						"          personaldetail_preferredContactMethod,",
						"          primaryEmailAddress,",
						"          secondaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator,",
						"          emailAddress,",
						"          firstName,",
						"          nameid,",
						"          lastmodified_date,",
						"          orderPickUpCTN,",
						"          prefix,",
						"          previousLegalLastName,",
						"          primarycontactPhoneConsentDetails = primaryContactPhones.consentDetails,",
						"          primaryContactPhoneType = primaryContactPhones.contactPhoneType,",
						"          primaryContactextension = primaryContactPhones.extension,",
						"          primaryContactPhoneNumber = primaryContactPhones.phoneNumber,",
						"          title,",
						"          suffix,",
						"          dc_eventtime,",
						"          smsValidatedIndicator = primaryContactPhones.smsValidatedIndicator",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten16",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn42",
						"select52 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window80",
						"window80 filter(prank==1) ~> filter82",
						"filter82 alterRow(upsertIf(true())) ~> alterRowdslos",
						"filter106 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          additionalDetails = dslLOSCharacteristics.additionalDetails,",
						"          parentComponentCode = dslLOSCharacteristics.parentComponentCode,",
						"          retainedServiceProcessIndicator = dslLOSCharacteristics.retainedServiceProcessIndicator,",
						"          serviceId = dslLOSCharacteristics.serviceId,",
						"          serviceType = dslLOSCharacteristics.serviceType,",
						"          totalAllowance = dslLOSCharacteristics.totalAllowance",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select52",
						"coallosgid foldDown(unroll(externalOrderReferences, externalOrderReferences),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          systemName = externalOrderReferences.systemName,",
						"          systemOrderReference = externalOrderReferences.systemOrderReference,",
						"          systemOrderReferenceType = externalOrderReferences.systemOrderReferenceType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten18",
						"flatten18 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          systemName),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window81",
						"window81 filter(prank==1 && !isNull(systemName)) ~> filter83",
						"filter83 alterRow(upsertIf(true())) ~> alterRowext",
						"coallosgid foldDown(unroll(installationInstructions, installationInstructions),",
						"     mapColumn(",
						"          answers = installationInstructions.answers,",
						"          question = installationInstructions.question,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten19",
						"flatten19 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          question,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window82",
						"window82 filter(prank==1 && !isNull(question)) ~> filter84",
						"filter84 alterRow(upsertIf(true())) ~> alterRowinstall",
						"coallosgid foldDown(unroll(promotions, promotions),",
						"     mapColumn(",
						"          additionalDetails = promotions.additionalDetails,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          amount = promotions.amount,",
						"          baseOfferId = promotions.baseOfferId,",
						"          complexDiscountIndicator = promotions.complexDiscountIndicator,",
						"          componentConfigurations = promotions.componentConfigurations,",
						"          couponCode = promotions.couponCode,",
						"          displayLevel = promotions.displayLevel,",
						"          duration = promotions.duration,",
						"          effectiveDate,",
						"          effectiveInDays = promotions.effectiveInDays,",
						"          endDate = promotions.endDate,",
						"          fixedAmount = promotions.fixedAmount,",
						"          id = promotions.id,",
						"          ioId = promotions.ioId,",
						"          ioSequence = promotions.ioSequence,",
						"          parentPricePlanCode = promotions.parentPricePlanCode,",
						"          payInAdvanceProdId = promotions.payInAdvanceProdId,",
						"          percent = promotions.percent,",
						"          promotionAppliedBy = promotions.promotionAppliedBy,",
						"          promotionBillingCode = promotions.promotionBillingCode,",
						"          promotionCode = promotions.promotionCode,",
						"          promotionCycle = promotions.promotionCycle,",
						"          promotionId = promotions.promotionId,",
						"          promotionName = promotions.promotionName,",
						"          promotionType = promotions.promotionType,",
						"          promotionTypeDetail = promotions.promotionTypeDetail,",
						"          qualifyingServiceDetails = promotions.qualifyingServiceDetails,",
						"          sequence = promotions.sequence,",
						"          unitOfMeasurement = promotions.unitOfMeasurement",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten20",
						"derivedColumn54 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          sequence,",
						"          id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window83",
						"window83 filter(prank==1 && ( !isNull(id) || !isNull(sequence))) ~> filter85",
						"filter85 alterRow(upsertIf(true())) ~> alterRowpromo",
						"coallosgid foldDown(unroll(userDefinedLabels, userDefinedLabels),",
						"     mapColumn(",
						"          label = userDefinedLabels.label,",
						"          customerOrderNumber,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          sequence = userDefinedLabels.sequence,",
						"          value = userDefinedLabels.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten21",
						"flatten21 window(over(customerOrderNumber,",
						"          label,",
						"          Losg_id,",
						"          losgsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window84",
						"window84 filter(prank==1 && !isNull(label)) ~> filter86",
						"filter86 alterRow(upsertIf(true())) ~> alterRowuse",
						"coalLLseq foldDown(unroll(payments, payments),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemsequence = sequence,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          amount = payments.amount,",
						"          currencyType = payments.currencyType,",
						"          numberOfInstallment = payments.numberOfInstallment,",
						"          paymentTenderReference = payments.paymentTenderReference",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten22",
						"flatten22 window(over(customerOrderNumber,",
						"          losgsequence,",
						"          Losg_id,",
						"          lineitemsequence,",
						"          paymentTenderReference,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window85",
						"window85 filter(prank==1 && (!isNull(paymentTenderReference) || !isNull(amount))) ~> filter87",
						"derivedColumn71 alterRow(upsertIf(true())) ~> alterRowllpay",
						"filtehardGood select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemidsequence = sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          availabilityDate = hardGood.availabilityDate,",
						"          biller = hardGood.biller,",
						"          byodIndicator = hardGood.byodIndicator,",
						"          cardSerialNumber = hardGood.cardSerialNumber,",
						"          deliveryByDateFromDate = hardGood.deliveryByDate.fromDate,",
						"          deliveryByDateToDate = hardGood.deliveryByDate.toDate,",
						"          deliveryPromiseNoteEnglish = hardGood.deliveryPromiseNote.english,",
						"          deliveryPromiseNoteSpanish = hardGood.deliveryPromiseNote.spanish,",
						"          eid = hardGood.eid,",
						"          fieldId = hardGood.fieldId,",
						"          hardGoodType = hardGood.hardGoodType,",
						"          iccId = hardGood.iccId,",
						"          make = hardGood.make,",
						"          manufacturerCode = hardGood.manufacturerCode,",
						"          model = hardGood.model,",
						"          networkAccessDeviceType = hardGood.networkAccessDeviceType,",
						"          preOrderIndicator = hardGood.preOrderIndicator,",
						"          productImageUrl = hardGood.productImageUrl,",
						"          serialNumber = hardGood.serialNumber,",
						"          shipmentCommitFromDate = hardGood.shipmentCommitDate.fromDate,",
						"          shipmentCommitToDate = hardGood.shipmentCommitDate.toDate,",
						"          shippedHotIndicator = hardGood.shippedHotIndicator,",
						"          whiteGloveDeliveryPartner = hardGood.whiteGloveDeliveryPartner,",
						"          WirelessHardGoodConnectionType = hardGood.wirelessHardGoodCharacteristics.connectionType,",
						"          WirelessHardGoodDeviceCategory = hardGood.wirelessHardGoodCharacteristics.deviceCategory,",
						"          WirelessHardGoodEquipmentType = hardGood.wirelessHardGoodCharacteristics.equipmentType,",
						"          WirelessHardGoodEquipmentUpgrade = hardGood.wirelessHardGoodCharacteristics.equipmentUpgrade,",
						"          WirelessHardGoodIMEI = hardGood.wirelessHardGoodCharacteristics.imei,",
						"          WirelessHardGoodIMEIType = hardGood.wirelessHardGoodCharacteristics.imeiType,",
						"          WirelessHardGoodIMSI = hardGood.wirelessHardGoodCharacteristics.internationalMobileSubscriberIdentity,",
						"          WirelessHardGoodPhoneType = hardGood.wirelessHardGoodCharacteristics.phoneType,",
						"          WirelessHardGoodTechType = hardGood.wirelessHardGoodCharacteristics.techType,",
						"          WirelessHardGoodUSOC = hardGood.wirelessHardGoodCharacteristics.usoc,",
						"          WirelessHardGoodZodiacSeqNum = hardGood.wirelessHardGoodCharacteristics.zodiacSequenceNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select53",
						"derivedColumn58 window(over(customerOrderNumber,",
						"          losgsequence,",
						"          Losg_id,",
						"          lineitemidsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window86",
						"window86 filter(prank==1) ~> filter88",
						"filter88 alterRow(upsertIf(true())) ~> alterRowLLIhard",
						"filter118 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemsequence = sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          availabilityDate = supplyChainDetail.availabilityDate,",
						"          carrier = supplyChainDetail.carrier,",
						"          claimRMANumber = supplyChainDetail.claimRMANumber,",
						"          exchangeDocumentId = supplyChainDetail.exchangeDocumentId,",
						"          exchangeOrderId = supplyChainDetail.exchangeOrderId,",
						"          orderDocumentDetailActivity = supplyChainDetail.orderDocumentDetail.activity,",
						"          orderDocumentDetailLocation = supplyChainDetail.orderDocumentDetail.location,",
						"          orderDocumentDetailOrderId = supplyChainDetail.orderDocumentDetail.orderId,",
						"          price = supplyChainDetail.price,",
						"          quantityBackOrdered = supplyChainDetail.quantityBackOrdered,",
						"          quantityCanceled = supplyChainDetail.quantityCanceled,",
						"          quantityOrdered = supplyChainDetail.quantityOrdered,",
						"          quantityShipped = supplyChainDetail.quantityShipped,",
						"          quantityToShip = supplyChainDetail.quantityToShip,",
						"          shippedDate = supplyChainDetail.shippedDate,",
						"          trackingNumber = supplyChainDetail.trackingNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select54",
						"select54 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemsequence,",
						"          losgsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window87",
						"window87 filter(prank==1) ~> filter89",
						"derivedColumn52 alterRow(upsertIf(true())) ~> alterRowsupplychain",
						"selectdebitaccounts derive(debtAccountNumber = coalesce(debtAccountNumber,' '),",
						"          id = coalesce(id,' ')) ~> derivedColumn43",
						"flattenAllAccounts derive(Account_id = coalesce(Account_id,' '),",
						"          sequence = coalesce(sequence,'')) ~> coalacc",
						"flattenOrderLosgs derive(Losg_id = coalesce(Losg_id,' '),",
						"          sequence = coalesce(sequence,'')) ~> coallosgid",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          additionalDetails = serviceAddress.additionalDetails,",
						"          addressId = serviceAddress.addressId,",
						"          ServiceAddress_id = serviceAddress.id,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          line1 = serviceAddress.auxiliaryAddress.line1,",
						"          dwellingType = serviceAddress.dwellingType,",
						"          placeId = serviceAddress.placeId,",
						"          connectedCommunityId = serviceAddress.connectedCommunityId,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          auxillaryaddress_line1 = serviceAddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = serviceAddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = serviceAddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = serviceAddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = serviceAddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = serviceAddress.codingAccuracySupportSystemAddress,",
						"          addressLines = serviceAddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddr_addInstructions = serviceAddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = serviceAddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = serviceAddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = serviceAddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = serviceAddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = serviceAddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = serviceAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = serviceAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = serviceAddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = serviceAddress.parsedAddress.buildingType,",
						"          parsedAddr_city = serviceAddress.parsedAddress.city,",
						"          parsedAddr_country = serviceAddress.parsedAddress.country,",
						"          parsedAddr_county = serviceAddress.parsedAddress.county,",
						"          parsedAddr_countyCode = serviceAddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = serviceAddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = serviceAddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = serviceAddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = serviceAddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = serviceAddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = serviceAddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = serviceAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = serviceAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = serviceAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = serviceAddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = serviceAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = serviceAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = serviceAddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = serviceAddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = serviceAddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = serviceAddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = serviceAddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = serviceAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = serviceAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = serviceAddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = serviceAddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = serviceAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = serviceAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = serviceAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = serviceAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = serviceAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = serviceAddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = serviceAddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = serviceAddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = serviceAddress.parsedAddress.state,",
						"          parsedAddr_streetName = serviceAddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = serviceAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = serviceAddress.parsedAddress.streetType,",
						"          parsedAddr_structure = serviceAddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = serviceAddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = serviceAddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = serviceAddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = serviceAddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = serviceAddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = serviceAddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = serviceAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddr_zipGeoCode = serviceAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = serviceAddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = serviceAddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = serviceAddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = serviceAddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = serviceAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = serviceAddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = serviceAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = serviceAddress.unparsedAddress.structure,",
						"          unparsedAddr_unittype = serviceAddress.unparsedAddress.unit.type,",
						"          unparsedAddr_unitvalue = serviceAddress.unparsedAddress.unit.value,",
						"          unparsedAddr_urbanizationCode = serviceAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = serviceAddress.unparsedAddress.city,",
						"          unparsedAddr_country = serviceAddress.unparsedAddress.country,",
						"          unparsedAddr_state = serviceAddress.unparsedAddress.state,",
						"          unparsedAddr_zip = serviceAddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = serviceAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = serviceAddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = serviceAddress.unparsedAddress.addressLine2,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          unparsedAddrCounty = serviceAddress.unparsedAddress.county",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select55",
						"select55 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window88",
						"filter90 alterRow(upsertIf(true())) ~> alterRowlosgserviceaddress",
						"window88 filter(prank==1 && !isNull(ServiceAddress_id)) ~> filter90",
						"flattenBillingDetails foldDown(unroll(name.primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          emailAddress = name.emailAddress,",
						"          firstName = name.firstName,",
						"          nameId = name.id,",
						"          middleInitial = name.middleInitial,",
						"          lastName = name.lastName,",
						"          legalFirstName = name.legalFirstName,",
						"          legalLastName = name.legalLastName,",
						"          previousLegalLastName = name.previousLegalLastName,",
						"          suffix = name.suffix,",
						"          title = name.title,",
						"          additionalContactPhones = name.additionalContactPhones,",
						"          primaryContactPhoneType = name.primaryContactPhones.contactPhoneType,",
						"          primaryContactPhoneNumber = name.primaryContactPhones.phoneNumber,",
						"          primaryContactextension = name.primaryContactPhones.extension,",
						"          primarycontactPhoneConsentDetails = name.primaryContactPhones.consentDetails,",
						"          licenseExpirationDate,",
						"          licenseNumber,",
						"          licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          federalTaxId,",
						"          gender,",
						"          lastFourOfSSN,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          accountStatus,",
						"          dob,",
						"          motherMaidenName,",
						"          pin,",
						"          securityQuestion,",
						"          securityAnswer,",
						"          ssn,",
						"          ssnRefusedIndicator,",
						"          stateidNumber = StateidNumber,",
						"          stateIdIssuedState,",
						"          billingType,",
						"          nextBillingCycleDate,",
						"          preferredContactMethod = name.preferredContactMethod,",
						"          prefix = name.prefix,",
						"          dc_eventtime,",
						"          sequence",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten23",
						"select56 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window89",
						"window89 filter(prank==1) ~> filter91",
						"filter91 alterRow(upsertIf(true())) ~> alterRowDiLitem",
						"filter115 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = direcTVLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = direcTVLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = direcTVLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = direcTVLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = direcTVLineItemCharacteristics.requestComponentGroup",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select56",
						"filter114 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = voipLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = voipLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = voipLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = voipLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = voipLineItemCharacteristics.requestComponentGroup,",
						"          callerId = voipLineItemCharacteristics.callerId,",
						"          uverseMessaging = voipLineItemCharacteristics.uverseMessaging",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select57",
						"select57 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window90",
						"window90 filter(prank==1) ~> filter92",
						"filter92 alterRow(upsertIf(true())) ~> alterRowvoipLLitems",
						"filter113 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = iptvLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = iptvLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = iptvLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = iptvLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = iptvLineItemCharacteristics.requestComponentGroup",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select58",
						"select58 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window91",
						"window91 filter(prank==1) ~> filter93",
						"filter93 alterRow(upsertIf(true())) ~> alterRowiptv",
						"filter102 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = wirelessLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = wirelessLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = wirelessLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = wirelessLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = wirelessLineItemCharacteristics.requestComponentGroup,",
						"          attDynTrafficManagerAddlDetails = wirelessLineItemCharacteristics.attDynamicTrafficManager.additionalDetails,",
						"          attDynTrafficManagerEnterpriseId = wirelessLineItemCharacteristics.attDynamicTrafficManager.enterpriseId,",
						"          attDynTrafficManagerManifestLabel = wirelessLineItemCharacteristics.attDynamicTrafficManager.manifestLabel,",
						"          attDynTrafficManagerManifestURL = wirelessLineItemCharacteristics.attDynamicTrafficManager.manifestURL,",
						"          availabilityType = wirelessLineItemCharacteristics.availabilityType,",
						"          distributionChannelId = wirelessLineItemCharacteristics.distributionChannelId,",
						"          nciEligibleIndicator = wirelessLineItemCharacteristics.nciEligibleIndicator,",
						"          newSalesChannelId = wirelessLineItemCharacteristics.newSalesChannelId,",
						"          offerType = wirelessLineItemCharacteristics.offerType,",
						"          packetDataProtocolAddlDetails = wirelessLineItemCharacteristics.packetDataProtocol.additionalDetails,",
						"          packetDataProtocolApnName = wirelessLineItemCharacteristics.packetDataProtocol.apnName,",
						"          packetDataProtocol5GIndicator = wirelessLineItemCharacteristics.packetDataProtocol.packetDataProtocol5GIndicator,",
						"          packetDataProtocolDefaultIndicator = wirelessLineItemCharacteristics.packetDataProtocol.defaultPacketDataProtocolIndicator,",
						"          packetDataProtocolDefaultSNType = wirelessLineItemCharacteristics.packetDataProtocol.defaultSNType,",
						"          packetDataProtocolIpAddress = wirelessLineItemCharacteristics.packetDataProtocol.ipAddress,",
						"          packetDataProtocolIpv6Address = wirelessLineItemCharacteristics.packetDataProtocol.ipv6Address,",
						"          packetDataProtocolIpversionType = wirelessLineItemCharacteristics.packetDataProtocol.ipversionType,",
						"          packetDataProtocolLteIndicator = wirelessLineItemCharacteristics.packetDataProtocol.ltePacketDataProtocolIndicator,",
						"          packetDataProtocolOnlineChargingIndicator = wirelessLineItemCharacteristics.packetDataProtocol.onlineChargingSystemIndicator,",
						"          packetDataProtocolType = wirelessLineItemCharacteristics.packetDataProtocol.packetDataProtocolType,",
						"          partnerCode = wirelessLineItemCharacteristics.partnerCode,",
						"          simType = wirelessLineItemCharacteristics.simType,",
						"          tradeInDetailModelCode = wirelessLineItemCharacteristics.tradeInDetail.modelCode,",
						"          tradeInDetailAddlDetails = wirelessLineItemCharacteristics.tradeInDetail.additionalDetails,",
						"          tradeInDetailClaimId = wirelessLineItemCharacteristics.tradeInDetail.claimId,",
						"          tradeInDetailDeviceClearingAgreement = wirelessLineItemCharacteristics.tradeInDetail.deviceClearingAgreement,",
						"          tradeInDetailDeviceCondition = wirelessLineItemCharacteristics.tradeInDetail.deviceCondition,",
						"          tradeInDetailExchangeType = wirelessLineItemCharacteristics.tradeInDetail.exchangeType,",
						"          tradeInDetailInstallmentPlanId = wirelessLineItemCharacteristics.tradeInDetail.installmentPlanId,",
						"          tradeInDetailNonComplianceFee = wirelessLineItemCharacteristics.tradeInDetail.nonComplianceFee,",
						"          tradeInDetailPayupAmount = wirelessLineItemCharacteristics.tradeInDetail.payupAmount,",
						"          tradeInModelCode = wirelessLineItemCharacteristics.tradeInModelCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select59",
						"select59 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window92",
						"window92 filter(prank==1) ~> filter94",
						"filter94 alterRow(upsertIf(true())) ~> alterRowwire",
						"flatten29 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          priceType,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window93",
						"window93 filter(prank==1 && !isNull(priceType)) ~> filter95",
						"filter95 alterRow(upsertIf(true())) ~> alterRowllPricelist",
						"filter select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = internetLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = internetLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = internetLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = internetLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = internetLineItemCharacteristics.requestComponentGroup,",
						"          boltOnType = internetLineItemCharacteristics.boltOnType,",
						"          bucketAllowance = internetLineItemCharacteristics.bucketAllowance,",
						"          ipType = internetLineItemCharacteristics.ipType,",
						"          maxOverageCharge = internetLineItemCharacteristics.maxOverageCharge,",
						"          overageBucketAllowance = internetLineItemCharacteristics.overageBucketAllowance,",
						"          planDownloadSpeed = internetLineItemCharacteristics.planDownloadSpeed,",
						"          pricePerBucketAllowance = internetLineItemCharacteristics.pricePerBucketAllowance",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select60",
						"select60 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window94",
						"window94 filter(prank==1) ~> filter96",
						"filter96 alterRow(upsertIf(true())) ~> alterRowIIChar",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          conflictingServiceDetailReferences",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select61",
						"select61 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          conflictingServiceDetailReferences),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window95",
						"window95 filter(prank==1 && !isNull(conflictingServiceDetailReferences)) ~> filter97",
						"filter97 alterRow(upsertIf(true())) ~> alterRowlostcon",
						"flatten9 foldDown(unroll(recipientPrimaryContact),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          price,",
						"          shippingaddress,",
						"          shippingDetailsid,",
						"          billingCode,",
						"          carrierPreference,",
						"          fromDate,",
						"          toDate,",
						"          sequence,",
						"          shippingCode,",
						"          shippingMethod,",
						"          shippingPriceCode,",
						"          additionalContactPhones,",
						"          id,",
						"          emailAddress,",
						"          firstName,",
						"          middleInitial,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          preferredContactMethod,",
						"          suffix,",
						"          prefix,",
						"          title,",
						"          previousLegalLastName,",
						"          recipientPrimaryContactPhoneType = recipientPrimaryContact.contactPhoneType,",
						"          recipientPrimaryContactPhoneNumber = recipientPrimaryContact.phoneNumber,",
						"          recipientPrimaryContactextension = recipientPrimaryContact.extension,",
						"          recipientPrimaryContactPhoneConsentDetails = recipientPrimaryContact.consentDetails",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten25",
						"filter117 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          categoryType = internetLOSCharacteristics.categoryType,",
						"          discountedInternetIndicator = internetLOSCharacteristics.discountedInternetIndicator,",
						"          discountedInternetAdditionalAllowance = internetLOSCharacteristics.discountedInternetAdditionalAllowance,",
						"          gatewayCTN = internetLOSCharacteristics.gatewayCTN,",
						"          gatewayCTNStatus = internetLOSCharacteristics.gatewayCTNStatus,",
						"          internetProgramType = internetLOSCharacteristics.internetProgramType,",
						"          internetProtocolDigitalSubscriberLineAccess = internetLOSCharacteristics.internetProtocolDigitalSubscriberLineAccess,",
						"          internetNetworkProvider = internetLOSCharacteristics.internetNetworkProvider,",
						"          parentComponentCode = internetLOSCharacteristics.parentComponentCode,",
						"          primaryNetworkType = internetLOSCharacteristics.primaryNetworkType,",
						"          retainedServiceProcessIndicator = internetLOSCharacteristics.retainedServiceProcessIndicator,",
						"          serviceId = internetLOSCharacteristics.serviceId,",
						"          serviceType = internetLOSCharacteristics.serviceType,",
						"          totalAllowance = internetLOSCharacteristics.totalAllowance,",
						"          additionalDetails = internetLOSCharacteristics.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select62",
						"window43 derive(e911TnCtimestamp = toTimestamp(toLong(toString(byName('e911TnCtimestamp'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn44",
						"filter116 foldDown(unroll(voipLOSCharacteristics.directoryListing, voipLOSCharacteristics.directoryListing),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgSequence = sequence,",
						"          dirListingName = voipLOSCharacteristics.directoryListing.name,",
						"          dirListingAdditionalDetails = voipLOSCharacteristics.directoryListing.additionalDetails,",
						"          dirListingDesignation = voipLOSCharacteristics.directoryListing.designation,",
						"          dirListingAddress = voipLOSCharacteristics.directoryListing.listing.address,",
						"          dirListingListingType = voipLOSCharacteristics.directoryListing.listing.listingType,",
						"          dirListingListingCategory = voipLOSCharacteristics.directoryListing.listing.listingCategory,",
						"          dirListingListBy = voipLOSCharacteristics.directoryListing.listing.listBy,",
						"          releaseDetailForBillingIndicator = voipLOSCharacteristics.directoryListing.listing.releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator = voipLOSCharacteristics.directoryListing.omitAddressIndicator,",
						"          dirListingParentComponentCode = voipLOSCharacteristics.directoryListing.parentComponentCode,",
						"          dirListingTitle2 = voipLOSCharacteristics.directoryListing.title2,",
						"          dirListingSubscriberName = voipLOSCharacteristics.directoryListing.subscriberName,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten26",
						"derivedColumn45 foldDown(unroll(OrderData.priceSummaryList, OrderData.priceSummaryList),",
						"     mapColumn(",
						"          amount = OrderData.priceSummaryList.amount,",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          currencyType = OrderData.priceSummaryList.currencyType,",
						"          priceType = OrderData.priceSummaryList.priceType,",
						"          total = OrderData.priceSummaryList.total,",
						"          taxSummary = OrderData.priceSummaryList.taxSummary",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten27",
						"filter119 foldDown(unroll(wirelessLOSCharacteristics.upgradeQualificationDetails, wirelessLOSCharacteristics.upgradeQualificationDetails),",
						"     mapColumn(",
						"          approvalNumber = wirelessLOSCharacteristics.upgradeQualificationDetails.approvalNumber,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          contractExtended = wirelessLOSCharacteristics.upgradeQualificationDetails.contractExtended,",
						"          deviceType = wirelessLOSCharacteristics.upgradeQualificationDetails.deviceType,",
						"          discountUOM = wirelessLOSCharacteristics.upgradeQualificationDetails.discountUOM,",
						"          maximumMRC = wirelessLOSCharacteristics.upgradeQualificationDetails.maximumMRC,",
						"          minimumCommitment = wirelessLOSCharacteristics.upgradeQualificationDetails.minimumCommitment,",
						"          minimumMRC = wirelessLOSCharacteristics.upgradeQualificationDetails.minimumMRC,",
						"          newAEUCheckerIndicator = wirelessLOSCharacteristics.upgradeQualificationDetails.newAEUCheckerIndicator,",
						"          offerCategory = wirelessLOSCharacteristics.upgradeQualificationDetails.offerCategory,",
						"          policyCategory = wirelessLOSCharacteristics.upgradeQualificationDetails.policyCategory,",
						"          priceList = wirelessLOSCharacteristics.upgradeQualificationDetails.priceList,",
						"          qualificationLevel = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationLevel,",
						"          qualificationMessage = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationMessage,",
						"          qualificationType = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationType,",
						"          upgradeEligibilityDate = wirelessLOSCharacteristics.upgradeQualificationDetails.upgradeEligibilityDate,",
						"          upgradeFeeWaivedIndicator = wirelessLOSCharacteristics.upgradeQualificationDetails.upgradeFeeWaivedIndicator",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten28",
						"flatten28 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window96",
						"window96 filter(prank==1) ~> filter98",
						"derivedColumn46 alterRow(upsertIf(true())) ~> alterRowupgrad",
						"coalLLseq select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          action,",
						"          addOnDomainName,",
						"          addOnDomainRegistration,",
						"          addOnParentItem,",
						"          addOnRegistrationType,",
						"          billingCode,",
						"          billingCodeType,",
						"          catalogProductType,",
						"          catalogSKUId,",
						"          contractAmountFinanced,",
						"          contractAnnualPercentageRate,",
						"          contractBalancedAmount,",
						"          contractDisplayName,",
						"          contractLength,",
						"          contractSent,",
						"          contractSystem,",
						"          contractType,",
						"          contractDownPayment,",
						"          contractDownPaymentPercent,",
						"          contractFinanceCharge,",
						"          contractInstallmentAmount,",
						"          contractInstallmentPlanDef,",
						"          contractInstallmentPlanId,",
						"          contractInstallmentStatus,",
						"          contractInstallmentType,",
						"          contractPrepaidFinanceCharge,",
						"          contractPayupAmount,",
						"          contractPayoffAmount,",
						"          contractTotalSalePrice,",
						"          curbsideDelivery,",
						"          description,",
						"          effectiveDate,",
						"          feeId,",
						"          feeIdType,",
						"          feeWaivedIndicator,",
						"          feeWaivedReason,",
						"          fulfillmentLocation,",
						"          displayName,",
						"          groupOptionId,",
						"          inventoryStoreId,",
						"          itemFulfillmentMethod,",
						"          LineItem_id,",
						"          locationId,",
						"          notes,",
						"          operation,",
						"          preOwnedIndicator,",
						"          productCode,",
						"          productSKU,",
						"          productType,",
						"          quantity,",
						"          sequence,",
						"          systemName,",
						"          hardGood,",
						"          additionalDetails,",
						"          internetLineItemCharacteristics,",
						"          priceAdditionalDetails = price.additionalDetails,",
						"          priceAmount = price.amount,",
						"          priceBaseAmount = price.baseAmount,",
						"          priceCreditFeeType = price.creditFeeType,",
						"          priceCurrencyType = price.currencyType,",
						"          priceInstallmentEligibility = price.installmentEligibility,",
						"          priceMsrp = price.msrp,",
						"          priceType = price.priceType,",
						"          priceTaxDetail = price.taxDetail,",
						"          priceTotal = price.total,",
						"          productCode,",
						"          productSKU,",
						"          productGroupReferences,",
						"          productType,",
						"          productSubType,",
						"          promotionReferences,",
						"          tier,",
						"          taxableIndicator,",
						"          systemName,",
						"          subscriptionId,",
						"          storeId,",
						"          status,",
						"          socForPreviousDevice,",
						"          shippingDetailReference,",
						"          purchaseTransactionId,",
						"          quantity,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select63",
						"derivedColumn57 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          sequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window97",
						"window97 filter(prank==1) ~> filter99",
						"filter99 alterRow(upsertIf(true())) ~> alterRowlineitems",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn45",
						"coalLLseq foldDown(unroll(priceList, priceList),",
						"     mapColumn(",
						"          additionalDetails = priceList.additionalDetails,",
						"          customerOrderNumber,",
						"          Losg_id = LineItem_id,",
						"          losgsequence,",
						"          LineItem_id,",
						"          sequence,",
						"          amount = priceList.amount,",
						"          baseAmount = priceList.baseAmount,",
						"          creditFeeType = priceList.creditFeeType,",
						"          currencyType = priceList.currencyType,",
						"          installmentEligibility = priceList.installmentEligibility,",
						"          msrp = priceList.msrp,",
						"          priceType = priceList.priceType,",
						"          taxDetail = priceList.taxDetail,",
						"          total = priceList.total,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten29",
						"filter98 derive(date = toTimestamp(toLong(toString(byName('upgradeEligibilityDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn46",
						"alterRowFallout derive(dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn47",
						"window77 derive(code = coalesce(code,' '),",
						"          dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn48",
						"AlterRowOrderPromotions derive(effectiveDate = toDate(toString(byName('effectiveDate')),'yyyy-MM-dd'),",
						"          endDate = toDate(toString(byName('endDate')),'yyyy-MM-dd')) ~> derivedColumn49",
						"filter65 derive(referredDate = toTimestamp(toLong(toString(byName('referredDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn50",
						"select22 derive(creditReferenceDate = toTimestamp(toLong(toString(byName('creditReferenceDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn51",
						"filter89 derive(availabilityDate = toTimestamp(toLong(toString(byName('availabilityDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          shippedDate = toTimestamp(toLong(toString(byName('shippedDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn52",
						"coallosgid foldDown(unroll(termsAndConditionAccepted, termsAndConditionAccepted),",
						"     mapColumn(",
						"          accepted = termsAndConditionAccepted.accepted,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          agreementText = termsAndConditionAccepted.agreementText,",
						"          agreementType = termsAndConditionAccepted.agreementType,",
						"          agreementURL = termsAndConditionAccepted.agreementURL,",
						"          category = termsAndConditionAccepted.category,",
						"          documentName = termsAndConditionAccepted.documentName,",
						"          termsandconditions_id = termsAndConditionAccepted.id,",
						"          orderLevelIndicator = termsAndConditionAccepted.orderLevelIndicator,",
						"          timestamp = termsAndConditionAccepted.timestamp,",
						"          tncld = termsAndConditionAccepted.tncld,",
						"          tnckey = termsAndConditionAccepted.tncKey,",
						"          tncRecordingOff = termsAndConditionAccepted.tncRecordingOff,",
						"          version = termsAndConditionAccepted.version",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten30",
						"select45 derive(preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn53",
						"flatten20 derive(effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          endDate = toTimestamp(toLong(toString(byName('endDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn54",
						"select27 derive(disconTimestamp = toTimestamp(toLong(toString(byName('disconTimestamp'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn55",
						"select15 derive(splitLiabilityDataAddendDateAndTime = toTimestamp(toLong(toString(byName('splitLiabilityDataAddendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          addendDateAndTime = toTimestamp(toLong(toString(byName('addendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          activationDate = toTimestamp(toLong(toString(byName('activationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          availabilityDate = toTimestamp(toLong(toString(byName('availabilityDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn56",
						"select63 derive(effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn57",
						"select53 derive(availabilityDate = toTimestamp(toLong(toString(byName('availabilityDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          deliveryByDateFromDate = toTimestamp(toLong(toString(byName('deliveryByDateFromDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          deliveryByDateToDate = toTimestamp(toLong(toString(byName('deliveryByDateToDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          shipmentCommitFromDate = toTimestamp(toLong(toString(byName('shipmentCommitFromDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          shipmentCommitToDate = toTimestamp(toLong(toString(byName('shipmentCommitToDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn58",
						"flatten7 derive(disconnectDate = toTimestamp(toLong(toString(byName('disconnectDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn59",
						"select33 derive(conflictLandlordDetailApprovalDate = toTimestamp(toLong(toString(byName('conflictLandlordDetailApprovalDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn60",
						"select31 derive(preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn61",
						"select29 derive(column1preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn62",
						"select1 derive(startDateTime = toTimestamp(toLong(toString(byName('startDateTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          endDateTime = toTimestamp(toLong(toString(byName('endDateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn63",
						"flattenLosgsLineItems derive(sequence = coalesce(sequence,''),",
						"          LineItem_id = coalesce(LineItem_id,''),",
						"          status = coalesce(status,'')) ~> coalLLseq",
						"window9 derive(value = coalesce(value,'')) ~> derivedColumn64",
						"filter29 derive(value = coalesce(value,'')) ~> derivedColumn65",
						"filterEventsource select(mapColumn(",
						"          orderjson_1,",
						"          lastmodified_date,",
						"          customerordernumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select64",
						"select64 derive(customerordernumber = coalesce(customerordernumber,customerOrderNumber2)) ~> derivedColumn66",
						"selectOrderTask derive(customerOrderNumber = coalesce(customerOrderNumber,CustomerOrderNumber2)) ~> derivedColumn67",
						"derivedColumn39 filter(not(isNull(OrderData.statusDetail.fallout))) ~> filterFalloutstructure",
						"filter23 derive(Promotion_id = coalesce(Promotion_id,' '),",
						"          sequence = coalesce(sequence,' ')) ~> derivedColumn68",
						"window44 derive(dirListingName = coalesce(dirListingName,' ')) ~> derivedColumn69",
						"derivedColumn39 filter(not(isNull(OrderData.eCommercePartner))) ~> filtereCommercePartner",
						"derivedColumn39 filter(not(isNull(OrderData.employeeReferralDetail))) ~> filteremployeeReferralDetail",
						"derivedColumn39 filter(not(isNull(OrderData.employeeDetail))) ~> filteremployeeDetail",
						"derivedColumn39 filter(not(isNull(OrderData.fleetDetail))) ~> filterfleetDetail",
						"derivedColumn39 filter(not(isNull(OrderData.loginProfile))) ~> filterloginProfile",
						"derivedColumn39 filter(not(isNull(OrderData.salesAgent))) ~> filterSalesAgent",
						"derivedColumn20 filter(not(isNull(OrderData.referenceDetail))) ~> filterreferenencedetail",
						"derivedColumn20 filter(not(isNull(OrderData.creditPolicy))) ~> filtercreditPolicy",
						"derivedColumn14 filter(not(isNull(orderjson_1.orderEvent.data.order.moveDetail))) ~> filter100",
						"coalacc filter(not(isNull(unifiedAccount))) ~> filterunifiedaccount",
						"coalacc filter(not(isNull(negotiateConflictCustomer))) ~> filternegotiateCC",
						"coalacc filter(not(isNull(cardOnFilePaymentMethod.ePaymentMethod))) ~> filtecardOnFilePaymentMethod",
						"coalacc filter(not(isNull(creditCheck))) ~> filtercreditCheck",
						"coalacc filter(not(isNull(billingDetail))) ~> filter101",
						"coalLLseq filter(not(isNull(hardGood))) ~> filtehardGood",
						"coalLLseq filter(not(isNull(internetLineItemCharacteristics))) ~> filter",
						"coalLLseq filter(not(isNull(wirelessLineItemCharacteristics))) ~> filter102",
						"coalacc filter(not(isNull(cardOnFilePaymentMethod))) ~> filter103",
						"coalacc filter(not(isNull(autopayPaymentMethod.ePaymentMethod))) ~> filter104",
						"coalacc filter(not(isNull(autopayPaymentMethod))) ~> filter105",
						"coallosgid filter(not(isNull(dslLOSCharacteristics))) ~> filter106",
						"coallosgid filter(not(isNull(compensation))) ~> filter107",
						"coallosgid filter(not(isNull(direcTVLOSCharacteristics))) ~> filter108",
						"coallosgid filter(not(isNull(serviceProvider))) ~> filter109",
						"coallosgid filter(not(isNull(wirelessLOSCharacteristics))) ~> filter110",
						"coallosgid filter(not(isNull(voipLOSCharacteristics))) ~> filter111",
						"coallosgid filter(not(isNull(iptvLOSCharacteristics))) ~> filter112",
						"coalLLseq filter(not(isNull(iptvLineItemCharacteristics))) ~> filter113",
						"coalLLseq filter(not(isNull(voipLineItemCharacteristics))) ~> filter114",
						"coalLLseq filter(not(isNull(direcTVLineItemCharacteristics))) ~> filter115",
						"coallosgid filter(not(isNull(directoryListing))) ~> filter116",
						"coallosgid filter(not(isNull(internetLOSCharacteristics))) ~> filter117",
						"coalLLseq filter(not(isNull(supplyChainDetail))) ~> filter118",
						"coallosgid filter(not(isNull(wirelessLOSCharacteristics.upgradeQualificationDetails))) ~> filter119",
						"select19 derive(channel = coalesce(channel,channel1,channel2)) ~> derivedColumn70",
						"filter87 derive(paymentTenderReference = coalesce(paymentTenderReference,'')) ~> derivedColumn71",
						"coalacc filter(not(isNull(provisioningSystem))) ~> filter120",
						"filter120 foldDown(unroll(provisioningSystem, provisioningSystem),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          systemName = provisioningSystem.systemName,",
						"          systemOrderReference = provisioningSystem.systemOrderReference,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten31",
						"flatten31 select(mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          systemOrderReference,",
						"          systemName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select65",
						"select65 window(over(customerOrderNumber,",
						"          acctId,",
						"          acctSequence,",
						"          systemName),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window98",
						"window98 filter(prank==1) ~> filter121",
						"filter121 alterRow(upsertIf(true())) ~> alterRowProvisionSystem",
						"select46 derive(priceType = coalesce(priceType,' ')) ~> derivedColumn72",
						"flattenerror window(over(customerOrderNumber,",
						"          ErrorCode),",
						"     desc(lastmodified_date, true),",
						"     prank = rowNumber()) ~> window99",
						"window99 filter(prank==1) ~> filter122",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          losg_id = Losg_id,",
						"          losgSequence = sequence,",
						"          status = losgStatus.status,",
						"          subStatus = losgStatus.subStatus,",
						"          eventDate = dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOceOrderLosgsEventHistory",
						"selectOceOrderLosgsEventHistory window(over(customerOrderNumber,",
						"          losg_id,",
						"          losgSequence,",
						"          status,",
						"          subStatus),",
						"     desc(eventDate, true),",
						"     prank = rowNumber()) ~> windowStreamBasedLosg",
						"windowStreamBasedLosg filter(prank == 1) ~> getLatestLosgInfoFromWindow",
						"setModifiedDateForLosgEventHistory alterRow(upsertIf(true())) ~> alterRowForOceOrderLosgsEventHistory",
						"coalLLseq select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgSequence = losgsequence,",
						"          lineItemId = LineItem_id,",
						"          lineItemSequence = sequence,",
						"          status,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOceOrderLosgsLineItemsEventHistory",
						"selectOceOrderLosgsLineItemsEventHistory window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgSequence,",
						"          lineItemId,",
						"          lineItemSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowLosgsLineItemsEventHistory",
						"windowLosgsLineItemsEventHistory filter(prank==1) ~> filterLatestLosgsLineItemsEvent",
						"getLatestLosgInfoFromWindow derive(ModifiedDate = currentUTC()) ~> setModifiedDateForLosgEventHistory",
						"filterLatestLosgsLineItemsEvent derive(ModifiedDate = currentUTC()) ~> addModifiedDateToLosgLineItemHistory",
						"addModifiedDateToLosgLineItemHistory alterRow(upsertIf(true())) ~> alterRowOrderLosgsLineItemsEventHistory",
						"filterorderdata filter(in(['OrderMs','OrderRepoMS','OrderTaskQueueMs'],eventSource)) ~> filterEventsource",
						"derivedColumn36 foldDown(unroll(losgs, losgs),",
						"     mapColumn(",
						"          comments,",
						"          actionBy,",
						"          updateInfos,",
						"          channel,",
						"          orderStatus,",
						"          transactionName,",
						"          transactionType,",
						"          changedLosgReferenceId,",
						"          recordId,",
						"          queueName,",
						"          parentOrderId,",
						"          startTime,",
						"          endTime,",
						"          transactionId,",
						"          orderId,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime,",
						"          losgReferenceId = losgs.losgReferenceId,",
						"          service = losgs.service,",
						"          serviceType = losgs.serviceType,",
						"          losgstatus = losgs.status,",
						"          losgsubStatus = losgs.subStatus,",
						"          losgwirelessNumber = losgs.wirelessNumber,",
						"          idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten32",
						"flatten32 derive(losgstatus = coalesce(losgstatus,''),",
						"          losgsubStatus = coalesce(losgsubStatus,''),",
						"          losgReferenceId = coalesce(losgReferenceId,''),",
						"          modifiedDate = currentUTC()) ~> derivedColumn73",
						"derivedColumn73 window(over(customerOrderNumber,",
						"          losgReferenceId,",
						"          losgstatus,",
						"          losgsubStatus,",
						"          startTime),",
						"     asc(startTime, true),",
						"     prank = rowNumber()) ~> window100",
						"window100 filter(prank==1) ~> filter123",
						"filter123 alterRow(upsertIf(true())) ~> altertransactinlogs",
						"coallosgid foldDown(unroll(apiExecutionDetails, apiExecutionDetails),",
						"     mapColumn(",
						"          name = apiExecutionDetails.name,",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          priority = apiExecutionDetails.priority,",
						"          action = apiExecutionDetails.action,",
						"          losgSubStatus = apiExecutionDetails.loSGStatus.subStatus,",
						"          losgStatus = apiExecutionDetails.loSGStatus.status,",
						"          eventDate = dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flattenApiExecutionArray",
						"flattenApiExecutionArray window(over(customerOrderNumber,",
						"          losgId,",
						"          losgSequence),",
						"     desc(eventDate, true),",
						"     prank = rowNumber()) ~> windowApiExecutionDetails",
						"windowApiExecutionDetails filter(prank==1) ~> filterLatestApiExecutionRecord",
						"filterLatestApiExecutionRecord alterRow(upsertIf(true())) ~> AlterRowApiExecutionDetails",
						"filteroceOrderCancelDetails select(mapColumn(",
						"          customerOrderNumber,",
						"          cancelReason = OrderData.cancelDetails.cancelReason,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderCancelDetails",
						"selectOrderCancelDetails window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowOrderCancel",
						"windowOrderCancel filter(prank==1) ~> filterOrderCancel",
						"filterOrderCancel alterRow(upsertIf(true())) ~> AlterRowCancelDetails",
						"derivedColumn45 filter(not(isNull(OrderData.cancelDetails.cancelReason))) ~> filteroceOrderCancelDetails",
						"coallosgid select(mapColumn(",
						"          CustomerOrderNumber = customerOrderNumber,",
						"          LosgId = Losg_id,",
						"          sequence,",
						"          cancelReason = cancelDetails.cancelReason,",
						"          cancelBy = cancelDetails.cancelBy,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectoceOrderLosgCancelDetails",
						"selectoceOrderLosgCancelDetails window(over(CustomerOrderNumber,",
						"          LosgId,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowoceOrderLosgCancelDetails",
						"windowoceOrderLosgCancelDetails filter(prank==1 && not(isNull(cancelReason))) ~> filteroceOrderLosgCancelDetails",
						"filteroceOrderLosgCancelDetails alterRow(upsertIf(true())) ~> alterRowoceOrderLosgCancelDetails",
						"AlterRowOrderData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acceptedDate as timestamp,",
						"          b2bDetail as string,",
						"          channel as string,",
						"          status as string,",
						"          subStatus as string,",
						"          installmentMultiIndicator as string,",
						"          isOrderPended as string,",
						"          numberOfInstallments as string,",
						"          oceOrderNumber as string,",
						"          orderId as string,",
						"          program as string,",
						"          requestId as string,",
						"          requestType as string,",
						"          revisionNumber as string,",
						"          specialInstructions as string,",
						"          createdDate as timestamp,",
						"          submittedDate as timestamp,",
						"          updatedDate as timestamp,",
						"          type as string,",
						"          version as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          eventTimeDateTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderdata_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acceptedDate,",
						"          b2bDetail,",
						"          channel,",
						"          status,",
						"          subStatus,",
						"          installmentMultiIndicator,",
						"          isOrderPended,",
						"          numberOfInstallments,",
						"          oceOrderNumber,",
						"          orderId,",
						"          program,",
						"          requestId,",
						"          requestType,",
						"          revisionNumber,",
						"          specialInstructions,",
						"          createdDate,",
						"          submittedDate,",
						"          updatedDate,",
						"          type,",
						"          version,",
						"          eventTime,",
						"          eventTimeDateTime = dc_eventtime",
						"     )) ~> sinkOrderData",
						"AlterRowOrderAdditionalDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          value as string,",
						"          sequence as integer,",
						"          type as string,",
						"          parentType as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code','value'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderadditionaldetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          type,",
						"          value,",
						"          code,",
						"          parentType,",
						"          sequence",
						"     )) ~> sinkOrderAdditionalDetails",
						"AlterRowOrderContactDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          additionalEmailRecipients as string,",
						"          orderConfirmationByEmailPermissionIndicator as string,",
						"          orderPickUpCTN as string,",
						"          permissionForOutboundCallIndicator as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          preferredContactMethod as string,",
						"          preferredTimeOfDayForContact as string,",
						"          primaryemailaddress as string,",
						"          productUpdatesByEmailPermissionIndicator as string,",
						"          secondaryEmailAddress as string,",
						"          timeZone as string,",
						"          unpublishedContactByPhonePermissionIndicator as string,",
						"          ModifiedDate as timestamp,",
						"          smsValidIndicator as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordercontactdetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails,",
						"          additionalEmailRecipients,",
						"          orderConfirmationByEmailPermissionIndicator,",
						"          orderPickUpCTN,",
						"          permissionForOutboundCallIndicator,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = nameid,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          preferredContactMethod,",
						"          preferredTimeOfDayForContact,",
						"          primaryemailaddress = primaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator,",
						"          secondaryEmailAddress,",
						"          timeZone,",
						"          unpublishedContactByPhonePermissionIndicator,",
						"          smsValidIndicator = smsValidatedIndicator",
						"     )) ~> sinkOrderContactDetails",
						"AlterRowOrderPriceList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseamount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencytype as string,",
						"          installmentEligibility as string,",
						"          msrp as decimal(20,2),",
						"          total as decimal(20,2),",
						"          taxDetail as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpricelist_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          additionalDetails,",
						"          amount,",
						"          baseamount = baseAmount,",
						"          creditFeeType,",
						"          currencytype = currencyType,",
						"          installmentEligibility,",
						"          msrp,",
						"          total,",
						"          taxDetail",
						"     )) ~> sinkOrderPrice",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          amount as decimal(20,2),",
						"          currencyType as string,",
						"          taxSummary as string,",
						"          total as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpricesummarylist',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          amount,",
						"          currencyType,",
						"          taxSummary,",
						"          total",
						"     )) ~> sinkOrderPriceSummaryList",
						"AlterRowOrderProductGroups sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          productGroupId as string,",
						"          productGroupSequence as string,",
						"          additionalDetails as string,",
						"          characteristicsId as string,",
						"          name as string,",
						"          type as string,",
						"          discountOffer as string,",
						"          packageCharacteristicsCode as string,",
						"          packageCharacteristicsDesc as string,",
						"          packageCharacteristicsType as string,",
						"          sharedPlanDataGroupId as string,",
						"          sharedPlanFamilyGroupId as string,",
						"          sharedPlanGroupReferencesCode as string,",
						"          sharedPlanType as string,",
						"          sharedPlanPrimarySubscriberNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','productGroupId','productGroupSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderproductgroups',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          productGroupId = Product_id,",
						"          productGroupSequence = sequence,",
						"          additionalDetails,",
						"          characteristicsId = characteristicsid,",
						"          name,",
						"          type = ProductGrouptype,",
						"          discountOffer,",
						"          packageCharacteristicsCode = code,",
						"          packageCharacteristicsDesc = description,",
						"          packageCharacteristicsType = packageCharacteristicstype,",
						"          sharedPlanDataGroupId = sharedPlandataGroupId,",
						"          sharedPlanFamilyGroupId = sharedPlanfamilyGroupId,",
						"          sharedPlanGroupReferencesCode = sharedPlangroupReferencesCode,",
						"          sharedPlanType = sharedPlanplanType,",
						"          sharedPlanPrimarySubscriberNumber = sharedPlanprimarySubscriberNumber",
						"     )) ~> sinkOrderProductGroups",
						"derivedColumn49 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          id as string,",
						"          sequence as string,",
						"          additionDetails as string,",
						"          amount as decimal(20,2),",
						"          baseOfferId as string,",
						"          complexDiscountIndicator as string,",
						"          componentConfigurations as string,",
						"          couponCode as string,",
						"          displayLevel as string,",
						"          duration as integer,",
						"          effectiveDate as timestamp,",
						"          effectiveInDays as integer,",
						"          endDate as timestamp,",
						"          fixedAmount as decimal(20,2),",
						"          ioId as string,",
						"          ioSequence as string,",
						"          parentPricePlanCode as string,",
						"          payInAdvanceProdId as string,",
						"          percent as decimal(20,2),",
						"          promotionAppliedBy as string,",
						"          promotionBillingCode as string,",
						"          promotionCode as string,",
						"          promotionCycle as string,",
						"          promotionId as string,",
						"          promotionName as string,",
						"          promotionType as string,",
						"          unitOfMeasurement as string,",
						"          promotionTypeDetail as string,",
						"          qualifyingServiceDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','sequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpromotions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          amount,",
						"          duration,",
						"          id = Promotion_id,",
						"          percent = Promotionpercent,",
						"          promotionCode,",
						"          promotionCycle,",
						"          promotionId,",
						"          promotionName,",
						"          promotionType,",
						"          sequence,",
						"          unitOfMeasurement,",
						"          baseOfferId,",
						"          complexDiscountIndicator,",
						"          componentConfigurations,",
						"          couponCode,",
						"          displayLevel,",
						"          effectiveDate,",
						"          effectiveInDays,",
						"          endDate,",
						"          fixedAmount,",
						"          ioId,",
						"          ioSequence,",
						"          parentPricePlanCode,",
						"          payInAdvanceProdId,",
						"          promotionAppliedBy,",
						"          promotionBillingCode,",
						"          promotionTypeDetail,",
						"          qualifyingServiceDetails,",
						"          additionDetails = additionalDetails",
						"     )) ~> sinkOrderPromotions",
						"AlterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          termsAndConditionsId as string,",
						"          agreementText as string,",
						"          accepted as string,",
						"          agreementURL as string,",
						"          agreementType as string,",
						"          category as string,",
						"          documentName as string,",
						"          orderLevelIndicator as string,",
						"          timestamp as timestamp,",
						"          tncId as string,",
						"          tncKey as string,",
						"          tncRecordingOff as string,",
						"          version as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','termsAndConditionsId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordertermsandconditions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accepted,",
						"          agreementText,",
						"          agreementType,",
						"          category,",
						"          termsAndConditionsId = id,",
						"          orderLevelIndicator,",
						"          timestamp,",
						"          version,",
						"          agreementURL,",
						"          documentName,",
						"          tncId,",
						"          tncKey,",
						"          tncRecordingOff",
						"     )) ~> sinkOrderTermsandConditions",
						"AlterRowOrderAccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          accepteddate as timestamp,",
						"          accountCategory as string,",
						"          accountCrossmarketIndicator as string,",
						"          accountSubCategory as string,",
						"          accountSubType as string,",
						"          accountType as string,",
						"          acpTransactionId as string,",
						"          acpClassification as string,",
						"          additionalDetails as string,",
						"          anchorCTN as string,",
						"          autoPayReason as string,",
						"          b2bReference as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          bigData as string,",
						"          billingAccountNumber as string,",
						"          billingAccountTelephoneNumber as string,",
						"          billingdeliverypreference as string,",
						"          billingLanguagePreference as string,",
						"          billPaymentDueDate as string,",
						"          businessAccountName as string,",
						"          cardOnFileStatus as string,",
						"          conflictingServiceDetails as string,",
						"          consentToCCIndicator as string,",
						"          contractAcceptance as string,",
						"          contractLength as string,",
						"          contractVersionNumber as string,",
						"          cpni as string,",
						"          creditAlertFraudAlert as string,",
						"          creditAlertGeneralMessage as string,",
						"          ctnValidatedIndicator as string,",
						"          customerCode as string,",
						"          delinquentAccountIndicator as string,",
						"          ebillReason as string,",
						"          electronicDisclosureAuthorization as string,",
						"          internetServiceAuthorization as string,",
						"          letterOfAuthorizationURL as string,",
						"          localServiceAuthorization as string,",
						"          localTollProviderAuthorization as string,",
						"          longDistanceServiceProvider as string,",
						"          emailValidatedIndicator as string,",
						"          enterpriseType as string,",
						"          existingAutoBillStatus as string,",
						"          existingAutoBillIndicator as string,",
						"          gigaPower as string,",
						"          landLineNumber as string,",
						"          langId as string,",
						"          liabilityType as string,",
						"          market as string,",
						"          marketingSourceCode as string,",
						"          mdmProfileSettingAdditionDetails as string,",
						"          mdmProfileSettingProfileName as string,",
						"          packageId as string,",
						"          partnerJointBillType as string,",
						"          paymentArrangement as string,",
						"          pmoIndicator as string,",
						"          priceCode as string,",
						"          priceMatch as string,",
						"          primaryCTN as string,",
						"          spokenLanguagePreference as string,",
						"          subMarket as string,",
						"          submittedDate as timestamp,",
						"          targetCTN as string,",
						"          thirdPartyCombinedBill as string,",
						"          winBackIndicator as string,",
						"          createdDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          eventTimeUnixTime as string,",
						"          eventTimeDateTime as timestamp,",
						"          priceStrategyId as string,",
						"          priceStrategyName as string,",
						"          priceLockEndDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAccts_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          createdDate,",
						"          submittedDate,",
						"          accepteddate = acceptedDate,",
						"          accountCategory,",
						"          accountSubCategory,",
						"          accountSubType,",
						"          accountType,",
						"          autoPayReason,",
						"          b2bReference,",
						"          billingdeliverypreference = billingDeliveryPreference,",
						"          billingLanguagePreference,",
						"          businessAccountName,",
						"          cpni,",
						"          ebillReason,",
						"          enterpriseType,",
						"          gigaPower,",
						"          acctId = Account_id,",
						"          langId,",
						"          market,",
						"          paymentArrangement,",
						"          acctSequence = sequence,",
						"          spokenLanguagePreference,",
						"          billingAccountNumber,",
						"          additionalDetails,",
						"          billingAccountTelephoneNumber,",
						"          primaryCTN,",
						"          packageId = employeeReferralDetail.packageId,",
						"          accountCrossmarketIndicator,",
						"          acpTransactionId,",
						"          acpClassification,",
						"          anchorCTN,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          bigData,",
						"          billPaymentDueDate,",
						"          cardOnFileStatus,",
						"          conflictingServiceDetails,",
						"          consentToCCIndicator,",
						"          contractAcceptance,",
						"          contractLength,",
						"          contractVersionNumber,",
						"          creditAlertFraudAlert,",
						"          creditAlertGeneralMessage,",
						"          ctnValidatedIndicator,",
						"          customerCode,",
						"          delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization,",
						"          internetServiceAuthorization,",
						"          letterOfAuthorizationURL,",
						"          localServiceAuthorization,",
						"          localTollProviderAuthorization,",
						"          longDistanceServiceProvider,",
						"          emailValidatedIndicator,",
						"          existingAutoBillStatus,",
						"          existingAutoBillIndicator,",
						"          landLineNumber,",
						"          liabilityType,",
						"          marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails,",
						"          mdmProfileSettingProfileName,",
						"          partnerJointBillType,",
						"          pmoIndicator,",
						"          priceCode,",
						"          priceMatch,",
						"          subMarket,",
						"          targetCTN,",
						"          thirdPartyCombinedBill,",
						"          winBackIndicator,",
						"          eventTimeDateTime = dc_eventtime,",
						"          eventTimeUnixTime = eventTime",
						"     )) ~> sinkOrderAccounts",
						"AlterRowOrderAccountsServiceFacilityQualification sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          additionalDetails as string,",
						"          address as string,",
						"          cpeRequiredIndicator as string,",
						"          dslAvailableIndicator as string,",
						"          facilityCheck as string,",
						"          frequency17MhzIndicator as string,",
						"          gfastDeviceWireType as string,",
						"          id as string,",
						"          potsAvailableIndicator as string,",
						"          preferredNetworkType as string,",
						"          profileCode as string,",
						"          vectoringIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderaccountsservicefacilityqualification_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = Actsequence,",
						"          additionalDetails,",
						"          address,",
						"          cpeRequiredIndicator,",
						"          dslAvailableIndicator,",
						"          facilityCheck,",
						"          frequency17MhzIndicator,",
						"          gfastDeviceWireType,",
						"          id,",
						"          potsAvailableIndicator,",
						"          vectoringIndicator,",
						"          preferredNetworkType,",
						"          profileCode",
						"     )) ~> sinkOrderAccountsServiceFacilityQualification",
						"AlterRowOrderAccountsBillingDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountStatus as string,",
						"          dob as string,",
						"          driversLicenseExpirationDate as string,",
						"          driversLicenseNumber as string,",
						"          driverLicenseState as string,",
						"          employerName as string,",
						"          employerPhoneNumber as string,",
						"          federalTaxId as string,",
						"          gender as string,",
						"          lastFourOfSSN as string,",
						"          motherMaidenName as string,",
						"          securityVerificationPin as string,",
						"          securityAnswer as string,",
						"          securityQuestion as string,",
						"          ssn as string,",
						"          ssnRefusedIndicator as string,",
						"          stateIdNumber as string,",
						"          stateIdIssuedState as string,",
						"          billingType as string,",
						"          nextBillingCycleDate as string,",
						"          previousAddress as string,",
						"          previousPhoneNumber as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderaccountsbillingdetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          accountStatus,",
						"          driverLicenseState = licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          gender,",
						"          motherMaidenName,",
						"          ssnRefusedIndicator,",
						"          stateIdIssuedState,",
						"          billingType,",
						"          nextBillingCycleDate,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails",
						"     )) ~> sinkOrderAccountsBillingDetails",
						"AlterRowOrderLosgsPrice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseamount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencytype as string,",
						"          installmentEligibility as string,",
						"          msrp as string,",
						"          total as decimal(20,2),",
						"          taxDetail as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgsprice_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          amount,",
						"          baseamount = baseAmount,",
						"          currencytype = currencyType,",
						"          priceType = pricetype,",
						"          total,",
						"          creditFeeType,",
						"          installmentEligibility,",
						"          msrp,",
						"          additionalDetails,",
						"          taxDetail",
						"     )) ~> sinkOrderLosgsPrice",
						"AlterRowOrderLosgsPriceSummaryList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          priceType as string,",
						"          amount as double,",
						"          currencytype as string,",
						"          total as double,",
						"          taxSummary as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgspricesummarylist_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          amount,",
						"          currencytype = currencyType,",
						"          priceType,",
						"          total,",
						"          taxSummary,",
						"          losgSequence = Losgsequence",
						"     )) ~> sinkOrderLosgsPriceSummaryList",
						"AlterRowlosgsLineitemsAdditionalDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          type as string,",
						"          code as string,",
						"          value as string,",
						"          parentType as string,",
						"          sequence as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','code','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_losgslineitemsadditionaldetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          lineItemId = LineItem_id,",
						"          type,",
						"          parentType,",
						"          code,",
						"          value,",
						"          losgSequence = losgsequence,",
						"          lineItemSequence = LineItemsequence,",
						"          sequence",
						"     )) ~> oceOrderLosgsLineItemsAddlDetails",
						"AlterRowOrderSourceDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          application as string,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          expressCheckOutIndicator as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetailGroupId as string,",
						"          premierDetailGroupName as string,",
						"          premierDetailResourceCenterTicketNumber as string,",
						"          region as string,",
						"          responseMode as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          sequence as string,",
						"          zip as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordersourcedetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          application,",
						"          browserId,",
						"          channel,",
						"          city,",
						"          clientIP,",
						"          clientType,",
						"          countryCode,",
						"          county,",
						"          externalOrderSource,",
						"          locale,",
						"          region,",
						"          salesChannel,",
						"          salesChannelType,",
						"          sender,",
						"          zip,",
						"          expressCheckOutIndicator,",
						"          mediaSource,",
						"          originatingApplication,",
						"          initiatingApplication,",
						"          premierDetailGroupId,",
						"          premierDetailGroupName,",
						"          premierDetailResourceCenterTicketNumber = premierDetailGroupTick,",
						"          responseMode,",
						"          sequence",
						"     )) ~> sinkOrderSourceDetail",
						"AlterRowOrderSourceDetailAdditionalDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          value as string,",
						"          sequence as string,",
						"          type as string,",
						"          parentType as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code','value'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordersourcedetailadditionaldetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          type,",
						"          value,",
						"          sequence,",
						"          parentType",
						"     )) ~> SourceDetailAdditionalDetail",
						"AlterRowOrderlosgs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          acceptEULA as string,",
						"          accountReference as string,",
						"          actionReason as string,",
						"          actionType as string,",
						"          apiExecutionDetailsErrorCode as string,",
						"          apiExecutionDetailsLosgStatus as string,",
						"          apiExecutionDetailsName as string,",
						"          apiExecutionDetailsPriority as string,",
						"          billingsystemid as string,",
						"          bundleGroupId as string,",
						"          childOrderId as string,",
						"          companyCode as string,",
						"          creditPolicySecurityType as string,",
						"          dealercode as string,",
						"          divisionCode as string,",
						"          effectiveDate as timestamp,",
						"          engageVideoId as string,",
						"          entitlementBenefit as string,",
						"          fallout as string,",
						"          fnGuId as string,",
						"          fnType as string,",
						"          fnUserId as string,",
						"          freeDevicePolicyId as string,",
						"          fulfillerCode as string,",
						"          fulfillerName as string,",
						"          fulfillmentmethod as string,",
						"          fwCAF2AddressIndicator as string,",
						"          fwiMoveInIndicator as string,",
						"          installtype as string,",
						"          losgType as string,",
						"          market as string,",
						"          migrationIndicator as string,",
						"          migrationSource as string,",
						"          name as string,",
						"          notes as string,",
						"          preferredAreaCode as string,",
						"          priceCode as string,",
						"          primaryIndicator as string,",
						"          productcategory as string,",
						"          productOfferingId as string,",
						"          productOrderActionId as string,",
						"          productOrderActionReference as string,",
						"          profileCode as string,",
						"          rateType as string,",
						"          requestedExecutionDate as timestamp,",
						"          salesOfferId as string,",
						"          schedulingdetailreference as string,",
						"          serviceArea as string,",
						"          serviceAreaName as string,",
						"          servicequalificationreference as string,",
						"          status as string,",
						"          subMarket as string,",
						"          substatus as string,",
						"          sunsetDate as timestamp,",
						"          tenantAccountId as string,",
						"          tenantAccountStatus as string,",
						"          transferFromBAN as string,",
						"          transferFromFAN as string,",
						"          transferFromMobileNumber as string,",
						"          type as string,",
						"          vendorAccountId as string,",
						"          ModifiedDate as timestamp,",
						"          actionReasonCode as string,",
						"          previousProductOrderActionId as string,",
						"          eventTimeUnixTime as string,",
						"          eventTimeDateTime as timestamp,",
						"          productInventoryStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgs_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence,",
						"          losgId = losg_id,",
						"          accountReference,",
						"          actionReason,",
						"          actionType,",
						"          acceptEULA,",
						"          tenantAccountId,",
						"          tenantAccountStatus,",
						"          billingsystemid = billingSystemId,",
						"          bundleGroupId,",
						"          childOrderId,",
						"          companyCode,",
						"          creditPolicySecurityType,",
						"          dealercode = dealerCode,",
						"          divisionCode,",
						"          effectiveDate,",
						"          engageVideoId,",
						"          entitlementBenefit,",
						"          fnGuId,",
						"          fnUserId,",
						"          fnType,",
						"          freeDevicePolicyId,",
						"          fulfillmentmethod = fulfillmentMethod,",
						"          fulfillerName,",
						"          fulfillerCode,",
						"          fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator,",
						"          installtype = installType,",
						"          status,",
						"          substatus = subStatus,",
						"          fallout,",
						"          losgType,",
						"          market,",
						"          migrationIndicator,",
						"          migrationSource,",
						"          name,",
						"          notes,",
						"          preferredAreaCode,",
						"          priceCode,",
						"          primaryIndicator,",
						"          productcategory = productCategory,",
						"          productOfferingId,",
						"          productOrderActionId,",
						"          productOrderActionReference,",
						"          profileCode,",
						"          rateType,",
						"          requestedExecutionDate,",
						"          salesOfferId,",
						"          schedulingdetailreference = schedulingDetailReference,",
						"          serviceArea,",
						"          serviceAreaName,",
						"          servicequalificationreference = serviceQualificationReference,",
						"          subMarket,",
						"          sunsetDate,",
						"          transferFromBAN = transferfromBAN,",
						"          transferFromFAN = transferfromFAN,",
						"          transferFromMobileNumber = transferfromMobileNumber,",
						"          type,",
						"          vendorAccountId,",
						"          previousProductOrderActionId,",
						"          actionReasonCode,",
						"          eventTimeUnixTime = eventTime,",
						"          eventTimeDateTime = dc_eventtime",
						"     )) ~> sinkOrderlosgs",
						"alterRowcreditpolicy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          creditPolicyTransactionId as string,",
						"          crsmOnFlag as string,",
						"          previousCreditPolicyTransactionId as string,",
						"          policyAcceptedIndicator as string,",
						"          uucpStatus as string,",
						"          ModifiedDate as timestamp,",
						"          order_type as string,",
						"          additionalDetails as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_ordercreditpolicy_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          creditPolicyTransactionId,",
						"          crsmOnFlag,",
						"          previousCreditPolicyTransactionId,",
						"          policyAcceptedIndicator,",
						"          uucpStatus,",
						"          additionalDetails",
						"     )) ~> sinkcreditpolicy",
						"alterRowdebitaccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          debtId as string,",
						"          debtAccountNumber as string,",
						"          accountCategory as string,",
						"          accountSubCategory as string,",
						"          affiliateId as string,",
						"          amount as decimal(20,2),",
						"          debtPaidStatus as string,",
						"          paymentMethodReference as string,",
						"          provider as string,",
						"          settledBy as string,",
						"          system as string,",
						"          systemDivision as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','debtId','debtAccountNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_orderdebtAccounts_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accountCategory,",
						"          accountSubCategory,",
						"          affiliateId,",
						"          amount,",
						"          debtAccountNumber,",
						"          debtPaidStatus,",
						"          debtId = id,",
						"          paymentMethodReference,",
						"          provider,",
						"          settledBy,",
						"          system,",
						"          systemDivision",
						"     )) ~> sinkdebtaccounts",
						"alterRowrelatedparty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          relatedPartyId as string,",
						"          role as string,",
						"          type as string,",
						"          name as string,",
						"          startDateTime as timestamp,",
						"          endDateTime as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','relatedPartyId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_orderrelatedParty_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          endDateTime,",
						"          relatedPartyId = id,",
						"          role,",
						"          startDateTime,",
						"          type,",
						"          name",
						"     )) ~> sinkrelatedparty",
						"alterRowerrors sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          ErrorCode as string,",
						"          ErrorDescription as string,",
						"          IdRef as string,",
						"          Type as string,",
						"          eventhub_adx_ingest_time as timestamp,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','ErrorCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_Errors_error',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          ErrorCode,",
						"          ErrorDescription,",
						"          IdRef,",
						"          Type,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          eventTime = eventtime",
						"     )) ~> sinkError",
						"alterRowmoveorder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          disconnectDate as timestamp,",
						"          fromBillingAddress as string,",
						"          fromServiceAddress as string,",
						"          fullyAuthenticatedIndicator as string,",
						"          fromTelephoneNumber as string,",
						"          modifiedDate as timestamp,",
						"          eventTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_moveorderexists_errors',",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails,",
						"          disconnectDate,",
						"          fromBillingAddress,",
						"          fromServiceAddress,",
						"          fullyAuthenticatedIndicator,",
						"          fromTelephoneNumber,",
						"          eventTime = lastmodified_date",
						"     )) ~> sinkoceOrderMoveDetail",
						"alterRowtaskid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerOrderNumber as string,",
						"          taskId as string,",
						"          applicationName as string,",
						"          camundaTaskId as string,",
						"          channel as string,",
						"          creationDate as timestamp,",
						"          losgIds as string,",
						"          orderNumber as string,",
						"          partnerName as string,",
						"          programName as string,",
						"          queueId as string,",
						"          queueName as string,",
						"          queuesladetails as string,",
						"          taskStatus as string,",
						"          eventHubAdxIngestTime as timestamp,",
						"          modifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerOrderNumber','taskId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_ordertask_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          CustomerOrderNumber,",
						"          taskId = dc_taskid,",
						"          applicationName = ApplicationName,",
						"          camundaTaskId = dc_camuda,",
						"          channel = Channel,",
						"          creationDate = CreationDate,",
						"          losgIds = dc_losgids,",
						"          orderNumber = OrderNumber,",
						"          partnerName = PartnerName,",
						"          programName = ProgramName,",
						"          queueId = QueueId,",
						"          queueName = QueueName,",
						"          queuesladetails = QueueSlaDetails,",
						"          taskStatus = TaskStatus,",
						"          eventTime,",
						"          eventHubAdxIngestTime = lastmodified_date",
						"     )) ~> sinkordertask",
						"alterRowreferencedetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          associatedRequestID as string,",
						"          bulkIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          commonOrderIndicator as string,",
						"          encryptedIndicator as string,",
						"          fraudDetectionAdditionalDetails as string,",
						"          authenticationRequestId as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string,",
						"          efcCallIndicator as string,",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          eventhub_adx_ingest_time as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_order_referenceDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          encryptedIndicator,",
						"          posReferenceId,",
						"          posUUID,",
						"          associatedRequestID,",
						"          passThroughIndicator,",
						"          testOrderIndicator,",
						"          bulkIndicator,",
						"          bulkOrderWorkRequestNumber,",
						"          chatId,",
						"          commonOrderIndicator,",
						"          fraudDetectionAdditionalDetails,",
						"          authenticationRequestId,",
						"          orderFraudCheckStatus,",
						"          orderModifiedAfterPinValidation,",
						"          pinValidationSource,",
						"          pinValidationStatus,",
						"          proofOfIdentityUrl,",
						"          smsCTN,",
						"          validationType,",
						"          efcCallIndicator,",
						"          orderStatusUrl,",
						"          parentOrderId,",
						"          partialOrderIndicator,",
						"          productCombinationCode,",
						"          referenceOrderId,",
						"          resubmitOrderIndicator,",
						"          summaryCreatedIndicator",
						"     )) ~> sinkorderreferencedetail",
						"IPtvalterrow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          freeSTBReceiverCount as integer,",
						"          parentComponentCode as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_iptvLOSCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          freeSTBReceiverCount,",
						"          parentComponentCode",
						"     )) ~> iptvLOSCharacteristics",
						"AlterSubcribeName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101-oceOrderLosgsSubscriberName_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails",
						"     )) ~> oceOrderLosgsSubscriberName",
						"MapDrifted1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerordernumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          termsAndConditionsId as string,",
						"          accepted as string,",
						"          agreementtext as string,",
						"          agreementtype as string,",
						"          agreementURL as string,",
						"          category as string,",
						"          documentName as string,",
						"          orderlevelindicator as string,",
						"          version as string,",
						"          timestamp as timestamp,",
						"          tncKey as string,",
						"          tncld as string,",
						"          tncRecordingOff as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerordernumber','losgSequence','losgId','termsAndConditionsId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgTermsAndConditionsAccepted_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerordernumber = customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          accepted,",
						"          agreementtext = agreementText,",
						"          agreementtype = agreementType,",
						"          agreementURL,",
						"          category,",
						"          termsAndConditionsId = termsandconditions_id,",
						"          orderlevelindicator = orderLevelIndicator,",
						"          timestamp,",
						"          version,",
						"          tncKey = tnckey,",
						"          tncld,",
						"          tncRecordingOff,",
						"          documentName",
						"     )) ~> oceOrderLosgsTermsAndConditionAccepted",
						"altervoipc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          reservedTelephoneNumber as string,",
						"          e911Id as string,",
						"          e911HomeAlarmSystem as string,",
						"          e911NoMatchFound as string,",
						"          e911Adress as string,",
						"          e911TermsAndConditionId as string,",
						"          e911TnCAccepted as string,",
						"          e911TnCCategory as string,",
						"          e911TnCAgreementText as string,",
						"          e911TnCAgreementType as string,",
						"          e911TnCAgreementURL as string,",
						"          e911TnCTimestamp as timestamp,",
						"          e911TnCVersion as string,",
						"          e911TnCDocumentName as string,",
						"          e911TnCOrderLevelIndicator as string,",
						"          e911TncId as string,",
						"          e911TncKey as string,",
						"          e911TnCRecordingOff as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsVoipCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          reservedTelephoneNumber,",
						"          e911Id,",
						"          e911HomeAlarmSystem,",
						"          e911NoMatchFound,",
						"          e911Adress = e911address,",
						"          e911TermsAndConditionId,",
						"          e911TnCAccepted = e911TnCaccepted,",
						"          e911TnCCategory = e911TnCcategory,",
						"          e911TnCAgreementText = e911TnCagreementText,",
						"          e911TnCAgreementType = e911TnCagreementType,",
						"          e911TnCAgreementURL = e911TnCagreementURL,",
						"          e911TnCTimestamp = e911TnCtimestamp,",
						"          e911TnCVersion = e911TnCversion,",
						"          e911TnCDocumentName = e911TnCdocumentName,",
						"          e911TnCOrderLevelIndicator = e911TnCorderLevelIndicator,",
						"          e911TncId = e911TnCId,",
						"          e911TncKey = e911TnCKey,",
						"          e911TnCRecordingOff",
						"     )) ~> oceOrderLosgsVoipCharacteristics",
						"altere11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerordernumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          dirListingName as string,",
						"          dirListingAdditionalDetails as string,",
						"          dirListingDesignation as string,",
						"          dirListingAddress as string,",
						"          dirListingListingType as string,",
						"          dirListingListingCategory as string,",
						"          dirListingListBy as string,",
						"          releaseDetailForBillingIndicator as string,",
						"          dirListingOmitAddressIndicator as string,",
						"          dirListingParentComponentCode as string,",
						"          dirListingTitle2 as string,",
						"          dirListingSubscriberName as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerordernumber','losgSequence','losgId','dirListingName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsVoipCharacteristicsE911Detail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerordernumber = customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          dirListingName,",
						"          dirListingAdditionalDetails,",
						"          dirListingDesignation,",
						"          dirListingAddress,",
						"          dirListingListingType,",
						"          dirListingListingCategory,",
						"          dirListingListBy,",
						"          releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator,",
						"          dirListingParentComponentCode,",
						"          dirListingTitle2,",
						"          dirListingSubscriberName",
						"     )) ~> oceOrderLosgsVoipCharacteristicsDirListing",
						"alterWirlessChar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          accountConversionStatus as string,",
						"          activationDate as timestamp,",
						"          availabilityDate as timestamp,",
						"          billingSystemId as string,",
						"          calculateTaxIndicator as string,",
						"          coPayDataAddendDateAndTime as timestamp,",
						"          coPayDataAddendVersion as string,",
						"          coPayDataAllowanceAmount as double,",
						"          coPayDataCancelCTN as string,",
						"          coPayDataEnrollingCTN as string,",
						"          coPayDataReceivingBAN as string,",
						"          coPayDataReceivingFAN as string,",
						"          cCarDetailMake as string,",
						"          cCarDetailModel as string,",
						"          cCarDetailTrim as string,",
						"          cCarDetailVehicleManufacturer as string,",
						"          cCarVin as string,",
						"          cCarYear as string,",
						"          crossUpgradeIndicator as string,",
						"          curbsideDelivery as string,",
						"          inventoryStoreId as string,",
						"          manageCallListaction as string,",
						"          manageCallListCompAListName as string,",
						"          manageCallListcompCTNList as string,",
						"          manageCallListcontactCTN as string,",
						"          manageCallListId as string,",
						"          manageCallListOverrideInd as string,",
						"          mobileNumber as string,",
						"          paymentId as string,",
						"          preOrderIndicator as string,",
						"          primarySharedPlanIndicator as string,",
						"          shippedHotIndicator as string,",
						"          shoppingZipCode as string,",
						"          splitLiabilityDataAddendDateAndTime as timestamp,",
						"          splitLiabilityDataAddendVersion as string,",
						"          splitLiabilityDataCancelCTN as string,",
						"          splitLiabilityDataEnrollingCTN as string,",
						"          splitLiabilityDataOneTimeChargeInd as string,",
						"          splitLiabilityDataValueIndicator as string,",
						"          splitLiabilityDataTargetBAN as string,",
						"          splitLiabilityDataTargetFAN as string,",
						"          splitLiabilityDataTelecomManagerEmail as string,",
						"          storeId as string,",
						"          subscriberCrossmarketIndicator as string,",
						"          subscriptionClass as string,",
						"          tradeInQuoteId as string,",
						"          upgradeDetailRelatedMobNumber as string,",
						"          upgradeDetailRelationship as string,",
						"          ModifiedDate as timestamp,",
						"          networkFulfillmentDate as timestamp,",
						"          subscriberNumberStatus as string,",
						"          subscriberId as string,",
						"          preferredCTNZipCode as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsWirelessCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          accountConversionStatus = accountConversion,",
						"          activationDate,",
						"          availabilityDate,",
						"          billingSystemId,",
						"          calculateTaxIndicator,",
						"          coPayDataAddendDateAndTime = addendDateAndTime,",
						"          coPayDataAddendVersion = addendVersion,",
						"          coPayDataAllowanceAmount = allowanceAmount,",
						"          coPayDataCancelCTN = cancelCTN,",
						"          coPayDataEnrollingCTN = enrollingCTN,",
						"          coPayDataReceivingBAN = receivingBAN,",
						"          coPayDataReceivingFAN = receivingFAN,",
						"          cCarDetailMake = CCar_make,",
						"          cCarDetailModel = CCar_model,",
						"          cCarDetailTrim = CCar_trim,",
						"          cCarDetailVehicleManufacturer = CCar_vehicleManufacturer,",
						"          cCarVin = CCar_vin,",
						"          cCarYear = CCar_year,",
						"          crossUpgradeIndicator,",
						"          curbsideDelivery,",
						"          inventoryStoreId,",
						"          manageCallListaction,",
						"          manageCallListCompAListName,",
						"          manageCallListcompCTNList,",
						"          manageCallListcontactCTN,",
						"          manageCallListId,",
						"          manageCallListOverrideInd,",
						"          mobileNumber,",
						"          paymentId,",
						"          preOrderIndicator,",
						"          primarySharedPlanIndicator,",
						"          shippedHotIndicator,",
						"          shoppingZipCode,",
						"          splitLiabilityDataAddendDateAndTime,",
						"          splitLiabilityDataAddendVersion,",
						"          splitLiabilityDataCancelCTN,",
						"          splitLiabilityDataEnrollingCTN,",
						"          splitLiabilityDataOneTimeChargeInd,",
						"          splitLiabilityDataValueIndicator = splitLiabilityValueIndicator,",
						"          splitLiabilityDataTargetBAN,",
						"          splitLiabilityDataTargetFAN,",
						"          splitLiabilityDataTelecomManagerEmail,",
						"          storeId,",
						"          subscriberCrossmarketIndicator,",
						"          subscriptionClass,",
						"          tradeInQuoteId,",
						"          upgradeDetailRelatedMobNumber = upgrade_relatedMobileNumber,",
						"          upgradeDetailRelationship = upgrade_relationship",
						"     )) ~> oceOrderLosgsWirelessCharacteristics",
						"alterServiceProvider sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerordernumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          name as string,",
						"          code as string,",
						"          type as string,",
						"          conversationId as string,",
						"          phoneNumber as string,",
						"          orderConfirmationId as string,",
						"          submissionStatus as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerordernumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgServiceProvider_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerordernumber = customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          name = serviceProvidername,",
						"          code = serviceProvidercode,",
						"          type = serviceProvidertype,",
						"          conversationId,",
						"          phoneNumber,",
						"          orderConfirmationId,",
						"          submissionStatus",
						"     )) ~> oceOrderLosgServiceProvider",
						"alterRowPortDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          currentServiceProviderId as string,",
						"          customerCode as string,",
						"          disconAccepted as string,",
						"          disconDevInstallAgreementType as string,",
						"          disconEConsentAgreementType as string,",
						"          disconTimestamp as timestamp,",
						"          disconVersion as string,",
						"          e911ServiceRoutingNumber as string,",
						"          lightspeedLocalRoutingNumber as string,",
						"          lastFourOfSSN as string,",
						"          localRoutingNumber as string,",
						"          name as string,",
						"          nonATTPortIn as string,",
						"          ospAccountNumber as string,",
						"          ospName as string,",
						"          pinOrPassword as string,",
						"          portEligibility as string,",
						"          portInType as string,",
						"          portTelephoneNumber as string,",
						"          portRequestNumber as string,",
						"          portStatus as string,",
						"          previousAddress as string,",
						"          shadowLocalRoutingNumber as string,",
						"          ssn as string,",
						"          taxId as string,",
						"          ModifiedDate as timestamp,",
						"          shipmentInfoUpdatedIndicator as string,",
						"          portstatusReasonCode as string,",
						"          portRequestLineStatus as string,",
						"          portstatusReasonDescription as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderLosgsPortDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          portTelephoneNumber,",
						"          currentServiceProviderId,",
						"          customerCode,",
						"          disconAccepted,",
						"          disconDevInstallAgreementType,",
						"          disconEConsentAgreementType,",
						"          disconTimestamp,",
						"          disconVersion,",
						"          e911ServiceRoutingNumber,",
						"          lightspeedLocalRoutingNumber,",
						"          localRoutingNumber,",
						"          name,",
						"          nonATTPortIn,",
						"          ospAccountNumber,",
						"          ospName,",
						"          portEligibility,",
						"          portInType,",
						"          portRequestNumber,",
						"          portStatus,",
						"          previousAddress,",
						"          shadowLocalRoutingNumber,",
						"          shipmentInfoUpdatedIndicator,",
						"          portstatusReasonCode,",
						"          portRequestLineStatus,",
						"          portstatusReasonDescription",
						"     )) ~> sinkoceOrderLosgsPortDetails",
						"alterRowv101oceOrderAcctsBillingDetailAddr sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence','id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctsBillingDetailAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          placeId,",
						"          addressId,",
						"          connectedCommunityId,",
						"          id = BillingAddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = auxillaryaddress_line1,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = dc_codingaccuracysupport,",
						"          parsedAddrAddInstructions = parsed_addInstructions,",
						"          parsedAddrAddressChanged = parsed_addressChanged,",
						"          parsedAddrAddressMatchCode = parsed_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsed_addressStreetLine,",
						"          parsedAddrAddressType = parsed_addressType,",
						"          parsedAddrApartmentUnit = parsed_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsed_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsed_assignedStreetNumber,",
						"          parsedAddrAttention = parsed_attention,",
						"          parsedAddrBuildingType = parsed_buildingType,",
						"          parsedAddrCity = parsed_city,",
						"          parsedAddrCountry = parsed_country,",
						"          parsedAddrCounty = parsed_county,",
						"          parsedAddrCountyCode = parsed_countyCode,",
						"          parsedAddrDirection = parsed_direction,",
						"          parsedAddrDirectionPrefix = parsed_directionPrefix,",
						"          parsedAddrDisconnectDate = parsed_disconnectDate,",
						"          parsedAddrExchangeCode = parsed_exchangeCode,",
						"          parsedAddrExhaustCode = parsed_exhaustCode,",
						"          parsedAddrHouseNumber = parsed_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsed_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsed_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsed_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsed_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsed_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsed_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsed_legalEntity,",
						"          parsedAddrLevel = parsed_level,",
						"          parsedAddrLevelNumber = parsed_levelNumber,",
						"          parsedAddrLinkKey = parsed_linkKey,",
						"          parsedAddrPostOfficeBox = parsed_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsed_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsed_primaryNPANXX,",
						"          parsedAddrProvince = parsed_province,",
						"          parsedAddrRateCenterCode = parsed_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsed_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsed_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsed_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsed_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsed_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsed_siteAddressId,",
						"          parsedAddrSiteId = parsed_siteId,",
						"          parsedAddrSmartMoves = parsed_smartMoves,",
						"          parsedAddrState = parsed_state,",
						"          parsedAddrStreetName = parsed_streetName,",
						"          parsedAddrStreetNameSuffix = parsed_streetNameSuffix,",
						"          parsedAddrStreetType = parsed_streetType,",
						"          parsedAddrStructure = parsed_structure,",
						"          parsedAddrStructureNumber = parsed_structureNumber,",
						"          parsedAddrTarCode = parsed_tarCode,",
						"          parsedAddrTelephoneNumber = parsed_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsed_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsed_videoHubOffice,",
						"          parsedAddrZip = parsed_zip,",
						"          parsedAddrZipCodeExtension = parsed_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsed_zipGeoCode,",
						"          unparsedAddressLine1 = unparsed_addressLine1,",
						"          unparsedAddressLine3 = unparsed_addressLine3,",
						"          unparsedAddrAttention = unparsed_attention,",
						"          unparsedAddrElevation = unparsed_elevation,",
						"          unparsedAddrPostOfficeBox = unparsed_postOfficeBox,",
						"          unparsedAddrProvince = unparsed_province,",
						"          unparsedAddrRuralRoute = unparsed_ruralRoute,",
						"          unparsedAddrStructure = unparsed_structure,",
						"          unparsedAddrUnit = unparsed_unit,",
						"          unparsedAddrUrbanizationCode = unparsed_urbanizationCode,",
						"          unparsedAddrCity = unparsed_city,",
						"          unparsedAddrCountry = unparsed_country,",
						"          unparsedAddrState = unparsed_state,",
						"          unparsedAddrZip = unparsed_zip,",
						"          unparsedAddrZipCodeExtension = unparsed_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsed_internationalZip,",
						"          unparsedAddressLine2 = unparsed_addressLine2,",
						"          additionalDetails = stringify_additionaldetails,",
						"          acctSequence = sequence,",
						"          codingAccuracySupportSystemAddress = dc_codingaccuracysupport,",
						"          unparsedAddrCounty = unparsed_county",
						"     )) ~> sinkoceOrderAcctsBillingDetailAddr",
						"AlterRowOrderAccountsServiceAddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','id','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctServiceAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          addressId = addressid,",
						"          id = ServiceAddress_id,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = line1,",
						"          dwellingType,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = dc_addressLines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUnit = unparsedAddr_unit,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          additionalDetails = json_additionalDetails,",
						"          placeId,",
						"          connectedCommunityId,",
						"          acctSequence = acct_sequence,",
						"          unparsedAddrCounty",
						"     )) ~> sinkorderaccountsserviceaddress",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','id','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctBussinessAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          addressId,",
						"          id = BusinessAddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = auxillaryaddress_line1,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = dc_addresslines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUnit = unparsedAddr_unit,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          placeId,",
						"          connectedCommunityId,",
						"          acctSequence = acct_sequence,",
						"          unparsedAddrCounty,",
						"          additionalDetails = json_additionaldetails",
						"     )) ~> sinkorderaccountsbusinessaddress",
						"alterCompensation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          repId as string,",
						"          repAction as string,",
						"          dealerCode as string,",
						"          salesCode as string,",
						"          type as string,",
						"          submittedBy as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','repId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderLosgsCompensation_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          repId,",
						"          repAction,",
						"          dealerCode,",
						"          salesCode,",
						"          type,",
						"          submittedBy",
						"     )) ~> oceOrderLosgsCompensation",
						"alteradditonalDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          code as string,",
						"          value as string,",
						"          parentType as string,",
						"          type as string,",
						"          sequence as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','code','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsAdditionDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          code,",
						"          value,",
						"          parentType,",
						"          type,",
						"          sequence",
						"     )) ~> oceOrderLosgsAdditionDetails",
						"alterRowlosginternetchar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          categoryType as string,",
						"          discountedInternetIndicator as string,",
						"          discountedInternetAdditionalAllowance as string,",
						"          gatewayCTN as string,",
						"          gatewayCTNStatus as string,",
						"          internetProgramType as string,",
						"          internetProtocolDigitalSubscriberLineAccess as string,",
						"          internetNetworkProvider as string,",
						"          parentComponentCode as string,",
						"          retainedServiceProcessIndicator as string,",
						"          serviceId as string,",
						"          serviceType as string,",
						"          totalAllowance as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          primaryNetworkType as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsinternetCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          categoryType,",
						"          discountedInternetIndicator,",
						"          discountedInternetAdditionalAllowance,",
						"          gatewayCTN,",
						"          gatewayCTNStatus,",
						"          internetProgramType,",
						"          internetProtocolDigitalSubscriberLineAccess,",
						"          internetNetworkProvider,",
						"          parentComponentCode,",
						"          retainedServiceProcessIndicator,",
						"          serviceId,",
						"          serviceType,",
						"          totalAllowance,",
						"          primaryNetworkType,",
						"          additionalDetails",
						"     )) ~> oceOrderLosgsinternetCharacteristics",
						"alterRowDIrectvchar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          dealerId as string,",
						"          freeSTBReceiverCount as string,",
						"          hasMoreThanThreeFloors as string,",
						"          marketingSourceCode as string,",
						"          moveInOrder as string,",
						"          offerLanguage as string,",
						"          parentComponentCode as string,",
						"          serviceAgreement as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderLosgsDirectTVCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          dealerId,",
						"          freeSTBReceiverCount,",
						"          hasMoreThanThreeFloors,",
						"          marketingSourceCode,",
						"          moveInOrder,",
						"          offerLanguage,",
						"          parentComponentCode,",
						"          serviceAgreement",
						"     )) ~> oceOrderLosgsDirectTVCharacteristics",
						"alterRowevent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          automationUrl as string,",
						"          callBack as string,",
						"          channel as string,",
						"          eventId as string,",
						"          eventSource as string,",
						"          eventTime as timestamp,",
						"          eventType as string,",
						"          fallOut as string,",
						"          fraudResponse as string,",
						"          isSingleTopic as string,",
						"          isUpgradeOrder as string,",
						"          orderType as string,",
						"          originalVersion as string,",
						"          priority as string,",
						"          routingInfo as string,",
						"          sender as string,",
						"          traceId as string,",
						"          version as string,",
						"          eventHubAdxIngestTime as timestamp,",
						"          modifiedDate as timestamp,",
						"          eventTimeInt as string,",
						"          idbstatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101tableerror_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          automationUrl,",
						"          callBack = callback,",
						"          channel,",
						"          eventId = eventid,",
						"          eventSource,",
						"          eventTime = dc_eventTime,",
						"          eventType,",
						"          fallOut = fallout,",
						"          fraudResponse,",
						"          isSingleTopic,",
						"          isUpgradeOrder,",
						"          orderType,",
						"          originalVersion,",
						"          priority,",
						"          routingInfo,",
						"          sender,",
						"          traceId,",
						"          version,",
						"          eventHubAdxIngestTime = lastmodified_date,",
						"          eventTimeInt = eventTime,",
						"          idbstatus = idbStatus",
						"     )) ~> sinkevents",
						"AlterRowTransactionLogsHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          changedLosgReferenceId as string,",
						"          channel as string,",
						"          comments as string,",
						"          endTime as timestamp,",
						"          orderId as string,",
						"          orderStatus as string,",
						"          parentOrderId as string,",
						"          queueName as string,",
						"          recordId as string,",
						"          startTime as timestamp,",
						"          transactionId as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          updateInfos as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_transactionlogshistory_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          comments,",
						"          actionBy,",
						"          updateInfos,",
						"          channel,",
						"          orderStatus,",
						"          transactionName,",
						"          transactionType,",
						"          changedLosgReferenceId,",
						"          queueName,",
						"          parentOrderId,",
						"          startTime,",
						"          transactionId,",
						"          orderId,",
						"          recordId,",
						"          endTime,",
						"          eventTime",
						"     )) ~> sinkTransactionLosgsHistory",
						"AlterRowTransactionLosgs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgReferenceId as string,",
						"          changedLosgReferenceId as string,",
						"          orderId as string,",
						"          service as string,",
						"          serviceType as string,",
						"          status as string,",
						"          subStatus as string,",
						"          transactionId as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          wirelessNumber as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          channel as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_transactionlogs_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          orderId,",
						"          transactionId,",
						"          transactionName,",
						"          transactionType,",
						"          changedLosgReferenceId,",
						"          losgReferenceId,",
						"          service,",
						"          serviceType,",
						"          status,",
						"          subStatus,",
						"          wirelessNumber,",
						"          channel,",
						"          eventTime",
						"     )) ~> transactionloglist",
						"alterRowOrderAccountsCreditCheck sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          addAccountGUId as string,",
						"          applicationApprovalDate as string,",
						"          applicationExpiresDate as string,",
						"          creditBand as string,",
						"          creditCheckManagementTransactionId as string,",
						"          creditCheckRanIndicator as string,",
						"          creditClass as string,",
						"          creditInquiryOpen as string,",
						"          creditPolicyToken as string,",
						"          creditReferenceDate as timestamp,",
						"          creditScoreResult as string,",
						"          creditStatus as string,",
						"          creditVerified as string,",
						"          currentAccountBalance as decimal(20,2),",
						"          currentDeniablePastDueAmount as decimal(20,2),",
						"          currentNonDeniablePastDueAmount as decimal(20,2),",
						"          currentNonRegulatedPastDueAmount as decimal(20,2),",
						"          currentPastDueAmount as decimal(20,2),",
						"          currentRegulatedPastDueAmount as decimal(20,2),",
						"          customerApprovalSystemTransactionId as string,",
						"          debtPaidStatus as string,",
						"          depositAmount as decimal(20,2),",
						"          depositRequired as string,",
						"          depositStatus as string,",
						"          electronicIdNumber as string,",
						"          electronicIdVerifierLaunched as string,",
						"          electronicIdVerifierRequired as string,",
						"          electronicIdVerifierResults as string,",
						"          exchangeListFound as string,",
						"          expressPayDetailHeld as string,",
						"          finalBillAccounts as string,",
						"          ignoreDeposit as string,",
						"          individualCustomerKey as string,",
						"          minimumAmountDue as decimal(20,2),",
						"          nonRefundableCreditFee as decimal(20,2),",
						"          numberApprovedLines as decimal(20,2),",
						"          numberLinesRequired as decimal(20,2),",
						"          productsInclude as string,",
						"          proprietarySegment as string,",
						"          reasonCode as string,",
						"          reasonCodeDescription as string,",
						"          safeScanAlertIndicator as string,",
						"          safeScanPassIndicator as string,",
						"          singleCreditQueryWirelessIndicator as string,",
						"          treatmentCode as string,",
						"          treatmentMessage as string,",
						"          writeOffAmount as decimal(20,2),",
						"          writeOffDate as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctsCreditCheck_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          creditClass,",
						"          addAccountGUId,",
						"          applicationApprovalDate,",
						"          applicationExpiresDate,",
						"          creditBand,",
						"          creditCheckManagementTransactionId = creditCheckMcreditCheckManagementTransactionIdanagementTransactionId,",
						"          creditCheckRanIndicator,",
						"          creditInquiryOpen,",
						"          creditPolicyToken,",
						"          creditReferenceDate,",
						"          creditScoreResult,",
						"          creditStatus,",
						"          creditVerified,",
						"          currentAccountBalance,",
						"          currentDeniablePastDueAmount,",
						"          currentNonDeniablePastDueAmount,",
						"          currentNonRegulatedPastDueAmount,",
						"          currentPastDueAmount,",
						"          currentRegulatedPastDueAmount,",
						"          customerApprovalSystemTransactionId,",
						"          debtPaidStatus,",
						"          depositAmount,",
						"          depositRequired,",
						"          depositStatus,",
						"          electronicIdNumber,",
						"          electronicIdVerifierLaunched,",
						"          electronicIdVerifierRequired,",
						"          electronicIdVerifierResults,",
						"          exchangeListFound,",
						"          expressPayDetailHeld,",
						"          finalBillAccounts,",
						"          ignoreDeposit,",
						"          individualCustomerKey,",
						"          minimumAmountDue,",
						"          nonRefundableCreditFee,",
						"          numberApprovedLines,",
						"          numberLinesRequired,",
						"          productsInclude,",
						"          proprietarySegment,",
						"          reasonCode,",
						"          reasonCodeDescription,",
						"          safeScanAlertIndicator,",
						"          safeScanPassIndicator,",
						"          singleCreditQueryWirelessIndicator,",
						"          treatmentCode,",
						"          treatmentMessage,",
						"          writeOffAmount,",
						"          writeOffDate,",
						"          finalBillAccounts",
						"     )) ~> sinkoceOrderAcctsCreditCheck",
						"alterRowautopay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountsReceivableIndicator as string,",
						"          purchaseOrderNumber as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as decimal(20,2),",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsAutopayPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = acctsequence,",
						"          accountsReceivableIndicator,",
						"          purchaseOrderNumber,",
						"          btmEquipmentType,",
						"          btmSubscriberNumber,",
						"          btmTotalAmount,",
						"          btnCustomerCode,",
						"          btnPaymentAmount,",
						"          btnTn,",
						"          cashPaymentAmount,",
						"          cashPaymentToken,",
						"          lpmCustomerAgreementVersion,",
						"          lpmPaymentType,",
						"          lpmPaymentTypeName,",
						"          lpmReferenceNumber,",
						"          lpmTotalAmount = ipmTotalAmount,",
						"          paymentTokenOnlyAmount,",
						"          paymentTokenOnlyToken,",
						"          storeLast4Digits,",
						"          storePaymentAmount,",
						"          storeProfileOwnerId",
						"     )) ~> oceOrderAcctsAutopayPaymentMethod",
						"alterRowautoepay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          achAccountHolderName as string,",
						"          achAccountNumber as string,",
						"          achAccountNumberLast4Digits as string,",
						"          achAccountType as string,",
						"          achRoutingNumber as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          cardBillingZipCode as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          ccCreditCardNumber as string,",
						"          ccExpirationYearMonth as string,",
						"          creditCardLast4Digits as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as decimal(20,2),",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          last4Digits as string,",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp,",
						"          paymentMethodId as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsAutoPayEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = accsequence,",
						"          achAccountHolderName,",
						"          achAccountType,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          cardCryptogram,",
						"          ccCardNotValidatedIndicator,",
						"          ccCreditCardHolderName,",
						"          creditCardType,",
						"          customerAgreementVersion,",
						"          giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber,",
						"          paymentConfirmationDetailaymentHandle = paymentConfirmationDetailPaymentHandle,",
						"          paymentConfirmationDetailReferenceNumber,",
						"          paymentConfirmationDetailTransactionId,",
						"          paymentProfileAutomationProfileName,",
						"          paymentProfileAutomationProfileOwnerId,",
						"          paymentProfileName,",
						"          paymentProfileOwnerId,",
						"          paymentProfileType,",
						"          paymentTenderConfigMerchantId,",
						"          paymentTenderConfigSourceLocation,",
						"          paymentTenderConfigSourceSystem,",
						"          paymentTenderConfigSourceUser,",
						"          paymentTokenPaymentAmount,",
						"          paymentTokenPaymentToken,",
						"          payType,",
						"          payPalEmailAddress,",
						"          payPalPayerId,",
						"          payPalPaymentMethodId,",
						"          payPalToken,",
						"          preAuthAddressVerificationSystemCode,",
						"          preAuthAuthorizationCode,",
						"          preAuthAuthorizationDate = column1preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey,",
						"          profileAction,",
						"          token,",
						"          totalAmount,",
						"          verificationIndicator,",
						"          skipAuthorization,",
						"          address,",
						"          paymentMethodId",
						"     )) ~> oceOrderAcctsAutoPayEPaymentMethod",
						"alterRowcardonfile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountsReceivableIndicator as string,",
						"          purchaseOrderNumber as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as string,",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsCardOnFilePaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          accountsReceivableIndicator,",
						"          purchaseOrderNumber,",
						"          btmEquipmentType,",
						"          btmSubscriberNumber,",
						"          btmTotalAmount,",
						"          btnCustomerCode,",
						"          btnPaymentAmount,",
						"          btnTn,",
						"          cashPaymentAmount,",
						"          cashPaymentToken,",
						"          lpmCustomerAgreementVersion = ipmCustomerAgreementVersion,",
						"          lpmPaymentType,",
						"          lpmPaymentTypeName,",
						"          lpmReferenceNumber,",
						"          lpmTotalAmount = ipmTotalAmount,",
						"          paymentTokenOnlyAmount,",
						"          paymentTokenOnlyToken,",
						"          storeLast4Digits,",
						"          storePaymentAmount,",
						"          storeProfileOwnerId",
						"     )) ~> oceOrderAcctsCardOnFilePaymentMethod",
						"alterRowcardepay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          achAccountHolderName as string,",
						"          achAccountNumber as string,",
						"          achAccountNumberLast4Digits as string,",
						"          achAccountType as string,",
						"          achRoutingNumber as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          cardBillingZipCode as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          ccCreditCardNumber as string,",
						"          ccExpirationYearMonth as string,",
						"          creditCardLast4Digits as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as decimal(20,2),",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          last4Digits as string,",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsCardOnFileEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = acctsequence,",
						"          achAccountHolderName,",
						"          achAccountType,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          cardCryptogram,",
						"          ccCardNotValidatedIndicator,",
						"          ccCreditCardHolderName,",
						"          creditCardType,",
						"          customerAgreementVersion,",
						"          giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber,",
						"          paymentConfirmationDetailaymentHandle = paymentConfirmationDetailPaymentHandle,",
						"          paymentConfirmationDetailReferenceNumber,",
						"          paymentConfirmationDetailTransactionId,",
						"          paymentProfileAutomationProfileName,",
						"          paymentProfileAutomationProfileOwnerId,",
						"          paymentProfileName,",
						"          paymentProfileOwnerId,",
						"          paymentProfileType,",
						"          paymentTenderConfigMerchantId,",
						"          paymentTenderConfigSourceLocation,",
						"          paymentTenderConfigSourceSystem,",
						"          paymentTenderConfigSourceUser,",
						"          paymentTokenPaymentAmount,",
						"          paymentTokenPaymentToken,",
						"          payType,",
						"          payPalEmailAddress,",
						"          payPalPayerId,",
						"          payPalPaymentMethodId,",
						"          payPalToken,",
						"          preAuthAddressVerificationSystemCode,",
						"          preAuthAuthorizationCode,",
						"          preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey,",
						"          profileAction,",
						"          token,",
						"          totalAmount,",
						"          verificationIndicator,",
						"          skipAuthorization,",
						"          address",
						"     )) ~> oceOrderAcctsCardOnFileEPaymentMethod",
						"alterRownego sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          conflictCustomerType as string,",
						"          conflictLandlordDetailApprovalDate as timestamp,",
						"          conflictLandlordDetailCompanyName as string,",
						"          conflictLandlordDetailEmail as string,",
						"          conflictLandlordDetailFirstName as string,",
						"          conflictLandlordDetailLandlordApproval as string,",
						"          conflictLandlordDetailLastName as string,",
						"          conflictLandlordDetailPhoneNumber as string,",
						"          conflictLandlordDetailPhoneNumberType as string,",
						"          existingCustomerDetailBillingAccountNumber as string,",
						"          existingCustomerDetailBillingTelephoneNumber as string,",
						"          existingCustomerDetailCompanyName as string,",
						"          existingCustomerDetailEmail as string,",
						"          existingCustomerDetailFirstName as string,",
						"          existingCustomerDetailLastName as string,",
						"          existingCustomerDetailPhoneNumber as string,",
						"          existingCustomerDetailPhoneNumberType as string,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsNegotiateConflictCustomer_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = acctsequence,",
						"          conflictCustomerType,",
						"          conflictLandlordDetailApprovalDate,",
						"          conflictLandlordDetailCompanyName,",
						"          conflictLandlordDetailEmail,",
						"          conflictLandlordDetailFirstName,",
						"          conflictLandlordDetailLastName,",
						"          conflictLandlordDetailPhoneNumber = phoneNumber,",
						"          conflictLandlordDetailPhoneNumberType,",
						"          conflictLandlordDetailLandlordApproval,",
						"          existingCustomerDetailBillingTelephoneNumber,",
						"          existingCustomerDetailBillingAccountNumber,",
						"          existingCustomerDetailCompanyName,",
						"          existingCustomerDetailEmail,",
						"          existingCustomerDetailFirstName,",
						"          existingCustomerDetailLastName,",
						"          existingCustomerDetailPhoneNumber,",
						"          existingCustomerDetailPhoneNumberType,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber",
						"     )) ~> oceOrderAcctsNegotiateConflictCustomer",
						"alterRowunified sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          convergeOrderIndicator as string,",
						"          convergeValidationIndicator as string,",
						"          convergedBilling as string,",
						"          premierIndicator as string,",
						"          unifiedAccountDiscount as decimal(20,2),",
						"          unifiedAccountExisting as string,",
						"          unifiedAccountPending as string,",
						"          unifiedAccountRebate as decimal(20,2),",
						"          unifiedAccountReference as string,",
						"          unifiedAccountReward as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsUnifiedAccount_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          convergeOrderIndicator,",
						"          convergeValidationIndicator,",
						"          convergedBilling,",
						"          premierIndicator,",
						"          unifiedAccountDiscount,",
						"          unifiedAccountExisting,",
						"          unifiedAccountPending,",
						"          unifiedAccountRebate,",
						"          unifiedAccountReference,",
						"          unifiedAccountReward",
						"     )) ~> oceOrderAcctsUnifiedAccount",
						"alterRowdebtaccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          debtAccountNumber as string,",
						"          accountBalance as decimal(20,2),",
						"          affiliateId as string,",
						"          customerAgreementCode as string,",
						"          disconnectDate as timestamp,",
						"          individualCustomerKey as string,",
						"          minimumAmountDue as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence','debtAccountNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsCreditCheckDebtAccounts_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          debtAccountNumber,",
						"          accountBalance,",
						"          affiliateId,",
						"          customerAgreementCode,",
						"          disconnectDate,",
						"          individualCustomerKey,",
						"          minimumAmountDue",
						"     )) ~> oceOrderAcctsCreditCheckDebtAccounts",
						"alterRowEmployeeDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          centralizedTableId as string,",
						"          class as string,",
						"          uid as string,",
						"          status as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderEmployeeDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          centralizedTableId,",
						"          class,",
						"          uid,",
						"          status",
						"     )) ~> oceOrderEmployeeDetail",
						"alterRoweReferrel sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          appId as string,",
						"          employeeUId as string,",
						"          packageId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderEmployeeReferralDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          appId,",
						"          employeeUId,",
						"          packageId",
						"     )) ~> oceOrderEmployeeReferralDetail",
						"alterRowecommerce sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          affiliateName as string,",
						"          code as string,",
						"          name as string,",
						"          email as string,",
						"          phoneNumber as string,",
						"          referredDate as timestamp,",
						"          type as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderECommercePartner_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          affiliateName,",
						"          code,",
						"          name,",
						"          email,",
						"          phoneNumber,",
						"          referredDate,",
						"          type,",
						"          additionalDetails",
						"     )) ~> oceOrderECommercePartner",
						"alterRowdelivery sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          deliveryPromiseNoteEnglish as string,",
						"          deliveryPromiseNoteSpanish as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderDeliveryPromiseNote_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          deliveryPromiseNoteEnglish,",
						"          deliveryPromiseNoteSpanish",
						"     )) ~> oceOrderDeliveryPromiseNote",
						"alterRowInte sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          ioId as string,",
						"          ioSequence as string,",
						"          category as string,",
						"          qualifyingServiceDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','ioId','ioSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderIntegratedOffers_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          ioId,",
						"          ioSequence,",
						"          category,",
						"          qualifyingServiceDetails",
						"     )) ~> oceOrderIntegratedOffers",
						"alterRowfleet sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          callBackDateTime as string,",
						"          companyCreationIndicator as string,",
						"          companyName as string,",
						"          customerAssignToId as string,",
						"          erpAccount as string,",
						"          lineCount as string,",
						"          locationCount as string,",
						"          projectBillTo as string,",
						"          projectType as string,",
						"          shippingFeeId as string,",
						"          shipToId as string,",
						"          timeZone as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderFleetDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          callBackDateTime,",
						"          customerAssignToId,",
						"          lineCount,",
						"          locationCount,",
						"          projectBillTo,",
						"          projectType,",
						"          timeZone,",
						"          companyName,",
						"          companyCreationIndicator,",
						"          erpAccount,",
						"          shipToId,",
						"          shippingFeeId",
						"     )) ~> oceOrderFleetDetail",
						"alterRowlogin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          email as string,",
						"          orderInitiator as string,",
						"          profileId as string,",
						"          userGuId as string,",
						"          userId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLoginProfile_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          email,",
						"          orderInitiator,",
						"          profileId,",
						"          userGuId,",
						"          userId",
						"     )) ~> oceOrderLoginProfile",
						"alterRowSingleDispatch sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          eligibleIndicator as string,",
						"          geoAreaAvailableIndicator as string,",
						"          satelliteTVOnlyEligibleIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSingleDispatchDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eligibleIndicator,",
						"          geoAreaAvailableIndicator,",
						"          satelliteTVOnlyEligibleIndicator",
						"     )) ~> oceOrderSingleDispatchDetail",
						"alterRowmisc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          value as string,",
						"          ModifiedDate as timestamp,",
						"          type as string,",
						"          parentType as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code','value'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderMiscellaneousDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          value,",
						"          type,",
						"          parentType",
						"     )) ~> oceOrderMiscellaneousDetails",
						"alterRowPaymentTender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          paymentTenderId as string,",
						"          paymentTenderSequence as string,",
						"          accountsReceivableIndicator as string,",
						"          additionalDetails as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          collectedInOtherSystem as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          depositOption as string,",
						"          fixedAmount as decimal(20,2),",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          purchaseOrderNumber as string,",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          selectedOptionId as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as decimal(20,2),",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','paymentTenderId','paymentTenderSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderPaymentTenders_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence,",
						"          additionalDetails,",
						"          depositOption,",
						"          fixedAmount,",
						"          selectedOptionId,",
						"          collectedInOtherSystem,",
						"          accountsReceivableIndicator,",
						"          purchaseOrderNumber,",
						"          btmEquipmentType,",
						"          btmSubscriberNumber,",
						"          btmTotalAmount,",
						"          btnCustomerCode,",
						"          btnPaymentAmount,",
						"          btnTn,",
						"          cashPaymentAmount,",
						"          cashPaymentToken,",
						"          lpmCustomerAgreementVersion,",
						"          lpmPaymentType,",
						"          lpmPaymentTypeName,",
						"          lpmReferenceNumber,",
						"          lpmTotalAmount,",
						"          paymentTokenOnlyAmount,",
						"          paymentTokenOnlyToken,",
						"          storeLast4Digits,",
						"          storePaymentAmount,",
						"          storeProfileOwnerId",
						"     )) ~> oceOrderPaymentTenders",
						"alterRowpayment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          paymentTenderId as string,",
						"          paymentTenderSequence as string,",
						"          achAccountHolderName as string,",
						"          achAccountType as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as string,",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp,",
						"          paymentMethodId as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','paymentTenderId','paymentTenderSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderPaymentTendersEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence,",
						"          achAccountHolderName,",
						"          achAccountType,",
						"          address,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          cardCryptogram,",
						"          ccCardNotValidatedIndicator,",
						"          ccCreditCardHolderName,",
						"          creditCardType,",
						"          customerAgreementVersion,",
						"          giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber,",
						"          paymentConfirmationDetailaymentHandle = paymentConfirmationDetailPaymentHandle,",
						"          paymentConfirmationDetailReferenceNumber,",
						"          paymentConfirmationDetailTransactionId,",
						"          paymentProfileAutomationProfileName,",
						"          paymentProfileAutomationProfileOwnerId,",
						"          paymentProfileName,",
						"          paymentProfileOwnerId,",
						"          paymentProfileType = ptype,",
						"          paymentTenderConfigMerchantId,",
						"          paymentTenderConfigSourceLocation,",
						"          paymentTenderConfigSourceSystem,",
						"          paymentTenderConfigSourceUser,",
						"          paymentTokenPaymentAmount,",
						"          paymentTokenPaymentToken,",
						"          payType,",
						"          payPalEmailAddress,",
						"          payPalPayerId,",
						"          payPalPaymentMethodId,",
						"          payPalToken,",
						"          preAuthAddressVerificationSystemCode,",
						"          preAuthAuthorizationCode,",
						"          preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey,",
						"          profileAction,",
						"          token,",
						"          totalAmount,",
						"          verificationIndicator,",
						"          skipAuthorization,",
						"          paymentMethodId",
						"     )) ~> oceOrderPaymentTendersEPaymentMethod",
						"alterRowshippingdetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          additiondetails as string,",
						"          billingCode as string,",
						"          carrierPreference as string,",
						"          additionalContactPhones as string,",
						"          recipientAdditionalContactPhones as string,",
						"          recipientEmailAddress as string,",
						"          recipientFirstName as string,",
						"          recipientNameId as string,",
						"          recipientLastName as string,",
						"          recipientLegalFirstName as string,",
						"          recipientLegalLastName as string,",
						"          recipientMiddleInitial as string,",
						"          recipientPreferredContactMethod as string,",
						"          recipientNamePrefix as string,",
						"          recipientPreviousLegalLastName as string,",
						"          recipientNameSuffix as string,",
						"          recipientNameTitle as string,",
						"          recipientPrimaryContactPhoneNumber as string,",
						"          recipientPrimaryContactextension as string,",
						"          recipientPrimaryContactPhoneType as string,",
						"          recipientPrimaryContactPhoneConsentDetails as string,",
						"          shipmentCommitDateFromDate as string,",
						"          shipmentCommitDateToDate as string,",
						"          shippingCode as string,",
						"          shippingMethod as string,",
						"          shippingPriceCode as string,",
						"          ModifiedDate as timestamp,",
						"          signatureRequiredIndicator as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','shippingId','shippingSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderShippingDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          billingCode,",
						"          carrierPreference,",
						"          shipmentCommitDateFromDate = fromDate,",
						"          shipmentCommitDateToDate = toDate,",
						"          shippingSequence = sequence,",
						"          shippingCode,",
						"          shippingMethod,",
						"          shippingPriceCode,",
						"          recipientAdditionalContactPhones = additionalContactPhones,",
						"          shippingId = shippingDetailsid,",
						"          recipientEmailAddress = emailAddress,",
						"          recipientFirstName = firstName,",
						"          recipientMiddleInitial = middleInitial,",
						"          recipientLastName = lastName,",
						"          recipientLegalFirstName = legalFirstName,",
						"          recipientLegalLastName = legalLastName,",
						"          recipientPreferredContactMethod = preferredContactMethod,",
						"          recipientNameSuffix = suffix,",
						"          recipientNamePrefix = prefix,",
						"          recipientNameTitle = title,",
						"          recipientNameId = id,",
						"          recipientPrimaryContactPhoneNumber,",
						"          recipientPrimaryContactPhoneType,",
						"          recipientPrimaryContactextension,",
						"          recipientPrimaryContactPhoneConsentDetails,",
						"          additionalContactPhones,",
						"          recipientPreviousLegalLastName = previousLegalLastName",
						"     )) ~> sinkshippingdetails",
						"alterRowshippingprice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseAmount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencyType as string,",
						"          installmentEligibility as string,",
						"          msrp as decimal(20,2),",
						"          taxDetail as string,",
						"          total as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','shippingId','shippingSequence','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderShippingDetailsPrice_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          shippingId = shippingDetailsid,",
						"          shippingSequence = shippingsequence,",
						"          priceType,",
						"          amount,",
						"          baseAmount,",
						"          creditFeeType,",
						"          currencyType,",
						"          installmentEligibility,",
						"          msrp,",
						"          total,",
						"          additionalDetails = str_additionalDetails,",
						"          taxDetail",
						"     )) ~> sinkShippingDetailsPrice",
						"alterRowsalesagent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          agentCode as string,",
						"          location as string,",
						"          salesCode as string,",
						"          uid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSalesAgent_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          agentCode,",
						"          location,",
						"          salesCode,",
						"          uid",
						"     )) ~> oceOrderSalesAgent",
						"derivedColumn47 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          dateTime as timestamp,",
						"          description as string,",
						"          operation as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderStatusDetailFallout_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          dateTime,",
						"          description,",
						"          operation",
						"     )) ~> oceOrderStatusDetailFallout",
						"alterRowRFallout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          dateTime as timestamp,",
						"          description as string,",
						"          Operation as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderReferenceDetailFalloutDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          dateTime,",
						"          description,",
						"          Operation = operation",
						"     )) ~> oceOrderReferenceDetailFalloutDetails",
						"alterRowshippingaddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','shippingSequence','shippingId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_sinkShippingDetailsAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          addressId,",
						"          id = shippingaddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = auxillaryaddress_line1,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = addressLines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrclli8 = paresed_clli8,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUnit = unparsedAddr_unit,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          additionalDetails = json_additionaldetails,",
						"          shippingSequence = sequence,",
						"          placeId,",
						"          connectedCommunityId,",
						"          shippingId = shippingDetailsid,",
						"          unparsedAddrCounty = unparessed_county",
						"     )) ~> sinkShippingDetailsAddr",
						"alterRowschedulingdetailflat sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          schedulingId as string,",
						"          actualScheduleEndTime as string,",
						"          actualScheduleSelectedAppointmentDate as date,",
						"          actualScheduleSelectedAppointmentTime as string,",
						"          actualScheduleStartTime as string,",
						"          actualScheduleWorkOrderId as string,",
						"          additionalDetails as string,",
						"          appointmentComment as string,",
						"          bestTimeToReach as string,",
						"          billingInstallmentsIndicator as string,",
						"          businessName as string,",
						"          confirmedScheduleEndTime as string,",
						"          confirmedScheduleSelectedAppointmentDate as date,",
						"          confirmedScheduleSelectedAppointmentTime as string,",
						"          confirmedScheduleStartTime as string,",
						"          confirmedScheduleWorkOrderId as string,",
						"          connecTechInstallationOptions as string,",
						"          dispatchType as string,",
						"          deferredInstallationDuration as string,",
						"          eventCode as string,",
						"          eventCodeEnteredManuallyIndicator as string,",
						"          installationPartnerName as string,",
						"          installationPartnerPurchaseOrderAmount as decimal(20,2),",
						"          installationPartnerPurchaseOrderDate as timestamp,",
						"          installationPartnerPurchaseOrderNumber as string,",
						"          installationPartnerProjectBilling as string,",
						"          installType as string,",
						"          landlordName as string,",
						"          landlordPermission as string,",
						"          landlordPhoneNumber as string,",
						"          nfflFulfillerName as string,",
						"          nfflFulfillerTN as string,",
						"          nfflFlag as string,",
						"          preference as string,",
						"          realTimeCalendarIndicator as string,",
						"          reservationId as string,",
						"          scheduleType as string,",
						"          scheduleASAPIndicator as string,",
						"          scheduleByDayAndTimeAnyDay as string,",
						"          scheduleByDayAndTimeMonday as string,",
						"          scheduleByDayAndTimeTuesday as string,",
						"          scheduleByDayAndTimeWednesday as string,",
						"          scheduleByDayAndTimeThursday as string,",
						"          scheduleByDayAndTimeFriday as string,",
						"          scheduleByDayAndTimeSaturday as string,",
						"          scheduleByDayAndTimeSunday as string,",
						"          serviceLevel as string,",
						"          timeZone as string,",
						"          valueSegmentationTier as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','schedulingId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSchedulingDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          serviceLevel,",
						"          timeZone,",
						"          valueSegmentationTier,",
						"          landlordName = landlordDetail_landlordName,",
						"          landlordPermission = landlordDetail_landlordPermission,",
						"          landlordPhoneNumber = landlordDetail_landlordPhoneNumber,",
						"          nfflFulfillerName = nffl_fulfillerName,",
						"          nfflFulfillerTN = nffl_ffulfillerTN,",
						"          nfflFlag = nffl_fnfflFlag,",
						"          preference,",
						"          reservationId,",
						"          scheduleType,",
						"          dispatchType,",
						"          deferredInstallationDuration,",
						"          eventCode,",
						"          eventCodeEnteredManuallyIndicator,",
						"          installationPartnerName = partnerName_installationPartner,",
						"          installationPartnerPurchaseOrderAmount = partnerName_projectPurchaseOrderAmount,",
						"          installationPartnerPurchaseOrderDate = partnerName_projectPurchaseOrderDate,",
						"          installationPartnerPurchaseOrderNumber = partnerName_projectPurchaseOrderNumber,",
						"          installationPartnerProjectBilling = partnerName_projectBilling,",
						"          appointmentComment,",
						"          bestTimeToReach,",
						"          billingInstallmentsIndicator,",
						"          businessName,",
						"          schedulingId = schedulingdetails_id,",
						"          installType,",
						"          realTimeCalendarIndicator,",
						"          scheduleASAPIndicator = scheduleAsSoonAsPossibleIndicator,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = schedulingdetails_name_id,",
						"          lastName,",
						"          primarycontactPhoneConsentDetails,",
						"          primaryContactextension,",
						"          scheduleByDayAndTimeFriday = scheduleByDayAndTime_friday,",
						"          scheduleByDayAndTimeMonday = scheduleByDayAndTime_monday,",
						"          scheduleByDayAndTimeSaturday = scheduleByDayAndTime_saturday,",
						"          scheduleByDayAndTimeSunday = scheduleByDayAndTime_sunday,",
						"          scheduleByDayAndTimeThursday = scheduleByDayAndTime_thursday,",
						"          scheduleByDayAndTimeTuesday = scheduleByDayAndTime_tuesday,",
						"          scheduleByDayAndTimeWednesday = scheduleByDayAndTime_wednesday,",
						"          actualScheduleWorkOrderId = actualSchedule_workOrderId,",
						"          actualScheduleStartTime = actualSchedule_startTime,",
						"          actualScheduleSelectedAppointmentDate = actualSchedule_selectedAppointmentDate,",
						"          actualScheduleSelectedAppointmentTime = actualSchedule_selectedAppointmentTime,",
						"          actualScheduleEndTime = actualSchedule_endTime,",
						"          confirmedScheduleWorkOrderId = confirmedSchedule_workOrderId,",
						"          confirmedScheduleStartTime = confirmedSchedule_startTime,",
						"          confirmedScheduleSelectedAppointmentDate = confirmedSchedule_selectedAppointmentDate,",
						"          confirmedScheduleSelectedAppointmentTime = confirmedSchedule_selectedAppointmentTime,",
						"          confirmedScheduleEndTime = confirmedSchedule_endTime,",
						"          additionalDetails = str_additionalDetails,",
						"          additionalContactPhones,",
						"          legalLastName,",
						"          legalFirstName,",
						"          previousLegalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          suffix,",
						"          title,",
						"          primaryContactextension,",
						"          primaryContactPhoneNumber = phoneNumber,",
						"          primaryContactPhoneType = contactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          connecTechInstallationOptions,",
						"          scheduleByDayAndTimeAnyDay = anyDayOfTheWeek",
						"     )) ~> sinkschedulingdetailsflat",
						"alterRowdslos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          additionalDetails as string,",
						"          parentComponentCode as string,",
						"          retainedServiceProcessIndicator as string,",
						"          serviceId as string,",
						"          serviceType as string,",
						"          totalAllowance as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsDSLCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          parentComponentCode,",
						"          retainedServiceProcessIndicator,",
						"          serviceId,",
						"          serviceType,",
						"          totalAllowance,",
						"          additionalDetails",
						"     )) ~> oceOrderLosgsDSLCharacteristics",
						"alterRowext sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          systemName as string,",
						"          systemOrderReference as string,",
						"          systemOrderReferenceType as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsExternalOrderReferences_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          systemName,",
						"          systemOrderReference,",
						"          systemOrderReferenceType",
						"     )) ~> oceOrderLosgsExternalOrderReferences",
						"alterRowinstall sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          question as string,",
						"          answer as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','question'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsInstallationInstructions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          question,",
						"          answer = answers",
						"     )) ~> oceOrderLosgsInstallationInstructions",
						"alterRowpromo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          id as string,",
						"          sequence as string,",
						"          additionDetails as string,",
						"          amount as double,",
						"          baseOfferId as string,",
						"          complexDiscountIndicator as string,",
						"          componentConfigurations as string,",
						"          couponCode as string,",
						"          displayLevel as string,",
						"          duration as integer,",
						"          effectiveDate as timestamp,",
						"          effectiveInDays as integer,",
						"          endDate as timestamp,",
						"          fixedAmount as double,",
						"          ioId as string,",
						"          ioSequence as string,",
						"          parentPricePlanCode as string,",
						"          payInAdvanceProdId as string,",
						"          percent as double,",
						"          promotionAppliedBy as string,",
						"          promotionBillingCode as string,",
						"          promotionCode as string,",
						"          promotionCycle as string,",
						"          promotionId as string,",
						"          promotionName as string,",
						"          promotionType as string,",
						"          unitOfMeasurement as string,",
						"          promotionTypeDetail as string,",
						"          qualifyingServiceDetails as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','id','sequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsPromotions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          id,",
						"          sequence,",
						"          additionDetails = additionalDetails,",
						"          amount,",
						"          baseOfferId,",
						"          complexDiscountIndicator,",
						"          componentConfigurations,",
						"          couponCode,",
						"          displayLevel,",
						"          duration,",
						"          effectiveDate,",
						"          effectiveInDays,",
						"          endDate,",
						"          fixedAmount,",
						"          ioId,",
						"          ioSequence,",
						"          parentPricePlanCode,",
						"          payInAdvanceProdId,",
						"          percent,",
						"          promotionAppliedBy,",
						"          promotionBillingCode,",
						"          promotionCode,",
						"          promotionCycle,",
						"          promotionId,",
						"          promotionName,",
						"          promotionType,",
						"          unitOfMeasurement,",
						"          promotionTypeDetail,",
						"          qualifyingServiceDetails",
						"     )) ~> oceOrderLosgsPromotions",
						"alterRowuse sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          ModifiedDate as timestamp,",
						"          label as string,",
						"          sequence as string,",
						"          value as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','label'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsUserDefinedLabels_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          label,",
						"          sequence,",
						"          value",
						"     )) ~> oceOrderLosgsUserDefinedLabels",
						"alterRowllpay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemId as string,",
						"          lineItemSequence as string,",
						"          paymentTenderReference as string,",
						"          amount as decimal(20,2),",
						"          currencyType as string,",
						"          numberOfInstallment as integer,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','paymentTenderReference','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsPayments_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = lineitemsequence,",
						"          paymentTenderReference,",
						"          lineItemId = LineItem_id,",
						"          amount,",
						"          currencyType,",
						"          numberOfInstallment",
						"     )) ~> oceOrderLosgsLineItemsPayments",
						"alterRowLLIhard sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          availabilityDate as timestamp,",
						"          biller as string,",
						"          byodIndicator as string,",
						"          cardSerialNumber as string,",
						"          deliveryByDateFromDate as timestamp,",
						"          deliveryByDateToDate as timestamp,",
						"          deliveryPromiseNoteEnglish as string,",
						"          deliveryPromiseNoteSpanish as string,",
						"          eid as string,",
						"          fieldId as string,",
						"          hardGoodType as string,",
						"          iccId as string,",
						"          make as string,",
						"          manufacturerCode as string,",
						"          model as string,",
						"          networkAccessDeviceType as string,",
						"          preOrderIndicator as string,",
						"          productImageUrl as string,",
						"          serialNumber as string,",
						"          shipmentCommitFromDate as timestamp,",
						"          shipmentCommitToDate as timestamp,",
						"          shippedHotIndicator as string,",
						"          whiteGloveDeliveryPartner as string,",
						"          WirelessHardGoodConnectionType as string,",
						"          WirelessHardGoodDeviceCategory as string,",
						"          WirelessHardGoodEquipmentType as string,",
						"          WirelessHardGoodEquipmentUpgrade as string,",
						"          WirelessHardGoodIMEI as string,",
						"          WirelessHardGoodIMEIType as string,",
						"          WirelessHardGoodIMSI as string,",
						"          WirelessHardGoodPhoneType as string,",
						"          WirelessHardGoodTechType as string,",
						"          WirelessHardGoodUSOC as string,",
						"          WirelessHardGoodZodiacSeqNum as string,",
						"          ModifiedDate as timestamp,",
						"          simStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemshardGood_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = lineitemidsequence,",
						"          lineItemId = LineItem_id,",
						"          availabilityDate,",
						"          biller,",
						"          byodIndicator,",
						"          cardSerialNumber,",
						"          deliveryByDateFromDate,",
						"          deliveryByDateToDate,",
						"          deliveryPromiseNoteEnglish,",
						"          deliveryPromiseNoteSpanish,",
						"          eid,",
						"          fieldId,",
						"          hardGoodType,",
						"          iccId,",
						"          make,",
						"          manufacturerCode,",
						"          model,",
						"          networkAccessDeviceType,",
						"          preOrderIndicator,",
						"          productImageUrl,",
						"          serialNumber,",
						"          shipmentCommitFromDate,",
						"          shipmentCommitToDate,",
						"          shippedHotIndicator,",
						"          whiteGloveDeliveryPartner,",
						"          WirelessHardGoodConnectionType,",
						"          WirelessHardGoodDeviceCategory,",
						"          WirelessHardGoodEquipmentType,",
						"          WirelessHardGoodEquipmentUpgrade,",
						"          WirelessHardGoodIMEI,",
						"          WirelessHardGoodIMEIType,",
						"          WirelessHardGoodIMSI,",
						"          WirelessHardGoodPhoneType,",
						"          WirelessHardGoodTechType,",
						"          WirelessHardGoodUSOC,",
						"          WirelessHardGoodZodiacSeqNum",
						"     )) ~> oceOrderLosgsLineItemshardGood",
						"alterRowsupplychain sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          availabilityDate as timestamp,",
						"          carrier as string,",
						"          claimRMANumber as string,",
						"          exchangeDocumentId as string,",
						"          exchangeOrderId as string,",
						"          orderDocumentDetailActivity as string,",
						"          orderDocumentDetailLocation as string,",
						"          orderDocumentDetailOrderId as string,",
						"          price as decimal(20,2),",
						"          quantityBackOrdered as integer,",
						"          quantityCanceled as integer,",
						"          quantityOrdered as integer,",
						"          quantityShipped as integer,",
						"          quantityToShip as integer,",
						"          shippedDate as timestamp,",
						"          trackingNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsSupplyChainDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = lineitemsequence,",
						"          lineItemId = LineItem_id,",
						"          availabilityDate,",
						"          carrier,",
						"          claimRMANumber,",
						"          exchangeDocumentId,",
						"          exchangeOrderId,",
						"          orderDocumentDetailActivity,",
						"          orderDocumentDetailLocation,",
						"          orderDocumentDetailOrderId,",
						"          price,",
						"          quantityBackOrdered,",
						"          quantityCanceled,",
						"          quantityOrdered,",
						"          quantityShipped,",
						"          quantityToShip,",
						"          shippedDate,",
						"          trackingNumber",
						"     )) ~> oceOrderLosgsLineItemsSupplyChainDetail",
						"alterRowlosgserviceaddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          Id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          modifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsServiceAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          additionalDetails,",
						"          addressId,",
						"          Id = ServiceAddress_id,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = line1,",
						"          dwellingType,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = addressLines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          placeId,",
						"          connectedCommunityId,",
						"          unparsedAddrCounty",
						"     )) ~> sinklosgserviceaddress",
						"alterRowDiLitem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsDirecTVCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup",
						"     )) ~> oceOrderLosgsLineItemsDirecTVCharacteristics",
						"alterRowvoipLLitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          callerId as string,",
						"          uverseMessaging as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsVoipCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup,",
						"          callerId,",
						"          uverseMessaging",
						"     )) ~> oceOrderLosgsLineItemsVoipCharacteristics",
						"alterRowiptv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsIptvCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup",
						"     )) ~> oceOrderLosgsLineItemsIptvCharacteristics",
						"alterRowwire sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          attDynTrafficManagerAddlDetails as string,",
						"          attDynTrafficManagerEnterpriseId as string,",
						"          attDynTrafficManagerManifestLabel as string,",
						"          attDynTrafficManagerManifestURL as string,",
						"          availabilityType as string,",
						"          distributionChannelId as string,",
						"          nciEligibleIndicator as string,",
						"          newSalesChannelId as string,",
						"          offerType as string,",
						"          packetDataProtocolAddlDetails as string,",
						"          packetDataProtocolApnName as string,",
						"          packetDataProtocol5GIndicator as string,",
						"          packetDataProtocolDefaultIndicator as string,",
						"          packetDataProtocolDefaultSNType as string,",
						"          packetDataProtocolIpAddress as string,",
						"          packetDataProtocolIpv6Address as string,",
						"          packetDataProtocolIpversionType as string,",
						"          packetDataProtocolLteIndicator as string,",
						"          packetDataProtocolOnlineChargingIndicator as string,",
						"          packetDataProtocolType as string,",
						"          partnerCode as string,",
						"          simType as string,",
						"          tradeInModelCode as string,",
						"          tradeInDetailAddlDetails as string,",
						"          tradeInDetailClaimId as string,",
						"          tradeInDetailDeviceClearingAgreement as string,",
						"          tradeInDetailDeviceCondition as string,",
						"          tradeInDetailExchangeType as string,",
						"          tradeInDetailInstallmentPlanId as string,",
						"          tradeInDetailModelCode as string,",
						"          tradeInDetailNonComplianceFee as integer,",
						"          tradeInDetailPayupAmount as integer,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsWirelessCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup,",
						"          attDynTrafficManagerAddlDetails,",
						"          attDynTrafficManagerEnterpriseId,",
						"          attDynTrafficManagerManifestLabel,",
						"          attDynTrafficManagerManifestURL,",
						"          availabilityType,",
						"          distributionChannelId,",
						"          nciEligibleIndicator,",
						"          newSalesChannelId,",
						"          offerType,",
						"          packetDataProtocolAddlDetails,",
						"          packetDataProtocolApnName,",
						"          packetDataProtocol5GIndicator,",
						"          packetDataProtocolDefaultIndicator,",
						"          packetDataProtocolDefaultSNType,",
						"          packetDataProtocolIpAddress,",
						"          packetDataProtocolIpv6Address,",
						"          packetDataProtocolIpversionType,",
						"          packetDataProtocolLteIndicator,",
						"          packetDataProtocolOnlineChargingIndicator,",
						"          packetDataProtocolType,",
						"          partnerCode,",
						"          simType,",
						"          tradeInDetailModelCode,",
						"          tradeInDetailAddlDetails,",
						"          tradeInDetailClaimId,",
						"          tradeInDetailDeviceClearingAgreement,",
						"          tradeInDetailDeviceCondition,",
						"          tradeInDetailExchangeType,",
						"          tradeInDetailInstallmentPlanId,",
						"          tradeInDetailNonComplianceFee,",
						"          tradeInDetailPayupAmount,",
						"          tradeInModelCode = tradeInDetailModelCode",
						"     )) ~> oceOrderLosgsLineItemsWirelessCharacteristics",
						"alterRowllPricelist sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          priceType as string,",
						"          priceAdditionalDetails as string,",
						"          priceAmount as integer,",
						"          priceBaseAmount as integer,",
						"          priceCreditFeeType as string,",
						"          priceCurrencyType as string,",
						"          priceInstallmentEligibility as string,",
						"          priceMsrp as integer,",
						"          priceTaxDetail as string,",
						"          priceTotal as integer,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemSequence','priceType','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsPriceList_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          priceType,",
						"          priceAdditionalDetails = additionalDetails,",
						"          priceAmount = amount,",
						"          priceBaseAmount = baseAmount,",
						"          priceCreditFeeType = creditFeeType,",
						"          priceCurrencyType = currencyType,",
						"          priceInstallmentEligibility = installmentEligibility,",
						"          priceMsrp = msrp,",
						"          priceTaxDetail = taxDetail,",
						"          priceTotal = total",
						"     )) ~> oceOrderLosgsLineItemsPriceList",
						"alterRowIIChar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          boltOnType as string,",
						"          bucketAllowance as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          ipType as string,",
						"          maxOverageCharge as integer,",
						"          overageBucketAllowance as string,",
						"          planDownloadSpeed as string,",
						"          pricePerBucketAllowance as integer,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsInternetCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup,",
						"          boltOnType,",
						"          bucketAllowance,",
						"          ipType,",
						"          maxOverageCharge,",
						"          overageBucketAllowance,",
						"          planDownloadSpeed,",
						"          pricePerBucketAllowance",
						"     )) ~> oceOrderLosgsLineItemsInternetCharacteristics",
						"alterRowlostcon sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          conflictingServiceDetailReference as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','conflictingServiceDetailReference'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsConflictingServiceDetailReferences_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          conflictingServiceDetailReference = conflictingServiceDetailReferences",
						"     )) ~> oceOrderLosgsConflictingServiceDetailReferences",
						"alterRowupgrad sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          approvalNumber as string,",
						"          contractExtended as string,",
						"          deviceType as string,",
						"          discountUOM as string,",
						"          maximumMRC as integer,",
						"          minimumCommitment as string,",
						"          minimumMRC as integer,",
						"          newAEUCheckerIndicator as string,",
						"          offerCategory as string,",
						"          policyCategory as string,",
						"          priceList as string,",
						"          qualificationLevel as string,",
						"          qualificationMessage as string,",
						"          qualificationType as string,",
						"          upgradeEligibilityDate as timestamp,",
						"          upgradeFeeWaivedIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsWirelessCharUpgradeQual_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          approvalNumber,",
						"          contractExtended,",
						"          deviceType,",
						"          discountUOM,",
						"          maximumMRC,",
						"          minimumCommitment,",
						"          minimumMRC,",
						"          newAEUCheckerIndicator,",
						"          offerCategory,",
						"          policyCategory,",
						"          priceList,",
						"          qualificationLevel,",
						"          qualificationMessage,",
						"          qualificationType,",
						"          upgradeEligibilityDate = date,",
						"          upgradeFeeWaivedIndicator",
						"     )) ~> oceOrderLosgsWirelessCharUpgradeQual",
						"alterRowlineitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          action as string,",
						"          addOnDomainName as string,",
						"          addOnDomainRegistration as string,",
						"          addOnParentItem as string,",
						"          addOnRegistrationType as string,",
						"          billingCode as string,",
						"          billingCodeType as string,",
						"          catalogProductType as string,",
						"          catalogSKUId as string,",
						"          contractAmountFinanced as decimal(20,2),",
						"          contractAnnualPercentageRate as decimal(20,2),",
						"          contractBalancedAmount as decimal(20,2),",
						"          contractDisplayName as string,",
						"          contractSent as string,",
						"          contractSystem as string,",
						"          contractType as string,",
						"          contractDownPayment as decimal(20,2),",
						"          contractDownPaymentPercent as decimal(20,2),",
						"          contractFinanceCharge as decimal(20,2),",
						"          contractInstallmentAmount as decimal(20,2),",
						"          contractInstallmentPlanDef as string,",
						"          contractInstallmentPlanId as string,",
						"          contractInstallmentStatus as string,",
						"          contractInstallmentType as string,",
						"          contractPrepaidFinanceCharge as string,",
						"          contractPayupAmount as decimal(20,2),",
						"          contractPayoffAmount as decimal(20,2),",
						"          contractTotalSalePrice as decimal(20,2),",
						"          contractlength as integer,",
						"          curbsideDelivery as string,",
						"          description as string,",
						"          displayName as string,",
						"          effectiveDate as timestamp,",
						"          feeId as string,",
						"          feeIdType as string,",
						"          feeWaivedIndicator as string,",
						"          feeWaivedReason as string,",
						"          fulfillmentLocation as string,",
						"          groupOptionId as string,",
						"          inventoryStoreId as string,",
						"          itemFulfillmentMethod as string,",
						"          locationId as string,",
						"          notes as string,",
						"          operation as string,",
						"          preOwnedIndicator as string,",
						"          priceAdditionalDetails as string,",
						"          priceAmount as decimal(20,2),",
						"          priceBaseAmount as decimal(20,2),",
						"          priceCreditFeeType as string,",
						"          priceCurrencyType as string,",
						"          priceInstallmentEligibility as string,",
						"          priceMsrp as decimal(20,2),",
						"          priceType as string,",
						"          priceTaxDetail as string,",
						"          priceTotal as decimal(20,2),",
						"          productCode as string,",
						"          productGroupReferences as string,",
						"          productSKU as string,",
						"          productSubType as string,",
						"          productType as string,",
						"          promotionReferences as string,",
						"          purchaseTransactionId as string,",
						"          quantity as integer,",
						"          shippingDetailReference as string,",
						"          socForPreviousDevice as string,",
						"          status as string,",
						"          storeId as string,",
						"          subscriptionId as string,",
						"          systemName as string,",
						"          taxableIndicator as string,",
						"          tier as string,",
						"          ModifiedDate as timestamp,",
						"          productInventoryStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItems_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          action,",
						"          addOnDomainName,",
						"          addOnDomainRegistration,",
						"          addOnParentItem,",
						"          addOnRegistrationType,",
						"          billingCode,",
						"          billingCodeType,",
						"          catalogProductType,",
						"          catalogSKUId,",
						"          contractAmountFinanced,",
						"          contractAnnualPercentageRate,",
						"          contractBalancedAmount,",
						"          contractDisplayName,",
						"          contractSent,",
						"          contractSystem,",
						"          contractType,",
						"          contractDownPayment,",
						"          contractDownPaymentPercent,",
						"          contractFinanceCharge,",
						"          contractInstallmentAmount,",
						"          contractInstallmentPlanDef,",
						"          contractInstallmentPlanId,",
						"          contractInstallmentStatus,",
						"          contractInstallmentType,",
						"          contractPrepaidFinanceCharge,",
						"          contractPayupAmount,",
						"          contractPayoffAmount,",
						"          contractTotalSalePrice,",
						"          contractlength = contractLength,",
						"          curbsideDelivery,",
						"          description,",
						"          displayName,",
						"          effectiveDate,",
						"          feeId,",
						"          feeIdType,",
						"          feeWaivedIndicator,",
						"          feeWaivedReason,",
						"          fulfillmentLocation,",
						"          groupOptionId,",
						"          inventoryStoreId,",
						"          itemFulfillmentMethod,",
						"          locationId,",
						"          notes,",
						"          operation,",
						"          preOwnedIndicator,",
						"          priceAdditionalDetails,",
						"          priceAmount,",
						"          priceBaseAmount,",
						"          priceCreditFeeType,",
						"          priceCurrencyType,",
						"          priceInstallmentEligibility,",
						"          priceMsrp,",
						"          priceType,",
						"          priceTaxDetail,",
						"          priceTotal,",
						"          productCode,",
						"          productGroupReferences,",
						"          productSKU,",
						"          productSubType,",
						"          productType,",
						"          promotionReferences,",
						"          purchaseTransactionId,",
						"          quantity,",
						"          shippingDetailReference,",
						"          socForPreviousDevice,",
						"          status,",
						"          storeId,",
						"          subscriptionId,",
						"          systemName,",
						"          taxableIndicator,",
						"          tier",
						"     )) ~> oceOrderLosgsLineItems",
						"alterRowProvisionSystem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          systemOrderReference as string,",
						"          systemName as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_acctProvisionSystem',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId,",
						"          acctSequence,",
						"          systemOrderReference,",
						"          systemName",
						"     )) ~> sinkacctProvisionSystem",
						"alterRowOrderLosgsLineItemsEventHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          lineItemId as string,",
						"          lineItemSequence as string,",
						"          status as string,",
						"          eventDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemId','lineItemSequence','status'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsEventHistory_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence,",
						"          lineItemId,",
						"          lineItemSequence,",
						"          status,",
						"          ModifiedDate,",
						"          eventDate = dc_eventtime",
						"     )) ~> sinkLosgsLineItemsEventHistory",
						"alterRowForOceOrderLosgsEventHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          status as string,",
						"          substatus as string,",
						"          eventDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','status','substatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsEventHistory_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = losg_id,",
						"          losgSequence,",
						"          status,",
						"          substatus = subStatus,",
						"          eventDate,",
						"          ModifiedDate",
						"     )) ~> sinkOceOrderLosgsEventHistory",
						"altertransactinlogs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          changedLosgReferenceId as string,",
						"          channel as string,",
						"          comments as string,",
						"          endTime as timestamp,",
						"          orderId as string,",
						"          orderStatus as string,",
						"          parentOrderId as string,",
						"          queueName as string,",
						"          recordId as string,",
						"          startTime as timestamp,",
						"          transactionId as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          updateInfos as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          losgReferenceId as string,",
						"          service as string,",
						"          serviceType as string,",
						"          LosgStatus as string,",
						"          LosgSubStatus as string,",
						"          wirelessNumber as string,",
						"          eventtimedate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','startTime','losgReferenceId','LosgStatus','LosgSubStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_transactionlosgnew',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          actionBy,",
						"          changedLosgReferenceId,",
						"          channel,",
						"          comments,",
						"          endTime,",
						"          orderId,",
						"          orderStatus,",
						"          parentOrderId,",
						"          queueName,",
						"          recordId,",
						"          startTime,",
						"          transactionId,",
						"          transactionName,",
						"          transactionType,",
						"          updateInfos,",
						"          eventTime,",
						"          losgReferenceId,",
						"          service,",
						"          serviceType,",
						"          LosgStatus = losgstatus,",
						"          LosgSubStatus = losgsubStatus,",
						"          wirelessNumber = losgwirelessNumber,",
						"          eventtimedate = lastmodified_date",
						"     )) ~> Transactionlogs",
						"AlterRowApiExecutionDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          action as string,",
						"          priority as integer,",
						"          name as string,",
						"          losgSubStatus as string,",
						"          losgStatus as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsApiExecutionDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId,",
						"          losgSequence,",
						"          action,",
						"          priority,",
						"          name,",
						"          losgSubStatus,",
						"          losgStatus",
						"     )) ~> oceOrderLosgsApiExecutionDetails",
						"AlterRowCancelDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          cancelReason as string,",
						"          insertedDate as timestamp,",
						"          ModifiedEventDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderCancelDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          cancelReason,",
						"          ModifiedEventDate = dc_eventtime",
						"     )) ~> oceOrderCancelDetails",
						"alterRowoceOrderLosgCancelDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          cancelBy as string,",
						"          cancelReason as string,",
						"          insertedDate as timestamp,",
						"          ModifiedEventDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgCancelDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber = CustomerOrderNumber,",
						"          losgId = LosgId,",
						"          losgSequence = sequence,",
						"          cancelBy,",
						"          cancelReason,",
						"          ModifiedEventDate = dc_eventtime",
						"     )) ~> oceOrderLosgCancelDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderData')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderContactDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPrice')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPriceSummaryList')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderProductGroups')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPromotions')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTermsAndConditions')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAccts')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctServFacilityQualifications')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctsBillingDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsPrice')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsPriceSummaryList')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsLineItemsAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderSourceDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderSourceDetailAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgs')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderCreditPolicy')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderDebtAccts')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderRelatedParty')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderErrors')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderMoveDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderTasks')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderReferenceDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsIptvCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsSubscriberName')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsTermsAndConditionAccepted')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsVoipCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsVoipCharacteristicsDirListing')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsWirelessCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgServiceProvider')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsNumberPortDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsBillingDetailAddr')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctServiceAddr')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctsBussinessAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsCompensation')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsinternetCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsDirectTVCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderEvents')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTransactionLogsHistory')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTransactionLosgList')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCreditCheck')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsAutopayPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsAutoPayEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCardOnFilePaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCardOnFileEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsNegotiateConflictCustomer')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsUnifiedAccount')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCreditCheckDebtAccounts')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderEmployeeDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderEmployeeReferralDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderECommercePartner')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderDeliveryPromiseNote')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderIntegratedOffers')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderFleetDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLoginProfile')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSingleDispatchDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderMiscellaneousDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderPaymentTenders')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderPaymentTendersEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetailsPrice')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSalesAgent')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderStatusDetailFallout')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderReferenceDetailFalloutDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetailsAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSchedulingDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsDSLCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsExternalOrderReferences')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsInstallationInstructions')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsPromotions')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsUserDefinedLabels')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsPayments')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemshardGood')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsSupplyChainDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsServiceAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsDirecTVCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsVoipCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsIptvCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsWirelessCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsPriceList')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsInternetCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsConflictingServiceDetailReferences')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsWirelessCharUpgradeQual')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItems')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsProvisionSystem')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsEventHistory')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsEventHistory')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTransactionlogs')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsApiExecutionDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderCancelDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsCancelDetails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V101_PROD_DF_tempdisable')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "V101_Copy_To_Azure_SQL",
								"type": "DatasetReference"
							},
							"name": "TempOrderData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "V101_oceOrderData",
								"type": "DatasetReference"
							},
							"name": "sinkOrderData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAddlDetails",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAdditionalDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderContactDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderContactDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPrice",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPriceSummaryList",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPriceSummaryList",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderProductGroups",
								"type": "DatasetReference"
							},
							"name": "sinkOrderProductGroups",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderPromotions",
								"type": "DatasetReference"
							},
							"name": "sinkOrderPromotions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTermsAndConditions",
								"type": "DatasetReference"
							},
							"name": "sinkOrderTermsandConditions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAccts",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccounts",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctServFacilityQualifications",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccountsServiceFacilityQualification",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctsBillingDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderAccountsBillingDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsPrice",
								"type": "DatasetReference"
							},
							"name": "sinkOrderLosgsPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsPriceSummaryList",
								"type": "DatasetReference"
							},
							"name": "sinkOrderLosgsPriceSummaryList",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgsLineItemsAddlDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsAddlDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderSourceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkOrderSourceDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderSourceDetailAddlDetails",
								"type": "DatasetReference"
							},
							"name": "SourceDetailAdditionalDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderLosgs",
								"type": "DatasetReference"
							},
							"name": "sinkOrderlosgs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderCreditPolicy",
								"type": "DatasetReference"
							},
							"name": "sinkcreditpolicy",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderDebtAccts",
								"type": "DatasetReference"
							},
							"name": "sinkdebtaccounts",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderErrors",
								"type": "DatasetReference"
							},
							"name": "sinkError",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderMoveDetail",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderMoveDetail",
							"description": "Export data to v101_oceOrderMoveDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderTasks",
								"type": "DatasetReference"
							},
							"name": "sinkordertask",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderReferenceDetail",
								"type": "DatasetReference"
							},
							"name": "sinkorderreferencedetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsIptvCharacteristics",
								"type": "DatasetReference"
							},
							"name": "iptvLOSCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsSubscriberName",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsSubscriberName",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsTermsAndConditionAccepted",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsTermsAndConditionAccepted",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsVoipCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsVoipCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsVoipCharacteristicsDirListing",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsVoipCharacteristicsDirListing",
							"description": "Export data to oceOrderLosgsVoipCharacteristicsDirListing",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsWirelessCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsWirelessCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsNumberPortDetail",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderLosgsPortDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsBillingDetailAddr",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderAcctsBillingDetailAddr",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctServiceAddr",
								"type": "DatasetReference"
							},
							"name": "sinkorderaccountsserviceaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderAcctsBussinessAddr",
								"type": "DatasetReference"
							},
							"name": "sinkorderaccountsbusinessaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsCompensation",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsCompensation",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsAddlDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsAdditionDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsinternetCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsinternetCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsDirectTVCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsDirectTVCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderEvents",
								"type": "DatasetReference"
							},
							"name": "sinkevents",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCreditCheck",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderAcctsCreditCheck",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsAutopayPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsAutopayPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsAutoPayEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsAutoPayEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCardOnFilePaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsCardOnFilePaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsCardOnFileEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsCardOnFileEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsNegotiateConflictCustomer",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsNegotiateConflictCustomer",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsUnifiedAccount",
								"type": "DatasetReference"
							},
							"name": "oceOrderAcctsUnifiedAccount",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderEmployeeDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderEmployeeDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderECommercePartner",
								"type": "DatasetReference"
							},
							"name": "oceOrderECommercePartner",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderIntegratedOffers",
								"type": "DatasetReference"
							},
							"name": "oceOrderIntegratedOffers",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLoginProfile",
								"type": "DatasetReference"
							},
							"name": "oceOrderLoginProfile",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSingleDispatchDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderSingleDispatchDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderPaymentTenders",
								"type": "DatasetReference"
							},
							"name": "oceOrderPaymentTenders",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderPaymentTendersEPaymentMethod",
								"type": "DatasetReference"
							},
							"name": "oceOrderPaymentTendersEPaymentMethod",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetails",
								"type": "DatasetReference"
							},
							"name": "sinkshippingdetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetailsPrice",
								"type": "DatasetReference"
							},
							"name": "sinkShippingDetailsPrice",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSalesAgent",
								"type": "DatasetReference"
							},
							"name": "oceOrderSalesAgent",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderReferenceDetailFalloutDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderReferenceDetailFalloutDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderShippingDetailsAddr",
								"type": "DatasetReference"
							},
							"name": "sinkShippingDetailsAddr",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderSchedulingDetails",
								"type": "DatasetReference"
							},
							"name": "sinkschedulingdetailsflat",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsExternalOrderReferences",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsExternalOrderReferences",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsPromotions",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsPromotions",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsUserDefinedLabels",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsUserDefinedLabels",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsPayments",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsPayments",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemshardGood",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemshardGood",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsSupplyChainDetail",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsSupplyChainDetail",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsServiceAddr",
								"type": "DatasetReference"
							},
							"name": "sinklosgserviceaddress",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsDirecTVCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsDirecTVCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsVoipCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsVoipCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsIptvCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsIptvCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsWirelessCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsWirelessCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsInternetCharacteristics",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItemsInternetCharacteristics",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsWirelessCharUpgradeQual",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsWirelessCharUpgradeQual",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItems",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsLineItems",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderAcctsProvisionSystem",
								"type": "DatasetReference"
							},
							"name": "sinkacctProvisionSystem",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsLineItemsEventHistory",
								"type": "DatasetReference"
							},
							"name": "sinkLosgsLineItemsEventHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsEventHistory",
								"type": "DatasetReference"
							},
							"name": "sinkOceOrderLosgsEventHistory",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "V101_oceOrderTransactionlogs",
								"type": "DatasetReference"
							},
							"name": "oceOrderTransactionlogs",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsApiExecutionDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgsApiExecutionDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderCancelDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderCancelDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "v101_oceOrderLosgsCancelDetails",
								"type": "DatasetReference"
							},
							"name": "oceOrderLosgCancelDetails",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "parseJsonOrderData"
						},
						{
							"name": "selectOrderData"
						},
						{
							"name": "FinalizeOrderData"
						},
						{
							"name": "ConvertDateTime"
						},
						{
							"name": "AlterRowOrderData"
						},
						{
							"name": "flattenOrderAdditionalDetail"
						},
						{
							"name": "AlterRowOrderAdditionalDetails"
						},
						{
							"name": "selectContactDetail"
						},
						{
							"name": "FinalizeContactDetail"
						},
						{
							"name": "AlterRowOrderContactDetails"
						},
						{
							"name": "flattenPriceList"
						},
						{
							"name": "AlterRowOrderPriceList"
						},
						{
							"name": "flattenProductGroups"
						},
						{
							"name": "AlterRowOrderProductGroups"
						},
						{
							"name": "flattenOrderPromotions"
						},
						{
							"name": "AlterRowOrderPromotions"
						},
						{
							"name": "selectSchedulingDetails"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "flattenTermsandConditions"
						},
						{
							"name": "ConvertTimestamp"
						},
						{
							"name": "flattenServiceFacilityQualifications"
						},
						{
							"name": "flattenBillingDetails"
						},
						{
							"name": "selectOrderAccountsBillingDetails"
						},
						{
							"name": "AlterRowOrderAccounts"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRowOrderAccountsServiceAddress"
						},
						{
							"name": "AlterRowOrderAccountsServiceFacilityQualification"
						},
						{
							"name": "AlterRowOrderAccountsBillingDetails"
						},
						{
							"name": "flattenOrderLosgs"
						},
						{
							"name": "selectOrderLosgs"
						},
						{
							"name": "flattenLosgsPrice"
						},
						{
							"name": "flattenLosgsPriceSummaryList"
						},
						{
							"name": "flattenLosgsLineItems"
						},
						{
							"name": "flattenLosgsAdditionalDetail"
						},
						{
							"name": "AlterRowOrderLosgsPrice"
						},
						{
							"name": "AlterRowOrderLosgsPriceSummaryList"
						},
						{
							"name": "AlterRowlosgsLineitemsAdditionalDetail"
						},
						{
							"name": "selectOrderSourceDetail"
						},
						{
							"name": "flattenSourceDetailAdditionalDetail"
						},
						{
							"name": "FinalizeOrderSourceDetail"
						},
						{
							"name": "AlterRowOrderSourceDetail"
						},
						{
							"name": "AlterRowOrderSourceDetailAdditionalDetail"
						},
						{
							"name": "AlterRowOrderlosgs"
						},
						{
							"name": "AlterRow4"
						},
						{
							"name": "flattenAllAccounts"
						},
						{
							"name": "selectAllAccounts"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectBusinessAddress"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "selectServiceAddress"
						},
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "window2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "window3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "window5"
						},
						{
							"name": "filter5"
						},
						{
							"name": "window8"
						},
						{
							"name": "window9"
						},
						{
							"name": "filter9"
						},
						{
							"name": "window10"
						},
						{
							"name": "filter10"
						},
						{
							"name": "filter8"
						},
						{
							"name": "window17"
						},
						{
							"name": "filter17"
						},
						{
							"name": "window18"
						},
						{
							"name": "filter18"
						},
						{
							"name": "window19"
						},
						{
							"name": "filter19"
						},
						{
							"name": "window20"
						},
						{
							"name": "filter20"
						},
						{
							"name": "window23"
						},
						{
							"name": "filter23"
						},
						{
							"name": "window24"
						},
						{
							"name": "filter24"
						},
						{
							"name": "window25"
						},
						{
							"name": "filter25"
						},
						{
							"name": "window26"
						},
						{
							"name": "filter26"
						},
						{
							"name": "window28"
						},
						{
							"name": "filter28"
						},
						{
							"name": "window29"
						},
						{
							"name": "filter29"
						},
						{
							"name": "window30"
						},
						{
							"name": "filter30"
						},
						{
							"name": "window6"
						},
						{
							"name": "filter6"
						},
						{
							"name": "selectcreditpolicy"
						},
						{
							"name": "window33"
						},
						{
							"name": "filter33"
						},
						{
							"name": "alterRowcreditpolicy"
						},
						{
							"name": "flattendebitaccounts"
						},
						{
							"name": "selectdebitaccounts"
						},
						{
							"name": "window34"
						},
						{
							"name": "filter34"
						},
						{
							"name": "alterRowdebitaccounts"
						},
						{
							"name": "selecterror"
						},
						{
							"name": "alterRowerrors"
						},
						{
							"name": "flattenerror"
						},
						{
							"name": "selectmoveorder"
						},
						{
							"name": "alterRowmoveorder"
						},
						{
							"name": "window37"
						},
						{
							"name": "filter38"
						},
						{
							"name": "selectOrderTask"
						},
						{
							"name": "flattenOrderTask"
						},
						{
							"name": "window38"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "filter39"
						},
						{
							"name": "alterRowtaskid"
						},
						{
							"name": "select5"
						},
						{
							"name": "window39"
						},
						{
							"name": "filter40"
						},
						{
							"name": "alterRowreferencedetail"
						},
						{
							"name": "filtertask"
						},
						{
							"name": "filtererror"
						},
						{
							"name": "filterorderdata"
						},
						{
							"name": "derivedColumn12"
						},
						{
							"name": "derivedColumn14"
						},
						{
							"name": "select9"
						},
						{
							"name": "derivedColumn20"
						},
						{
							"name": "derivedColumn21"
						},
						{
							"name": "derivedColumn22"
						},
						{
							"name": "derivedColumn23"
						},
						{
							"name": "select10"
						},
						{
							"name": "window40"
						},
						{
							"name": "filter41"
						},
						{
							"name": "IPtvalterrow"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "window41"
						},
						{
							"name": "filter42"
						},
						{
							"name": "AlterSubcribeName"
						},
						{
							"name": "select12"
						},
						{
							"name": "window42"
						},
						{
							"name": "filter43"
						},
						{
							"name": "select13"
						},
						{
							"name": "window43"
						},
						{
							"name": "filter44"
						},
						{
							"name": "altervoipc"
						},
						{
							"name": "select14"
						},
						{
							"name": "window44"
						},
						{
							"name": "filter45"
						},
						{
							"name": "altere11"
						},
						{
							"name": "select15"
						},
						{
							"name": "window45"
						},
						{
							"name": "filter46"
						},
						{
							"name": "alterWirlessChar"
						},
						{
							"name": "window48"
						},
						{
							"name": "filter49"
						},
						{
							"name": "alterRowOrderAccountsCreditCheck"
						},
						{
							"name": "window49"
						},
						{
							"name": "filter50"
						},
						{
							"name": "alterRowPortDetail"
						},
						{
							"name": "derivedColumn31"
						},
						{
							"name": "window50"
						},
						{
							"name": "filter51"
						},
						{
							"name": "alterRowv101oceOrderAcctsBillingDetailAddr"
						},
						{
							"name": "select18"
						},
						{
							"name": "derivedColumn33"
						},
						{
							"name": "flattencompensationrepdetail"
						},
						{
							"name": "windowCompensation"
						},
						{
							"name": "filter52"
						},
						{
							"name": "alterCompensation"
						},
						{
							"name": "flatten5"
						},
						{
							"name": "window51"
						},
						{
							"name": "filter53"
						},
						{
							"name": "alteradditonalDetails"
						},
						{
							"name": "window52"
						},
						{
							"name": "filter54"
						},
						{
							"name": "alterRowlosginternetchar"
						},
						{
							"name": "window53"
						},
						{
							"name": "filter55"
						},
						{
							"name": "alterRowDIrectvchar"
						},
						{
							"name": "select19"
						},
						{
							"name": "alterRowevent"
						},
						{
							"name": "select20"
						},
						{
							"name": "derivedColumn35"
						},
						{
							"name": "filtertransactionlogs"
						},
						{
							"name": "selectOrderTransctionLogs"
						},
						{
							"name": "flattenTransactionLosgHistory"
						},
						{
							"name": "derivedColumn36"
						},
						{
							"name": "select21"
						},
						{
							"name": "select22"
						},
						{
							"name": "alterRowtermsandconditins"
						},
						{
							"name": "MapDrifted1",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "select26"
						},
						{
							"name": "select27"
						},
						{
							"name": "select28"
						},
						{
							"name": "window54"
						},
						{
							"name": "filter56"
						},
						{
							"name": "alterRowautopay"
						},
						{
							"name": "select29"
						},
						{
							"name": "window55"
						},
						{
							"name": "filter57"
						},
						{
							"name": "alterRowautoepay"
						},
						{
							"name": "select30"
						},
						{
							"name": "window56"
						},
						{
							"name": "filter58"
						},
						{
							"name": "alterRowcardonfile"
						},
						{
							"name": "select31"
						},
						{
							"name": "window57"
						},
						{
							"name": "filter59"
						},
						{
							"name": "alterRowcardepay"
						},
						{
							"name": "select33"
						},
						{
							"name": "window58"
						},
						{
							"name": "filter60"
						},
						{
							"name": "alterRownego"
						},
						{
							"name": "select34"
						},
						{
							"name": "window59"
						},
						{
							"name": "filter61"
						},
						{
							"name": "alterRowunified"
						},
						{
							"name": "select35"
						},
						{
							"name": "window61"
						},
						{
							"name": "filter63"
						},
						{
							"name": "alterRowEmployeeDetail"
						},
						{
							"name": "derivedColumn39"
						},
						{
							"name": "select37"
						},
						{
							"name": "window63"
						},
						{
							"name": "filter65"
						},
						{
							"name": "alterRowecommerce"
						},
						{
							"name": "flatten9"
						},
						{
							"name": "flatten10"
						},
						{
							"name": "window66"
						},
						{
							"name": "filter68"
						},
						{
							"name": "alterRowInte"
						},
						{
							"name": "select41"
						},
						{
							"name": "window68"
						},
						{
							"name": "filter70"
						},
						{
							"name": "alterRowlogin"
						},
						{
							"name": "select42"
						},
						{
							"name": "window69"
						},
						{
							"name": "filter71"
						},
						{
							"name": "alterRowSingleDispatch"
						},
						{
							"name": "flatten12"
						},
						{
							"name": "select44"
						},
						{
							"name": "window71"
						},
						{
							"name": "filter73"
						},
						{
							"name": "alterRowPaymentTender"
						},
						{
							"name": "select45"
						},
						{
							"name": "window72"
						},
						{
							"name": "filter74"
						},
						{
							"name": "alterRowpayment"
						},
						{
							"name": "window73"
						},
						{
							"name": "filter75"
						},
						{
							"name": "alterRowshippingdetail"
						},
						{
							"name": "select46"
						},
						{
							"name": "window74"
						},
						{
							"name": "filter76"
						},
						{
							"name": "alterRowshippingprice"
						},
						{
							"name": "select47"
						},
						{
							"name": "window75"
						},
						{
							"name": "filter77"
						},
						{
							"name": "alterRowsalesagent"
						},
						{
							"name": "flatten14"
						},
						{
							"name": "window77"
						},
						{
							"name": "filter79"
						},
						{
							"name": "alterRowRFallout"
						},
						{
							"name": "select49"
						},
						{
							"name": "window78"
						},
						{
							"name": "filter80"
						},
						{
							"name": "alterRowshippingaddress"
						},
						{
							"name": "flatten15"
						},
						{
							"name": "window79"
						},
						{
							"name": "derivedColumn40"
						},
						{
							"name": "filter81"
						},
						{
							"name": "alterRowschedulingdetailflat"
						},
						{
							"name": "select50"
						},
						{
							"name": "flatten16"
						},
						{
							"name": "derivedColumn42"
						},
						{
							"name": "flatten18"
						},
						{
							"name": "window81"
						},
						{
							"name": "filter83"
						},
						{
							"name": "alterRowext"
						},
						{
							"name": "flatten20"
						},
						{
							"name": "window83"
						},
						{
							"name": "filter85"
						},
						{
							"name": "alterRowpromo"
						},
						{
							"name": "flatten21"
						},
						{
							"name": "window84"
						},
						{
							"name": "filter86"
						},
						{
							"name": "alterRowuse"
						},
						{
							"name": "flatten22"
						},
						{
							"name": "window85"
						},
						{
							"name": "filter87"
						},
						{
							"name": "alterRowllpay"
						},
						{
							"name": "select53"
						},
						{
							"name": "window86"
						},
						{
							"name": "filter88"
						},
						{
							"name": "alterRowLLIhard"
						},
						{
							"name": "select54"
						},
						{
							"name": "window87"
						},
						{
							"name": "filter89"
						},
						{
							"name": "alterRowsupplychain"
						},
						{
							"name": "derivedColumn43"
						},
						{
							"name": "coalacc"
						},
						{
							"name": "coallosgid",
							"description": "V101.oceOrderLosgsEventHistory"
						},
						{
							"name": "select55"
						},
						{
							"name": "window88"
						},
						{
							"name": "alterRowlosgserviceaddress"
						},
						{
							"name": "filter90"
						},
						{
							"name": "flatten23"
						},
						{
							"name": "window89"
						},
						{
							"name": "filter91"
						},
						{
							"name": "alterRowDiLitem"
						},
						{
							"name": "select56"
						},
						{
							"name": "select57"
						},
						{
							"name": "window90"
						},
						{
							"name": "filter92"
						},
						{
							"name": "alterRowvoipLLitems"
						},
						{
							"name": "select58"
						},
						{
							"name": "window91"
						},
						{
							"name": "filter93"
						},
						{
							"name": "alterRowiptv"
						},
						{
							"name": "select59"
						},
						{
							"name": "window92"
						},
						{
							"name": "filter94"
						},
						{
							"name": "alterRowwire"
						},
						{
							"name": "select60"
						},
						{
							"name": "window94"
						},
						{
							"name": "filter96"
						},
						{
							"name": "alterRowIIChar"
						},
						{
							"name": "flatten25"
						},
						{
							"name": "select62"
						},
						{
							"name": "derivedColumn44"
						},
						{
							"name": "flatten26"
						},
						{
							"name": "flatten27"
						},
						{
							"name": "flatten28"
						},
						{
							"name": "window96"
						},
						{
							"name": "filter98"
						},
						{
							"name": "alterRowupgrad"
						},
						{
							"name": "select63"
						},
						{
							"name": "window97"
						},
						{
							"name": "filter99"
						},
						{
							"name": "alterRowlineitems"
						},
						{
							"name": "derivedColumn45"
						},
						{
							"name": "derivedColumn46"
						},
						{
							"name": "derivedColumn48"
						},
						{
							"name": "derivedColumn49"
						},
						{
							"name": "derivedColumn50"
						},
						{
							"name": "derivedColumn51"
						},
						{
							"name": "derivedColumn52"
						},
						{
							"name": "flatten30"
						},
						{
							"name": "derivedColumn53"
						},
						{
							"name": "derivedColumn54"
						},
						{
							"name": "derivedColumn55"
						},
						{
							"name": "derivedColumn56"
						},
						{
							"name": "derivedColumn57"
						},
						{
							"name": "derivedColumn58"
						},
						{
							"name": "derivedColumn60"
						},
						{
							"name": "derivedColumn61"
						},
						{
							"name": "derivedColumn62"
						},
						{
							"name": "coalLLseq"
						},
						{
							"name": "derivedColumn64"
						},
						{
							"name": "derivedColumn65"
						},
						{
							"name": "select64"
						},
						{
							"name": "derivedColumn66"
						},
						{
							"name": "derivedColumn67"
						},
						{
							"name": "derivedColumn68"
						},
						{
							"name": "derivedColumn69"
						},
						{
							"name": "filtereCommercePartner"
						},
						{
							"name": "filteremployeeDetail"
						},
						{
							"name": "filterloginProfile"
						},
						{
							"name": "filterSalesAgent"
						},
						{
							"name": "filterreferenencedetail"
						},
						{
							"name": "filtercreditPolicy"
						},
						{
							"name": "filter100"
						},
						{
							"name": "filterunifiedaccount"
						},
						{
							"name": "filternegotiateCC"
						},
						{
							"name": "filtecardOnFilePaymentMethod"
						},
						{
							"name": "filtercreditCheck"
						},
						{
							"name": "filter101"
						},
						{
							"name": "filtehardGood"
						},
						{
							"name": "filter"
						},
						{
							"name": "filter102"
						},
						{
							"name": "filter103"
						},
						{
							"name": "filter104"
						},
						{
							"name": "filter105"
						},
						{
							"name": "filter107"
						},
						{
							"name": "filter108"
						},
						{
							"name": "filter110"
						},
						{
							"name": "filter111"
						},
						{
							"name": "filter112"
						},
						{
							"name": "filter113"
						},
						{
							"name": "filter114"
						},
						{
							"name": "filter115"
						},
						{
							"name": "filter116"
						},
						{
							"name": "filter117"
						},
						{
							"name": "filter118"
						},
						{
							"name": "filter119"
						},
						{
							"name": "derivedColumn70"
						},
						{
							"name": "derivedColumn71"
						},
						{
							"name": "filter120"
						},
						{
							"name": "flatten31"
						},
						{
							"name": "select65"
						},
						{
							"name": "window98"
						},
						{
							"name": "filter121"
						},
						{
							"name": "alterRowProvisionSystem"
						},
						{
							"name": "derivedColumn72"
						},
						{
							"name": "window99"
						},
						{
							"name": "filter122",
							"description": "filter"
						},
						{
							"name": "selectOceOrderLosgsEventHistory",
							"description": "Select Required Columns for oceOrderLosgsEventHistory"
						},
						{
							"name": "windowStreamBasedLosg"
						},
						{
							"name": "getLatestLosgInfoFromWindow",
							"description": "Filtering rows using expressions on columns 'prank'"
						},
						{
							"name": "alterRowForOceOrderLosgsEventHistory",
							"description": "Add expressions to alter rows"
						},
						{
							"name": "selectOceOrderLosgsLineItemsEventHistory"
						},
						{
							"name": "windowLosgsLineItemsEventHistory"
						},
						{
							"name": "filterLatestLosgsLineItemsEvent"
						},
						{
							"name": "setModifiedDateForLosgEventHistory"
						},
						{
							"name": "addModifiedDateToLosgLineItemHistory"
						},
						{
							"name": "alterRowOrderLosgsLineItemsEventHistory"
						},
						{
							"name": "filterEventsource"
						},
						{
							"name": "flatten32"
						},
						{
							"name": "derivedColumn73"
						},
						{
							"name": "window100"
						},
						{
							"name": "filter123"
						},
						{
							"name": "altertransactinlogs"
						},
						{
							"name": "flattenApiExecutionArray"
						},
						{
							"name": "windowApiExecutionDetails"
						},
						{
							"name": "filterLatestApiExecutionRecord"
						},
						{
							"name": "AlterRowApiExecutionDetails"
						},
						{
							"name": "selectOrderCancelDetails"
						},
						{
							"name": "windowOrderCancel"
						},
						{
							"name": "filterOrderCancel"
						},
						{
							"name": "AlterRowCancelDetails"
						},
						{
							"name": "filteroceOrderCancelDetails"
						},
						{
							"name": "selectoceOrderLosgCancelDetails"
						},
						{
							"name": "windowoceOrderLosgCancelDetails"
						},
						{
							"name": "filteroceOrderLosgCancelDetails"
						},
						{
							"name": "alterRowoceOrderLosgCancelDetails"
						}
					],
					"scriptLines": [
						"source(output(",
						"          orderjson_1 as string,",
						"          lastmodified_date as timestamp,",
						"          customerordernumber as string,",
						"          eventTime as long,",
						"          channel as string,",
						"          eventSource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionColumn: 'customerordernumber',",
						"     partitionBy('external', 20)) ~> TempOrderData",
						"TempOrderData parse(orderjson_1 = orderjson_1 ? (orderEvent as (eventid as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          eventTime as string,",
						"          customerOrderNumber as string,",
						"          traceId as string,",
						"          metaData as (sender as string,",
						"          channel as string,",
						"          orderType as string,",
						"          traceId as string,",
						"          isSingleTopic as string,",
						"          routingInfo as string,",
						"          automationUrl as string,",
						"          idbStatus as string,",
						"          priority as string,",
						"          customerOrderNumber as string,",
						"          version as string,",
						"          isUpgradeOrder as string,",
						"          fraudResponse as string,",
						"          originalVersion as string,",
						"          fallout as string,",
						"          callback as string),",
						"          dataMap as (traceId as string),",
						"          data as (OrderTasks as (OrderTask as (ApplicationName as string,",
						"Channel as string,",
						"CreationDate as string,",
						"CustomerOrderNumber as string,",
						"LosgIds as string,",
						"OrderNumber as string,",
						"PartnerName as string,",
						"ProgramName as string,",
						"QueueId as string,",
						"QueueName as string,",
						"QueueSlaDetails as string,",
						"TaskId as string,",
						"TaskStatus as string, CamundaTaskId as string",
						")[]),",
						"          order as (createdDate as string,",
						"          updatedDate as string,",
						"          orderId as string,",
						"          specialInstructions as string,",
						"          customerOrderNumber as string,",
						"          oceOrderNumber as string,",
						"          revisionNumber as string,",
						"          requestType as string,",
						"          submittedDate as string,",
						"          type as string,",
						"          requestId as string,",
						"          version as string,",
						"          program as string,",
						"          acceptedDate as string,",
						"          isOrderPended as string,",
						"          cancelDetails as (cancelReason as string),",
						"          losgs as (productInventoryStatus as string,cancelDetails as (cancelReason as string,cancelBy as string),actionReasonCode as string,previousProductOrderActionId as string,accountReference as string,actionReason as string,actionType as string,addpLOSCharacteristics as (acceptEULA as string,tenantAccountId as string,tenantAccountStatus as string),aPIExecutionDetails as (name as string,priority as string,action as string, loSGStatus as (subStatus as string,status as string))[],bundleGroupId as string,childOrderId as string,companyCode as string,creditPolicySecurityType as string, conflictingServiceDetailReferences as string,divisionCode as string,effectiveDate as string,engageVideoId as string,  entitlementBenefit as string,fnGuId as string,fnUserId as string,fnType as string,freeDevicePolicyId as string,fulfillerName as string,fulfillerCode as string,fwCAF2AddressIndicator as string,fwiMoveInIndicator as string, userDefinedLabels as (label as string,sequence as string,value as string)[], serviceProvider as (name as string,code as string, type as string, conversationId as string, phoneNumber as string, orderConfirmationId as string,submissionStatus as string), promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[], ",
						"installationInstructions as (answers as string,question as string)[],",
						"dslLOSCharacteristics as (additionalDetails as string, parentComponentCode as string,retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string),  lineItems as( status as string,storeId as string,subscriptionId as string,taxableIndicator as string,productInventoryStatus as string,tier as string,shippingDetailReference as string,socForPreviousDevice as string,priceList as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string, installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float)[],   internetLineItemCharacteristics as(additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, boltOnType as string,bucketAllowance as string,ipType as string, maxOverageCharge as integer, overageBucketAllowance as string, planDownloadSpeed as string, pricePerBucketAllowance as integer), voipLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, callerId as string,uverseMessaging as string),",
						"wirelessLineItemCharacteristics as (tradeInModelCode as string,additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string, attDynamicTrafficManager as (additionalDetails as string, enterpriseId as string,manifestLabel as string,manifestURL as string),availabilityType as string,distributionChannelId as string,nciEligibleIndicator as string, newSalesChannelId as string,offerType as string,packetDataProtocol as (additionalDetails as string,apnName as string,packetDataProtocol5GIndicator as string,defaultPacketDataProtocolIndicator as string,defaultSNType as string,ipAddress as string,ipv6Address as string,ipversionType as string,ltePacketDataProtocolIndicator as string,onlineChargingSystemIndicator as string,packetDataProtocolType as string), partnerCode as string,simType as string, tradeInDetail as(additionalDetails as string,claimId as string,deviceClearingAgreement as string,deviceCondition as string,exchangeType as string,installmentPlanId as string,modelCode as string,nonComplianceFee as float, payupAmount as float)), iptvLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), direcTVLineItemCharacteristics as (additionalDetails as string,componentConfigurations as string,ignorePricePlanCode as string,productSpecificationId as string,requestComponentGroup as string), payments as (amount as float,currencyType as string, numberOfInstallment as integer, paymentTenderReference as string)[], action as string,addOnSolutionCharacteristics as (domainName as string,domainRegistration as string,parentItem as string,registrationType as string),billingCode as string,billingCodeType as string,catalogProductType as string,catalogSKUId as string, contractDetails as (amountFinanced as float,annualPercentageRate as float,balancedAmount as float,contractDisplayName as string,contractLength as integer,contractSent as string,contractSystem as string,contractType as string,downPayment as float,downPaymentPercent as float,financeCharge as float,installmentAmount as float,installmentPlanDefinition as string,installmentPlanId as string,installmentStatus as string,installmentType as string,prepaidFinanceCharge as string,payupAmount as float,payoffAmount as float,totalSalePrice as float),curbsideDelivery as string,displayName as string,  description as string,  effectiveDate as string,fees as (feeId as string,feeIdType as string,waivedIndicator as string,waivedReason as string),fulfillmentLocation as string,groupOptionId as string,inventoryStoreId as string,itemFulfillmentMethod as string,locationId as string,notes as string,operation as string,preOwnedIndicator as string,purchaseTransactionId as string,quantity as integer,",
						"          ",
						"          supplyChainDetail as (availabilityDate as string, carrier as string, claimRMANumber as string, exchangeDocumentId as string, exchangeOrderId as string, orderDocumentDetail as (activity as string, location as string, orderId as string), price as float, quantityBackOrdered as integer, quantityCanceled as integer, quantityOrdered as integer, quantityShipped as integer, quantityToShip as integer, shippedDate as string, trackingNumber as string),                                      id as string,                                                                             productCode as string,                                         productSKU as string,                                         productType as string,productSubType as string,                                                                          sequence as string,                                         systemName as string,                                      ",
						"          hardGood as(availabilityDate as string, biller as string, byodIndicator as string,simStatus as string, cardSerialNumber as string, deliveryByDate as(fromDate as string,toDate as string), deliveryPromiseNote as (english as string,spanish as string), eid as string,fieldId as string, hardGoodType as string,iccId as string, make as string, manufacturerCode as string, model as string, networkAccessDeviceType as string, preOrderIndicator as string, productImageUrl as string, serialNumber as string, shipmentCommitDate as (fromDate as string,toDate as string), shippedHotIndicator as string, whiteGloveDeliveryPartner as string, wirelessHardGoodCharacteristics as (connectionType as string,deviceCategory as string, equipmentType as string, equipmentUpgrade as string, imei as string, imeiType as string, internationalMobileSubscriberIdentity as string,phoneType as string, techType as string, usoc as string, zodiacSequenceNumber as string)),                                         additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],                                     price as(additionalDetails as string,amount as float, baseAmount as float,creditFeeType as string, currencyType as string,installmentEligibility as string,msrp as float,priceType as string,total as float,taxDetail as string),productGroupReferences as string,                                         promotionReferences as string)[],                               price as(additionalDetails as string, creditFeeType as string ,installmentEligibility as string, msrp as string, taxDetail as string, amount as float,                                         baseAmount as float,                                         currencyType as string,                                         priceType as string,                                         total as float)[],                               priceSummaryList as(amount as float,                                                   currencyType as string,                                                   priceType as string,                                                   total as float,                                                   taxSummary as string)[],                               ",
						"          ",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as( addressTimeZone as string,rateZone as string,addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as (type as string, value as string),urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"          ",
						"          ",
						"          ,                                ",
						"          ",
						"          losgStatus as(status as string, subStatus as string, fallout as string),  internetLOSCharacteristics as(additionalDetails as string,categoryType as string,discountedInternetIndicator as string, discountedInternetAdditionalAllowance as string, gatewayCTN as string, gatewayCTNStatus as string, internetProgramType as string, internetProtocolDigitalSubscriberLineAccess as string, internetNetworkProvider as string, retainedServiceProcessIndicator as string, serviceId as string, serviceType as string,totalAllowance as string,parentComponentCode as string, primaryNetworkType as string),subscriberName as (emailAddress as string,   middleInitial as string,   prefix as string,  suffix as string, title as string ,    preferredContactMethod as string, previousLegalLastName as string, legalLastName as string, legalFirstName as string,                                        firstName as string,                                                   id as string,                                                   lastName as string,   additionalContactPhones as string,     ",
						"          primaryContactPhones as( extension as string,",
						"          contactPhoneType as string,                                                                            phoneNumber as string,                                                                          ",
						"               consentDetails as string)[]),                        dealerCode as string,                               fulfillmentMethod as string,                               id as string,                               installType as string,                               losgType as string,market as string,migrationIndicator as string,migrationSource as string,name as string,notes as string,preferredAreaCode as string,priceCode as string,primaryIndicator as string, productCategory as string,productOfferingId as string,productOrderActionId as string,productOrderActionReference as string,profileCode as string,rateType as string,requestedExecutionDate as string,salesOfferId as string,                             schedulingDetailReference as string,serviceArea as string,serviceAreaName as string,subMarket as string,sunsetDate as string,transferSubscriberDetail as (fromBillingAccountNumber as string,fromFAN as string,fromMobileNumber as string), sequence as string,                               serviceQualificationReference as string,                               type as string,vendorAccountId as string,                 billingSystemId as string,      iptvLOSCharacteristics as (freeSTBReceiverCount as integer, parentComponentCode as string),voipLOSCharacteristics as (reservedTelephoneNumber as string, e911Detail as(homeAlarmSystem as string, noMatchFound as string, id as string , termsAndCondition911 as (accepted as string,agreementText as string,agreementType as string,agreementURL as string,category as string,documentName as string,id as string,orderLevelIndicator as string,tncId as string,tncKey as string,tncRecordingOff as string,version as string, timestamp as string), address as string),  directoryListing as (additionalDetails as string,designation as string, name as string, title2 as string,parentComponentCode as string,subscriberName as string, omitAddressIndicator as string, listing as (address as string,listingType as string,listingCategory as string,listBy as string,releaseDetailForBillingIndicator as string) )[]),  wirelessLOSCharacteristics as (accountConversionStatus as string, activationDate as string, availabilityDate as string, billingSystemId as string, calculateTaxIndicator as string,coPayData as (addendDateAndTime as string,addendVersion as string, allowanceAmount as float, cancelCTN as string, enrollingCTN as string,receivingBAN as string,receivingFAN as string ), connectedCarDetail as (make as string, model as string, trim as string, vin as string, year as string, vehicleManufacturer as string), crossUpgradeIndicator as string,networkFulfillmentDate as string,subscriberNumberStatus as string,subscriberId as string,preferredCTNZipCode as string, curbsideDelivery as string,inventoryStoreId as string, mobileNumber as string,paymentId as string, preOrderIndicator as string , primarySharedPlanIndicator as string,shippedHotIndicator as string, shoppingZipCode as string, storeId as string, subscriberCrossmarketIndicator as string, subscriptionClass as string , tradeInQuoteId as string, upgradeDetail as (relatedMobileNumber as string, relationship as string),upgradeQualificationDetails as (approvalNumber as string,contractExtended as string,deviceType as string,discountUOM as string,maximumMRC as integer,minimumCommitment as string,minimumMRC as integer,newAEUCheckerIndicator as string,offerCategory as string,policyCategory as string,priceList as string,qualificationLevel as string,qualificationMessage as string,qualificationType as string,upgradeEligibilityDate as string,upgradeFeeWaivedIndicator as string)[],splitLiabilityData as (addendDateAndTime as string,addendVersion as string,cancelCTN as string,enrollingCTN as string,oneTimeChargeIndicator as string,splitLiabilityValueIndicator as string,targetBAN as string,targetFAN as string,telecomManagerEmailAddress as string),manageCallList as (action as string,companyAListName as string,companyCTNList as string,contactCTN as string,id as string,overrideWithCompanyAListIndicator as string)), termsAndConditionAccepted as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncld as string, tncKey as string, tncRecordingOff as string, version as string )[], compensation as (repDetails as (dealerCode as string,repAction as string,repId as string,salesCode as string,type as string)[],submittedBy as string),additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[], ",
						"               numberPortDetail as (currentServiceProviderId as string ,customerCode as string, disconnectAcknowledged as (accepted as string,deviceInstallAgreementType as string,econsentAgreementType as string, timestamp as string,version as string),e911ServiceRoutingNumber as string,lightspeedLocalRoutingNumber as string,lastFourOfSSN as string,localExchangeRoutingGuideLocalRoutingNumber as string, name as string, nonATTPortIn as string,ospAccountNumber as string,ospName as string, pinOrPassword as string, portEligibility as string,portInType as string, portRequestNumber as string,portStatus as string,portTelephoneNumber as string,shipmentInfoUpdatedIndicator as string, portstatusReasonCode as string, portRequestLineStatus as string, portstatusReasonDescription as string   ,previousAddress as string,shadowLocalRoutingNumber as string,ssn as string,taxId as string), direcTVLOSCharacteristics as( dealerId as string,freeSTBReceiverCount as string, hasMoreThanThreeFloors as string, marketingSourceCode as string,moveInOrder as string, offerLanguage as string, parentComponentCode as string, serviceAgreement as string),",
						"               externalOrderReferences as (systemName as string,systemOrderReference as string, systemOrderReferenceType as string)[]",
						"               ",
						"               )[],",
						"          moveDetail as (additionalDetails as string,",
						"          actualDisconnectDate as string,",
						"          fromBillingAddress as string,",
						"          fromServiceAddress as string,",
						"          fromTelephoneNumber as string,",
						"          fullyAuthenticatedIndicator as string),",
						"          eCommercePartner as (additionalDetails as string,",
						"          affiliateName as string,",
						"          code as string,",
						"          name as string,",
						"          email as string,",
						"          phoneNumber as string,",
						"          referredDate as string,",
						"          type as string),",
						"          employeeDetail as (centralizedTableId as string,",
						"          class as string,",
						"          status as string,",
						"          uid as string),",
						"          deliveryPromiseNote as (english as string,",
						"          spanish as string),",
						"          integratedOffers as (category as string,ioId as string,ioSequence as string, qualifyingServiceDetails as string)[],",
						"          fleetDetail as (callBackDateTime as string,",
						"          customerAssignToId as string,",
						"          lineCount as string,",
						"          locationCount as string,",
						"          projectBillTo as string,",
						"          projectType as string,",
						"          timeZone as string,",
						"          companyName as string,",
						"          companyCreationIndicator as string,",
						"          erpAccount as string,",
						"          shipToId as string,",
						"          shippingFeeId as string),",
						"          loginProfile as (email as string,",
						"          orderInitiator as string,",
						"          profileId as string,",
						"          userGuId as string,",
						"          userId as string),",
						"          miscellaneousDetails as (code as string,parentType as string,type as string,value as string)[],",
						"          salesAgent as (agentCode as string,",
						"          location as string,",
						"          salesCode as string,",
						"          uid as string),",
						"          paymentTenders as ( paymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string,paymentMethodId as string,ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as string, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),additionalDetails as string, depositOption as string, fixedAmount as float, id as string, selectedOptionId as string,sequence as string, collectedInOtherSystem as string)[],",
						"          accounts as ( priceStrategy as (strategyName as string,strategyId as string,priceLockEndDate as string),provisioningSystems as (provisioningSystem as (systemName as string,systemOrderReference as string)[]),contractAcceptance as (acceptance as string,contractLength as string,versionNumber as string), creditAlert as (fraudAlert as string, generalMessage as string), ctnValidatedIndicator as string,customerCode as string,delinquentAccountIndicator as string, electronicLetterOfAuthorization as (electronicDisclosureAuthorization as string, internetServiceAuthorization as string,letterOfAuthorizationURL as string, localServiceAuthorization as string, localTollProviderAuthorization as string, longDistanceServiceProvider as string), emailValidatedIndicator as string, existingAutoBillStatus as string, existingAutoBillIndicator as string, landLineNumber as string, liabilityType as string, marketingSourceCode as string, mdmProfileSetting as (additionalDetails as(type as string, parentType as string, code as string, value as string, sequence as string)[],profileName as string), partnerJointBillType as string, pmoIndicator as string, priceCode as string, priceMatch as string, subMarket as string, targetCTN as string, thirdPartyCombinedBill as string, winBackIndicator as string, consentToCCIndicator as string ,bankingPartner as (customerId as string, name as string), bigData as string, billPaymentDueDate as string, cardOnFileStatus as string, conflictingServiceDetails as (accountNumber as string, btn as (customerCode as string,paymentAmount as string,tn as string), changeType as string, customerCode as string, disconnectDate as string , dslmemberDetail as (authenticatedIndicator as string ,memberId as string,reuseDSLMemberIdIndicator as string),id as string, legacyExistIndicator as string, productDetails as (action as string, packageCode as string, previousProductTransportType as string,productCode as string,productDescription as string)[], referallOfCallsIndicator as string , region as string, state as string)[], accountCrossmarketIndicator as string, acpEligibility as (acpTransactionId as string, acpClassification as string), anchorCTN as string, unifiedAccount as(convergeOrderIndicator as string, convergeValidationIndicator as string, convergedBilling as string,premierIndicator as string, unifiedAccountDiscount as string, unifiedAccountExisting as string,unifiedAccountPending as string, unifiedAccountRebate as string, unifiedAccountReference as string, unifiedAccountReward as string)     ,negotiateConflictCustomer as(conflictCustomerType as string, conflictLandlordDetail as (approvalDate as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string, phoneNumberType as string), landlordApproval as string), existingCustomerDetail as (billingTelephoneNumber as string,billingAccountNumber as string, contact as(companyName as string,email as string,firstName as string,lastName as string,phoneNumber as string,phoneNumberType as string),moveOrCeaseOrderNumber as string)),   cardOnFilePaymentMethod as ( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as string, tn as string), cash as (paymentAmount as string,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as string,paymentToken as string), store as (last4Digits as string, paymentAmount as string, profileOwnerId as string),                       ePaymentMethod as( address as string , ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),                    accountCategory as string,                          accountSubCategory as string,                          accountSubType as string,                          accountType as string,                          autoPayReason as string,                          b2bReference as string,                          billingDeliveryPreference as string,                          billingLanguagePreference as string,                          businessAccountName as string,                          cpni as string,                          ebillReason as string,                          enterpriseType as string,                          gigaPower as string,                          id as string,                          langId as string,                          market as string,                          passCode as string,                          paymentArrangement as string,                          sequence as string,                          spokenLanguagePreference as string,                         billingAccountNumber as string, billingAccountTelephoneNumber as string,   ",
						"          primaryCTN as  string,",
						"          additionalDetails as string,                       ",
						"          autopayPaymentMethod as( accountsReceivable as(purchaseOrderNumber as string,accountsReceivableIndicator as string), btm as(equipmentType as string , subscriberNumber as string, totalAmount as float), btn as(customerCode as string,paymentAmount as float, tn as string), cash as (paymentAmount as float,paymentToken as string),  lastPaymentMethod as (customerAgreementVersion as string, lpmLast4Digits as string, lpmPaymentType as string, lpmPaymentTypeName as string , lpmReferenceNumber as string, totalAmount as float), paymentTokenOnly as (paymentAmount as float,paymentToken as string), store as (last4Digits as string, paymentAmount as float, profileOwnerId as string),                       ePaymentMethod as( address as string, paymentMethodId as string,  ach as (accountHolderName as string, accountNumber as string, accountNumberLast4Digits as string, accountType as string, routingNumber as string),  bankingPartner as(customerId as string, name as string), cardCryptogram as string, cardBillingZipCode as string, cc as (cardNotValidatedIndicator as string,creditCardHolderName as string,creditCardNumber as string, expirationYearMonth as string), creditCardLast4Digits as string, creditCardType as string, customerAgreementVersion as string, giftCardIndicator as string, paymentConfirmationDetail as (batchNumber as string,paymentHandle as string,referenceNumber as string, transactionId as string), paymentProfile as(automationProfile as (name as string,ownerId as string), name as string, type as string, ownerId as string), paymentTenderConfig as (merchantId as string, sourceLocation as string, sourceSystem as string, sourceUser as string)  ,  paymentToken as (paymentAmount as float, paymentToken as string), payType as string , payPal as (emailAddress as string, payerId as string,paymentMethodId as string, token as string), preAuthDetail as (addressVerificationSystemCode as string, authorizationCode as string, authorizationDate as string, authorizationExpirationDate as string,authorizationKey as string ), profileAction as string, token as string, totalAmount as float, last4Digits as string, verificationIndicator as string, skipAuthorization as string)),",
						"          ",
						"billingDetail as(billingType as string,",
						"accountStatus as string,",
						"nextBillingCycleDate as string,                                                   ",
						"          address as(additionalDetails as  string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addressTimeZone as string,rateZone as string,addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),                                                                  unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),                                                  ",
						"authentication as(dob as string,driversLicense as (licenseExpirationDate as string,licenseNumber as string,state as string),employerDetail as (employerName as string,employerPhoneNumber as string),federalTaxId as string,gender as string,lastFourOfSSN as string,motherMaidenName as string,                                                                       ssn as string,ssnRefusedIndicator as string,stateId as (idNumber as string,state as string),                                                                       securityVerification as(                                                                           pin as string,                                                                            securityAnswer as string,                                                                            securityQuestion as string)),",
						"previousAddress as string,previousPhoneNumber as string,",
						"  name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]) )[],   ",
						"",
						"          businessAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                ",
						"          parsedAddress as(addressTimeZone as string,rateZone as string,addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),",
						"          unparsedAddress as(          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),",
						"          ",
						"          creditCheck as( writeOffDate as string, creditReferenceDate as string,currentAccountBalance as float, currentDeniablePastDueAmount as string, currentNonDeniablePastDueAmount as string,currentNonRegulatedPastDueAmount as string,currentPastDueAmount as string,currentRegulatedPastDueAmount as string, customerApprovalSystemTransactionId as string, debtPaidStatus as string, depositAmount as string, depositStatus as string, electronicIdVerifierLaunched as string, electronicIdVerifierRequired as string,  electronicIdVerifierResults as string,exchangeListFound as string,expressPayDetailHeld as string, finalBillAccounts as string, ignoreDeposit as string, minimumAmountDue as string , nonRefundableCreditFee as string, numberApprovedLines as string, numberLinesRequired as string, productsInclude as string, proprietarySegment as string, reasonCode as string, reasonCodeDescription as string, safeScanAlertIndicator as string, safeScanPassIndicator as string, writeOffAmount as string, addAccountGUId as string,applicationApprovalDate as string, applicationExpiresDate as string,creditInquiryOpen as string,creditPolicyToken as string,creditScoreResult as string, creditStatus as string,creditVerified as string, applicationNumber as string,    debtAccounts as (accountBalance as string, affiliateId as string, customerAgreementCode as string, debtAccountNumber as string, disconnectDate as string, individualCustomerKey as string, minimumAmountDue as string)[],                                creditBand as string,                                    creditCheckManagementTransactionId as string,                                    creditCheckRanIndicator as string,                                    creditClass as string,                                    depositRequired as string,                                    electronicIdNumber as string,                                    individualCustomerKey as string,                                    singleCreditQueryWirelessIndicator as string,                                    treatmentCode as string,                                    treatmentMessage as string),",
						"          ",
						"                                ",
						"",
						"          serviceAddress as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addressTimeZone as string,rateZone as string,addInstructions as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string)),   ",
						"          ",
						"          serviceFacilityQualifications as (additionalDetails as string, cpeRequiredIndicator as string, facilityCheck as string,  gfastDeviceWireType as string, potsAvailableIndicator as string,                                      dslAvailableIndicator as string,                                         frequency17MhzIndicator as string,                                         id as string,                                         preferredNetworkType as string,                                         profileCode as string,                                         vectoringIndicator as string,                                        address as string)[])[],",
						"          additionalDetails as (type as string, value as string, code as string, parentType as string, sequence as integer)[],",
						"          debtAccounts as (accountCategory as string, accountSubCategory as string, affiliateId as string,  amount    as string, debtAccountNumber    as string, debtPaidStatus    as string, id   as string, paymentMethodReference   as string, provider   as string, settledBy   as string, system   as string, systemDivision    as string)[],",
						"          employeeReferralDetail as (appId as string,",
						"          employeeUId as string,",
						"          packageId as string),",
						"          relatedParty as (endDateTime as string, id as string,role as string, startDateTime as string, type as string, name as string)[],",
						"          b2bDetail as string,",
						"          contactDetail as (additionalDetails as string,",
						"          additionalEmailRecipients as string,",
						"          authorizedContacts as string,",
						"          orderConfirmationByEmailPermissionIndicator as string,",
						"          orderPickUpCTN as string,",
						"          permissionForOutboundCallIndicator as string,",
						"          personalDetail as (additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          id as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          primaryContactPhones as (consentDetails as string,",
						"contactPhoneType as string,",
						"smsValidatedIndicator as string,",
						"extension as string,",
						"phoneNumber as string)[],",
						"          suffix as string,",
						"          title as string),",
						"          preferredContactMethod as string,",
						"          preferredTimeOfDayForContact as string,",
						"          primaryEmailAddress as string,",
						"          productUpdatesByEmailPermissionIndicator as string,",
						"          secondaryEmailAddress as string,",
						"          timeZone as string,",
						"          unpublishedContactByPhonePermissionIndicator as string),",
						"          creditPolicy as (additionalDetails as string,",
						"          creditPolicyTransactionId as string,",
						"          crsmOnFlag as string,",
						"          previousCreditPolicyTransactionId as string,",
						"          policyAcceptedIndicator as string,",
						"          uucpStatus as string),",
						"          installmentDetail as (multiIndicator as string,",
						"          numberOfInstallments as string),",
						"          priceList as (additionalDetails as string,amount as float,  baseAmount as float,    creditFeeType as string,                              currencyType as string,      installmentEligibility as string,      msrp as float,     taxDetail as string,  total as float,                priceType as string)[],",
						"          priceSummaryList as (amount as float,                                    currencyType as string,                                    priceType as string,                                    total as float,                                    taxSummary as string)[],",
						"          productGroups as (additionalDetails as string, id as string,                                         name as string,                                         sequence as integer,                                         type as string,                                         packageCharacteristics as(description as string, code as string, type as string),",
						"          discountOffer as string,  characteristics as (id as string),",
						"          sharedPlanCharacteristics as (",
						"          dataGroupId as string,",
						"familyGroupId as string,",
						"groupReferencesCode as string,",
						"planType as string,",
						"primarySubscriberNumber as string))[],",
						"          promotions as (additionalDetails as string,",
						"amount as float,",
						"baseOfferId as string,",
						"complexDiscountIndicator as string,",
						"componentConfigurations as string,",
						"couponCode as string,",
						"displayLevel as string,",
						"duration as integer,",
						"effectiveDate as string,",
						"effectiveInDays as integer,",
						"endDate as string,",
						"fixedAmount as float,",
						"id  as string,",
						"ioId as string,",
						"ioSequence as string,",
						"parentPricePlanCode as string,",
						"payInAdvanceProdId as string,",
						"percent as float,",
						"promotionAppliedBy as string,",
						"promotionBillingCode as string,",
						"promotionCode as string,",
						"promotionCycle as string,",
						"promotionId as string,",
						"promotionName as string,",
						"promotionType as string,",
						"promotionTypeDetail as string,",
						"qualifyingServiceDetails as string,",
						"sequence as string,",
						"unitOfMeasurement as string)[],",
						"          referenceDetail as (commonOrderIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          fraudDetectionDetail as (additionalDetails as (type as string, parentType as string, code as string, value as string, sequence as integer)[],",
						"          authenticationRequestId as string,",
						"          efcCallIndicator as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string),",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          falloutDetails as (code as string, dateTime as string, description as string, operation as string)[],",
						"          encryptedIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          bulkIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          associatedRequestID as string),",
						"          schedulingDetails as ( serviceLevel as string, timeZone as string, valueSegmentationTier as string,",
						"          landlordDetail as (landlordName as string,landlordPermission as string,landlordPhoneNumber as string),",
						"          nffl as (fulfillerName as string, fulfillerTN as string, nfflFlag as string), ",
						"          preference as string, reservationId as string, scheduleType as string, dispatchType as string, deferredInstallationDuration as string, eventCode as string, eventCodeEnteredManuallyIndicator as string, ",
						"          installationPartner as(partnerName as string, projectPurchaseOrderAmount as string , projectPurchaseOrderDate as string , projectPurchaseOrderNumber as string, projectBilling as string), appointmentComment as string, bestTimeToReach as string, billingInstallmentsIndicator as string, businessName as string, ",
						"          connecTechInstallationOptions as string,",
						"          additionalDetails as string,id as string,                                                   installType as string,                                                   realTimeCalendarIndicator as string,                                                   scheduleAsSoonAsPossibleIndicator as string,                                                   ",
						"          ",
						"          ",
						"           name as(emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"",
						"          scheduleByDayAndTime as (anyDayOfTheWeek as string,friday as string, monday as string, saturday as string, sunday as string, thursday as string, tuesday as string , wednesday as string),",
						"          actualSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string),",
						"          confirmedSchedule as (workOrderId as string,startTime as string,selectedAppointmentDate as string,selectedAppointmentTime as string,endTime as string))[],",
						"          shippingDetails as (",
						"          additionalDetails as (code as string,parentType as string,type as string,value as string,sequence as integer)[],",
						"               billingCode as string,carrierPreference as string,id as string,sequence as integer,",
						"               ",
						"               price as (additionalDetails as string,amount as float,baseAmount as float,creditFeeType as string,currencyType as string,installmentEligibility as string,msrp as float,priceType as string,taxDetail as string,total as float),",
						"               recipientName as (",
						"                         ",
						"                         emailAddress as string,                                                             firstName as string,                                                             id as string,middleInitial as string,                                                             lastName as string, legalFirstName as string,",
						"legalLastName as string,",
						"suffix as string,",
						"title as string,preferredContactMethod as string,prefix as string,previousLegalLastName as string,",
						"additionalContactPhones as string,                                                            primaryContactPhones as(contactPhoneType as string,                                                                            phoneNumber as string,     extension as string,                                                                        consentDetails as string)[]),",
						"                         ",
						"                         ",
						"                         ",
						"                    shipmentCommitDate as (fromDate as string,toDate as string),shippingCode as string, signatureRequiredIndicator as string,shippingMethod as string,shippingPriceCode as string,",
						"                    ",
						"               address as(additionalDetails as string,addressId as string,                                                                  id as string,                                                                  validatedIndicator as string,                                                                  auxiliaryAddress as(line1 as string,line2 as string,line3 as string,line4 as string,line5 as string),                                                                  codingAccuracySupportSystemAddress as(addressLines as string),connectedCommunityId as string,dwellingType as string,placeId as string,                                                                 parsedAddress as(addressTimeZone as string,rateZone as string,addInstructions as string,clli8 as string,addressChanged as string,addressMatchCode as string,                                                                                           addressStreetLine as string,                                                                                           addressType as string,                                                                                           apartmentUnit as string,                                                                                           apartmentUnitNumber as string,assignedStreetNumber as string,attention as string,buildingType as string,                                                                                          city as string,                                                                                           country as string,                                                                                           county as string,countyCode as string,direction as string,directionPrefix as string,disconnectDate as string,exchangeCode as string,exhaustCode as string,                                                                                           houseNumber as string,houseNumberPrefix as string,houseNumberSuffix as string,incorporatedIndicator as string,internationalZip as string,lastDisconnectedTransportType as string,lastNetworkAccessDeviceType as string,legalEntity as string,level as string,levelNumber as string,linkKey as string,postOfficeBox as string,                                                                                           primaryAddressLine as string,primaryNPANXX as string,province as string,rateCenterCode as string,rateZoneBanCode as string,rsagValidationIndicator as string,ruralRouteBoxNumber as string,ruralRouteCenterNumber as string,secondaryAddressLine as string,siteAddressId as string,siteId as string,smartMoves as string,                                                                                           state as string,                                                                                           streetName as string,streetNameSuffix as string,                                                                                           streetType as string,structure as string,structureNumber as string,tarCode as string,telephoneNumber as string,urbanizationCode as string,videoHubOffice as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string,zipGeoCode as string),   ",
						"          unparsedAddress as(",
						"          addressLine1 as string,        addressLine2 as string,addressLine3 as string,attention as string, internationalZip as string,                                                                                   city as string,                                                                                           country as string,county as string,elevation as string,postOfficeBox as string,province as string,ruralRoute as string,                                                                                           state as string,structure as string,unit as string,urbanizationCode as string,                                                                                           zip as string,                                                                                           zipCodeExtension as string))",
						"               ",
						"               ",
						"               ",
						"                    )[],",
						"          singleDispatchDetail as (eligibleIndicator as string,",
						"          geoAreaAvailableIndicator as string,",
						"          satelliteTVOnlyEligibleIndicator as string),",
						"          sourceDetail as (application as string,",
						"          expressCheckOutIndicator as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetail as (groupId as string,",
						"          groupName as string,",
						"          resourceCenterTicketNumber as string),",
						"          responseMode as string,",
						"          sequence as integer,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          region as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          zip as string,",
						"          additionalDetails as (code as string, type as string, value as string, parentType as string, sequence as integer )[]),",
						"          statusDetail as (status as string,",
						"          subStatus as string,",
						"          fallout as (code as string,",
						"          dateTime as string,",
						"          description as string,",
						"          operation as string)),",
						"          termsAndConditions as (accepted as string, agreementText as string, agreementType as string, agreementURL as string,category as string, documentName as string,id as string, orderLevelIndicator as string, timestamp as string, tncld as string, tncKey as string, tncRecordingOff as string, version as string )[]),",
						"          transactionLogs as (comments as string,",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          updateInfos as string,",
						"          channel as string,",
						"          orderStatus as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          changedLosgReferenceId as string,",
						"          recordId as string,",
						"          queueName as string,",
						"          parentOrderId as string,",
						"          startTime as string,",
						"          endTime as string,",
						"          transactionId as string,",
						"          orderId as string,",
						"          losgs as (losgReferenceId as string,                                                       service as string,                                                       serviceType as string,                                                       status as string,                                                       subStatus as string,wirelessNumber as string)[])[],",
						"          Errors as (Error as (ErrorCode as string,ErrorDescription as string , Reference as ( IdRef as string, Type as string))[])))),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseJsonOrderData",
						"derivedColumn66 select(mapColumn(",
						"          OrderData = orderjson_1.orderEvent.data.order,",
						"          customerOrderNumber = customerordernumber,",
						"          ordertask_channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          lastmodified_date,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderData",
						"derivedColumn20 select(mapColumn(",
						"          createdDate = OrderData.createdDate,",
						"          updatedDate = OrderData.updatedDate,",
						"          customerOrderNumber,",
						"          oceOrderNumber = OrderData.oceOrderNumber,",
						"          revisionNumber = OrderData.revisionNumber,",
						"          requestType = OrderData.requestType,",
						"          submittedDate = OrderData.submittedDate,",
						"          type = OrderData.type,",
						"          requestId = OrderData.requestId,",
						"          version = OrderData.version,",
						"          program = OrderData.program,",
						"          acceptedDate = OrderData.acceptedDate,",
						"          isOrderPended = OrderData.isOrderPended,",
						"          b2bDetail = OrderData.b2bDetail,",
						"          numberOfInstallments = OrderData.installmentDetail.numberOfInstallments,",
						"          status = OrderData.statusDetail.status,",
						"          subStatus = OrderData.statusDetail.subStatus,",
						"          orderId = OrderData.orderId,",
						"          ordertask_channel,",
						"          specialInstructions = OrderData.specialInstructions,",
						"          lastmodified_date,",
						"          sourcedetail_channel,",
						"          installmentMultiIndicator = OrderData.installmentDetail.multiIndicator,",
						"          dc_eventtime,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeOrderData",
						"filter30 derive(submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          channel = coalesce(ordertask_channel,sourcedetail_channel),",
						"          updatedDate = toTimestamp(toLong(toString(byName('updatedDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> ConvertDateTime",
						"ConvertDateTime alterRow(upsertIf(true())) ~> AlterRowOrderData",
						"derivedColumn20 foldDown(unroll(OrderData.additionalDetails, OrderData.additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          type = OrderData.additionalDetails.type,",
						"          parentType = OrderData.additionalDetails.parentType,",
						"          sequence = OrderData.additionalDetails.sequence,",
						"          value = OrderData.additionalDetails.value,",
						"          code = OrderData.additionalDetails.code,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderAdditionalDetail",
						"derivedColumn65 alterRow(upsertIf(true())) ~> AlterRowOrderAdditionalDetails",
						"derivedColumn20 select(mapColumn(",
						"          contactDetails = OrderData.contactDetail,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectContactDetail",
						"selectContactDetail select(mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails = contactDetails.additionalDetails,",
						"          additionalEmailRecipients = contactDetails.additionalEmailRecipients,",
						"          authorizedContacts = contactDetails.authorizedContacts,",
						"          orderConfirmationByEmailPermissionIndicator = contactDetails.orderConfirmationByEmailPermissionIndicator,",
						"          permissionForOutboundCallIndicator = contactDetails.permissionForOutboundCallIndicator,",
						"          preferredContactMethod = contactDetails.preferredContactMethod,",
						"          preferredTimeOfDayForContact = contactDetails.preferredTimeOfDayForContact,",
						"          timeZone = contactDetails.timeZone,",
						"          unpublishedContactByPhonePermissionIndicator = contactDetails.unpublishedContactByPhonePermissionIndicator,",
						"          additionalContactPhones = contactDetails.personalDetail.additionalContactPhones,",
						"          legalFirstName = contactDetails.personalDetail.legalFirstName,",
						"          lastName = contactDetails.personalDetail.lastName,",
						"          legalLastName = contactDetails.personalDetail.legalLastName,",
						"          middleInitial = contactDetails.personalDetail.middleInitial,",
						"          personaldetail_preferredContactMethod = contactDetails.personalDetail.preferredContactMethod,",
						"          primaryEmailAddress = contactDetails.primaryEmailAddress,",
						"          secondaryEmailAddress = contactDetails.secondaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator = contactDetails.productUpdatesByEmailPermissionIndicator,",
						"          emailAddress = contactDetails.personalDetail.emailAddress,",
						"          firstName = contactDetails.personalDetail.firstName,",
						"          nameid = contactDetails.personalDetail.id,",
						"          lastName = contactDetails.personalDetail.lastName,",
						"          lastmodified_date,",
						"          orderPickUpCTN = contactDetails.orderPickUpCTN,",
						"          prefix = contactDetails.personalDetail.prefix,",
						"          previousLegalLastName = contactDetails.personalDetail.previousLegalLastName,",
						"          primaryContactPhones = contactDetails.personalDetail.primaryContactPhones,",
						"          title = contactDetails.personalDetail.title,",
						"          suffix = contactDetails.personalDetail.suffix,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeContactDetail",
						"filter28 alterRow(upsertIf(true())) ~> AlterRowOrderContactDetails",
						"derivedColumn20 foldDown(unroll(OrderData.priceList, OrderData.priceList),",
						"     mapColumn(",
						"          additionalDetails = OrderData.priceList.additionalDetails,",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          amount = OrderData.priceList.amount,",
						"          baseAmount = OrderData.priceList.baseAmount,",
						"          creditFeeType = OrderData.priceList.creditFeeType,",
						"          currencyType = OrderData.priceList.currencyType,",
						"          installmentEligibility = OrderData.priceList.installmentEligibility,",
						"          msrp = OrderData.priceList.msrp,",
						"          taxDetail = OrderData.priceList.taxDetail,",
						"          total = OrderData.priceList.total,",
						"          priceType = OrderData.priceList.priceType,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenPriceList",
						"filter26 alterRow(upsertIf(true())) ~> AlterRowOrderPriceList",
						"derivedColumn20 foldDown(unroll(OrderData.productGroups, OrderData.productGroups),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Product_id = OrderData.productGroups.id,",
						"          name = OrderData.productGroups.name,",
						"          sequence = OrderData.productGroups.sequence,",
						"          ProductGrouptype = OrderData.productGroups.type,",
						"          description = OrderData.productGroups.packageCharacteristics.description,",
						"          code = OrderData.productGroups.packageCharacteristics.code,",
						"          packageCharacteristicstype = OrderData.productGroups.packageCharacteristics.type,",
						"          lastmodified_date,",
						"          discountOffer = OrderData.productGroups.discountOffer,",
						"          additionalDetails = OrderData.productGroups.additionalDetails,",
						"          characteristicsid = OrderData.productGroups.characteristics.id,",
						"          sharedPlandataGroupId = OrderData.productGroups.sharedPlanCharacteristics.dataGroupId,",
						"          sharedPlanfamilyGroupId = OrderData.productGroups.sharedPlanCharacteristics.familyGroupId,",
						"          sharedPlangroupReferencesCode = OrderData.productGroups.sharedPlanCharacteristics.groupReferencesCode,",
						"          sharedPlanplanType = OrderData.productGroups.sharedPlanCharacteristics.planType,",
						"          sharedPlanprimarySubscriberNumber = OrderData.productGroups.sharedPlanCharacteristics.primarySubscriberNumber,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenProductGroups",
						"filter24 alterRow(upsertIf(true())) ~> AlterRowOrderProductGroups",
						"derivedColumn20 foldDown(unroll(OrderData.promotions, OrderData.promotions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          amount = OrderData.promotions.amount,",
						"          duration = OrderData.promotions.duration,",
						"          Promotion_id = OrderData.promotions.id,",
						"          promotionAppliedBy = OrderData.promotions.promotionAppliedBy,",
						"          baseOfferId = OrderData.promotions.baseOfferId,",
						"          Promotionpercent = OrderData.promotions.percent,",
						"          promotionCode = OrderData.promotions.promotionCode,",
						"          promotionCycle = OrderData.promotions.promotionCycle,",
						"          promotionId = OrderData.promotions.promotionId,",
						"          promotionName = OrderData.promotions.promotionName,",
						"          promotionType = OrderData.promotions.promotionType,",
						"          promotionTypeDetail = OrderData.promotions.promotionTypeDetail,",
						"          sequence = OrderData.promotions.sequence,",
						"          unitOfMeasurement = OrderData.promotions.unitOfMeasurement,",
						"          lastmodified_date,",
						"          additionalDetails = OrderData.promotions.additionalDetails,",
						"          complexDiscountIndicator = OrderData.promotions.complexDiscountIndicator,",
						"          componentConfigurations = OrderData.promotions.componentConfigurations,",
						"          couponCode = OrderData.promotions.couponCode,",
						"          displayLevel = OrderData.promotions.displayLevel,",
						"          ioId = OrderData.promotions.ioId,",
						"          effectiveDate = OrderData.promotions.effectiveDate,",
						"          effectiveInDays = OrderData.promotions.effectiveInDays,",
						"          endDate = OrderData.promotions.endDate,",
						"          fixedAmount = OrderData.promotions.fixedAmount,",
						"          ioSequence = OrderData.promotions.ioSequence,",
						"          parentPricePlanCode = OrderData.promotions.parentPricePlanCode,",
						"          payInAdvanceProdId = OrderData.promotions.payInAdvanceProdId,",
						"          promotionBillingCode = OrderData.promotions.promotionBillingCode,",
						"          qualifyingServiceDetails = OrderData.promotions.qualifyingServiceDetails,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderPromotions",
						"derivedColumn68 alterRow(upsertIf(true())) ~> AlterRowOrderPromotions",
						"derivedColumn20 select(mapColumn(",
						"          customerOrderNumber,",
						"          schedulingDetails = OrderData.schedulingDetails,",
						"          lastmodified_date,",
						"          eventTime,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSchedulingDetails",
						"filter25 alterRow(upsertIf(true())) ~> AlterRow1",
						"derivedColumn42 foldDown(unroll(OrderData.termsAndConditions, OrderData.termsAndConditions),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accepted = OrderData.termsAndConditions.accepted,",
						"          agreementText = OrderData.termsAndConditions.agreementText,",
						"          agreementType = OrderData.termsAndConditions.agreementType,",
						"          category = OrderData.termsAndConditions.category,",
						"          id = OrderData.termsAndConditions.id,",
						"          agreementURL = OrderData.termsAndConditions.agreementURL,",
						"          documentName = OrderData.termsAndConditions.documentName,",
						"          orderLevelIndicator = OrderData.termsAndConditions.orderLevelIndicator,",
						"          tncId = OrderData.termsAndConditions.tncld,",
						"          timestamp = OrderData.termsAndConditions.timestamp,",
						"          tncKey = OrderData.termsAndConditions.tncKey,",
						"          tncRecordingOff = OrderData.termsAndConditions.tncRecordingOff,",
						"          version = OrderData.termsAndConditions.version,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTermsandConditions",
						"filter20 derive(timestamp = toTimestamp(toLong(toString(byName('timestamp'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> ConvertTimestamp",
						"coalacc foldDown(unroll(serviceFacilityQualifications, serviceFacilityQualifications),",
						"     mapColumn(",
						"          additionalDetails = serviceFacilityQualifications.additionalDetails,",
						"          customerOrderNumber,",
						"          Account_id,",
						"          Actsequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          cpeRequiredIndicator = serviceFacilityQualifications.cpeRequiredIndicator,",
						"          facilityCheck = serviceFacilityQualifications.facilityCheck,",
						"          gfastDeviceWireType = serviceFacilityQualifications.gfastDeviceWireType,",
						"          potsAvailableIndicator = serviceFacilityQualifications.potsAvailableIndicator,",
						"          dslAvailableIndicator = serviceFacilityQualifications.dslAvailableIndicator,",
						"          frequency17MhzIndicator = serviceFacilityQualifications.frequency17MhzIndicator,",
						"          id = serviceFacilityQualifications.id,",
						"          preferredNetworkType = serviceFacilityQualifications.preferredNetworkType,",
						"          profileCode = serviceFacilityQualifications.profileCode,",
						"          vectoringIndicator = serviceFacilityQualifications.vectoringIndicator,",
						"          address = serviceFacilityQualifications.address",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenServiceFacilityQualifications",
						"filter101 foldDown(unroll(billingDetail, billingDetail),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          accountStatus = billingDetail.accountStatus,",
						"          billingType = billingDetail.billingType,",
						"          placeId = billingDetail.address.placeId,",
						"          addressId = billingDetail.address.addressId,",
						"          connectedCommunityId = billingDetail.address.connectedCommunityId,",
						"          BillingAddress_id = billingDetail.address.id,",
						"          dwellingType = billingDetail.address.dwellingType,",
						"          validatedIndicator = billingDetail.address.validatedIndicator,",
						"          auxillaryaddress_line1 = billingDetail.address.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = billingDetail.address.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = billingDetail.address.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = billingDetail.address.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = billingDetail.address.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = billingDetail.address.codingAccuracySupportSystemAddress,",
						"          addressLines = billingDetail.address.codingAccuracySupportSystemAddress.addressLines,",
						"          parsed_addInstructions = billingDetail.address.parsedAddress.addInstructions,",
						"          parsed_addressChanged = billingDetail.address.parsedAddress.addressChanged,",
						"          parsed_addressMatchCode = billingDetail.address.parsedAddress.addressMatchCode,",
						"          parsed_addressStreetLine = billingDetail.address.parsedAddress.addressStreetLine,",
						"          parsed_addressType = billingDetail.address.parsedAddress.addressType,",
						"          parsed_apartmentUnit = billingDetail.address.parsedAddress.apartmentUnit,",
						"          parsed_apartmentUnitNumber = billingDetail.address.parsedAddress.apartmentUnitNumber,",
						"          parsed_assignedStreetNumber = billingDetail.address.parsedAddress.assignedStreetNumber,",
						"          parsed_attention = billingDetail.address.parsedAddress.attention,",
						"          parsed_buildingType = billingDetail.address.parsedAddress.buildingType,",
						"          parsed_city = billingDetail.address.parsedAddress.city,",
						"          parsed_country = billingDetail.address.parsedAddress.country,",
						"          parsed_county = billingDetail.address.parsedAddress.county,",
						"          parsed_countyCode = billingDetail.address.parsedAddress.countyCode,",
						"          parsed_direction = billingDetail.address.parsedAddress.direction,",
						"          parsed_directionPrefix = billingDetail.address.parsedAddress.directionPrefix,",
						"          parsed_disconnectDate = billingDetail.address.parsedAddress.disconnectDate,",
						"          parsed_exchangeCode = billingDetail.address.parsedAddress.exchangeCode,",
						"          parsed_exhaustCode = billingDetail.address.parsedAddress.exhaustCode,",
						"          parsed_houseNumber = billingDetail.address.parsedAddress.houseNumber,",
						"          parsed_houseNumberPrefix = billingDetail.address.parsedAddress.houseNumberPrefix,",
						"          parsed_houseNumberSuffix = billingDetail.address.parsedAddress.houseNumberSuffix,",
						"          parsed_incorporatedIndicator = billingDetail.address.parsedAddress.incorporatedIndicator,",
						"          parsed_internationalZip = billingDetail.address.parsedAddress.internationalZip,",
						"          parsed_lastDisconnectedTransportType = billingDetail.address.parsedAddress.lastDisconnectedTransportType,",
						"          parsed_lastNetworkAccessDeviceType = billingDetail.address.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsed_legalEntity = billingDetail.address.parsedAddress.legalEntity,",
						"          parsed_level = billingDetail.address.parsedAddress.level,",
						"          parsed_levelNumber = billingDetail.address.parsedAddress.levelNumber,",
						"          parsed_linkKey = billingDetail.address.parsedAddress.linkKey,",
						"          parsed_postOfficeBox = billingDetail.address.parsedAddress.postOfficeBox,",
						"          parsed_primaryAddressLine = billingDetail.address.parsedAddress.primaryAddressLine,",
						"          parsed_primaryNPANXX = billingDetail.address.parsedAddress.primaryNPANXX,",
						"          parsed_province = billingDetail.address.parsedAddress.province,",
						"          parsed_rateCenterCode = billingDetail.address.parsedAddress.rateCenterCode,",
						"          parsed_rateZoneBanCode = billingDetail.address.parsedAddress.rateZoneBanCode,",
						"          parsed_rsagValidationIndicator = billingDetail.address.parsedAddress.rsagValidationIndicator,",
						"          parsed_ruralRouteBoxNumber = billingDetail.address.parsedAddress.ruralRouteBoxNumber,",
						"          parsed_ruralRouteCenterNumber = billingDetail.address.parsedAddress.ruralRouteCenterNumber,",
						"          parsed_secondaryAddressLine = billingDetail.address.parsedAddress.secondaryAddressLine,",
						"          parsed_siteAddressId = billingDetail.address.parsedAddress.siteAddressId,",
						"          parsed_siteId = billingDetail.address.parsedAddress.siteId,",
						"          parsed_smartMoves = billingDetail.address.parsedAddress.smartMoves,",
						"          parsed_state = billingDetail.address.parsedAddress.state,",
						"          parsed_streetName = billingDetail.address.parsedAddress.streetName,",
						"          parsed_streetNameSuffix = billingDetail.address.parsedAddress.streetNameSuffix,",
						"          parsed_streetType = billingDetail.address.parsedAddress.streetType,",
						"          parsed_structure = billingDetail.address.parsedAddress.structure,",
						"          parsed_structureNumber = billingDetail.address.parsedAddress.structureNumber,",
						"          parsed_tarCode = billingDetail.address.parsedAddress.tarCode,",
						"          parsed_telephoneNumber = billingDetail.address.parsedAddress.telephoneNumber,",
						"          parsed_urbanizationCode = billingDetail.address.parsedAddress.urbanizationCode,",
						"          parsed_videoHubOffice = billingDetail.address.parsedAddress.videoHubOffice,",
						"          parsed_zip = billingDetail.address.parsedAddress.zip,",
						"          parsed_zipCodeExtension = billingDetail.address.parsedAddress.zipCodeExtension,",
						"          parsed_zipGeoCode = billingDetail.address.parsedAddress.zipGeoCode,",
						"          unparsed_addressLine1 = billingDetail.address.unparsedAddress.addressLine1,",
						"          unparsed_addressLine3 = billingDetail.address.unparsedAddress.addressLine3,",
						"          unparsed_attention = billingDetail.address.unparsedAddress.attention,",
						"          unparsed_elevation = billingDetail.address.unparsedAddress.elevation,",
						"          unparsed_postOfficeBox = billingDetail.address.unparsedAddress.postOfficeBox,",
						"          unparsed_province = billingDetail.address.unparsedAddress.province,",
						"          unparsed_ruralRoute = billingDetail.address.unparsedAddress.ruralRoute,",
						"          unparsed_structure = billingDetail.address.unparsedAddress.structure,",
						"          unparsed_unit = billingDetail.address.unparsedAddress.unit,",
						"          unparsed_urbanizationCode = billingDetail.address.unparsedAddress.urbanizationCode,",
						"          unparsed_city = billingDetail.address.unparsedAddress.city,",
						"          unparsed_country = billingDetail.address.unparsedAddress.country,",
						"          unparsed_county = billingDetail.address.unparsedAddress.county,",
						"          unparsed_state = billingDetail.address.unparsedAddress.state,",
						"          unparsed_zip = billingDetail.address.unparsedAddress.zip,",
						"          unparsed_zipCodeExtension = billingDetail.address.unparsedAddress.zipCodeExtension,",
						"          unparsed_internationalZip = billingDetail.address.unparsedAddress.internationalZip,",
						"          unparsed_addressLine2 = billingDetail.address.unparsedAddress.addressLine2,",
						"          dob = billingDetail.authentication.dob,",
						"          ssn = billingDetail.authentication.ssn,",
						"          pin = billingDetail.authentication.securityVerification.pin,",
						"          securityAnswer = billingDetail.authentication.securityVerification.securityAnswer,",
						"          securityQuestion = billingDetail.authentication.securityVerification.securityQuestion,",
						"          motherMaidenName = billingDetail.authentication.motherMaidenName,",
						"          name = billingDetail.name,",
						"          additionalDetails = billingDetail.address.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          emailAddress = billingDetail.name.emailAddress,",
						"          firstName = billingDetail.name.firstName,",
						"          id = billingDetail.name.id,",
						"          middleInitial = billingDetail.name.middleInitial,",
						"          lastName = billingDetail.name.lastName,",
						"          additional_contactPhones = billingDetail.name.additionalContactPhones,",
						"          consentDetails = billingDetail.name.primaryContactPhones.consentDetails,",
						"          extension = billingDetail.name.primaryContactPhones.extension,",
						"          legalFirstName = billingDetail.name.legalFirstName,",
						"          legalLastName = billingDetail.name.legalLastName,",
						"          previousLegalLastName = billingDetail.name.previousLegalLastName,",
						"          suffix = billingDetail.name.suffix,",
						"          title = billingDetail.name.title,",
						"          previousAddress = billingDetail.previousAddress,",
						"          previousPhoneNumber = billingDetail.previousPhoneNumber,",
						"          preferredContactMethod = billingDetail.name.preferredContactMethod,",
						"          phoneNumber = billingDetail.name.primaryContactPhones.phoneNumber,",
						"          contactPhoneType = billingDetail.name.primaryContactPhones.contactPhoneType,",
						"          licenseExpirationDate = billingDetail.authentication.driversLicense.licenseExpirationDate,",
						"          licenseNumber = billingDetail.authentication.driversLicense.licenseNumber,",
						"          licensestate = billingDetail.authentication.driversLicense.state,",
						"          employerName = billingDetail.authentication.employerDetail.employerName,",
						"          employerPhoneNumber = billingDetail.authentication.employerDetail.employerPhoneNumber,",
						"          federalTaxId = billingDetail.authentication.federalTaxId,",
						"          gender = billingDetail.authentication.gender,",
						"          lastFourOfSSN = billingDetail.authentication.lastFourOfSSN,",
						"          ssnRefusedIndicator = billingDetail.authentication.ssnRefusedIndicator,",
						"          StateidNumber = billingDetail.authentication.stateId.idNumber,",
						"          stateIdIssuedState = billingDetail.authentication.stateId.state,",
						"          nextBillingCycleDate = billingDetail.nextBillingCycleDate,",
						"          sequence,",
						"          line1 = billingDetail.address.auxiliaryAddress.line1,",
						"          parsedAddrTimeZone = billingDetail.address.parsedAddress.addressTimeZone,",
						"          parsedAddrRateZone = billingDetail.address.parsedAddress.rateZone",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenBillingDetails",
						"flatten23 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          accountStatus,",
						"          dob,",
						"          licenseNumber,",
						"          licenseExpirationDate,",
						"          licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          federalTaxId,",
						"          gender,",
						"          lastFourOfSSN,",
						"          motherMaidenName,",
						"          securityVerificationPin = pin,",
						"          securityQuestion,",
						"          securityAnswer,",
						"          ssn,",
						"          ssnRefusedIndicator,",
						"          StateidNumber = stateidNumber,",
						"          stateIdIssuedState,",
						"          nextBillingCycleDate,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          previousLegalLastName,",
						"          prefix,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          sequence,",
						"          billingType,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderAccountsBillingDetails",
						"derivedColumn2 alterRow(upsertIf(true())) ~> AlterRowOrderAccounts",
						"derivedColumn3 alterRow(upsertIf(true())) ~> AlterRow2",
						"filter1 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsServiceAddress",
						"filter6 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsServiceFacilityQualification",
						"filter5 alterRow(upsertIf(true())) ~> AlterRowOrderAccountsBillingDetails",
						"derivedColumn23 foldDown(unroll(OrderData.losgs, OrderData.losgs),",
						"     mapColumn(",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          accountReference = OrderData.losgs.accountReference,",
						"          actionReasonCode = OrderData.losgs.actionReasonCode,",
						"          previousProductOrderActionId = OrderData.losgs.previousProductOrderActionId,",
						"          actionReason = OrderData.losgs.actionReason,",
						"          actionType = OrderData.losgs.actionType,",
						"          apiExecutionDetails = OrderData.losgs.aPIExecutionDetails,",
						"          acceptEULA = OrderData.losgs.addpLOSCharacteristics.acceptEULA,",
						"          tenantAccountId = OrderData.losgs.addpLOSCharacteristics.tenantAccountId,",
						"          tenantAccountStatus = OrderData.losgs.addpLOSCharacteristics.tenantAccountStatus,",
						"          billingSystemId = OrderData.losgs.billingSystemId,",
						"          bundleGroupId = OrderData.losgs.bundleGroupId,",
						"          childOrderId = OrderData.losgs.childOrderId,",
						"          companyCode = OrderData.losgs.companyCode,",
						"          creditPolicySecurityType = OrderData.losgs.creditPolicySecurityType,",
						"          conflictingServiceDetailReferences = OrderData.losgs.conflictingServiceDetailReferences,",
						"          iptvLOSCharacteristics = OrderData.losgs.iptvLOSCharacteristics,",
						"          dealerCode = OrderData.losgs.dealerCode,",
						"          divisionCode = OrderData.losgs.divisionCode,",
						"          effectiveDate = OrderData.losgs.effectiveDate,",
						"          engageVideoId = OrderData.losgs.engageVideoId,",
						"          entitlementBenefit = OrderData.losgs.entitlementBenefit,",
						"          fnGuId = OrderData.losgs.fnGuId,",
						"          fnUserId = OrderData.losgs.fnUserId,",
						"          fnType = OrderData.losgs.fnType,",
						"          freeDevicePolicyId = OrderData.losgs.freeDevicePolicyId,",
						"          fulfillmentMethod = OrderData.losgs.fulfillmentMethod,",
						"          fulfillerName = OrderData.losgs.fulfillerName,",
						"          fulfillerCode = OrderData.losgs.fulfillerCode,",
						"          fwCAF2AddressIndicator = OrderData.losgs.fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator = OrderData.losgs.fwiMoveInIndicator,",
						"          Losg_id = OrderData.losgs.id,",
						"          installType = OrderData.losgs.installType,",
						"          losgType = OrderData.losgs.losgType,",
						"          name = OrderData.losgs.name,",
						"          productCategory = OrderData.losgs.productCategory,",
						"          schedulingDetailReference = OrderData.losgs.schedulingDetailReference,",
						"          sequence = OrderData.losgs.sequence,",
						"          serviceQualificationReference = OrderData.losgs.serviceQualificationReference,",
						"          subscriberName = OrderData.losgs.subscriberName,",
						"          type = OrderData.losgs.type,",
						"          wirelessLOSCharacteristics = OrderData.losgs.wirelessLOSCharacteristics,",
						"          internetLOSCharacteristics = OrderData.losgs.internetLOSCharacteristics,",
						"          lineItems = OrderData.losgs.lineItems,",
						"          serviceProvider = OrderData.losgs.serviceProvider,",
						"          price = OrderData.losgs.price,",
						"          priceSummaryList = OrderData.losgs.priceSummaryList,",
						"          serviceAddress = OrderData.losgs.serviceAddress,",
						"          losgStatus = OrderData.losgs.losgStatus,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          termsAndConditionAccepted = OrderData.losgs.termsAndConditionAccepted,",
						"          voipLOSCharacteristics = OrderData.losgs.voipLOSCharacteristics,",
						"          numberPortDetail = OrderData.losgs.numberPortDetail,",
						"          compensation = OrderData.losgs.compensation,",
						"          additionalDetails = OrderData.losgs.additionalDetails,",
						"          direcTVLOSCharacteristics = OrderData.losgs.direcTVLOSCharacteristics,",
						"          externalOrderReferences = OrderData.losgs.externalOrderReferences,",
						"          dslLOSCharacteristics = OrderData.losgs.dslLOSCharacteristics,",
						"          installationInstructions = OrderData.losgs.installationInstructions,",
						"          promotions = OrderData.losgs.promotions,",
						"          productInventoryStatus = OrderData.losgs.productInventoryStatus,",
						"          userDefinedLabels = OrderData.losgs.userDefinedLabels,",
						"          market = OrderData.losgs.market,",
						"          migrationIndicator = OrderData.losgs.migrationIndicator,",
						"          migrationSource = OrderData.losgs.migrationSource,",
						"          notes = OrderData.losgs.notes,",
						"          preferredAreaCode = OrderData.losgs.preferredAreaCode,",
						"          priceCode = OrderData.losgs.priceCode,",
						"          primaryIndicator = OrderData.losgs.primaryIndicator,",
						"          productOfferingId = OrderData.losgs.productOfferingId,",
						"          productOrderActionId = OrderData.losgs.productOrderActionId,",
						"          productOrderActionReference = OrderData.losgs.productOrderActionReference,",
						"          profileCode = OrderData.losgs.profileCode,",
						"          rateType = OrderData.losgs.rateType,",
						"          requestedExecutionDate = OrderData.losgs.requestedExecutionDate,",
						"          salesOfferId = OrderData.losgs.salesOfferId,",
						"          serviceArea = OrderData.losgs.serviceArea,",
						"          serviceAreaName = OrderData.losgs.serviceAreaName,",
						"          subMarket = OrderData.losgs.subMarket,",
						"          sunsetDate = OrderData.losgs.sunsetDate,",
						"          vendorAccountId = OrderData.losgs.vendorAccountId,",
						"          transferfromBAN = OrderData.losgs.transferSubscriberDetail.fromBillingAccountNumber,",
						"          transferfromFAN = OrderData.losgs.transferSubscriberDetail.fromFAN,",
						"          transferfromMobileNumber = OrderData.losgs.transferSubscriberDetail.fromMobileNumber,",
						"          directoryListing = OrderData.losgs.voipLOSCharacteristics.directoryListing,",
						"          cancelDetails = OrderData.losgs.cancelDetails,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderLosgs",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          losg_id = Losg_id,",
						"          losgSequence = sequence,",
						"          accountReference,",
						"          actionReason,",
						"          previousProductOrderActionId,",
						"          actionReasonCode,",
						"          actionType,",
						"          acceptEULA,",
						"          tenantAccountId,",
						"          tenantAccountStatus,",
						"          billingSystemId,",
						"          bundleGroupId,",
						"          childOrderId,",
						"          companyCode,",
						"          creditPolicySecurityType,",
						"          dealerCode,",
						"          divisionCode,",
						"          effectiveDate,",
						"          engageVideoId,",
						"          entitlementBenefit,",
						"          fnGuId,",
						"          fnUserId,",
						"          fnType,",
						"          freeDevicePolicyId,",
						"          fulfillmentMethod,",
						"          fulfillerName,",
						"          fulfillerCode,",
						"          fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator,",
						"          installType,",
						"          status = losgStatus.status,",
						"          subStatus = losgStatus.subStatus,",
						"          fallout = losgStatus.fallout,",
						"          losgType,",
						"          market,",
						"          migrationIndicator,",
						"          migrationSource,",
						"          name,",
						"          notes,",
						"          preferredAreaCode,",
						"          priceCode,",
						"          primaryIndicator,",
						"          productCategory,",
						"          productOfferingId,",
						"          productOrderActionId,",
						"          productOrderActionReference,",
						"          profileCode,",
						"          rateType,",
						"          requestedExecutionDate,",
						"          salesOfferId,",
						"          schedulingDetailReference,",
						"          serviceArea,",
						"          serviceAreaName,",
						"          serviceQualificationReference,",
						"          subMarket,",
						"          sunsetDate,",
						"          type,",
						"          vendorAccountId,",
						"          transferfromBAN,",
						"          transferfromFAN,",
						"          transferfromMobileNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          eventTime,",
						"          productInventoryStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderLosgs",
						"coallosgid foldDown(unroll(price, price),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount = price.amount,",
						"          baseAmount = price.baseAmount,",
						"          currencyType = price.currencyType,",
						"          pricetype = price.priceType,",
						"          total = price.total,",
						"          losgsequence = sequence,",
						"          creditFeeType = price.creditFeeType,",
						"          installmentEligibility = price.installmentEligibility,",
						"          msrp = price.msrp,",
						"          additionalDetails = price.additionalDetails,",
						"          J_tax = price.taxDetail,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsPrice",
						"coallosgid foldDown(unroll(priceSummaryList, priceSummaryList),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount = priceSummaryList.amount,",
						"          currencyType = priceSummaryList.currencyType,",
						"          priceType = priceSummaryList.priceType,",
						"          total = priceSummaryList.total,",
						"          taxSummary = priceSummaryList.taxSummary,",
						"          lastmodified_date,",
						"          Losgsequence = sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsPriceSummaryList",
						"coallosgid foldDown(unroll(lineItems, lineItems),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          action = lineItems.action,",
						"          addOnDomainName = lineItems.addOnSolutionCharacteristics.domainName,",
						"          addOnDomainRegistration = lineItems.addOnSolutionCharacteristics.domainRegistration,",
						"          addOnParentItem = lineItems.addOnSolutionCharacteristics.parentItem,",
						"          addOnRegistrationType = lineItems.addOnSolutionCharacteristics.registrationType,",
						"          billingCode = lineItems.billingCode,",
						"          billingCodeType = lineItems.billingCodeType,",
						"          catalogProductType = lineItems.catalogProductType,",
						"          catalogSKUId = lineItems.catalogSKUId,",
						"          contractAmountFinanced = lineItems.contractDetails.amountFinanced,",
						"          contractAnnualPercentageRate = lineItems.contractDetails.annualPercentageRate,",
						"          contractBalancedAmount = lineItems.contractDetails.balancedAmount,",
						"          contractDisplayName = lineItems.contractDetails.contractDisplayName,",
						"          contractLength = lineItems.contractDetails.contractLength,",
						"          contractSent = lineItems.contractDetails.contractSent,",
						"          contractSystem = lineItems.contractDetails.contractSystem,",
						"          contractType = lineItems.contractDetails.contractType,",
						"          contractDownPayment = lineItems.contractDetails.downPayment,",
						"          contractDownPaymentPercent = lineItems.contractDetails.downPaymentPercent,",
						"          contractFinanceCharge = lineItems.contractDetails.financeCharge,",
						"          contractInstallmentAmount = lineItems.contractDetails.installmentAmount,",
						"          contractInstallmentPlanDef = lineItems.contractDetails.installmentPlanDefinition,",
						"          contractInstallmentPlanId = lineItems.contractDetails.installmentPlanId,",
						"          contractInstallmentStatus = lineItems.contractDetails.installmentStatus,",
						"          contractInstallmentType = lineItems.contractDetails.installmentType,",
						"          contractPrepaidFinanceCharge = lineItems.contractDetails.prepaidFinanceCharge,",
						"          contractPayupAmount = lineItems.contractDetails.payupAmount,",
						"          contractPayoffAmount = lineItems.contractDetails.payoffAmount,",
						"          contractTotalSalePrice = lineItems.contractDetails.totalSalePrice,",
						"          curbsideDelivery = lineItems.curbsideDelivery,",
						"          description = lineItems.description,",
						"          effectiveDate = lineItems.effectiveDate,",
						"          feeId = lineItems.fees.feeId,",
						"          feeIdType = lineItems.fees.feeIdType,",
						"          feeWaivedIndicator = lineItems.fees.waivedIndicator,",
						"          feeWaivedReason = lineItems.fees.waivedReason,",
						"          fulfillmentLocation = lineItems.fulfillmentLocation,",
						"          displayName = lineItems.displayName,",
						"          groupOptionId = lineItems.groupOptionId,",
						"          inventoryStoreId = lineItems.inventoryStoreId,",
						"          itemFulfillmentMethod = lineItems.itemFulfillmentMethod,",
						"          LineItem_id = lineItems.id,",
						"          locationId = lineItems.locationId,",
						"          notes = lineItems.notes,",
						"          operation = lineItems.operation,",
						"          preOwnedIndicator = lineItems.preOwnedIndicator,",
						"          productCode = lineItems.productCode,",
						"          productSKU = lineItems.productSKU,",
						"          productType = lineItems.productType,",
						"          quantity = lineItems.quantity,",
						"          sequence = lineItems.sequence,",
						"          systemName = lineItems.systemName,",
						"          hardGood = lineItems.hardGood,",
						"          additionalDetails = lineItems.additionalDetails,",
						"          internetLineItemCharacteristics = lineItems.internetLineItemCharacteristics,",
						"          price = lineItems.price,",
						"          productGroupReferences = lineItems.productGroupReferences,",
						"          promotionReferences = lineItems.promotionReferences,",
						"          productSubType = lineItems.productSubType,",
						"          purchaseTransactionId = lineItems.purchaseTransactionId,",
						"          payments = lineItems.payments,",
						"          lastmodified_date,",
						"          losgsequence = sequence,",
						"          dc_eventtime,",
						"          supplyChainDetail = lineItems.supplyChainDetail,",
						"          supplyChainDetail_trackingNumber = lineItems.supplyChainDetail.trackingNumber,",
						"          hardgood_shipmentCommitDate_fromDate = lineItems.hardGood.shipmentCommitDate.fromDate,",
						"          hardgood_DeliveryByDate_fromDate = lineItems.hardGood.deliveryByDate.fromDate,",
						"          direcTVLineItemCharacteristics = lineItems.direcTVLineItemCharacteristics,",
						"          voipLineItemCharacteristics = lineItems.voipLineItemCharacteristics,",
						"          iptvLineItemCharacteristics = lineItems.iptvLineItemCharacteristics,",
						"          wirelessLineItemCharacteristics = lineItems.wirelessLineItemCharacteristics,",
						"          priceList = lineItems.priceList,",
						"          shippingDetailReference = lineItems.shippingDetailReference,",
						"          socForPreviousDevice = lineItems.socForPreviousDevice,",
						"          status = lineItems.status,",
						"          storeId = lineItems.storeId,",
						"          subscriptionId = lineItems.subscriptionId,",
						"          taxableIndicator = lineItems.taxableIndicator,",
						"          tier = lineItems.tier,",
						"          productInventoryStatus = lineItems.productInventoryStatus",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsLineItems",
						"coalLLseq foldDown(unroll(additionalDetails, additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          type = additionalDetails.type,",
						"          LineItemsequence = sequence,",
						"          parentType = additionalDetails.parentType,",
						"          code = additionalDetails.code,",
						"          value = additionalDetails.value,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          sequence = additionalDetails.sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenLosgsAdditionalDetail",
						"filter18 alterRow(upsertIf(true())) ~> AlterRowOrderLosgsPrice",
						"filter17 alterRow(upsertIf(true())) ~> AlterRowOrderLosgsPriceSummaryList",
						"filter10 alterRow(upsertIf(true())) ~> AlterRowlosgsLineitemsAdditionalDetail",
						"derivedColumn22 select(mapColumn(",
						"          customerOrderNumber,",
						"          sourceDetail = OrderData.sourceDetail,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderSourceDetail",
						"selectOrderSourceDetail foldDown(unroll(sourceDetail.additionalDetails, sourceDetail.additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code = sourceDetail.additionalDetails.code,",
						"          type = sourceDetail.additionalDetails.type,",
						"          value = sourceDetail.additionalDetails.value,",
						"          lastmodified_date,",
						"          sequence = sourceDetail.additionalDetails.sequence,",
						"          parentType = sourceDetail.additionalDetails.parentType,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenSourceDetailAdditionalDetail",
						"selectOrderSourceDetail select(mapColumn(",
						"          customerOrderNumber,",
						"          application = sourceDetail.application,",
						"          browserId = sourceDetail.browserId,",
						"          channel = sourceDetail.channel,",
						"          city = sourceDetail.city,",
						"          clientIP = sourceDetail.clientIP,",
						"          clientType = sourceDetail.clientType,",
						"          countryCode = sourceDetail.countryCode,",
						"          county = sourceDetail.county,",
						"          externalOrderSource = sourceDetail.externalOrderSource,",
						"          locale = sourceDetail.locale,",
						"          region = sourceDetail.region,",
						"          salesChannel = sourceDetail.salesChannel,",
						"          salesChannelType = sourceDetail.salesChannelType,",
						"          sender = sourceDetail.sender,",
						"          zip = sourceDetail.zip,",
						"          lastmodified_date,",
						"          expressCheckOutIndicator = sourceDetail.expressCheckOutIndicator,",
						"          mediaSource = sourceDetail.mediaSource,",
						"          originatingApplication = sourceDetail.originatingApplication,",
						"          initiatingApplication = sourceDetail.initiatingApplication,",
						"          premierDetailGroupId = sourceDetail.premierDetail.groupId,",
						"          premierDetailGroupName = sourceDetail.premierDetail.groupName,",
						"          premierDetailGroupTick = sourceDetail.premierDetail.resourceCenterTicketNumber,",
						"          responseMode = sourceDetail.responseMode,",
						"          sequence = sourceDetail.sequence,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalizeOrderSourceDetail",
						"filter8 alterRow(upsertIf(true())) ~> AlterRowOrderSourceDetail",
						"filter9 alterRow(upsertIf(true())) ~> AlterRowOrderSourceDetailAdditionalDetail",
						"filter19 alterRow(upsertIf(true())) ~> AlterRowOrderlosgs",
						"ConvertTimestamp alterRow(upsertIf(true())) ~> AlterRow4",
						"derivedColumn21 foldDown(unroll(OrderData.accounts, OrderData.accounts),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          createdDate = OrderData.createdDate,",
						"          submittedDate = OrderData.submittedDate,",
						"          acceptedDate = OrderData.acceptedDate,",
						"          accountCategory = OrderData.accounts.accountCategory,",
						"          accountSubCategory = OrderData.accounts.accountSubCategory,",
						"          accountSubType = OrderData.accounts.accountSubType,",
						"          accountType = OrderData.accounts.accountType,",
						"          autoPayReason = OrderData.accounts.autoPayReason,",
						"          b2bReference = OrderData.accounts.b2bReference,",
						"          cardOnFilePaymentMethod = OrderData.accounts.cardOnFilePaymentMethod,",
						"          billingDeliveryPreference = OrderData.accounts.billingDeliveryPreference,",
						"          billingLanguagePreference = OrderData.accounts.billingLanguagePreference,",
						"          businessAccountName = OrderData.accounts.businessAccountName,",
						"          cpni = OrderData.accounts.cpni,",
						"          ebillReason = OrderData.accounts.ebillReason,",
						"          enterpriseType = OrderData.accounts.enterpriseType,",
						"          gigaPower = OrderData.accounts.gigaPower,",
						"          Account_id = OrderData.accounts.id,",
						"          langId = OrderData.accounts.langId,",
						"          market = OrderData.accounts.market,",
						"          passCode = OrderData.accounts.passCode,",
						"          paymentArrangement = OrderData.accounts.paymentArrangement,",
						"          sequence = OrderData.accounts.sequence,",
						"          spokenLanguagePreference = OrderData.accounts.spokenLanguagePreference,",
						"          billingAccountNumber = OrderData.accounts.billingAccountNumber,",
						"          additionalDetails = OrderData.accounts.additionalDetails,",
						"          autopayPaymentMethod = OrderData.accounts.autopayPaymentMethod,",
						"          billingDetail = OrderData.accounts.billingDetail,",
						"          businessAddress = OrderData.accounts.businessAddress,",
						"          creditCheck = OrderData.accounts.creditCheck,",
						"          negotiateConflictCustomer = OrderData.accounts.negotiateConflictCustomer,",
						"          serviceAddress = OrderData.accounts.serviceAddress,",
						"          unifiedAccount = OrderData.accounts.unifiedAccount,",
						"          serviceFacilityQualifications = OrderData.accounts.serviceFacilityQualifications,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          billingAccountTelephoneNumber = OrderData.accounts.billingAccountTelephoneNumber,",
						"          primaryCTN = OrderData.accounts.primaryCTN,",
						"          employeeReferralDetail = OrderData.employeeReferralDetail,",
						"          accountCrossmarketIndicator = OrderData.accounts.accountCrossmarketIndicator,",
						"          acpTransactionId = OrderData.accounts.acpEligibility.acpTransactionId,",
						"          acpClassification = OrderData.accounts.acpEligibility.acpClassification,",
						"          anchorCTN = OrderData.accounts.anchorCTN,",
						"          bankingPartnerCustomerId = OrderData.accounts.bankingPartner.customerId,",
						"          bankingPartnerName = OrderData.accounts.bankingPartner.name,",
						"          bigData = OrderData.accounts.bigData,",
						"          billPaymentDueDate = OrderData.accounts.billPaymentDueDate,",
						"          cardOnFileStatus = OrderData.accounts.cardOnFileStatus,",
						"          conflictingServiceDetails = OrderData.accounts.conflictingServiceDetails,",
						"          consentToCCIndicator = OrderData.accounts.consentToCCIndicator,",
						"          contractAcceptance = OrderData.accounts.contractAcceptance.acceptance,",
						"          contractLength = OrderData.accounts.contractAcceptance.contractLength,",
						"          contractVersionNumber = OrderData.accounts.contractAcceptance.versionNumber,",
						"          creditAlertFraudAlert = OrderData.accounts.creditAlert.fraudAlert,",
						"          creditAlertGeneralMessage = OrderData.accounts.creditAlert.generalMessage,",
						"          ctnValidatedIndicator = OrderData.accounts.ctnValidatedIndicator,",
						"          customerCode = OrderData.accounts.customerCode,",
						"          delinquentAccountIndicator = OrderData.accounts.delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization = OrderData.accounts.electronicLetterOfAuthorization.electronicDisclosureAuthorization,",
						"          internetServiceAuthorization = OrderData.accounts.electronicLetterOfAuthorization.internetServiceAuthorization,",
						"          letterOfAuthorizationURL = OrderData.accounts.electronicLetterOfAuthorization.letterOfAuthorizationURL,",
						"          localServiceAuthorization = OrderData.accounts.electronicLetterOfAuthorization.localServiceAuthorization,",
						"          localTollProviderAuthorization = OrderData.accounts.electronicLetterOfAuthorization.localTollProviderAuthorization,",
						"          longDistanceServiceProvider = OrderData.accounts.electronicLetterOfAuthorization.longDistanceServiceProvider,",
						"          emailValidatedIndicator = OrderData.accounts.emailValidatedIndicator,",
						"          existingAutoBillStatus = OrderData.accounts.existingAutoBillStatus,",
						"          existingAutoBillIndicator = OrderData.accounts.existingAutoBillIndicator,",
						"          landLineNumber = OrderData.accounts.landLineNumber,",
						"          liabilityType = OrderData.accounts.liabilityType,",
						"          marketingSourceCode = OrderData.accounts.marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails = OrderData.accounts.mdmProfileSetting.additionalDetails,",
						"          mdmProfileSettingProfileName = OrderData.accounts.mdmProfileSetting.profileName,",
						"          partnerJointBillType = OrderData.accounts.partnerJointBillType,",
						"          pmoIndicator = OrderData.accounts.pmoIndicator,",
						"          priceCode = OrderData.accounts.priceCode,",
						"          priceMatch = OrderData.accounts.priceMatch,",
						"          subMarket = OrderData.accounts.subMarket,",
						"          targetCTN = OrderData.accounts.targetCTN,",
						"          thirdPartyCombinedBill = OrderData.accounts.thirdPartyCombinedBill,",
						"          winBackIndicator = OrderData.accounts.winBackIndicator,",
						"          provisioningSystem = OrderData.accounts.provisioningSystems.provisioningSystem,",
						"          eventTime,",
						"          strategyName = OrderData.accounts.priceStrategy.strategyName,",
						"          strategyId = OrderData.accounts.priceStrategy.strategyId,",
						"          priceLockEndDate = OrderData.accounts.priceStrategy.priceLockEndDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenAllAccounts",
						"coalacc select(mapColumn(",
						"          customerOrderNumber,",
						"          createdDate,",
						"          submittedDate,",
						"          acceptedDate,",
						"          accountCategory,",
						"          accountSubCategory,",
						"          accountSubType,",
						"          accountType,",
						"          autoPayReason,",
						"          b2bReference,",
						"          cardOnFilePaymentMethod,",
						"          billingDeliveryPreference,",
						"          billingLanguagePreference,",
						"          businessAccountName,",
						"          cpni,",
						"          ebillReason,",
						"          enterpriseType,",
						"          gigaPower,",
						"          Account_id,",
						"          langId,",
						"          market,",
						"          passCode,",
						"          paymentArrangement,",
						"          sequence,",
						"          spokenLanguagePreference,",
						"          billingAccountNumber,",
						"          additionalDetails,",
						"          autopayPaymentMethod,",
						"          billingDetail,",
						"          businessAddress,",
						"          creditCheck,",
						"          negotiateConflictCustomer,",
						"          serviceAddress,",
						"          unifiedAccount,",
						"          serviceFacilityQualifications,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          billingAccountTelephoneNumber,",
						"          primaryCTN,",
						"          employeeReferralDetail,",
						"          accountCrossmarketIndicator,",
						"          acpTransactionId,",
						"          acpClassification,",
						"          anchorCTN,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          bigData,",
						"          billPaymentDueDate,",
						"          cardOnFileStatus,",
						"          conflictingServiceDetails,",
						"          consentToCCIndicator,",
						"          contractAcceptance,",
						"          contractLength,",
						"          contractVersionNumber,",
						"          creditAlertFraudAlert,",
						"          creditAlertGeneralMessage,",
						"          ctnValidatedIndicator,",
						"          customerCode,",
						"          delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization,",
						"          internetServiceAuthorization,",
						"          letterOfAuthorizationURL,",
						"          localServiceAuthorization,",
						"          localTollProviderAuthorization,",
						"          longDistanceServiceProvider,",
						"          emailValidatedIndicator,",
						"          existingAutoBillStatus,",
						"          existingAutoBillIndicator,",
						"          landLineNumber,",
						"          liabilityType,",
						"          marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails,",
						"          mdmProfileSettingProfileName,",
						"          partnerJointBillType,",
						"          pmoIndicator,",
						"          priceCode,",
						"          priceMatch,",
						"          subMarket,",
						"          targetCTN,",
						"          thirdPartyCombinedBill,",
						"          winBackIndicator,",
						"          eventTime,",
						"          priceStrategyName = strategyName,",
						"          priceStrategyId = strategyId,",
						"          priceLockEndDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectAllAccounts",
						"filter3 derive(createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          priceLockEndDate = toTimestamp(substring(priceLockEndDate,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn2",
						"coalacc select(mapColumn(",
						"          customerOrderNumber,",
						"          createdDate,",
						"          placeId = businessAddress.placeId,",
						"          connectedCommunityId = businessAddress.connectedCommunityId,",
						"          submittedDate,",
						"          acceptedDate,",
						"          Account_id,",
						"          addressId = businessAddress.addressId,",
						"          BusinessAddress_id = businessAddress.id,",
						"          dwellingType = businessAddress.dwellingType,",
						"          validatedIndicator = businessAddress.validatedIndicator,",
						"          auxillaryaddress_line1 = businessAddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = businessAddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = businessAddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = businessAddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = businessAddress.auxiliaryAddress.line5,",
						"          addressLines = businessAddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddr_addInstructions = businessAddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = businessAddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = businessAddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = businessAddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = businessAddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = businessAddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = businessAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = businessAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = businessAddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = businessAddress.parsedAddress.buildingType,",
						"          parsedAddr_city = businessAddress.parsedAddress.city,",
						"          parsedAddr_country = businessAddress.parsedAddress.country,",
						"          parsedAddr_county = businessAddress.parsedAddress.county,",
						"          parsedAddr_countyCode = businessAddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = businessAddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = businessAddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = businessAddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = businessAddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = businessAddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = businessAddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = businessAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = businessAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = businessAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = businessAddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = businessAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = businessAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = businessAddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = businessAddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = businessAddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = businessAddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = businessAddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = businessAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = businessAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = businessAddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = businessAddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = businessAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = businessAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = businessAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = businessAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = businessAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = businessAddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = businessAddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = businessAddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = businessAddress.parsedAddress.state,",
						"          parsedAddr_streetName = businessAddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = businessAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = businessAddress.parsedAddress.streetType,",
						"          parsedAddr_structure = businessAddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = businessAddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = businessAddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = businessAddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = businessAddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = businessAddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = businessAddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = businessAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddr_zipGeoCode = businessAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = businessAddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = businessAddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = businessAddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = businessAddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = businessAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = businessAddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = businessAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = businessAddress.unparsedAddress.structure,",
						"          unparsedAddr_unit = businessAddress.unparsedAddress.unit,",
						"          unparsedAddr_urbanizationCode = businessAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = businessAddress.unparsedAddress.city,",
						"          unparsedAddr_country = businessAddress.unparsedAddress.country,",
						"          unparsedAddr_state = businessAddress.unparsedAddress.state,",
						"          unparsedAddr_zip = businessAddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = businessAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = businessAddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = businessAddress.unparsedAddress.addressLine2,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          json_additionaldetails = businessAddress.additionalDetails,",
						"          unparsedAddrCounty = businessAddress.unparsedAddress.county,",
						"          additionalDetails = businessAddress.additionalDetails,",
						"          acct_sequence = sequence,",
						"          parsedAddrTimeZone = businessAddress.parsedAddress.addressTimeZone,",
						"          parsedAddrRateZone = businessAddress.parsedAddress.rateZone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBusinessAddress",
						"filter2 derive(createdDate = toTimestamp(toLong(toString(byName('createdDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          submittedDate = toTimestamp(toLong(toString(byName('submittedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          acceptedDate = toTimestamp(toLong(toString(byName('acceptedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          dc_addresslines = regexReplace(addressLines,'\\\",\\\"',' || ')) ~> derivedColumn3",
						"coalacc select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          addressid = serviceAddress.addressId,",
						"          ServiceAddress_id = serviceAddress.id,",
						"          placeId = serviceAddress.placeId,",
						"          connectedCommunityId = serviceAddress.connectedCommunityId,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          line1 = serviceAddress.auxiliaryAddress.line1,",
						"          dwellingType = serviceAddress.dwellingType,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          auxiliaryaddress_line1 = serviceAddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = serviceAddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = serviceAddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = serviceAddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = serviceAddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = serviceAddress.codingAccuracySupportSystemAddress,",
						"          addressLines = serviceAddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddr_addInstructions = serviceAddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = serviceAddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = serviceAddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = serviceAddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = serviceAddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = serviceAddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = serviceAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = serviceAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = serviceAddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = serviceAddress.parsedAddress.buildingType,",
						"          parsedAddr_city = serviceAddress.parsedAddress.city,",
						"          parsedAddr_country = serviceAddress.parsedAddress.country,",
						"          parsedAddr_county = serviceAddress.parsedAddress.county,",
						"          parsedAddr_countyCode = serviceAddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = serviceAddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = serviceAddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = serviceAddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = serviceAddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = serviceAddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = serviceAddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = serviceAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = serviceAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = serviceAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = serviceAddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = serviceAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = serviceAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = serviceAddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = serviceAddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = serviceAddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = serviceAddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = serviceAddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = serviceAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = serviceAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = serviceAddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = serviceAddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = serviceAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = serviceAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = serviceAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = serviceAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = serviceAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = serviceAddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = serviceAddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = serviceAddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = serviceAddress.parsedAddress.state,",
						"          parsedAddr_streetName = serviceAddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = serviceAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = serviceAddress.parsedAddress.streetType,",
						"          parsedAddr_structure = serviceAddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = serviceAddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = serviceAddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = serviceAddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = serviceAddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = serviceAddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = serviceAddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = serviceAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddr_zipGeoCode = serviceAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = serviceAddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = serviceAddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = serviceAddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = serviceAddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = serviceAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = serviceAddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = serviceAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = serviceAddress.unparsedAddress.structure,",
						"          unparsedAddr_unit = serviceAddress.unparsedAddress.unit,",
						"          unparsedAddr_urbanizationCode = serviceAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = serviceAddress.unparsedAddress.city,",
						"          unparsedAddr_country = serviceAddress.unparsedAddress.country,",
						"          unparsedAddr_state = serviceAddress.unparsedAddress.state,",
						"          unparsedAddr_zip = serviceAddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = serviceAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = serviceAddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = serviceAddress.unparsedAddress.addressLine2,",
						"          json_additionalDetails = serviceAddress.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          acct_sequence = sequence,",
						"          unparsedAddrCounty = serviceAddress.unparsedAddress.county,",
						"          parsedAddrTimeZone = serviceAddress.parsedAddress.addressTimeZone,",
						"          parsedAddrRateZone = serviceAddress.parsedAddress.rateZone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectServiceAddress",
						"derivedColumn33 window(over(customerOrderNumber,",
						"          Account_id,",
						"          ServiceAddress_id,",
						"          acct_sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window1",
						"window1 filter(prank ==1 && not(isNull(ServiceAddress_id))) ~> filter1",
						"selectBusinessAddress window(over(customerOrderNumber,",
						"          Account_id,",
						"          BusinessAddress_id,",
						"          acct_sequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window2",
						"window2 filter(prank == 1 && not(isNull(BusinessAddress_id))) ~> filter2",
						"selectAllAccounts window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window3",
						"window3 filter(prank == 1) ~> filter3",
						"selectOrderAccountsBillingDetails window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window5",
						"window5 filter(prank == 1 && !isNull(nameId)) ~> filter5",
						"FinalizeOrderSourceDetail window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window8",
						"flattenSourceDetailAdditionalDetail window(over(customerOrderNumber,",
						"          code,",
						"          value),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window9",
						"derivedColumn64 filter(prank == 1 && !isNull(code)) ~> filter9",
						"flattenLosgsAdditionalDetail window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          code,",
						"          LineItemsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window10",
						"window10 filter(prank == 1 && !isNull(code)) ~> filter10",
						"window8 filter(prank == 1 && !isNull(channel)) ~> filter8",
						"flattenLosgsPriceSummaryList window(over(customerOrderNumber,",
						"          priceType,",
						"          Losgsequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window17",
						"window17 filter(prank ==1 && !isNull(priceType)) ~> filter17",
						"select50 window(over(customerOrderNumber,",
						"          losgsequence,",
						"          Losg_id,",
						"          pricetype),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window18",
						"window18 filter(prank == 1 && !isNull(pricetype)) ~> filter18",
						"derivedColumn12 window(over(customerOrderNumber,",
						"          losg_id,",
						"          losgSequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window19",
						"window19 filter(prank == 1) ~> filter19",
						"flattenTermsandConditions window(over(customerOrderNumber,",
						"          id),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window20",
						"window20 filter(prank == 1 && !isNull(id)) ~> filter20",
						"flattenOrderPromotions window(over(customerOrderNumber,",
						"          Promotion_id,",
						"          sequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window23",
						"window23 filter(prank == 1 && (!isNull(Promotion_id) || !isNull(sequence))) ~> filter23",
						"flattenProductGroups window(over(customerOrderNumber,",
						"          Product_id,",
						"          sequence),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window24",
						"window24 filter(prank ==1 && (!isNull(Product_id) || !isNull(sequence))) ~> filter24",
						"flatten27 window(over(customerOrderNumber,",
						"          priceType),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window25",
						"window25 filter(prank == 1 && !isNull(priceType)) ~> filter25",
						"flattenPriceList window(over(customerOrderNumber,",
						"          priceType),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window26",
						"window26 filter(prank ==1 && !isNull(customerOrderNumber)) ~> filter26",
						"flatten16 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window28",
						"window28 filter(prank ==1 && !isNull(nameid)) ~> filter28",
						"flattenOrderAdditionalDetail window(over(customerOrderNumber,",
						"          code,",
						"          value),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window29",
						"window29 filter(prank ==1 && !isNull(code)) ~> filter29",
						"FinalizeOrderData window(over(customerOrderNumber),",
						"     desc(dc_eventtime, false),",
						"     prank = rowNumber()) ~> window30",
						"window30 filter(prank ==1 && !isNull(customerOrderNumber)) ~> filter30",
						"flattenServiceFacilityQualifications window(over(customerOrderNumber,",
						"          Account_id,",
						"          Actsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window6",
						"window6 filter(prank == 1) ~> filter6",
						"filtercreditPolicy select(mapColumn(",
						"          customerOrderNumber,",
						"          creditPolicyTransactionId = OrderData.creditPolicy.creditPolicyTransactionId,",
						"          crsmOnFlag = OrderData.creditPolicy.crsmOnFlag,",
						"          previousCreditPolicyTransactionId = OrderData.creditPolicy.previousCreditPolicyTransactionId,",
						"          policyAcceptedIndicator = OrderData.creditPolicy.policyAcceptedIndicator,",
						"          uucpStatus = OrderData.creditPolicy.uucpStatus,",
						"          additionalDetails = OrderData.creditPolicy.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcreditpolicy",
						"selectcreditpolicy window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window33",
						"window33 filter(prank ==1) ~> filter33",
						"filter33 alterRow(upsertIf(true())) ~> alterRowcreditpolicy",
						"derivedColumn20 foldDown(unroll(OrderData.debtAccounts, OrderData.debtAccounts),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          debtAccounts = OrderData.debtAccounts,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattendebitaccounts",
						"flattendebitaccounts select(mapColumn(",
						"          customerOrderNumber,",
						"          accountCategory = debtAccounts.accountCategory,",
						"          accountSubCategory = debtAccounts.accountSubCategory,",
						"          affiliateId = debtAccounts.affiliateId,",
						"          amount = debtAccounts.amount,",
						"          debtAccountNumber = debtAccounts.debtAccountNumber,",
						"          debtPaidStatus = debtAccounts.debtPaidStatus,",
						"          id = debtAccounts.id,",
						"          paymentMethodReference = debtAccounts.paymentMethodReference,",
						"          provider = debtAccounts.provider,",
						"          settledBy = debtAccounts.settledBy,",
						"          system = debtAccounts.system,",
						"          systemDivision = debtAccounts.systemDivision,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdebitaccounts",
						"derivedColumn43 window(over(customerOrderNumber,",
						"          debtAccountNumber,",
						"          id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window34",
						"window34 filter(prank ==1) ~> filter34",
						"filter34 alterRow(upsertIf(true())) ~> alterRowdebitaccounts",
						"filtererror select(mapColumn(",
						"          Errors = orderjson_1.orderEvent.data.Errors.Error,",
						"          customerOrderNumber,",
						"          lastmodified_date = dc_eventtime,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecterror",
						"filter122 alterRow(upsertIf(true())) ~> alterRowerrors",
						"selecterror foldDown(unroll(Errors, Errors),",
						"     mapColumn(",
						"          ErrorCode = Errors.ErrorCode,",
						"          ErrorDescription = Errors.ErrorDescription,",
						"          IdRef = Errors.Reference.IdRef,",
						"          Type = Errors.Reference.Type,",
						"          customerOrderNumber,",
						"          eventtime = eventTime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenerror",
						"filter100 select(mapColumn(",
						"          fullyAuthenticatedIndicator = orderjson_1.orderEvent.data.order.moveDetail.fullyAuthenticatedIndicator,",
						"          additionalDetails = orderjson_1.orderEvent.data.order.moveDetail.additionalDetails,",
						"          disconnectDate,",
						"          fromBillingAddress = orderjson_1.orderEvent.data.order.moveDetail.fromBillingAddress,",
						"          fromServiceAddress = orderjson_1.orderEvent.data.order.moveDetail.fromServiceAddress,",
						"          fromTelephoneNumber = orderjson_1.orderEvent.data.order.moveDetail.fromTelephoneNumber,",
						"          lastmodified_date = dc_eventtime,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmoveorder",
						"filter38 alterRow(upsertIf(true())) ~> alterRowmoveorder",
						"selectmoveorder window(over(customerOrderNumber),",
						"     desc(lastmodified_date, true),",
						"     PRANK = rowNumber()) ~> window37",
						"window37 filter(PRANK==1&& not(isNull(customerOrderNumber))) ~> filter38",
						"filtertask select(mapColumn(",
						"          orderjson_1 = orderjson_1.orderEvent.data.OrderTasks.OrderTask,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          CustomerOrderNumber2 = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].CustomerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderTask",
						"derivedColumn67 foldDown(unroll(orderjson_1, orderjson_1),",
						"     mapColumn(",
						"          ApplicationName = orderjson_1.ApplicationName,",
						"          Channel = orderjson_1.Channel,",
						"          CreationDate = orderjson_1.CreationDate,",
						"          CustomerOrderNumber = customerOrderNumber,",
						"          LosgIds = orderjson_1.LosgIds,",
						"          OrderNumber = orderjson_1.OrderNumber,",
						"          PartnerName = orderjson_1.PartnerName,",
						"          ProgramName = orderjson_1.ProgramName,",
						"          QueueId = orderjson_1.QueueId,",
						"          QueueName = orderjson_1.QueueName,",
						"          QueueSlaDetails = orderjson_1.QueueSlaDetails,",
						"          TaskId = orderjson_1.TaskId,",
						"          TaskStatus = orderjson_1.TaskStatus,",
						"          CamundaTaskId = orderjson_1.CamundaTaskId,",
						"          lastmodified_date,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenOrderTask",
						"derivedColumn6 window(over(CustomerOrderNumber,",
						"          dc_taskid),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window38",
						"flattenOrderTask derive(dc_taskid = coalesce(TaskId,CamundaTaskId),",
						"          dc_camuda = coalesce(CamundaTaskId,TaskId),",
						"          dc_losgids = regexReplace(regexReplace(regexReplace(regexReplace(LosgIds,'\",\"',' || '),\"\\\\[\",\"\"),\"\\\"\",''),\"\\\\]\",\"\"),",
						"          dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          CreationDate = toTimestamp(toLong(toString(byName('CreationDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn6",
						"window38 filter(prank==1  && !isNull(dc_taskid)) ~> filter39",
						"filter39 alterRow(upsertIf(true())) ~> alterRowtaskid",
						"filterreferenencedetail select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          encryptedIndicator = OrderData.referenceDetail.encryptedIndicator,",
						"          posReferenceId = OrderData.referenceDetail.posReferenceId,",
						"          posUUID = OrderData.referenceDetail.posUUID,",
						"          associatedRequestID = OrderData.referenceDetail.associatedRequestID,",
						"          passThroughIndicator = OrderData.referenceDetail.passThroughIndicator,",
						"          testOrderIndicator = OrderData.referenceDetail.testOrderIndicator,",
						"          bulkIndicator = OrderData.referenceDetail.bulkIndicator,",
						"          bulkOrderWorkRequestNumber = OrderData.referenceDetail.bulkOrderWorkRequestNumber,",
						"          chatId = OrderData.referenceDetail.chatId,",
						"          commonOrderIndicator = OrderData.referenceDetail.commonOrderIndicator,",
						"          fraudDetectionAdditionalDetails = OrderData.referenceDetail.fraudDetectionDetail.additionalDetails,",
						"          authenticationRequestId = OrderData.referenceDetail.fraudDetectionDetail.authenticationRequestId,",
						"          orderFraudCheckStatus = OrderData.referenceDetail.fraudDetectionDetail.orderFraudCheckStatus,",
						"          orderModifiedAfterPinValidation = OrderData.referenceDetail.fraudDetectionDetail.orderModifiedAfterPinValidation,",
						"          pinValidationSource = OrderData.referenceDetail.fraudDetectionDetail.pinValidationSource,",
						"          pinValidationStatus = OrderData.referenceDetail.fraudDetectionDetail.pinValidationStatus,",
						"          proofOfIdentityUrl = OrderData.referenceDetail.fraudDetectionDetail.proofOfIdentityUrl,",
						"          smsCTN = OrderData.referenceDetail.fraudDetectionDetail.smsCTN,",
						"          validationType = OrderData.referenceDetail.fraudDetectionDetail.validationType,",
						"          efcCallIndicator = OrderData.referenceDetail.fraudDetectionDetail.efcCallIndicator,",
						"          orderStatusUrl = OrderData.referenceDetail.orderStatusUrl,",
						"          parentOrderId = OrderData.referenceDetail.parentOrderId,",
						"          partialOrderIndicator = OrderData.referenceDetail.partialOrderIndicator,",
						"          productCombinationCode = OrderData.referenceDetail.productCombinationCode,",
						"          referenceOrderId = OrderData.referenceDetail.referenceOrderId,",
						"          resubmitOrderIndicator = OrderData.referenceDetail.resubmitOrderIndicator,",
						"          summaryCreatedIndicator = OrderData.referenceDetail.summaryCreatedIndicator,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window39",
						"window39 filter(prank==1) ~> filter40",
						"filter40 alterRow(upsertIf(true())) ~> alterRowreferencedetail",
						"parseJsonOrderData filter(not(isNull(orderjson_1.orderEvent.data.OrderTasks))) ~> filtertask",
						"derivedColumn35 filter(not(isNull(orderjson_1.orderEvent.data.Errors))) ~> filtererror",
						"parseJsonOrderData filter(not(isNull(orderjson_1.orderEvent.data.order.customerOrderNumber))) ~> filterorderdata",
						"selectOrderLosgs derive(sunsetDate = toTimestamp(toLong(toString(byName('sunsetDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          requestedExecutionDate = toTimestamp(toLong(toString(byName('requestedExecutionDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn12",
						"select9 derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          disconnectDate = toTimestamp(toLong(toString(byName('disconnectDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          customerOrderNumber = coalesce(customerOrderNumber,customerOrderNumber2)) ~> derivedColumn14",
						"filterorderdata select(mapColumn(",
						"          orderjson_1,",
						"          lastmodified_date,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          eventTime,",
						"          disconnectDate = orderjson_1.orderEvent.data.order.moveDetail.actualDisconnectDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select9",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn20",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn21",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn22",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn23",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          emailAddress = subscriberName.emailAddress,",
						"          firstName = subscriberName.firstName,",
						"          id = subscriberName.id,",
						"          lastName = subscriberName.lastName,",
						"          prefix = subscriberName.prefix,",
						"          suffix = subscriberName.suffix,",
						"          title = subscriberName.title,",
						"          preferredContactMethod = subscriberName.preferredContactMethod,",
						"          previousLegalLastName = subscriberName.previousLegalLastName,",
						"          primaryContactPhones = subscriberName.primaryContactPhones,",
						"          middleInitial = subscriberName.middleInitial,",
						"          legalLastName = subscriberName.legalLastName,",
						"          legalFirstName = subscriberName.legalFirstName,",
						"          additionalContactPhones = subscriberName.additionalContactPhones,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select10",
						"select12 window(over(customerOrderNumber,",
						"          losg_sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window40",
						"window40 filter(prank==1) ~> filter41",
						"filter41 alterRow(upsertIf(true())) ~> IPtvalterrow",
						"select10 foldDown(unroll(primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = id,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneType = primaryContactPhones.contactPhoneType,",
						"          primaryContactPhoneNumber = primaryContactPhones.phoneNumber,",
						"          primaryContactextension = primaryContactPhones.extension,",
						"          primarycontactPhoneConsentDetails = primaryContactPhones.consentDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 window(over(customerOrderNumber,",
						"          losg_sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window41",
						"window41 filter(prank==1 && !isNull(nameId)) ~> filter42",
						"filter42 alterRow(upsertIf(true())) ~> AlterSubcribeName",
						"filter112 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          freeSTBReceiverCount = iptvLOSCharacteristics.freeSTBReceiverCount,",
						"          parentComponentCode = iptvLOSCharacteristics.parentComponentCode,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select12",
						"flatten30 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          termsandconditions_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window42",
						"window42 filter(prank==1  && !isNull(termsandconditions_id)) ~> filter43",
						"filter111 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          reservedTelephoneNumber = voipLOSCharacteristics.reservedTelephoneNumber,",
						"          e911Id = voipLOSCharacteristics.e911Detail.id,",
						"          e911HomeAlarmSystem = voipLOSCharacteristics.e911Detail.homeAlarmSystem,",
						"          e911NoMatchFound = voipLOSCharacteristics.e911Detail.noMatchFound,",
						"          e911address = voipLOSCharacteristics.e911Detail.address,",
						"          e911TermsAndConditionId = voipLOSCharacteristics.e911Detail.termsAndCondition911.id,",
						"          e911TnCaccepted = voipLOSCharacteristics.e911Detail.termsAndCondition911.accepted,",
						"          e911TnCcategory = voipLOSCharacteristics.e911Detail.termsAndCondition911.category,",
						"          e911TnCagreementText = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementText,",
						"          e911TnCagreementType = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementType,",
						"          e911TnCagreementURL = voipLOSCharacteristics.e911Detail.termsAndCondition911.agreementURL,",
						"          e911TnCtimestamp = voipLOSCharacteristics.e911Detail.termsAndCondition911.timestamp,",
						"          e911TnCversion = voipLOSCharacteristics.e911Detail.termsAndCondition911.version,",
						"          e911TnCdocumentName = voipLOSCharacteristics.e911Detail.termsAndCondition911.documentName,",
						"          e911TnCorderLevelIndicator = voipLOSCharacteristics.e911Detail.termsAndCondition911.orderLevelIndicator,",
						"          e911TnCId = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncId,",
						"          e911TnCKey = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncKey,",
						"          e911TnCRecordingOff = voipLOSCharacteristics.e911Detail.termsAndCondition911.tncRecordingOff,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select13",
						"select13 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window43",
						"derivedColumn44 filter(prank == 1) ~> filter44",
						"filter44 alterRow(upsertIf(true())) ~> altervoipc",
						"flatten26 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = losgSequence,",
						"          dirListingName,",
						"          dirListingAdditionalDetails,",
						"          dirListingDesignation,",
						"          dirListingAddress,",
						"          dirListingListingType,",
						"          dirListingListingCategory,",
						"          dirListingListBy,",
						"          releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator,",
						"          dirListingParentComponentCode,",
						"          dirListingTitle2,",
						"          dirListingSubscriberName,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select14",
						"select14 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence,",
						"          dirListingName),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window44",
						"derivedColumn69 filter(prank==1) ~> filter45",
						"filter45 alterRow(upsertIf(true())) ~> altere11",
						"filter110 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          accountConversion = wirelessLOSCharacteristics.accountConversionStatus,",
						"          activationDate = wirelessLOSCharacteristics.activationDate,",
						"          availabilityDate = wirelessLOSCharacteristics.availabilityDate,",
						"          billingSystemId = wirelessLOSCharacteristics.billingSystemId,",
						"          calculateTaxIndicator = wirelessLOSCharacteristics.calculateTaxIndicator,",
						"          addendDateAndTime = wirelessLOSCharacteristics.coPayData.addendDateAndTime,",
						"          addendVersion = wirelessLOSCharacteristics.coPayData.addendVersion,",
						"          allowanceAmount = wirelessLOSCharacteristics.coPayData.allowanceAmount,",
						"          cancelCTN = wirelessLOSCharacteristics.coPayData.cancelCTN,",
						"          enrollingCTN = wirelessLOSCharacteristics.coPayData.enrollingCTN,",
						"          receivingBAN = wirelessLOSCharacteristics.coPayData.receivingBAN,",
						"          receivingFAN = wirelessLOSCharacteristics.coPayData.receivingFAN,",
						"          CCar_make = wirelessLOSCharacteristics.connectedCarDetail.make,",
						"          CCar_model = wirelessLOSCharacteristics.connectedCarDetail.model,",
						"          CCar_trim = wirelessLOSCharacteristics.connectedCarDetail.trim,",
						"          CCar_vehicleManufacturer = wirelessLOSCharacteristics.connectedCarDetail.vehicleManufacturer,",
						"          CCar_vin = wirelessLOSCharacteristics.connectedCarDetail.vin,",
						"          CCar_year = wirelessLOSCharacteristics.connectedCarDetail.year,",
						"          crossUpgradeIndicator = wirelessLOSCharacteristics.crossUpgradeIndicator,",
						"          curbsideDelivery = wirelessLOSCharacteristics.curbsideDelivery,",
						"          inventoryStoreId = wirelessLOSCharacteristics.inventoryStoreId,",
						"          mobileNumber = wirelessLOSCharacteristics.mobileNumber,",
						"          paymentId = wirelessLOSCharacteristics.paymentId,",
						"          preOrderIndicator = wirelessLOSCharacteristics.preOrderIndicator,",
						"          primarySharedPlanIndicator = wirelessLOSCharacteristics.primarySharedPlanIndicator,",
						"          shippedHotIndicator = wirelessLOSCharacteristics.shippedHotIndicator,",
						"          shoppingZipCode = wirelessLOSCharacteristics.shoppingZipCode,",
						"          storeId = wirelessLOSCharacteristics.storeId,",
						"          subscriberCrossmarketIndicator = wirelessLOSCharacteristics.subscriberCrossmarketIndicator,",
						"          subscriptionClass = wirelessLOSCharacteristics.subscriptionClass,",
						"          tradeInQuoteId = wirelessLOSCharacteristics.tradeInQuoteId,",
						"          upgrade_relatedMobileNumber = wirelessLOSCharacteristics.upgradeDetail.relatedMobileNumber,",
						"          upgrade_relationship = wirelessLOSCharacteristics.upgradeDetail.relationship,",
						"          manageCallListaction = wirelessLOSCharacteristics.manageCallList.action,",
						"          manageCallListCompAListName = wirelessLOSCharacteristics.manageCallList.companyAListName,",
						"          manageCallListcompCTNList = wirelessLOSCharacteristics.manageCallList.companyCTNList,",
						"          manageCallListcontactCTN = wirelessLOSCharacteristics.manageCallList.contactCTN,",
						"          manageCallListId = wirelessLOSCharacteristics.manageCallList.id,",
						"          manageCallListOverrideInd = wirelessLOSCharacteristics.manageCallList.overrideWithCompanyAListIndicator,",
						"          splitLiabilityDataAddendDateAndTime = wirelessLOSCharacteristics.splitLiabilityData.addendDateAndTime,",
						"          splitLiabilityDataAddendVersion = wirelessLOSCharacteristics.splitLiabilityData.addendVersion,",
						"          splitLiabilityDataCancelCTN = wirelessLOSCharacteristics.splitLiabilityData.cancelCTN,",
						"          splitLiabilityDataEnrollingCTN = wirelessLOSCharacteristics.splitLiabilityData.enrollingCTN,",
						"          splitLiabilityDataOneTimeChargeInd = wirelessLOSCharacteristics.splitLiabilityData.oneTimeChargeIndicator,",
						"          splitLiabilityValueIndicator = wirelessLOSCharacteristics.splitLiabilityData.splitLiabilityValueIndicator,",
						"          splitLiabilityDataTargetBAN = wirelessLOSCharacteristics.splitLiabilityData.targetBAN,",
						"          splitLiabilityDataTargetFAN = wirelessLOSCharacteristics.splitLiabilityData.targetFAN,",
						"          splitLiabilityDataTelecomManagerEmail = wirelessLOSCharacteristics.splitLiabilityData.telecomManagerEmailAddress,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          networkFulfillmentDate = wirelessLOSCharacteristics.networkFulfillmentDate,",
						"          subscriberNumberStatus = wirelessLOSCharacteristics.subscriberNumberStatus,",
						"          subscriberId = wirelessLOSCharacteristics.subscriberId,",
						"          preferredCTNZipCode = wirelessLOSCharacteristics.preferredCTNZipCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select15",
						"derivedColumn56 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window45",
						"window45 filter(prank==1) ~> filter46",
						"filter46 alterRow(upsertIf(true())) ~> alterWirlessChar",
						"derivedColumn51 window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window48",
						"window48 filter(prank ==1) ~> filter49",
						"filter49 alterRow(upsertIf(true())) ~> alterRowOrderAccountsCreditCheck",
						"derivedColumn55 window(over(customerOrderNumber,",
						"          sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window49",
						"window49 filter(prank==1) ~> filter50",
						"filter50 alterRow(upsertIf(true())) ~> alterRowPortDetail",
						"select18 derive(dc_codingaccuracysupport = regexReplace(addressLines,'\\\",\\\"',' || ')) ~> derivedColumn31",
						"derivedColumn31 window(over(customerOrderNumber,",
						"          Account_id,",
						"          BillingAddress_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window50",
						"window50 filter(prank==1  && !isNull(BillingAddress_id)) ~> filter51",
						"filter51 alterRow(upsertIf(true())) ~> alterRowv101oceOrderAcctsBillingDetailAddr",
						"flattenBillingDetails select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          billingType,",
						"          placeId,",
						"          addressId,",
						"          connectedCommunityId,",
						"          BillingAddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxillaryaddress_line1,",
						"          auxillaryaddress_line2,",
						"          auxillaryaddress_line3,",
						"          auxillaryaddress_line4,",
						"          auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress,",
						"          addressLines,",
						"          parsed_addInstructions,",
						"          parsed_addressChanged,",
						"          parsed_addressMatchCode,",
						"          parsed_addressStreetLine,",
						"          parsed_addressType,",
						"          parsed_apartmentUnit,",
						"          parsed_apartmentUnitNumber,",
						"          parsed_assignedStreetNumber,",
						"          parsed_attention,",
						"          parsed_buildingType,",
						"          parsed_city,",
						"          parsed_country,",
						"          parsed_county,",
						"          parsed_countyCode,",
						"          parsed_direction,",
						"          parsed_directionPrefix,",
						"          parsed_disconnectDate,",
						"          parsed_exchangeCode,",
						"          parsed_exhaustCode,",
						"          parsed_houseNumber,",
						"          parsed_houseNumberPrefix,",
						"          parsed_houseNumberSuffix,",
						"          parsed_incorporatedIndicator,",
						"          parsed_internationalZip,",
						"          parsed_lastDisconnectedTransportType,",
						"          parsed_lastNetworkAccessDeviceType,",
						"          parsed_legalEntity,",
						"          parsed_level,",
						"          parsed_levelNumber,",
						"          parsed_linkKey,",
						"          parsed_postOfficeBox,",
						"          parsed_primaryAddressLine,",
						"          parsed_primaryNPANXX,",
						"          parsed_province,",
						"          parsed_rateCenterCode,",
						"          parsed_rateZoneBanCode,",
						"          parsed_rsagValidationIndicator,",
						"          parsed_ruralRouteBoxNumber,",
						"          parsed_ruralRouteCenterNumber,",
						"          parsed_secondaryAddressLine,",
						"          parsed_siteAddressId,",
						"          parsed_siteId,",
						"          parsed_smartMoves,",
						"          parsed_state,",
						"          parsed_streetName,",
						"          parsed_streetNameSuffix,",
						"          parsed_streetType,",
						"          parsed_structure,",
						"          parsed_structureNumber,",
						"          parsed_tarCode,",
						"          parsed_telephoneNumber,",
						"          parsed_urbanizationCode,",
						"          parsed_videoHubOffice,",
						"          parsed_zip,",
						"          parsed_zipCodeExtension,",
						"          parsed_zipGeoCode,",
						"          unparsed_addressLine1,",
						"          unparsed_addressLine3,",
						"          unparsed_attention,",
						"          unparsed_elevation,",
						"          unparsed_postOfficeBox,",
						"          unparsed_province,",
						"          unparsed_ruralRoute,",
						"          unparsed_structure,",
						"          unparsed_unit,",
						"          unparsed_urbanizationCode,",
						"          unparsed_city,",
						"          unparsed_country,",
						"          unparsed_state,",
						"          unparsed_zip,",
						"          unparsed_zipCodeExtension,",
						"          unparsed_internationalZip,",
						"          unparsed_addressLine2,",
						"          dob,",
						"          ssn,",
						"          pin,",
						"          securityAnswer,",
						"          securityQuestion,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          line1,",
						"          stringify_additionaldetails = additionalDetails,",
						"          sequence,",
						"          unparsed_county,",
						"          parsedAddrRateZone,",
						"          parsedAddrTimeZone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select18",
						"selectServiceAddress derive(dc_addressLines = regexReplace(codingAccuracySupportSystemAddress.addressLines,'\\\",\\\"',' || ')) ~> derivedColumn33",
						"select26 foldDown(unroll(repDetails, repDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          dealerCode = repDetails.dealerCode,",
						"          repAction = repDetails.repAction,",
						"          repId = repDetails.repId,",
						"          salesCode = repDetails.salesCode,",
						"          type = repDetails.type,",
						"          submittedBy",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattencompensationrepdetail",
						"flattencompensationrepdetail window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          repId),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowCompensation",
						"windowCompensation filter(prank==1) ~> filter52",
						"filter52 alterRow(upsertIf(true())) ~> alterCompensation",
						"coallosgid foldDown(unroll(additionalDetails, additionalDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          type = additionalDetails.type,",
						"          parentType = additionalDetails.parentType,",
						"          code = additionalDetails.code,",
						"          value = additionalDetails.value,",
						"          sequence = additionalDetails.sequence",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten5",
						"flatten5 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losg_sequence,",
						"          code),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window51",
						"window51 filter(prank==1 && !isNull(code)) ~> filter53",
						"filter53 alterRow(upsertIf(true())) ~> alteradditonalDetails",
						"select62 window(over(customerOrderNumber,",
						"          sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window52",
						"window52 filter(prank==1) ~> filter54",
						"filter54 alterRow(upsertIf(true())) ~> alterRowlosginternetchar",
						"select21 window(over(customerOrderNumber,",
						"          sequence,",
						"          Losg_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window53",
						"window53 filter(prank==1) ~> filter55",
						"filter55 alterRow(upsertIf(true())) ~> alterRowDIrectvchar",
						"derivedColumn35 select(mapColumn(",
						"          eventid = orderjson_1.orderEvent.eventid,",
						"          eventSource = orderjson_1.orderEvent.eventSource,",
						"          eventType = orderjson_1.orderEvent.eventType,",
						"          customerOrderNumber,",
						"          orderType = orderjson_1.orderEvent.metaData.orderType,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          dc_eventTime = dc_eventtime,",
						"          traceId = orderjson_1.orderEvent.metaData.traceId,",
						"          sender = orderjson_1.orderEvent.metaData.sender,",
						"          channel = orderjson_1.orderEvent.metaData.channel,",
						"          channel1 = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          channel2 = orderjson_1.orderEvent.data.transactionLogs[1].channel,",
						"          isSingleTopic = orderjson_1.orderEvent.metaData.isSingleTopic,",
						"          routingInfo = orderjson_1.orderEvent.metaData.routingInfo,",
						"          automationUrl = orderjson_1.orderEvent.metaData.automationUrl,",
						"          priority = orderjson_1.orderEvent.metaData.priority,",
						"          version = orderjson_1.orderEvent.metaData.version,",
						"          isUpgradeOrder = orderjson_1.orderEvent.metaData.isUpgradeOrder,",
						"          fraudResponse = orderjson_1.orderEvent.metaData.fraudResponse,",
						"          originalVersion = orderjson_1.orderEvent.metaData.originalVersion,",
						"          fallout = orderjson_1.orderEvent.metaData.fallout,",
						"          callback = orderjson_1.orderEvent.metaData.callback,",
						"          idbStatus = orderjson_1.orderEvent.metaData.idbStatus,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select19",
						"derivedColumn70 alterRow(insertIf(true())) ~> alterRowevent",
						"parseJsonOrderData select(mapColumn(",
						"          orderjson_1,",
						"          eventTime = orderjson_1.orderEvent.eventTime,",
						"          customerOrderNumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          metedata_channel = orderjson_1.orderEvent.metaData.channel,",
						"          order_task_Channel = orderjson_1.orderEvent.data.OrderTasks.OrderTask[1].Channel,",
						"          sourcedetail_channel = orderjson_1.orderEvent.data.order.sourceDetail.channel,",
						"          lastmodified_date,",
						"          eventTime = orderjson_1.orderEvent.eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select20",
						"select20 derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          customerOrderNumber = coalesce(customerOrderNumber,customerOrderNumber2),",
						"          channel = coalesce(sourcedetail_channel,order_task_Channel,metedata_channel)) ~> derivedColumn35",
						"derivedColumn35 filter(not(isNull(orderjson_1.orderEvent.data.transactionLogs))) ~> filtertransactionlogs",
						"filtertransactionlogs select(mapColumn(",
						"          TransactionLogs = orderjson_1.orderEvent.data.transactionLogs,",
						"          customerOrderNumber,",
						"          channel,",
						"          eventTime,",
						"          lastmodified_date = dc_eventtime,",
						"          idbStatus = orderjson_1.orderEvent.metaData.idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderTransctionLogs",
						"selectOrderTransctionLogs foldDown(unroll(TransactionLogs, TransactionLogs),",
						"     mapColumn(",
						"          comments = TransactionLogs.comments,",
						"          actionBy = TransactionLogs.actionBy,",
						"          updateInfos = TransactionLogs.updateInfos,",
						"          channel = TransactionLogs.channel,",
						"          orderStatus = TransactionLogs.orderStatus,",
						"          transactionName = TransactionLogs.transactionName,",
						"          transactionType = TransactionLogs.transactionType,",
						"          changedLosgReferenceId = TransactionLogs.changedLosgReferenceId,",
						"          recordId = TransactionLogs.recordId,",
						"          queueName = TransactionLogs.queueName,",
						"          parentOrderId = TransactionLogs.parentOrderId,",
						"          startTime = TransactionLogs.startTime,",
						"          endTime = TransactionLogs.endTime,",
						"          transactionId = TransactionLogs.transactionId,",
						"          orderId = TransactionLogs.orderId,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime,",
						"          losgs = TransactionLogs.losgs,",
						"          idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenTransactionLosgHistory",
						"flattenTransactionLosgHistory derive(endTime = toTimestamp(case((instr(endTime,'T'))>0,toString(toTimestamp(substring(endTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss.SSS')),toString(toTimestamp(toLong(toString(byName('endTime'))),'yyyy-MM-dd HH:mm:ss.SSS'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          startTime = case((instr(startTime,'T'))>0,toTimestamp(substring(startTime,1,23),'yyyy-MM-dd\\'T\\'HH:mm:ss'),    toTimestamp(toLong(toString(byName('startTime'))),'yyyy-MM-dd HH:mm:ss'))) ~> derivedColumn36",
						"filter108 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          dealerId = direcTVLOSCharacteristics.dealerId,",
						"          freeSTBReceiverCount = direcTVLOSCharacteristics.freeSTBReceiverCount,",
						"          hasMoreThanThreeFloors = direcTVLOSCharacteristics.hasMoreThanThreeFloors,",
						"          marketingSourceCode = direcTVLOSCharacteristics.marketingSourceCode,",
						"          moveInOrder = direcTVLOSCharacteristics.moveInOrder,",
						"          offerLanguage = direcTVLOSCharacteristics.offerLanguage,",
						"          parentComponentCode = direcTVLOSCharacteristics.parentComponentCode,",
						"          serviceAgreement = direcTVLOSCharacteristics.serviceAgreement",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select21",
						"filtercreditCheck select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          addAccountGUId = creditCheck.addAccountGUId,",
						"          applicationApprovalDate = creditCheck.applicationApprovalDate,",
						"          applicationExpiresDate = creditCheck.applicationExpiresDate,",
						"          creditBand = creditCheck.creditBand,",
						"          creditCheckMcreditCheckManagementTransactionIdanagementTransactionId = creditCheck.creditCheckManagementTransactionId,",
						"          creditCheckRanIndicator = creditCheck.creditCheckRanIndicator,",
						"          creditClass = creditCheck.creditClass,",
						"          creditInquiryOpen = creditCheck.creditInquiryOpen,",
						"          creditPolicyToken = creditCheck.creditPolicyToken,",
						"          creditReferenceDate = creditCheck.creditReferenceDate,",
						"          creditScoreResult = creditCheck.creditScoreResult,",
						"          creditStatus = creditCheck.creditStatus,",
						"          creditVerified = creditCheck.creditVerified,",
						"          currentAccountBalance = creditCheck.currentAccountBalance,",
						"          currentDeniablePastDueAmount = creditCheck.currentDeniablePastDueAmount,",
						"          currentNonDeniablePastDueAmount = creditCheck.currentNonDeniablePastDueAmount,",
						"          currentNonRegulatedPastDueAmount = creditCheck.currentNonRegulatedPastDueAmount,",
						"          currentPastDueAmount = creditCheck.currentPastDueAmount,",
						"          currentRegulatedPastDueAmount = creditCheck.currentRegulatedPastDueAmount,",
						"          customerApprovalSystemTransactionId = creditCheck.customerApprovalSystemTransactionId,",
						"          debtPaidStatus = creditCheck.debtPaidStatus,",
						"          depositAmount = creditCheck.depositAmount,",
						"          depositRequired = creditCheck.depositRequired,",
						"          depositStatus = creditCheck.depositStatus,",
						"          electronicIdNumber = creditCheck.electronicIdNumber,",
						"          electronicIdVerifierLaunched = creditCheck.electronicIdVerifierLaunched,",
						"          electronicIdVerifierRequired = creditCheck.electronicIdVerifierRequired,",
						"          electronicIdVerifierResults = creditCheck.electronicIdVerifierResults,",
						"          exchangeListFound = creditCheck.exchangeListFound,",
						"          expressPayDetailHeld = creditCheck.expressPayDetailHeld,",
						"          finalBillAccounts = creditCheck.finalBillAccounts,",
						"          ignoreDeposit = creditCheck.ignoreDeposit,",
						"          individualCustomerKey = creditCheck.individualCustomerKey,",
						"          minimumAmountDue = creditCheck.minimumAmountDue,",
						"          nonRefundableCreditFee = creditCheck.nonRefundableCreditFee,",
						"          numberApprovedLines = creditCheck.numberApprovedLines,",
						"          numberLinesRequired = creditCheck.numberLinesRequired,",
						"          productsInclude = creditCheck.productsInclude,",
						"          proprietarySegment = creditCheck.proprietarySegment,",
						"          reasonCode = creditCheck.reasonCode,",
						"          reasonCodeDescription = creditCheck.reasonCodeDescription,",
						"          safeScanAlertIndicator = creditCheck.safeScanAlertIndicator,",
						"          safeScanPassIndicator = creditCheck.safeScanPassIndicator,",
						"          singleCreditQueryWirelessIndicator = creditCheck.singleCreditQueryWirelessIndicator,",
						"          treatmentCode = creditCheck.treatmentCode,",
						"          treatmentMessage = creditCheck.treatmentMessage,",
						"          writeOffAmount = creditCheck.writeOffAmount,",
						"          writeOffDate = creditCheck.writeOffDate,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          finalBillAccounts = creditCheck.finalBillAccounts",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select22",
						"filter43 alterRow(upsertIf(true())) ~> alterRowtermsandconditins",
						"alterRowtermsandconditins derive(timestamp = toTimestamp(toLong(toString(byName('timestamp'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> MapDrifted1",
						"filter107 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          sequence,",
						"          repDetails = compensation.repDetails,",
						"          submittedBy = compensation.submittedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select26",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          portTelephoneNumber = numberPortDetail.portTelephoneNumber,",
						"          currentServiceProviderId = numberPortDetail.currentServiceProviderId,",
						"          customerCode = numberPortDetail.customerCode,",
						"          disconAccepted = numberPortDetail.disconnectAcknowledged.accepted,",
						"          disconDevInstallAgreementType = numberPortDetail.disconnectAcknowledged.deviceInstallAgreementType,",
						"          disconEConsentAgreementType = numberPortDetail.disconnectAcknowledged.econsentAgreementType,",
						"          disconTimestamp = numberPortDetail.disconnectAcknowledged.timestamp,",
						"          disconVersion = numberPortDetail.disconnectAcknowledged.version,",
						"          e911ServiceRoutingNumber = numberPortDetail.e911ServiceRoutingNumber,",
						"          lightspeedLocalRoutingNumber = numberPortDetail.lightspeedLocalRoutingNumber,",
						"          lastFourOfSSN = numberPortDetail.lastFourOfSSN,",
						"          localRoutingNumber = numberPortDetail.localExchangeRoutingGuideLocalRoutingNumber,",
						"          name = numberPortDetail.name,",
						"          nonATTPortIn = numberPortDetail.nonATTPortIn,",
						"          ospAccountNumber = numberPortDetail.ospAccountNumber,",
						"          ospName = numberPortDetail.ospName,",
						"          pinOrPassword = numberPortDetail.pinOrPassword,",
						"          portEligibility = numberPortDetail.portEligibility,",
						"          portInType = numberPortDetail.portInType,",
						"          portRequestNumber = numberPortDetail.portRequestNumber,",
						"          portStatus = numberPortDetail.portStatus,",
						"          previousAddress = numberPortDetail.previousAddress,",
						"          shadowLocalRoutingNumber = numberPortDetail.shadowLocalRoutingNumber,",
						"          ssn = numberPortDetail.ssn,",
						"          taxId = numberPortDetail.taxId,",
						"          shipmentInfoUpdatedIndicator = numberPortDetail.shipmentInfoUpdatedIndicator,",
						"          portstatusReasonCode = numberPortDetail.portstatusReasonCode,",
						"          portRequestLineStatus = numberPortDetail.portRequestLineStatus,",
						"          portstatusReasonDescription = numberPortDetail.portstatusReasonDescription",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select27",
						"filter105 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          acctsequence = sequence,",
						"          purchaseOrderNumber = autopayPaymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          accountsReceivableIndicator = autopayPaymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          btmEquipmentType = autopayPaymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = autopayPaymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = autopayPaymentMethod.btm.totalAmount,",
						"          btnCustomerCode = autopayPaymentMethod.btn.customerCode,",
						"          btnPaymentAmount = autopayPaymentMethod.btn.paymentAmount,",
						"          btnTn = autopayPaymentMethod.btn.tn,",
						"          cashPaymentAmount = autopayPaymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = autopayPaymentMethod.cash.paymentToken,",
						"          lpmCustomerAgreementVersion = autopayPaymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmLast4Digits = autopayPaymentMethod.lastPaymentMethod.lpmLast4Digits,",
						"          lpmPaymentType = autopayPaymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = autopayPaymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = autopayPaymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          ipmTotalAmount = autopayPaymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = autopayPaymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = autopayPaymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = autopayPaymentMethod.store.last4Digits,",
						"          storePaymentAmount = autopayPaymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = autopayPaymentMethod.store.profileOwnerId,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select28",
						"select28 window(over(customerOrderNumber,",
						"          Account_id,",
						"          acctsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window54",
						"window54 filter(prank==1) ~> filter56",
						"filter56 alterRow(upsertIf(true())) ~> alterRowautopay",
						"filter104 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          accsequence = sequence,",
						"          paymentMethodId = autopayPaymentMethod.ePaymentMethod.paymentMethodId,",
						"          achAccountHolderName = autopayPaymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountNumber = autopayPaymentMethod.ePaymentMethod.ach.accountNumber,",
						"          achAccountNumberLast4Digits = autopayPaymentMethod.ePaymentMethod.ach.accountNumberLast4Digits,",
						"          achAccountType = autopayPaymentMethod.ePaymentMethod.ach.accountType,",
						"          achRoutingNumber = autopayPaymentMethod.ePaymentMethod.ach.routingNumber,",
						"          bankingPartnerCustomerId = autopayPaymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = autopayPaymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = autopayPaymentMethod.ePaymentMethod.cardCryptogram,",
						"          cardBillingZipCode = autopayPaymentMethod.ePaymentMethod.cardBillingZipCode,",
						"          ccCardNotValidatedIndicator = autopayPaymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = autopayPaymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          ccCreditCardNumber = autopayPaymentMethod.ePaymentMethod.cc.creditCardNumber,",
						"          ccExpirationYearMonth = autopayPaymentMethod.ePaymentMethod.cc.expirationYearMonth,",
						"          creditCardLast4Digits = autopayPaymentMethod.ePaymentMethod.creditCardLast4Digits,",
						"          creditCardType = autopayPaymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = autopayPaymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          lastmodified_date,",
						"          giftCardIndicator = autopayPaymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailPaymentHandle = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = autopayPaymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = autopayPaymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = autopayPaymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = autopayPaymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileType = autopayPaymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentProfileOwnerId = autopayPaymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          paymentTenderConfigMerchantId = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = autopayPaymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = autopayPaymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = autopayPaymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = autopayPaymentMethod.ePaymentMethod.payType,",
						"          paymentMethodId = autopayPaymentMethod.ePaymentMethod.paymentMethodId,",
						"          payPalEmailAddress = autopayPaymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = autopayPaymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = autopayPaymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = autopayPaymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = autopayPaymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationDate,",
						"          preAuthAuthorizationExpirationDate = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate,",
						"          preAuthAuthorizationKey = autopayPaymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = autopayPaymentMethod.ePaymentMethod.profileAction,",
						"          token = autopayPaymentMethod.ePaymentMethod.token,",
						"          totalAmount = autopayPaymentMethod.ePaymentMethod.totalAmount,",
						"          last4Digits = autopayPaymentMethod.ePaymentMethod.last4Digits,",
						"          verificationIndicator = autopayPaymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = autopayPaymentMethod.ePaymentMethod.skipAuthorization,",
						"          dc_eventtime,",
						"          address = autopayPaymentMethod.ePaymentMethod.address",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select29",
						"derivedColumn62 window(over(customerOrderNumber,",
						"          Account_id,",
						"          accsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window55",
						"window55 filter(prank==1) ~> filter57",
						"filter57 alterRow(upsertIf(true())) ~> alterRowautoepay",
						"filter103 select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          purchaseOrderNumber = cardOnFilePaymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          accountsReceivableIndicator = cardOnFilePaymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          btmEquipmentType = cardOnFilePaymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = cardOnFilePaymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = cardOnFilePaymentMethod.btm.totalAmount,",
						"          btnCustomerCode = cardOnFilePaymentMethod.btn.customerCode,",
						"          btnPaymentAmount = cardOnFilePaymentMethod.btn.paymentAmount,",
						"          btnTn = cardOnFilePaymentMethod.btn.tn,",
						"          cashPaymentAmount = cardOnFilePaymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = cardOnFilePaymentMethod.cash.paymentToken,",
						"          ipmCustomerAgreementVersion = cardOnFilePaymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmLast4Digits = cardOnFilePaymentMethod.lastPaymentMethod.lpmLast4Digits,",
						"          lpmPaymentType = cardOnFilePaymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = cardOnFilePaymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = cardOnFilePaymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          ipmTotalAmount = cardOnFilePaymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = cardOnFilePaymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = cardOnFilePaymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = cardOnFilePaymentMethod.store.last4Digits,",
						"          storePaymentAmount = cardOnFilePaymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = cardOnFilePaymentMethod.store.profileOwnerId,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select30",
						"select30 window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window56",
						"window56 filter(prank==1) ~> filter58",
						"filter58 alterRow(upsertIf(true())) ~> alterRowcardonfile",
						"filtecardOnFilePaymentMethod select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          acctsequence = sequence,",
						"          cardOnFilePaymentMethod,",
						"          achAccountHolderName = cardOnFilePaymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountNumber = cardOnFilePaymentMethod.ePaymentMethod.ach.accountNumber,",
						"          achAccountNumberLast4Digits = cardOnFilePaymentMethod.ePaymentMethod.ach.accountNumberLast4Digits,",
						"          achAccountType = cardOnFilePaymentMethod.ePaymentMethod.ach.accountType,",
						"          achRoutingNumber = cardOnFilePaymentMethod.ePaymentMethod.ach.routingNumber,",
						"          bankingPartnerCustomerId = cardOnFilePaymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = cardOnFilePaymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = cardOnFilePaymentMethod.ePaymentMethod.cardCryptogram,",
						"          cardBillingZipCode = cardOnFilePaymentMethod.ePaymentMethod.cardBillingZipCode,",
						"          ccCardNotValidatedIndicator = cardOnFilePaymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = cardOnFilePaymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          ccCreditCardNumber = cardOnFilePaymentMethod.ePaymentMethod.cc.creditCardNumber,",
						"          ccExpirationYearMonth = cardOnFilePaymentMethod.ePaymentMethod.cc.expirationYearMonth,",
						"          creditCardLast4Digits = cardOnFilePaymentMethod.ePaymentMethod.creditCardLast4Digits,",
						"          creditCardType = cardOnFilePaymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = cardOnFilePaymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          giftCardIndicator = cardOnFilePaymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailPaymentHandle = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = cardOnFilePaymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileType = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentProfileOwnerId = cardOnFilePaymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          paymentTenderConfigMerchantId = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = cardOnFilePaymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = cardOnFilePaymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = cardOnFilePaymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = cardOnFilePaymentMethod.ePaymentMethod.payType,",
						"          payPalEmailAddress = cardOnFilePaymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = cardOnFilePaymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = cardOnFilePaymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = cardOnFilePaymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationDate,",
						"          preAuthAuthorizationExpirationDate = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate,",
						"          preAuthAuthorizationKey = cardOnFilePaymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = cardOnFilePaymentMethod.ePaymentMethod.profileAction,",
						"          token = cardOnFilePaymentMethod.ePaymentMethod.token,",
						"          totalAmount = cardOnFilePaymentMethod.ePaymentMethod.totalAmount,",
						"          lastmodified_date,",
						"          last4Digits = cardOnFilePaymentMethod.ePaymentMethod.last4Digits,",
						"          verificationIndicator = cardOnFilePaymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = cardOnFilePaymentMethod.ePaymentMethod.skipAuthorization,",
						"          dc_eventtime,",
						"          address = cardOnFilePaymentMethod.ePaymentMethod.address",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select31",
						"derivedColumn61 window(over(customerOrderNumber,",
						"          Account_id,",
						"          acctsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window57",
						"window57 filter(prank==1) ~> filter59",
						"filter59 alterRow(upsertIf(true())) ~> alterRowcardepay",
						"filternegotiateCC select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          acctsequence = sequence,",
						"          conflictCustomerType = negotiateConflictCustomer.conflictCustomerType,",
						"          conflictLandlordDetailApprovalDate = negotiateConflictCustomer.conflictLandlordDetail.approvalDate,",
						"          conflictLandlordDetailCompanyName = negotiateConflictCustomer.conflictLandlordDetail.contact.companyName,",
						"          conflictLandlordDetailEmail = negotiateConflictCustomer.conflictLandlordDetail.contact.email,",
						"          phoneNumber = negotiateConflictCustomer.conflictLandlordDetail.contact.phoneNumber,",
						"          conflictLandlordDetailFirstName = negotiateConflictCustomer.conflictLandlordDetail.contact.firstName,",
						"          conflictLandlordDetailLastName = negotiateConflictCustomer.conflictLandlordDetail.contact.lastName,",
						"          conflictLandlordDetailPhoneNumberType = negotiateConflictCustomer.conflictLandlordDetail.contact.phoneNumberType,",
						"          conflictLandlordDetailLandlordApproval = negotiateConflictCustomer.conflictLandlordDetail.landlordApproval,",
						"          existingCustomerDetailBillingTelephoneNumber = negotiateConflictCustomer.existingCustomerDetail.billingTelephoneNumber,",
						"          existingCustomerDetailBillingAccountNumber = negotiateConflictCustomer.existingCustomerDetail.billingAccountNumber,",
						"          existingCustomerDetailCompanyName = negotiateConflictCustomer.existingCustomerDetail.contact.companyName,",
						"          existingCustomerDetailEmail = negotiateConflictCustomer.existingCustomerDetail.contact.email,",
						"          existingCustomerDetailFirstName = negotiateConflictCustomer.existingCustomerDetail.contact.firstName,",
						"          existingCustomerDetailLastName = negotiateConflictCustomer.existingCustomerDetail.contact.lastName,",
						"          existingCustomerDetailPhoneNumber = negotiateConflictCustomer.existingCustomerDetail.contact.phoneNumber,",
						"          existingCustomerDetailPhoneNumberType = negotiateConflictCustomer.existingCustomerDetail.contact.phoneNumberType,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber = negotiateConflictCustomer.existingCustomerDetail.moveOrCeaseOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select33",
						"derivedColumn60 window(over(customerOrderNumber,",
						"          Account_id,",
						"          acctsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window58",
						"window58 filter(prank==1) ~> filter60",
						"filter60 alterRow(upsertIf(true())) ~> alterRownego",
						"filterunifiedaccount select(mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          convergeOrderIndicator = unifiedAccount.convergeOrderIndicator,",
						"          convergeValidationIndicator = unifiedAccount.convergeValidationIndicator,",
						"          convergedBilling = unifiedAccount.convergedBilling,",
						"          premierIndicator = unifiedAccount.premierIndicator,",
						"          unifiedAccountDiscount = unifiedAccount.unifiedAccountDiscount,",
						"          unifiedAccountExisting = unifiedAccount.unifiedAccountExisting,",
						"          unifiedAccountPending = unifiedAccount.unifiedAccountPending,",
						"          unifiedAccountRebate = unifiedAccount.unifiedAccountRebate,",
						"          unifiedAccountReference = unifiedAccount.unifiedAccountReference,",
						"          unifiedAccountReward = unifiedAccount.unifiedAccountReward,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select34",
						"select34 window(over(customerOrderNumber,",
						"          Account_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window59",
						"window59 filter(prank==1) ~> filter61",
						"filter61 alterRow(upsertIf(true())) ~> alterRowunified",
						"filteremployeeDetail select(mapColumn(",
						"          centralizedTableId = OrderData.employeeDetail.centralizedTableId,",
						"          class = OrderData.employeeDetail.class,",
						"          status = OrderData.employeeDetail.status,",
						"          uid = OrderData.employeeDetail.uid,",
						"          customerOrderNumber,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select35",
						"select35 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window61",
						"window61 filter(prank==1) ~> filter63",
						"filter63 alterRow(upsertIf(true())) ~> alterRowEmployeeDetail",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn39",
						"filtereCommercePartner select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          additionalDetails = OrderData.eCommercePartner.additionalDetails,",
						"          affiliateName = OrderData.eCommercePartner.affiliateName,",
						"          code = OrderData.eCommercePartner.code,",
						"          name = OrderData.eCommercePartner.name,",
						"          email = OrderData.eCommercePartner.email,",
						"          phoneNumber = OrderData.eCommercePartner.phoneNumber,",
						"          type = OrderData.eCommercePartner.type,",
						"          referredDate = OrderData.eCommercePartner.referredDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select37",
						"select37 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window63",
						"window63 filter(prank==1) ~> filter65",
						"derivedColumn50 alterRow(upsertIf(true())) ~> alterRowecommerce",
						"derivedColumn39 foldDown(unroll(OrderData.shippingDetails, OrderData.shippingDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          price = OrderData.shippingDetails.price,",
						"          shippingaddress = OrderData.shippingDetails.address,",
						"          shippingDetailsid = OrderData.shippingDetails.id,",
						"          billingCode = OrderData.shippingDetails.billingCode,",
						"          carrierPreference = OrderData.shippingDetails.carrierPreference,",
						"          fromDate = OrderData.shippingDetails.shipmentCommitDate.fromDate,",
						"          toDate = OrderData.shippingDetails.shipmentCommitDate.toDate,",
						"          sequence = OrderData.shippingDetails.sequence,",
						"          shippingCode = OrderData.shippingDetails.shippingCode,",
						"          shippingMethod = OrderData.shippingDetails.shippingMethod,",
						"          shippingPriceCode = OrderData.shippingDetails.shippingPriceCode,",
						"          signatureRequiredIndicator = OrderData.shippingDetails.signatureRequiredIndicator,",
						"          additionalContactPhones = OrderData.shippingDetails.recipientName.additionalContactPhones,",
						"          id = OrderData.shippingDetails.recipientName.id,",
						"          emailAddress = OrderData.shippingDetails.recipientName.emailAddress,",
						"          firstName = OrderData.shippingDetails.recipientName.firstName,",
						"          middleInitial = OrderData.shippingDetails.recipientName.middleInitial,",
						"          lastName = OrderData.shippingDetails.recipientName.lastName,",
						"          legalFirstName = OrderData.shippingDetails.recipientName.legalFirstName,",
						"          legalLastName = OrderData.shippingDetails.recipientName.legalLastName,",
						"          preferredContactMethod = OrderData.shippingDetails.recipientName.preferredContactMethod,",
						"          suffix = OrderData.shippingDetails.recipientName.suffix,",
						"          prefix = OrderData.shippingDetails.recipientName.prefix,",
						"          title = OrderData.shippingDetails.recipientName.title,",
						"          previousLegalLastName = OrderData.shippingDetails.recipientName.previousLegalLastName,",
						"          recipientPrimaryContact = OrderData.shippingDetails.recipientName.primaryContactPhones",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten9",
						"derivedColumn39 foldDown(unroll(OrderData.integratedOffers, OrderData.integratedOffers),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          category = OrderData.integratedOffers.category,",
						"          ioId = OrderData.integratedOffers.ioId,",
						"          ioSequence = OrderData.integratedOffers.ioSequence,",
						"          qualifyingServiceDetails = OrderData.integratedOffers.qualifyingServiceDetails",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten10",
						"flatten10 window(over(customerOrderNumber,",
						"          ioId,",
						"          ioSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window66",
						"window66 filter(prank==1 && !isNull(ioId)) ~> filter68",
						"filter68 alterRow(upsertIf(true())) ~> alterRowInte",
						"filterloginProfile select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          email = OrderData.loginProfile.email,",
						"          orderInitiator = OrderData.loginProfile.orderInitiator,",
						"          profileId = OrderData.loginProfile.profileId,",
						"          userGuId = OrderData.loginProfile.userGuId,",
						"          userId = OrderData.loginProfile.userId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select41",
						"select41 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window68",
						"window68 filter(prank==1) ~> filter70",
						"filter70 alterRow(upsertIf(true())) ~> alterRowlogin",
						"derivedColumn39 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          eligibleIndicator = OrderData.singleDispatchDetail.eligibleIndicator,",
						"          geoAreaAvailableIndicator = OrderData.singleDispatchDetail.geoAreaAvailableIndicator,",
						"          satelliteTVOnlyEligibleIndicator = OrderData.singleDispatchDetail.satelliteTVOnlyEligibleIndicator",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select42",
						"select42 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window69",
						"window69 filter(prank==1 && !isNull(eligibleIndicator)) ~> filter71",
						"filter71 alterRow(upsertIf(true())) ~> alterRowSingleDispatch",
						"derivedColumn39 foldDown(unroll(OrderData.paymentTenders, OrderData.paymentTenders),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          paymentTenders = OrderData.paymentTenders",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten12",
						"flatten12 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          depositOption = paymentTenders.depositOption,",
						"          fixedAmount = paymentTenders.fixedAmount,",
						"          selectedOptionId = paymentTenders.selectedOptionId,",
						"          collectedInOtherSystem = paymentTenders.collectedInOtherSystem,",
						"          additionalDetails = paymentTenders.additionalDetails,",
						"          paymentTenderId = paymentTenders.id,",
						"          paymentTenderSequence = paymentTenders.sequence,",
						"          accountsReceivableIndicator = paymentTenders.paymentMethod.accountsReceivable.accountsReceivableIndicator,",
						"          purchaseOrderNumber = paymentTenders.paymentMethod.accountsReceivable.purchaseOrderNumber,",
						"          btmEquipmentType = paymentTenders.paymentMethod.btm.equipmentType,",
						"          btmSubscriberNumber = paymentTenders.paymentMethod.btm.subscriberNumber,",
						"          btmTotalAmount = paymentTenders.paymentMethod.btm.totalAmount,",
						"          btnCustomerCode = paymentTenders.paymentMethod.btn.customerCode,",
						"          btnPaymentAmount = paymentTenders.paymentMethod.btn.paymentAmount,",
						"          btnTn = paymentTenders.paymentMethod.btn.tn,",
						"          cashPaymentAmount = paymentTenders.paymentMethod.cash.paymentAmount,",
						"          cashPaymentToken = paymentTenders.paymentMethod.cash.paymentToken,",
						"          lpmCustomerAgreementVersion = paymentTenders.paymentMethod.lastPaymentMethod.customerAgreementVersion,",
						"          lpmLast4Digits = paymentTenders.paymentMethod.lastPaymentMethod.lpmLast4Digits,",
						"          lpmPaymentType = paymentTenders.paymentMethod.lastPaymentMethod.lpmPaymentType,",
						"          lpmPaymentTypeName = paymentTenders.paymentMethod.lastPaymentMethod.lpmPaymentTypeName,",
						"          lpmReferenceNumber = paymentTenders.paymentMethod.lastPaymentMethod.lpmReferenceNumber,",
						"          lpmTotalAmount = paymentTenders.paymentMethod.lastPaymentMethod.totalAmount,",
						"          paymentTokenOnlyAmount = paymentTenders.paymentMethod.paymentTokenOnly.paymentAmount,",
						"          paymentTokenOnlyToken = paymentTenders.paymentMethod.paymentTokenOnly.paymentToken,",
						"          storeLast4Digits = paymentTenders.paymentMethod.store.last4Digits,",
						"          storePaymentAmount = paymentTenders.paymentMethod.store.paymentAmount,",
						"          storeProfileOwnerId = paymentTenders.paymentMethod.store.profileOwnerId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select44",
						"select44 window(over(customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window71",
						"window71 filter(prank==1 && ( !isNull(paymentTenderId) || !isNull(paymentTenderSequence))) ~> filter73",
						"filter73 alterRow(upsertIf(true())) ~> alterRowPaymentTender",
						"flatten12 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          paymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.paymentMethodId,",
						"          paymentTenderId = paymentTenders.id,",
						"          paymentTenderSequence = paymentTenders.sequence,",
						"          paymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.paymentMethodId,",
						"          address = paymentTenders.paymentMethod.ePaymentMethod.address,",
						"          achAccountHolderName = paymentTenders.paymentMethod.ePaymentMethod.ach.accountHolderName,",
						"          achAccountNumber = paymentTenders.paymentMethod.ePaymentMethod.ach.accountNumber,",
						"          achAccountNumberLast4Digits = paymentTenders.paymentMethod.ePaymentMethod.ach.accountNumberLast4Digits,",
						"          achAccountType = paymentTenders.paymentMethod.ePaymentMethod.ach.accountType,",
						"          achRoutingNumber = paymentTenders.paymentMethod.ePaymentMethod.ach.routingNumber,",
						"          bankingPartnerCustomerId = paymentTenders.paymentMethod.ePaymentMethod.bankingPartner.customerId,",
						"          bankingPartnerName = paymentTenders.paymentMethod.ePaymentMethod.bankingPartner.name,",
						"          cardCryptogram = paymentTenders.paymentMethod.ePaymentMethod.cardCryptogram,",
						"          cardBillingZipCode = paymentTenders.paymentMethod.ePaymentMethod.cardBillingZipCode,",
						"          ccCardNotValidatedIndicator = paymentTenders.paymentMethod.ePaymentMethod.cc.cardNotValidatedIndicator,",
						"          ccCreditCardHolderName = paymentTenders.paymentMethod.ePaymentMethod.cc.creditCardHolderName,",
						"          ccCreditCardNumber = paymentTenders.paymentMethod.ePaymentMethod.cc.creditCardNumber,",
						"          ccExpirationYearMonth = paymentTenders.paymentMethod.ePaymentMethod.cc.expirationYearMonth,",
						"          creditCardLast4Digits = paymentTenders.paymentMethod.ePaymentMethod.creditCardLast4Digits,",
						"          creditCardType = paymentTenders.paymentMethod.ePaymentMethod.creditCardType,",
						"          customerAgreementVersion = paymentTenders.paymentMethod.ePaymentMethod.customerAgreementVersion,",
						"          giftCardIndicator = paymentTenders.paymentMethod.ePaymentMethod.giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.batchNumber,",
						"          paymentConfirmationDetailPaymentHandle = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.paymentHandle,",
						"          paymentConfirmationDetailReferenceNumber = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.referenceNumber,",
						"          paymentConfirmationDetailTransactionId = paymentTenders.paymentMethod.ePaymentMethod.paymentConfirmationDetail.transactionId,",
						"          paymentProfileAutomationProfileName = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.automationProfile.name,",
						"          paymentProfileAutomationProfileOwnerId = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.automationProfile.ownerId,",
						"          paymentProfileName = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.name,",
						"          paymentProfileOwnerId = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.ownerId,",
						"          ptype = paymentTenders.paymentMethod.ePaymentMethod.paymentProfile.type,",
						"          paymentTenderConfigMerchantId = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.merchantId,",
						"          paymentTenderConfigSourceLocation = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceLocation,",
						"          paymentTenderConfigSourceSystem = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceSystem,",
						"          paymentTenderConfigSourceUser = paymentTenders.paymentMethod.ePaymentMethod.paymentTenderConfig.sourceUser,",
						"          paymentTokenPaymentAmount = paymentTenders.paymentMethod.ePaymentMethod.paymentToken.paymentAmount,",
						"          paymentTokenPaymentToken = paymentTenders.paymentMethod.ePaymentMethod.paymentToken.paymentToken,",
						"          payType = paymentTenders.paymentMethod.ePaymentMethod.payType,",
						"          payPalEmailAddress = paymentTenders.paymentMethod.ePaymentMethod.payPal.emailAddress,",
						"          payPalPayerId = paymentTenders.paymentMethod.ePaymentMethod.payPal.payerId,",
						"          payPalPaymentMethodId = paymentTenders.paymentMethod.ePaymentMethod.payPal.paymentMethodId,",
						"          payPalToken = paymentTenders.paymentMethod.ePaymentMethod.payPal.token,",
						"          preAuthAddressVerificationSystemCode = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.addressVerificationSystemCode,",
						"          preAuthAuthorizationCode = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationCode,",
						"          preAuthAuthorizationDate = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationDate,",
						"          preAuthAuthorizationExpirationDate = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationExpirationDate,",
						"          preAuthAuthorizationKey = paymentTenders.paymentMethod.ePaymentMethod.preAuthDetail.authorizationKey,",
						"          profileAction = paymentTenders.paymentMethod.ePaymentMethod.profileAction,",
						"          token = paymentTenders.paymentMethod.ePaymentMethod.token,",
						"          totalAmount = paymentTenders.paymentMethod.ePaymentMethod.totalAmount,",
						"          last4Digits = paymentTenders.paymentMethod.ePaymentMethod.last4Digits,",
						"          verificationIndicator = paymentTenders.paymentMethod.ePaymentMethod.verificationIndicator,",
						"          skipAuthorization = paymentTenders.paymentMethod.ePaymentMethod.skipAuthorization",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select45",
						"derivedColumn53 window(over(customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window72",
						"window72 filter(prank==1) ~> filter74",
						"filter74 alterRow(upsertIf(true())) ~> alterRowpayment",
						"flatten25 window(over(customerOrderNumber,",
						"          shippingDetailsid,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window73",
						"window73 filter(prank==1  && !isNull(shippingDetailsid)) ~> filter75",
						"filter75 alterRow(upsertIf(true())) ~> alterRowshippingdetail",
						"flatten9 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          shippingDetailsid,",
						"          str_additionalDetails = price.additionalDetails,",
						"          shippingsequence = sequence,",
						"          priceType = price.priceType,",
						"          amount = price.amount,",
						"          baseAmount = price.baseAmount,",
						"          creditFeeType = price.creditFeeType,",
						"          currencyType = price.currencyType,",
						"          installmentEligibility = price.installmentEligibility,",
						"          msrp = price.msrp,",
						"          taxDetail = price.taxDetail,",
						"          total = price.total",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select46",
						"derivedColumn72 window(over(customerOrderNumber,",
						"          shippingDetailsid,",
						"          shippingsequence,",
						"          priceType),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window74",
						"window74 filter(prank==1) ~> filter76",
						"filter76 alterRow(upsertIf(true())) ~> alterRowshippingprice",
						"filterSalesAgent select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          agentCode = OrderData.salesAgent.agentCode,",
						"          location = OrderData.salesAgent.location,",
						"          salesCode = OrderData.salesAgent.salesCode,",
						"          uid = OrderData.salesAgent.uid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select47",
						"select47 window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window75",
						"window75 filter(prank==1) ~> filter77",
						"filter77 alterRow(upsertIf(true())) ~> alterRowsalesagent",
						"derivedColumn39 foldDown(unroll(OrderData.referenceDetail.falloutDetails, OrderData.referenceDetail.falloutDetails),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          code = OrderData.referenceDetail.falloutDetails.code,",
						"          dateTime = OrderData.referenceDetail.falloutDetails.dateTime,",
						"          description = OrderData.referenceDetail.falloutDetails.description,",
						"          operation = OrderData.referenceDetail.falloutDetails.operation",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten14",
						"flatten14 window(over(customerOrderNumber,",
						"          code),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window77",
						"derivedColumn48 filter(prank==1) ~> filter79",
						"filter79 alterRow(upsertIf(true())) ~> alterRowRFallout",
						"flatten9 select(mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          shippingDetailsid,",
						"          addressId = shippingaddress.addressId,",
						"          shippingaddress_id = shippingaddress.id,",
						"          dwellingType = shippingaddress.dwellingType,",
						"          validatedIndicator = shippingaddress.validatedIndicator,",
						"          auxillaryaddress_line1 = shippingaddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = shippingaddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = shippingaddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = shippingaddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = shippingaddress.auxiliaryAddress.line5,",
						"          addressLines = shippingaddress.codingAccuracySupportSystemAddress.addressLines,",
						"          paresed_clli8 = shippingaddress.parsedAddress.clli8,",
						"          parsedAddr_addInstructions = shippingaddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = shippingaddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = shippingaddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = shippingaddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = shippingaddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = shippingaddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = shippingaddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = shippingaddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = shippingaddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = shippingaddress.parsedAddress.buildingType,",
						"          parsedAddr_city = shippingaddress.parsedAddress.city,",
						"          parsedAddr_country = shippingaddress.parsedAddress.country,",
						"          parsedAddr_county = shippingaddress.parsedAddress.county,",
						"          parsedAddr_countyCode = shippingaddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = shippingaddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = shippingaddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = shippingaddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = shippingaddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = shippingaddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = shippingaddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = shippingaddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = shippingaddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = shippingaddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = shippingaddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = shippingaddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = shippingaddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = shippingaddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = shippingaddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = shippingaddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = shippingaddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = shippingaddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = shippingaddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = shippingaddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = shippingaddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = shippingaddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = shippingaddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = shippingaddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = shippingaddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = shippingaddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = shippingaddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = shippingaddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = shippingaddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = shippingaddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = shippingaddress.parsedAddress.state,",
						"          parsedAddr_streetName = shippingaddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = shippingaddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = shippingaddress.parsedAddress.streetType,",
						"          parsedAddr_structure = shippingaddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = shippingaddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = shippingaddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = shippingaddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = shippingaddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = shippingaddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = shippingaddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = shippingaddress.parsedAddress.zipCodeExtension,",
						"          parsedAddr_zipGeoCode = shippingaddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = shippingaddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = shippingaddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = shippingaddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = shippingaddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = shippingaddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = shippingaddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = shippingaddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = shippingaddress.unparsedAddress.structure,",
						"          unparsedAddr_unit = shippingaddress.unparsedAddress.unit,",
						"          unparsedAddr_urbanizationCode = shippingaddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = shippingaddress.unparsedAddress.city,",
						"          unparsedAddr_country = shippingaddress.unparsedAddress.country,",
						"          unparsedAddr_state = shippingaddress.unparsedAddress.state,",
						"          unparsedAddr_zip = shippingaddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = shippingaddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = shippingaddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = shippingaddress.unparsedAddress.addressLine2,",
						"          json_additionaldetails = shippingaddress.additionalDetails,",
						"          unparessed_county = shippingaddress.unparsedAddress.county,",
						"          sequence,",
						"          placeId = shippingaddress.placeId,",
						"          connectedCommunityId = shippingaddress.connectedCommunityId,",
						"          parsedAddrTimeZone = shippingaddress.parsedAddress.addressTimeZone,",
						"          parsedAddrRateZone = shippingaddress.parsedAddress.rateZone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select49",
						"select49 window(over(customerOrderNumber,",
						"          shippingaddress_id,",
						"          sequence,",
						"          shippingDetailsid),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window78",
						"window78 filter(prank==1 &&",
						"!isNull(shippingaddress_id)) ~> filter80",
						"filter80 alterRow(upsertIf(true())) ~> alterRowshippingaddress",
						"selectSchedulingDetails foldDown(unroll(schedulingDetails.name.primaryContactPhones, schedulingDetails),",
						"     mapColumn(",
						"          serviceLevel = schedulingDetails.serviceLevel,",
						"          customerOrderNumber,",
						"          eventTime,",
						"          lastmodified_date,",
						"          timeZone = schedulingDetails.timeZone,",
						"          valueSegmentationTier = schedulingDetails.valueSegmentationTier,",
						"          landlordDetail_landlordName = schedulingDetails.landlordDetail.landlordName,",
						"          landlordDetail_landlordPermission = schedulingDetails.landlordDetail.landlordPermission,",
						"          landlordDetail_landlordPhoneNumber = schedulingDetails.landlordDetail.landlordPhoneNumber,",
						"          nffl_fulfillerName = schedulingDetails.nffl.fulfillerName,",
						"          nffl_ffulfillerTN = schedulingDetails.nffl.fulfillerTN,",
						"          nffl_fnfflFlag = schedulingDetails.nffl.nfflFlag,",
						"          preference = schedulingDetails.preference,",
						"          reservationId = schedulingDetails.reservationId,",
						"          scheduleType = schedulingDetails.scheduleType,",
						"          dispatchType = schedulingDetails.dispatchType,",
						"          deferredInstallationDuration = schedulingDetails.deferredInstallationDuration,",
						"          eventCode = schedulingDetails.eventCode,",
						"          eventCodeEnteredManuallyIndicator = schedulingDetails.eventCodeEnteredManuallyIndicator,",
						"          partnerName_installationPartner = schedulingDetails.installationPartner.partnerName,",
						"          partnerName_projectPurchaseOrderAmount = schedulingDetails.installationPartner.projectPurchaseOrderAmount,",
						"          partnerName_projectPurchaseOrderDate = schedulingDetails.installationPartner.projectPurchaseOrderDate,",
						"          partnerName_projectPurchaseOrderNumber = schedulingDetails.installationPartner.projectPurchaseOrderNumber,",
						"          partnerName_projectBilling = schedulingDetails.installationPartner.projectBilling,",
						"          appointmentComment = schedulingDetails.appointmentComment,",
						"          bestTimeToReach = schedulingDetails.bestTimeToReach,",
						"          billingInstallmentsIndicator = schedulingDetails.billingInstallmentsIndicator,",
						"          businessName = schedulingDetails.businessName,",
						"          str_additionalDetails = schedulingDetails.additionalDetails,",
						"          schedulingdetails_id = schedulingDetails.id,",
						"          installType = schedulingDetails.installType,",
						"          realTimeCalendarIndicator = schedulingDetails.realTimeCalendarIndicator,",
						"          scheduleAsSoonAsPossibleIndicator = schedulingDetails.scheduleAsSoonAsPossibleIndicator,",
						"          emailAddress = schedulingDetails.name.emailAddress,",
						"          firstName = schedulingDetails.name.firstName,",
						"          schedulingdetails_name_id = schedulingDetails.name.id,",
						"          lastName = schedulingDetails.name.lastName,",
						"          contactPhoneType = schedulingDetails.name.primaryContactPhones.contactPhoneType,",
						"          phoneNumber = schedulingDetails.name.primaryContactPhones.phoneNumber,",
						"          scheduleByDayAndTime_DayOfTheWeek = schedulingDetails.scheduleByDayAndTime.anyDayOfTheWeek,",
						"          scheduleByDayAndTime_friday = schedulingDetails.scheduleByDayAndTime.friday,",
						"          scheduleByDayAndTime_monday = schedulingDetails.scheduleByDayAndTime.monday,",
						"          scheduleByDayAndTime_saturday = schedulingDetails.scheduleByDayAndTime.saturday,",
						"          scheduleByDayAndTime_sunday = schedulingDetails.scheduleByDayAndTime.sunday,",
						"          scheduleByDayAndTime_thursday = schedulingDetails.scheduleByDayAndTime.thursday,",
						"          scheduleByDayAndTime_tuesday = schedulingDetails.scheduleByDayAndTime.tuesday,",
						"          scheduleByDayAndTime_wednesday = schedulingDetails.scheduleByDayAndTime.wednesday,",
						"          actualSchedule_workOrderId = schedulingDetails.actualSchedule.workOrderId,",
						"          actualSchedule_startTime = schedulingDetails.actualSchedule.startTime,",
						"          actualSchedule_selectedAppointmentDate = schedulingDetails.actualSchedule.selectedAppointmentDate,",
						"          actualSchedule_selectedAppointmentTime = schedulingDetails.actualSchedule.selectedAppointmentTime,",
						"          actualSchedule_endTime = schedulingDetails.actualSchedule.endTime,",
						"          confirmedSchedule_workOrderId = schedulingDetails.confirmedSchedule.workOrderId,",
						"          confirmedSchedule_startTime = schedulingDetails.confirmedSchedule.startTime,",
						"          confirmedSchedule_selectedAppointmentDate = schedulingDetails.confirmedSchedule.selectedAppointmentDate,",
						"          confirmedSchedule_selectedAppointmentTime = schedulingDetails.confirmedSchedule.selectedAppointmentTime,",
						"          confirmedSchedule_endTime = schedulingDetails.confirmedSchedule.endTime,",
						"          middleInitial = schedulingDetails.name.middleInitial,",
						"          legalLastName = schedulingDetails.name.legalLastName,",
						"          legalFirstName = schedulingDetails.name.legalFirstName,",
						"          suffix = schedulingDetails.name.suffix,",
						"          prefix = schedulingDetails.name.prefix,",
						"          previousLegalLastName = schedulingDetails.name.previousLegalLastName,",
						"          title = schedulingDetails.name.title,",
						"          additionalContactPhones = schedulingDetails.name.additionalContactPhones,",
						"          preferredContactMethod = schedulingDetails.name.preferredContactMethod,",
						"          primarycontactPhoneConsentDetails = schedulingDetails.name.primaryContactPhones.consentDetails,",
						"          anyDayOfTheWeek = schedulingDetails.scheduleByDayAndTime.anyDayOfTheWeek,",
						"          primaryContactextension = schedulingDetails.name.primaryContactPhones.extension,",
						"          connecTechInstallationOptions = schedulingDetails.connecTechInstallationOptions,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten15",
						"derivedColumn40 window(over(customerOrderNumber,",
						"          schedulingdetails_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window79",
						"flatten15 derive(actualSchedule_selectedAppointmentDate = toDate(toString(byName('actualSchedule_selectedAppointmentDate')),'yyyy-MM-dd'),",
						"          confirmedSchedule_selectedAppointmentDate = toDate(toString(byName('confirmedSchedule_selectedAppointmentDate')),'yyyy-MM-dd'),",
						"          partnerName_projectPurchaseOrderDate = toDate(toString(byName('partnerName_projectPurchaseOrderDate')),'yyyy-MM-dd'),",
						"          schedulingdetails_id = coalesce(schedulingdetails_id,' ')) ~> derivedColumn40",
						"window79 filter(prank==1 && !isNull(schedulingdetails_id)) ~> filter81",
						"filter81 alterRow(upsertIf(true())) ~> alterRowschedulingdetailflat",
						"flattenLosgsPrice select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          amount,",
						"          baseAmount,",
						"          currencyType,",
						"          pricetype,",
						"          total,",
						"          losgsequence,",
						"          creditFeeType,",
						"          installmentEligibility,",
						"          msrp,",
						"          additionalDetails,",
						"          taxDetail = J_tax,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select50",
						"FinalizeContactDetail foldDown(unroll(primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails,",
						"          additionalEmailRecipients,",
						"          authorizedContacts,",
						"          orderConfirmationByEmailPermissionIndicator,",
						"          permissionForOutboundCallIndicator,",
						"          preferredContactMethod,",
						"          preferredTimeOfDayForContact,",
						"          timeZone,",
						"          unpublishedContactByPhonePermissionIndicator,",
						"          additionalContactPhones,",
						"          legalFirstName,",
						"          lastName,",
						"          legalLastName,",
						"          middleInitial,",
						"          personaldetail_preferredContactMethod,",
						"          primaryEmailAddress,",
						"          secondaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator,",
						"          emailAddress,",
						"          firstName,",
						"          nameid,",
						"          lastmodified_date,",
						"          orderPickUpCTN,",
						"          prefix,",
						"          previousLegalLastName,",
						"          primarycontactPhoneConsentDetails = primaryContactPhones.consentDetails,",
						"          primaryContactPhoneType = primaryContactPhones.contactPhoneType,",
						"          primaryContactextension = primaryContactPhones.extension,",
						"          primaryContactPhoneNumber = primaryContactPhones.phoneNumber,",
						"          title,",
						"          suffix,",
						"          dc_eventtime,",
						"          smsValidatedIndicator = primaryContactPhones.smsValidatedIndicator",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten16",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn42",
						"coallosgid foldDown(unroll(externalOrderReferences, externalOrderReferences),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          systemName = externalOrderReferences.systemName,",
						"          systemOrderReference = externalOrderReferences.systemOrderReference,",
						"          systemOrderReferenceType = externalOrderReferences.systemOrderReferenceType",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten18",
						"flatten18 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          systemName),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window81",
						"window81 filter(prank==1 && !isNull(systemName)) ~> filter83",
						"filter83 alterRow(upsertIf(true())) ~> alterRowext",
						"coallosgid foldDown(unroll(promotions, promotions),",
						"     mapColumn(",
						"          additionalDetails = promotions.additionalDetails,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          amount = promotions.amount,",
						"          baseOfferId = promotions.baseOfferId,",
						"          complexDiscountIndicator = promotions.complexDiscountIndicator,",
						"          componentConfigurations = promotions.componentConfigurations,",
						"          couponCode = promotions.couponCode,",
						"          displayLevel = promotions.displayLevel,",
						"          duration = promotions.duration,",
						"          effectiveDate,",
						"          effectiveInDays = promotions.effectiveInDays,",
						"          endDate = promotions.endDate,",
						"          fixedAmount = promotions.fixedAmount,",
						"          id = promotions.id,",
						"          ioId = promotions.ioId,",
						"          ioSequence = promotions.ioSequence,",
						"          parentPricePlanCode = promotions.parentPricePlanCode,",
						"          payInAdvanceProdId = promotions.payInAdvanceProdId,",
						"          percent = promotions.percent,",
						"          promotionAppliedBy = promotions.promotionAppliedBy,",
						"          promotionBillingCode = promotions.promotionBillingCode,",
						"          promotionCode = promotions.promotionCode,",
						"          promotionCycle = promotions.promotionCycle,",
						"          promotionId = promotions.promotionId,",
						"          promotionName = promotions.promotionName,",
						"          promotionType = promotions.promotionType,",
						"          promotionTypeDetail = promotions.promotionTypeDetail,",
						"          qualifyingServiceDetails = promotions.qualifyingServiceDetails,",
						"          sequence = promotions.sequence,",
						"          unitOfMeasurement = promotions.unitOfMeasurement",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten20",
						"derivedColumn54 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          sequence,",
						"          id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window83",
						"window83 filter(prank==1 && ( !isNull(id) || !isNull(sequence))) ~> filter85",
						"filter85 alterRow(upsertIf(true())) ~> alterRowpromo",
						"coallosgid foldDown(unroll(userDefinedLabels, userDefinedLabels),",
						"     mapColumn(",
						"          label = userDefinedLabels.label,",
						"          customerOrderNumber,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          sequence = userDefinedLabels.sequence,",
						"          value = userDefinedLabels.value",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten21",
						"flatten21 window(over(customerOrderNumber,",
						"          label,",
						"          Losg_id,",
						"          losgsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window84",
						"window84 filter(prank==1 && !isNull(label)) ~> filter86",
						"filter86 alterRow(upsertIf(true())) ~> alterRowuse",
						"coalLLseq foldDown(unroll(payments, payments),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemsequence = sequence,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          amount = payments.amount,",
						"          currencyType = payments.currencyType,",
						"          numberOfInstallment = payments.numberOfInstallment,",
						"          paymentTenderReference = payments.paymentTenderReference",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten22",
						"flatten22 window(over(customerOrderNumber,",
						"          losgsequence,",
						"          Losg_id,",
						"          lineitemsequence,",
						"          paymentTenderReference,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window85",
						"window85 filter(prank==1 && (!isNull(paymentTenderReference) || !isNull(amount))) ~> filter87",
						"derivedColumn71 alterRow(upsertIf(true())) ~> alterRowllpay",
						"filtehardGood select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemidsequence = sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          availabilityDate = hardGood.availabilityDate,",
						"          biller = hardGood.biller,",
						"          byodIndicator = hardGood.byodIndicator,",
						"          cardSerialNumber = hardGood.cardSerialNumber,",
						"          deliveryByDateFromDate = hardGood.deliveryByDate.fromDate,",
						"          deliveryByDateToDate = hardGood.deliveryByDate.toDate,",
						"          deliveryPromiseNoteEnglish = hardGood.deliveryPromiseNote.english,",
						"          deliveryPromiseNoteSpanish = hardGood.deliveryPromiseNote.spanish,",
						"          eid = hardGood.eid,",
						"          fieldId = hardGood.fieldId,",
						"          hardGoodType = hardGood.hardGoodType,",
						"          iccId = hardGood.iccId,",
						"          make = hardGood.make,",
						"          manufacturerCode = hardGood.manufacturerCode,",
						"          model = hardGood.model,",
						"          networkAccessDeviceType = hardGood.networkAccessDeviceType,",
						"          preOrderIndicator = hardGood.preOrderIndicator,",
						"          productImageUrl = hardGood.productImageUrl,",
						"          serialNumber = hardGood.serialNumber,",
						"          shipmentCommitFromDate = hardGood.shipmentCommitDate.fromDate,",
						"          shipmentCommitToDate = hardGood.shipmentCommitDate.toDate,",
						"          shippedHotIndicator = hardGood.shippedHotIndicator,",
						"          whiteGloveDeliveryPartner = hardGood.whiteGloveDeliveryPartner,",
						"          WirelessHardGoodConnectionType = hardGood.wirelessHardGoodCharacteristics.connectionType,",
						"          WirelessHardGoodDeviceCategory = hardGood.wirelessHardGoodCharacteristics.deviceCategory,",
						"          WirelessHardGoodEquipmentType = hardGood.wirelessHardGoodCharacteristics.equipmentType,",
						"          WirelessHardGoodEquipmentUpgrade = hardGood.wirelessHardGoodCharacteristics.equipmentUpgrade,",
						"          WirelessHardGoodIMEI = hardGood.wirelessHardGoodCharacteristics.imei,",
						"          WirelessHardGoodIMEIType = hardGood.wirelessHardGoodCharacteristics.imeiType,",
						"          WirelessHardGoodIMSI = hardGood.wirelessHardGoodCharacteristics.internationalMobileSubscriberIdentity,",
						"          WirelessHardGoodPhoneType = hardGood.wirelessHardGoodCharacteristics.phoneType,",
						"          WirelessHardGoodTechType = hardGood.wirelessHardGoodCharacteristics.techType,",
						"          WirelessHardGoodUSOC = hardGood.wirelessHardGoodCharacteristics.usoc,",
						"          WirelessHardGoodZodiacSeqNum = hardGood.wirelessHardGoodCharacteristics.zodiacSequenceNumber,",
						"          simStatus = hardGood.simStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select53",
						"derivedColumn58 window(over(customerOrderNumber,",
						"          losgsequence,",
						"          Losg_id,",
						"          lineitemidsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window86",
						"window86 filter(prank==1) ~> filter88",
						"filter88 alterRow(upsertIf(true())) ~> alterRowLLIhard",
						"filter118 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemsequence = sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          availabilityDate = supplyChainDetail.availabilityDate,",
						"          carrier = supplyChainDetail.carrier,",
						"          claimRMANumber = supplyChainDetail.claimRMANumber,",
						"          exchangeDocumentId = supplyChainDetail.exchangeDocumentId,",
						"          exchangeOrderId = supplyChainDetail.exchangeOrderId,",
						"          orderDocumentDetailActivity = supplyChainDetail.orderDocumentDetail.activity,",
						"          orderDocumentDetailLocation = supplyChainDetail.orderDocumentDetail.location,",
						"          orderDocumentDetailOrderId = supplyChainDetail.orderDocumentDetail.orderId,",
						"          price = supplyChainDetail.price,",
						"          quantityBackOrdered = supplyChainDetail.quantityBackOrdered,",
						"          quantityCanceled = supplyChainDetail.quantityCanceled,",
						"          quantityOrdered = supplyChainDetail.quantityOrdered,",
						"          quantityShipped = supplyChainDetail.quantityShipped,",
						"          quantityToShip = supplyChainDetail.quantityToShip,",
						"          shippedDate = supplyChainDetail.shippedDate,",
						"          trackingNumber = supplyChainDetail.trackingNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select54",
						"select54 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          lineitemsequence,",
						"          losgsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window87",
						"window87 filter(prank==1) ~> filter89",
						"derivedColumn52 alterRow(upsertIf(true())) ~> alterRowsupplychain",
						"selectdebitaccounts derive(debtAccountNumber = coalesce(debtAccountNumber,' '),",
						"          id = coalesce(id,' ')) ~> derivedColumn43",
						"flattenAllAccounts derive(Account_id = coalesce(Account_id,' '),",
						"          sequence = coalesce(sequence,'')) ~> coalacc",
						"flattenOrderLosgs derive(Losg_id = coalesce(Losg_id,' '),",
						"          sequence = coalesce(sequence,'')) ~> coallosgid",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          additionalDetails = serviceAddress.additionalDetails,",
						"          addressId = serviceAddress.addressId,",
						"          ServiceAddress_id = serviceAddress.id,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          line1 = serviceAddress.auxiliaryAddress.line1,",
						"          dwellingType = serviceAddress.dwellingType,",
						"          placeId = serviceAddress.placeId,",
						"          connectedCommunityId = serviceAddress.connectedCommunityId,",
						"          validatedIndicator = serviceAddress.validatedIndicator,",
						"          auxillaryaddress_line1 = serviceAddress.auxiliaryAddress.line1,",
						"          auxillaryaddress_line2 = serviceAddress.auxiliaryAddress.line2,",
						"          auxillaryaddress_line3 = serviceAddress.auxiliaryAddress.line3,",
						"          auxillaryaddress_line4 = serviceAddress.auxiliaryAddress.line4,",
						"          auxillaryaddress_line5 = serviceAddress.auxiliaryAddress.line5,",
						"          codingAccuracySupportSystemAddress = serviceAddress.codingAccuracySupportSystemAddress,",
						"          addressLines = serviceAddress.codingAccuracySupportSystemAddress.addressLines,",
						"          parsedAddr_addInstructions = serviceAddress.parsedAddress.addInstructions,",
						"          parsedAddr_addressChanged = serviceAddress.parsedAddress.addressChanged,",
						"          parsedAddr_addressMatchCode = serviceAddress.parsedAddress.addressMatchCode,",
						"          parsedAddr_addressStreetLine = serviceAddress.parsedAddress.addressStreetLine,",
						"          parsedAddr_addressType = serviceAddress.parsedAddress.addressType,",
						"          parsedAddr_apartmentUnit = serviceAddress.parsedAddress.apartmentUnit,",
						"          parsedAddr_apartmentUnitNumber = serviceAddress.parsedAddress.apartmentUnitNumber,",
						"          parsedAddr_assignedStreetNumber = serviceAddress.parsedAddress.assignedStreetNumber,",
						"          parsedAddr_attention = serviceAddress.parsedAddress.attention,",
						"          parsedAddr_buildingType = serviceAddress.parsedAddress.buildingType,",
						"          parsedAddr_city = serviceAddress.parsedAddress.city,",
						"          parsedAddr_country = serviceAddress.parsedAddress.country,",
						"          parsedAddr_county = serviceAddress.parsedAddress.county,",
						"          parsedAddr_countyCode = serviceAddress.parsedAddress.countyCode,",
						"          parsedAddr_direction = serviceAddress.parsedAddress.direction,",
						"          parsedAddr_directionPrefix = serviceAddress.parsedAddress.directionPrefix,",
						"          parsedAddr_disconnectDate = serviceAddress.parsedAddress.disconnectDate,",
						"          parsedAddr_exchangeCode = serviceAddress.parsedAddress.exchangeCode,",
						"          parsedAddr_exhaustCode = serviceAddress.parsedAddress.exhaustCode,",
						"          parsedAddr_houseNumber = serviceAddress.parsedAddress.houseNumber,",
						"          parsedAddr_houseNumberPrefix = serviceAddress.parsedAddress.houseNumberPrefix,",
						"          parsedAddr_houseNumberSuffix = serviceAddress.parsedAddress.houseNumberSuffix,",
						"          parsedAddr_incorporatedIndicator = serviceAddress.parsedAddress.incorporatedIndicator,",
						"          parsedAddr_internationalZip = serviceAddress.parsedAddress.internationalZip,",
						"          parsedAddr_lastDisconnectedTransportType = serviceAddress.parsedAddress.lastDisconnectedTransportType,",
						"          parsedAddr_lastNetworkAccessDeviceType = serviceAddress.parsedAddress.lastNetworkAccessDeviceType,",
						"          parsedAddr_legalEntity = serviceAddress.parsedAddress.legalEntity,",
						"          parsedAddr_level = serviceAddress.parsedAddress.level,",
						"          parsedAddr_levelNumber = serviceAddress.parsedAddress.levelNumber,",
						"          parsedAddr_linkKey = serviceAddress.parsedAddress.linkKey,",
						"          parsedAddr_postOfficeBox = serviceAddress.parsedAddress.postOfficeBox,",
						"          parsedAddr_primaryAddressLine = serviceAddress.parsedAddress.primaryAddressLine,",
						"          parsedAddr_primaryNPANXX = serviceAddress.parsedAddress.primaryNPANXX,",
						"          parsedAddr_province = serviceAddress.parsedAddress.province,",
						"          parsedAddr_rateCenterCode = serviceAddress.parsedAddress.rateCenterCode,",
						"          parsedAddr_rateZoneBanCode = serviceAddress.parsedAddress.rateZoneBanCode,",
						"          parsedAddr_rsagValidationIndicator = serviceAddress.parsedAddress.rsagValidationIndicator,",
						"          parsedAddr_ruralRouteBoxNumber = serviceAddress.parsedAddress.ruralRouteBoxNumber,",
						"          parsedAddr_ruralRouteCenterNumber = serviceAddress.parsedAddress.ruralRouteCenterNumber,",
						"          parsedAddr_secondaryAddressLine = serviceAddress.parsedAddress.secondaryAddressLine,",
						"          parsedAddr_siteAddressId = serviceAddress.parsedAddress.siteAddressId,",
						"          parsedAddr_siteId = serviceAddress.parsedAddress.siteId,",
						"          parsedAddr_smartMoves = serviceAddress.parsedAddress.smartMoves,",
						"          parsedAddr_state = serviceAddress.parsedAddress.state,",
						"          parsedAddr_streetName = serviceAddress.parsedAddress.streetName,",
						"          parsedAddr_streetNameSuffix = serviceAddress.parsedAddress.streetNameSuffix,",
						"          parsedAddr_streetType = serviceAddress.parsedAddress.streetType,",
						"          parsedAddr_structure = serviceAddress.parsedAddress.structure,",
						"          parsedAddr_structureNumber = serviceAddress.parsedAddress.structureNumber,",
						"          parsedAddr_tarCode = serviceAddress.parsedAddress.tarCode,",
						"          parsedAddr_telephoneNumber = serviceAddress.parsedAddress.telephoneNumber,",
						"          parsedAddr_urbanizationCode = serviceAddress.parsedAddress.urbanizationCode,",
						"          parsedAddr_videoHubOffice = serviceAddress.parsedAddress.videoHubOffice,",
						"          parsedAddr_zip = serviceAddress.parsedAddress.zip,",
						"          parsedAddr_zipCodeExtension = serviceAddress.parsedAddress.zipCodeExtension,",
						"          parsedAddrTimeZone = serviceAddress.parsedAddress.addressTimeZone,",
						"          parsedAddrRateZone = serviceAddress.parsedAddress.rateZone,",
						"          parsedAddr_zipGeoCode = serviceAddress.parsedAddress.zipGeoCode,",
						"          unparsedAddr_addressLine1 = serviceAddress.unparsedAddress.addressLine1,",
						"          unparsedAddr_addressLine3 = serviceAddress.unparsedAddress.addressLine3,",
						"          unparsedAddr_attention = serviceAddress.unparsedAddress.attention,",
						"          unparsedAddr_elevation = serviceAddress.unparsedAddress.elevation,",
						"          unparsedAddr_postOfficeBox = serviceAddress.unparsedAddress.postOfficeBox,",
						"          unparsedAddr_province = serviceAddress.unparsedAddress.province,",
						"          unparsedAddr_ruralRoute = serviceAddress.unparsedAddress.ruralRoute,",
						"          unparsedAddr_structure = serviceAddress.unparsedAddress.structure,",
						"          unparsedAddr_unittype = serviceAddress.unparsedAddress.unit.type,",
						"          unparsedAddr_unitvalue = serviceAddress.unparsedAddress.unit.value,",
						"          unparsedAddr_urbanizationCode = serviceAddress.unparsedAddress.urbanizationCode,",
						"          unparsedAddr_city = serviceAddress.unparsedAddress.city,",
						"          unparsedAddr_country = serviceAddress.unparsedAddress.country,",
						"          unparsedAddr_state = serviceAddress.unparsedAddress.state,",
						"          unparsedAddr_zip = serviceAddress.unparsedAddress.zip,",
						"          unparsedAddr_zipCodeExtension = serviceAddress.unparsedAddress.zipCodeExtension,",
						"          unparsedAddr_internationalZip = serviceAddress.unparsedAddress.internationalZip,",
						"          unparsedAddr_addressLine2 = serviceAddress.unparsedAddress.addressLine2,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          unparsedAddrCounty = serviceAddress.unparsedAddress.county",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select55",
						"select55 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window88",
						"filter90 alterRow(upsertIf(true())) ~> alterRowlosgserviceaddress",
						"window88 filter(prank==1 && !isNull(ServiceAddress_id)) ~> filter90",
						"flattenBillingDetails foldDown(unroll(name.primaryContactPhones),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          emailAddress = name.emailAddress,",
						"          firstName = name.firstName,",
						"          nameId = name.id,",
						"          middleInitial = name.middleInitial,",
						"          lastName = name.lastName,",
						"          legalFirstName = name.legalFirstName,",
						"          legalLastName = name.legalLastName,",
						"          previousLegalLastName = name.previousLegalLastName,",
						"          suffix = name.suffix,",
						"          title = name.title,",
						"          additionalContactPhones = name.additionalContactPhones,",
						"          primaryContactPhoneType = name.primaryContactPhones.contactPhoneType,",
						"          primaryContactPhoneNumber = name.primaryContactPhones.phoneNumber,",
						"          primaryContactextension = name.primaryContactPhones.extension,",
						"          primarycontactPhoneConsentDetails = name.primaryContactPhones.consentDetails,",
						"          licenseExpirationDate,",
						"          licenseNumber,",
						"          licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          federalTaxId,",
						"          gender,",
						"          lastFourOfSSN,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          accountStatus,",
						"          dob,",
						"          motherMaidenName,",
						"          pin,",
						"          securityQuestion,",
						"          securityAnswer,",
						"          ssn,",
						"          ssnRefusedIndicator,",
						"          stateidNumber = StateidNumber,",
						"          stateIdIssuedState,",
						"          billingType,",
						"          nextBillingCycleDate,",
						"          preferredContactMethod = name.preferredContactMethod,",
						"          prefix = name.prefix,",
						"          dc_eventtime,",
						"          sequence",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten23",
						"select56 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window89",
						"window89 filter(prank==1) ~> filter91",
						"filter91 alterRow(upsertIf(true())) ~> alterRowDiLitem",
						"filter115 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = direcTVLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = direcTVLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = direcTVLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = direcTVLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = direcTVLineItemCharacteristics.requestComponentGroup",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select56",
						"filter114 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = voipLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = voipLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = voipLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = voipLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = voipLineItemCharacteristics.requestComponentGroup,",
						"          callerId = voipLineItemCharacteristics.callerId,",
						"          uverseMessaging = voipLineItemCharacteristics.uverseMessaging",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select57",
						"select57 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window90",
						"window90 filter(prank==1) ~> filter92",
						"filter92 alterRow(upsertIf(true())) ~> alterRowvoipLLitems",
						"filter113 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = iptvLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = iptvLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = iptvLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = iptvLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = iptvLineItemCharacteristics.requestComponentGroup",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select58",
						"select58 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window91",
						"window91 filter(prank==1) ~> filter93",
						"filter93 alterRow(upsertIf(true())) ~> alterRowiptv",
						"filter102 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = wirelessLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = wirelessLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = wirelessLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = wirelessLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = wirelessLineItemCharacteristics.requestComponentGroup,",
						"          attDynTrafficManagerAddlDetails = wirelessLineItemCharacteristics.attDynamicTrafficManager.additionalDetails,",
						"          attDynTrafficManagerEnterpriseId = wirelessLineItemCharacteristics.attDynamicTrafficManager.enterpriseId,",
						"          attDynTrafficManagerManifestLabel = wirelessLineItemCharacteristics.attDynamicTrafficManager.manifestLabel,",
						"          attDynTrafficManagerManifestURL = wirelessLineItemCharacteristics.attDynamicTrafficManager.manifestURL,",
						"          availabilityType = wirelessLineItemCharacteristics.availabilityType,",
						"          distributionChannelId = wirelessLineItemCharacteristics.distributionChannelId,",
						"          nciEligibleIndicator = wirelessLineItemCharacteristics.nciEligibleIndicator,",
						"          newSalesChannelId = wirelessLineItemCharacteristics.newSalesChannelId,",
						"          offerType = wirelessLineItemCharacteristics.offerType,",
						"          packetDataProtocolAddlDetails = wirelessLineItemCharacteristics.packetDataProtocol.additionalDetails,",
						"          packetDataProtocolApnName = wirelessLineItemCharacteristics.packetDataProtocol.apnName,",
						"          packetDataProtocol5GIndicator = wirelessLineItemCharacteristics.packetDataProtocol.packetDataProtocol5GIndicator,",
						"          packetDataProtocolDefaultIndicator = wirelessLineItemCharacteristics.packetDataProtocol.defaultPacketDataProtocolIndicator,",
						"          packetDataProtocolDefaultSNType = wirelessLineItemCharacteristics.packetDataProtocol.defaultSNType,",
						"          packetDataProtocolIpAddress = wirelessLineItemCharacteristics.packetDataProtocol.ipAddress,",
						"          packetDataProtocolIpv6Address = wirelessLineItemCharacteristics.packetDataProtocol.ipv6Address,",
						"          packetDataProtocolIpversionType = wirelessLineItemCharacteristics.packetDataProtocol.ipversionType,",
						"          packetDataProtocolLteIndicator = wirelessLineItemCharacteristics.packetDataProtocol.ltePacketDataProtocolIndicator,",
						"          packetDataProtocolOnlineChargingIndicator = wirelessLineItemCharacteristics.packetDataProtocol.onlineChargingSystemIndicator,",
						"          packetDataProtocolType = wirelessLineItemCharacteristics.packetDataProtocol.packetDataProtocolType,",
						"          partnerCode = wirelessLineItemCharacteristics.partnerCode,",
						"          simType = wirelessLineItemCharacteristics.simType,",
						"          tradeInDetailModelCode = wirelessLineItemCharacteristics.tradeInDetail.modelCode,",
						"          tradeInDetailAddlDetails = wirelessLineItemCharacteristics.tradeInDetail.additionalDetails,",
						"          tradeInDetailClaimId = wirelessLineItemCharacteristics.tradeInDetail.claimId,",
						"          tradeInDetailDeviceClearingAgreement = wirelessLineItemCharacteristics.tradeInDetail.deviceClearingAgreement,",
						"          tradeInDetailDeviceCondition = wirelessLineItemCharacteristics.tradeInDetail.deviceCondition,",
						"          tradeInDetailExchangeType = wirelessLineItemCharacteristics.tradeInDetail.exchangeType,",
						"          tradeInDetailInstallmentPlanId = wirelessLineItemCharacteristics.tradeInDetail.installmentPlanId,",
						"          tradeInDetailNonComplianceFee = wirelessLineItemCharacteristics.tradeInDetail.nonComplianceFee,",
						"          tradeInDetailPayupAmount = wirelessLineItemCharacteristics.tradeInDetail.payupAmount,",
						"          tradeInModelCode = wirelessLineItemCharacteristics.tradeInModelCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select59",
						"select59 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window92",
						"window92 filter(prank==1) ~> filter94",
						"filter94 alterRow(upsertIf(true())) ~> alterRowwire",
						"filter select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          LineItem_id,",
						"          sequence,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          additionalDetails = internetLineItemCharacteristics.additionalDetails,",
						"          componentConfigurations = internetLineItemCharacteristics.componentConfigurations,",
						"          ignorePricePlanCode = internetLineItemCharacteristics.ignorePricePlanCode,",
						"          productSpecificationId = internetLineItemCharacteristics.productSpecificationId,",
						"          requestComponentGroup = internetLineItemCharacteristics.requestComponentGroup,",
						"          boltOnType = internetLineItemCharacteristics.boltOnType,",
						"          bucketAllowance = internetLineItemCharacteristics.bucketAllowance,",
						"          ipType = internetLineItemCharacteristics.ipType,",
						"          maxOverageCharge = internetLineItemCharacteristics.maxOverageCharge,",
						"          overageBucketAllowance = internetLineItemCharacteristics.overageBucketAllowance,",
						"          planDownloadSpeed = internetLineItemCharacteristics.planDownloadSpeed,",
						"          pricePerBucketAllowance = internetLineItemCharacteristics.pricePerBucketAllowance",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select60",
						"select60 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          losgsequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window94",
						"window94 filter(prank==1) ~> filter96",
						"filter96 alterRow(upsertIf(true())) ~> alterRowIIChar",
						"flatten9 foldDown(unroll(recipientPrimaryContact),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          price,",
						"          shippingaddress,",
						"          shippingDetailsid,",
						"          signatureRequiredIndicator,",
						"          billingCode,",
						"          carrierPreference,",
						"          fromDate,",
						"          toDate,",
						"          sequence,",
						"          shippingCode,",
						"          shippingMethod,",
						"          shippingPriceCode,",
						"          additionalContactPhones,",
						"          id,",
						"          emailAddress,",
						"          firstName,",
						"          middleInitial,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          preferredContactMethod,",
						"          suffix,",
						"          prefix,",
						"          title,",
						"          previousLegalLastName,",
						"          recipientPrimaryContactPhoneType = recipientPrimaryContact.contactPhoneType,",
						"          recipientPrimaryContactPhoneNumber = recipientPrimaryContact.phoneNumber,",
						"          recipientPrimaryContactextension = recipientPrimaryContact.extension,",
						"          recipientPrimaryContactPhoneConsentDetails = recipientPrimaryContact.consentDetails",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten25",
						"filter117 select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          categoryType = internetLOSCharacteristics.categoryType,",
						"          discountedInternetIndicator = internetLOSCharacteristics.discountedInternetIndicator,",
						"          discountedInternetAdditionalAllowance = internetLOSCharacteristics.discountedInternetAdditionalAllowance,",
						"          gatewayCTN = internetLOSCharacteristics.gatewayCTN,",
						"          gatewayCTNStatus = internetLOSCharacteristics.gatewayCTNStatus,",
						"          internetProgramType = internetLOSCharacteristics.internetProgramType,",
						"          internetProtocolDigitalSubscriberLineAccess = internetLOSCharacteristics.internetProtocolDigitalSubscriberLineAccess,",
						"          internetNetworkProvider = internetLOSCharacteristics.internetNetworkProvider,",
						"          parentComponentCode = internetLOSCharacteristics.parentComponentCode,",
						"          primaryNetworkType = internetLOSCharacteristics.primaryNetworkType,",
						"          retainedServiceProcessIndicator = internetLOSCharacteristics.retainedServiceProcessIndicator,",
						"          serviceId = internetLOSCharacteristics.serviceId,",
						"          serviceType = internetLOSCharacteristics.serviceType,",
						"          totalAllowance = internetLOSCharacteristics.totalAllowance,",
						"          additionalDetails = internetLOSCharacteristics.additionalDetails,",
						"          lastmodified_date,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select62",
						"window43 derive(e911TnCtimestamp = toTimestamp(toLong(toString(byName('e911TnCtimestamp'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn44",
						"filter116 foldDown(unroll(voipLOSCharacteristics.directoryListing, voipLOSCharacteristics.directoryListing),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgSequence = sequence,",
						"          dirListingName = voipLOSCharacteristics.directoryListing.name,",
						"          dirListingAdditionalDetails = voipLOSCharacteristics.directoryListing.additionalDetails,",
						"          dirListingDesignation = voipLOSCharacteristics.directoryListing.designation,",
						"          dirListingAddress = voipLOSCharacteristics.directoryListing.listing.address,",
						"          dirListingListingType = voipLOSCharacteristics.directoryListing.listing.listingType,",
						"          dirListingListingCategory = voipLOSCharacteristics.directoryListing.listing.listingCategory,",
						"          dirListingListBy = voipLOSCharacteristics.directoryListing.listing.listBy,",
						"          releaseDetailForBillingIndicator = voipLOSCharacteristics.directoryListing.listing.releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator = voipLOSCharacteristics.directoryListing.omitAddressIndicator,",
						"          dirListingParentComponentCode = voipLOSCharacteristics.directoryListing.parentComponentCode,",
						"          dirListingTitle2 = voipLOSCharacteristics.directoryListing.title2,",
						"          dirListingSubscriberName = voipLOSCharacteristics.directoryListing.subscriberName,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten26",
						"derivedColumn45 foldDown(unroll(OrderData.priceSummaryList, OrderData.priceSummaryList),",
						"     mapColumn(",
						"          amount = OrderData.priceSummaryList.amount,",
						"          customerOrderNumber = OrderData.customerOrderNumber,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          currencyType = OrderData.priceSummaryList.currencyType,",
						"          priceType = OrderData.priceSummaryList.priceType,",
						"          total = OrderData.priceSummaryList.total,",
						"          taxSummary = OrderData.priceSummaryList.taxSummary",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten27",
						"filter119 foldDown(unroll(wirelessLOSCharacteristics.upgradeQualificationDetails, wirelessLOSCharacteristics.upgradeQualificationDetails),",
						"     mapColumn(",
						"          approvalNumber = wirelessLOSCharacteristics.upgradeQualificationDetails.approvalNumber,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          contractExtended = wirelessLOSCharacteristics.upgradeQualificationDetails.contractExtended,",
						"          deviceType = wirelessLOSCharacteristics.upgradeQualificationDetails.deviceType,",
						"          discountUOM = wirelessLOSCharacteristics.upgradeQualificationDetails.discountUOM,",
						"          maximumMRC = wirelessLOSCharacteristics.upgradeQualificationDetails.maximumMRC,",
						"          minimumCommitment = wirelessLOSCharacteristics.upgradeQualificationDetails.minimumCommitment,",
						"          minimumMRC = wirelessLOSCharacteristics.upgradeQualificationDetails.minimumMRC,",
						"          newAEUCheckerIndicator = wirelessLOSCharacteristics.upgradeQualificationDetails.newAEUCheckerIndicator,",
						"          offerCategory = wirelessLOSCharacteristics.upgradeQualificationDetails.offerCategory,",
						"          policyCategory = wirelessLOSCharacteristics.upgradeQualificationDetails.policyCategory,",
						"          priceList = wirelessLOSCharacteristics.upgradeQualificationDetails.priceList,",
						"          qualificationLevel = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationLevel,",
						"          qualificationMessage = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationMessage,",
						"          qualificationType = wirelessLOSCharacteristics.upgradeQualificationDetails.qualificationType,",
						"          upgradeEligibilityDate = wirelessLOSCharacteristics.upgradeQualificationDetails.upgradeEligibilityDate,",
						"          upgradeFeeWaivedIndicator = wirelessLOSCharacteristics.upgradeQualificationDetails.upgradeFeeWaivedIndicator",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten28",
						"flatten28 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window96",
						"window96 filter(prank==1) ~> filter98",
						"derivedColumn46 alterRow(upsertIf(true())) ~> alterRowupgrad",
						"coalLLseq select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          action,",
						"          addOnDomainName,",
						"          addOnDomainRegistration,",
						"          addOnParentItem,",
						"          addOnRegistrationType,",
						"          billingCode,",
						"          billingCodeType,",
						"          catalogProductType,",
						"          catalogSKUId,",
						"          contractAmountFinanced,",
						"          contractAnnualPercentageRate,",
						"          contractBalancedAmount,",
						"          contractDisplayName,",
						"          contractLength,",
						"          contractSent,",
						"          contractSystem,",
						"          contractType,",
						"          contractDownPayment,",
						"          contractDownPaymentPercent,",
						"          contractFinanceCharge,",
						"          contractInstallmentAmount,",
						"          contractInstallmentPlanDef,",
						"          contractInstallmentPlanId,",
						"          contractInstallmentStatus,",
						"          contractInstallmentType,",
						"          contractPrepaidFinanceCharge,",
						"          contractPayupAmount,",
						"          contractPayoffAmount,",
						"          contractTotalSalePrice,",
						"          curbsideDelivery,",
						"          description,",
						"          effectiveDate,",
						"          feeId,",
						"          feeIdType,",
						"          feeWaivedIndicator,",
						"          feeWaivedReason,",
						"          fulfillmentLocation,",
						"          displayName,",
						"          groupOptionId,",
						"          inventoryStoreId,",
						"          itemFulfillmentMethod,",
						"          LineItem_id,",
						"          locationId,",
						"          notes,",
						"          operation,",
						"          preOwnedIndicator,",
						"          productCode,",
						"          productSKU,",
						"          productType,",
						"          quantity,",
						"          sequence,",
						"          systemName,",
						"          hardGood,",
						"          additionalDetails,",
						"          internetLineItemCharacteristics,",
						"          priceAdditionalDetails = price.additionalDetails,",
						"          priceAmount = price.amount,",
						"          priceBaseAmount = price.baseAmount,",
						"          priceCreditFeeType = price.creditFeeType,",
						"          priceCurrencyType = price.currencyType,",
						"          priceInstallmentEligibility = price.installmentEligibility,",
						"          priceMsrp = price.msrp,",
						"          priceType = price.priceType,",
						"          priceTaxDetail = price.taxDetail,",
						"          priceTotal = price.total,",
						"          productCode,",
						"          productSKU,",
						"          productGroupReferences,",
						"          productType,",
						"          productSubType,",
						"          promotionReferences,",
						"          tier,",
						"          taxableIndicator,",
						"          systemName,",
						"          subscriptionId,",
						"          storeId,",
						"          status,",
						"          socForPreviousDevice,",
						"          shippingDetailReference,",
						"          purchaseTransactionId,",
						"          quantity,",
						"          lastmodified_date,",
						"          losgsequence,",
						"          dc_eventtime,",
						"          productInventoryStatus",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select63",
						"derivedColumn57 window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence,",
						"          sequence,",
						"          LineItem_id),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window97",
						"window97 filter(prank==1) ~> filter99",
						"filter99 alterRow(upsertIf(true())) ~> alterRowlineitems",
						"selectOrderData derive(dc_eventtime = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn45",
						"filter98 derive(date = toTimestamp(toLong(toString(byName('upgradeEligibilityDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn46",
						"window77 derive(code = coalesce(code,' '),",
						"          dateTime = toTimestamp(toLong(toString(byName('dateTime'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn48",
						"AlterRowOrderPromotions derive(effectiveDate = toDate(toString(byName('effectiveDate')),'yyyy-MM-dd'),",
						"          endDate = toDate(toString(byName('endDate')),'yyyy-MM-dd')) ~> derivedColumn49",
						"filter65 derive(referredDate = toTimestamp(toLong(toString(byName('referredDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn50",
						"select22 derive(creditReferenceDate = toTimestamp(toLong(toString(byName('creditReferenceDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn51",
						"filter89 derive(availabilityDate = toTimestamp(toLong(toString(byName('availabilityDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          shippedDate = toTimestamp(toLong(toString(byName('shippedDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> derivedColumn52",
						"coallosgid foldDown(unroll(termsAndConditionAccepted, termsAndConditionAccepted),",
						"     mapColumn(",
						"          accepted = termsAndConditionAccepted.accepted,",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgsequence = sequence,",
						"          lastmodified_date,",
						"          dc_eventtime,",
						"          agreementText = termsAndConditionAccepted.agreementText,",
						"          agreementType = termsAndConditionAccepted.agreementType,",
						"          agreementURL = termsAndConditionAccepted.agreementURL,",
						"          category = termsAndConditionAccepted.category,",
						"          documentName = termsAndConditionAccepted.documentName,",
						"          termsandconditions_id = termsAndConditionAccepted.id,",
						"          orderLevelIndicator = termsAndConditionAccepted.orderLevelIndicator,",
						"          timestamp = termsAndConditionAccepted.timestamp,",
						"          tncld = termsAndConditionAccepted.tncld,",
						"          tnckey = termsAndConditionAccepted.tncKey,",
						"          tncRecordingOff = termsAndConditionAccepted.tncRecordingOff,",
						"          version = termsAndConditionAccepted.version",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flatten30",
						"select45 derive(preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn53",
						"flatten20 derive(effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          endDate = toTimestamp(toLong(toString(byName('endDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn54",
						"select27 derive(disconTimestamp = toTimestamp(toLong(toString(byName('disconTimestamp'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn55",
						"select15 derive(splitLiabilityDataAddendDateAndTime = toTimestamp(toLong(toString(byName('splitLiabilityDataAddendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          addendDateAndTime = toTimestamp(toLong(toString(byName('addendDateAndTime'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          activationDate = toTimestamp(toLong(toString(byName('activationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          availabilityDate = toTimestamp(toLong(toString(byName('availabilityDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          networkFulfillmentDate = toTimestamp(toLong(toString(byName('networkFulfillmentDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn56",
						"select63 derive(effectiveDate = toTimestamp(toLong(toString(byName('effectiveDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn57",
						"select53 derive(availabilityDate = toTimestamp(toLong(toString(byName('availabilityDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          deliveryByDateFromDate = toTimestamp(toLong(toString(byName('deliveryByDateFromDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          deliveryByDateToDate = toTimestamp(toLong(toString(byName('deliveryByDateToDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          shipmentCommitFromDate = toTimestamp(toLong(toString(byName('shipmentCommitFromDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          shipmentCommitToDate = toTimestamp(toLong(toString(byName('shipmentCommitToDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn58",
						"select33 derive(conflictLandlordDetailApprovalDate = toTimestamp(toLong(toString(byName('conflictLandlordDetailApprovalDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn60",
						"select31 derive(preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn61",
						"select29 derive(column1preAuthAuthorizationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationDate'))),'yyyy-MM-dd HH:mm:ss:SSS'),",
						"          preAuthAuthorizationExpirationDate = toTimestamp(toLong(toString(byName('preAuthAuthorizationExpirationDate'))),'yyyy-MM-dd HH:mm:ss:SSS')) ~> derivedColumn62",
						"flattenLosgsLineItems derive(sequence = coalesce(sequence,''),",
						"          LineItem_id = coalesce(LineItem_id,''),",
						"          status = coalesce(status,'')) ~> coalLLseq",
						"window9 derive(value = coalesce(value,'')) ~> derivedColumn64",
						"filter29 derive(value = coalesce(value,'')) ~> derivedColumn65",
						"filterEventsource select(mapColumn(",
						"          orderjson_1,",
						"          lastmodified_date,",
						"          customerordernumber = orderjson_1.orderEvent.customerOrderNumber,",
						"          customerOrderNumber2 = orderjson_1.orderEvent.data.order.customerOrderNumber,",
						"          eventTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select64",
						"select64 derive(customerordernumber = coalesce(customerordernumber,customerOrderNumber2)) ~> derivedColumn66",
						"selectOrderTask derive(customerOrderNumber = coalesce(customerOrderNumber,CustomerOrderNumber2)) ~> derivedColumn67",
						"filter23 derive(Promotion_id = coalesce(Promotion_id,' '),",
						"          sequence = coalesce(sequence,' ')) ~> derivedColumn68",
						"window44 derive(dirListingName = coalesce(dirListingName,' ')) ~> derivedColumn69",
						"derivedColumn39 filter(not(isNull(OrderData.eCommercePartner))) ~> filtereCommercePartner",
						"derivedColumn39 filter(not(isNull(OrderData.employeeDetail))) ~> filteremployeeDetail",
						"derivedColumn39 filter(not(isNull(OrderData.loginProfile))) ~> filterloginProfile",
						"derivedColumn39 filter(not(isNull(OrderData.salesAgent))) ~> filterSalesAgent",
						"derivedColumn20 filter(not(isNull(OrderData.referenceDetail))) ~> filterreferenencedetail",
						"derivedColumn20 filter(not(isNull(OrderData.creditPolicy))) ~> filtercreditPolicy",
						"derivedColumn14 filter(not(isNull(orderjson_1.orderEvent.data.order.moveDetail))) ~> filter100",
						"coalacc filter(not(isNull(unifiedAccount))) ~> filterunifiedaccount",
						"coalacc filter(not(isNull(negotiateConflictCustomer))) ~> filternegotiateCC",
						"coalacc filter(not(isNull(cardOnFilePaymentMethod.ePaymentMethod))) ~> filtecardOnFilePaymentMethod",
						"coalacc filter(not(isNull(creditCheck))) ~> filtercreditCheck",
						"coalacc filter(not(isNull(billingDetail))) ~> filter101",
						"coalLLseq filter(not(isNull(hardGood))) ~> filtehardGood",
						"coalLLseq filter(not(isNull(internetLineItemCharacteristics))) ~> filter",
						"coalLLseq filter(not(isNull(wirelessLineItemCharacteristics))) ~> filter102",
						"coalacc filter(not(isNull(cardOnFilePaymentMethod))) ~> filter103",
						"coalacc filter(not(isNull(autopayPaymentMethod.ePaymentMethod))) ~> filter104",
						"coalacc filter(not(isNull(autopayPaymentMethod))) ~> filter105",
						"coallosgid filter(not(isNull(compensation))) ~> filter107",
						"coallosgid filter(not(isNull(direcTVLOSCharacteristics))) ~> filter108",
						"coallosgid filter(not(isNull(wirelessLOSCharacteristics))) ~> filter110",
						"coallosgid filter(not(isNull(voipLOSCharacteristics))) ~> filter111",
						"coallosgid filter(not(isNull(iptvLOSCharacteristics))) ~> filter112",
						"coalLLseq filter(not(isNull(iptvLineItemCharacteristics))) ~> filter113",
						"coalLLseq filter(not(isNull(voipLineItemCharacteristics))) ~> filter114",
						"coalLLseq filter(not(isNull(direcTVLineItemCharacteristics))) ~> filter115",
						"coallosgid filter(not(isNull(directoryListing))) ~> filter116",
						"coallosgid filter(not(isNull(internetLOSCharacteristics))) ~> filter117",
						"coalLLseq filter(not(isNull(supplyChainDetail))) ~> filter118",
						"coallosgid filter(not(isNull(wirelessLOSCharacteristics.upgradeQualificationDetails))) ~> filter119",
						"select19 derive(channel = coalesce(channel,channel1,channel2)) ~> derivedColumn70",
						"filter87 derive(paymentTenderReference = coalesce(paymentTenderReference,'')) ~> derivedColumn71",
						"coalacc filter(not(isNull(provisioningSystem))) ~> filter120",
						"filter120 foldDown(unroll(provisioningSystem, provisioningSystem),",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          Account_id,",
						"          sequence,",
						"          systemName = provisioningSystem.systemName,",
						"          systemOrderReference = provisioningSystem.systemOrderReference,",
						"          dc_eventtime,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten31",
						"flatten31 select(mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          dc_eventtime,",
						"          lastmodified_date,",
						"          systemOrderReference,",
						"          systemName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select65",
						"select65 window(over(customerOrderNumber,",
						"          acctId,",
						"          acctSequence,",
						"          systemName),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> window98",
						"window98 filter(prank==1) ~> filter121",
						"filter121 alterRow(upsertIf(true())) ~> alterRowProvisionSystem",
						"select46 derive(priceType = coalesce(priceType,' ')) ~> derivedColumn72",
						"flattenerror window(over(customerOrderNumber,",
						"          ErrorCode),",
						"     desc(lastmodified_date, true),",
						"     prank = rowNumber()) ~> window99",
						"window99 filter(prank==1) ~> filter122",
						"coallosgid select(mapColumn(",
						"          customerOrderNumber,",
						"          losg_id = Losg_id,",
						"          losgSequence = sequence,",
						"          status = losgStatus.status,",
						"          subStatus = losgStatus.subStatus,",
						"          eventDate = dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOceOrderLosgsEventHistory",
						"selectOceOrderLosgsEventHistory window(over(customerOrderNumber,",
						"          losg_id,",
						"          losgSequence,",
						"          status,",
						"          subStatus),",
						"     desc(eventDate, true),",
						"     prank = rowNumber()) ~> windowStreamBasedLosg",
						"windowStreamBasedLosg filter(prank == 1) ~> getLatestLosgInfoFromWindow",
						"setModifiedDateForLosgEventHistory alterRow(upsertIf(true())) ~> alterRowForOceOrderLosgsEventHistory",
						"coalLLseq select(mapColumn(",
						"          customerOrderNumber,",
						"          Losg_id,",
						"          losgSequence = losgsequence,",
						"          lineItemId = LineItem_id,",
						"          lineItemSequence = sequence,",
						"          status,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOceOrderLosgsLineItemsEventHistory",
						"selectOceOrderLosgsLineItemsEventHistory window(over(customerOrderNumber,",
						"          Losg_id,",
						"          losgSequence,",
						"          lineItemId,",
						"          lineItemSequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowLosgsLineItemsEventHistory",
						"windowLosgsLineItemsEventHistory filter(prank==1) ~> filterLatestLosgsLineItemsEvent",
						"getLatestLosgInfoFromWindow derive(ModifiedDate = currentUTC()) ~> setModifiedDateForLosgEventHistory",
						"filterLatestLosgsLineItemsEvent derive(ModifiedDate = currentUTC()) ~> addModifiedDateToLosgLineItemHistory",
						"addModifiedDateToLosgLineItemHistory alterRow(upsertIf(true())) ~> alterRowOrderLosgsLineItemsEventHistory",
						"filterorderdata filter(in(['OrderMs','OrderRepoMS','OrderTaskQueueMs'],eventSource)) ~> filterEventsource",
						"derivedColumn36 foldDown(unroll(losgs),",
						"     mapColumn(",
						"          comments,",
						"          actionBy,",
						"          updateInfos,",
						"          channel,",
						"          orderStatus,",
						"          transactionName,",
						"          transactionType,",
						"          changedLosgReferenceId,",
						"          recordId,",
						"          queueName,",
						"          parentOrderId,",
						"          startTime,",
						"          endTime,",
						"          transactionId,",
						"          orderId,",
						"          customerOrderNumber,",
						"          lastmodified_date,",
						"          eventTime,",
						"          losgReferenceId = losgs.losgReferenceId,",
						"          service = losgs.service,",
						"          serviceType = losgs.serviceType,",
						"          losgstatus = losgs.status,",
						"          losgsubStatus = losgs.subStatus,",
						"          losgwirelessNumber = losgs.wirelessNumber,",
						"          idbStatus",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten32",
						"flatten32 derive(losgstatus = coalesce(losgstatus,''),",
						"          losgsubStatus = coalesce(losgsubStatus,''),",
						"          losgReferenceId = coalesce(losgReferenceId,''),",
						"          modifiedDate = currentUTC()) ~> derivedColumn73",
						"derivedColumn73 window(over(customerOrderNumber,",
						"          losgReferenceId,",
						"          losgstatus,",
						"          losgsubStatus,",
						"          startTime),",
						"     asc(startTime, true),",
						"     prank = rowNumber()) ~> window100",
						"window100 filter(prank==1) ~> filter123",
						"filter123 alterRow(upsertIf(true())) ~> altertransactinlogs",
						"coallosgid foldDown(unroll(apiExecutionDetails, apiExecutionDetails),",
						"     mapColumn(",
						"          name = apiExecutionDetails.name,",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          priority = apiExecutionDetails.priority,",
						"          action = apiExecutionDetails.action,",
						"          losgSubStatus = apiExecutionDetails.loSGStatus.subStatus,",
						"          losgStatus = apiExecutionDetails.loSGStatus.status,",
						"          eventDate = dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> flattenApiExecutionArray",
						"flattenApiExecutionArray window(over(customerOrderNumber,",
						"          losgId,",
						"          losgSequence),",
						"     desc(eventDate, true),",
						"     prank = rowNumber()) ~> windowApiExecutionDetails",
						"windowApiExecutionDetails filter(prank==1) ~> filterLatestApiExecutionRecord",
						"filterLatestApiExecutionRecord alterRow(upsertIf(true())) ~> AlterRowApiExecutionDetails",
						"filteroceOrderCancelDetails select(mapColumn(",
						"          customerOrderNumber,",
						"          cancelReason = OrderData.cancelDetails.cancelReason,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderCancelDetails",
						"selectOrderCancelDetails window(over(customerOrderNumber),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowOrderCancel",
						"windowOrderCancel filter(prank==1) ~> filterOrderCancel",
						"filterOrderCancel alterRow(upsertIf(true())) ~> AlterRowCancelDetails",
						"derivedColumn45 filter(not(isNull(OrderData.cancelDetails.cancelReason))) ~> filteroceOrderCancelDetails",
						"coallosgid select(mapColumn(",
						"          CustomerOrderNumber = customerOrderNumber,",
						"          LosgId = Losg_id,",
						"          sequence,",
						"          cancelReason = cancelDetails.cancelReason,",
						"          cancelBy = cancelDetails.cancelBy,",
						"          dc_eventtime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectoceOrderLosgCancelDetails",
						"selectoceOrderLosgCancelDetails window(over(CustomerOrderNumber,",
						"          LosgId,",
						"          sequence),",
						"     desc(dc_eventtime, true),",
						"     prank = rowNumber()) ~> windowoceOrderLosgCancelDetails",
						"windowoceOrderLosgCancelDetails filter(prank==1 && not(isNull(cancelReason))) ~> filteroceOrderLosgCancelDetails",
						"filteroceOrderLosgCancelDetails alterRow(upsertIf(true())) ~> alterRowoceOrderLosgCancelDetails",
						"AlterRowOrderData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acceptedDate as timestamp,",
						"          b2bDetail as string,",
						"          channel as string,",
						"          status as string,",
						"          subStatus as string,",
						"          installmentMultiIndicator as string,",
						"          isOrderPended as string,",
						"          numberOfInstallments as string,",
						"          oceOrderNumber as string,",
						"          orderId as string,",
						"          program as string,",
						"          requestId as string,",
						"          requestType as string,",
						"          revisionNumber as string,",
						"          specialInstructions as string,",
						"          createdDate as timestamp,",
						"          submittedDate as timestamp,",
						"          updatedDate as timestamp,",
						"          type as string,",
						"          version as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          eventTimeDateTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderdata_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acceptedDate,",
						"          b2bDetail,",
						"          channel,",
						"          status,",
						"          subStatus,",
						"          installmentMultiIndicator,",
						"          isOrderPended,",
						"          numberOfInstallments,",
						"          oceOrderNumber,",
						"          orderId,",
						"          program,",
						"          requestId,",
						"          requestType,",
						"          revisionNumber,",
						"          specialInstructions,",
						"          createdDate,",
						"          submittedDate,",
						"          updatedDate,",
						"          type,",
						"          version,",
						"          eventTime,",
						"          eventTimeDateTime = dc_eventtime",
						"     )) ~> sinkOrderData",
						"AlterRowOrderAdditionalDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          value as string,",
						"          sequence as integer,",
						"          type as string,",
						"          parentType as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code','value'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderadditionaldetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          type,",
						"          value,",
						"          code,",
						"          parentType,",
						"          sequence",
						"     )) ~> sinkOrderAdditionalDetails",
						"AlterRowOrderContactDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          additionalEmailRecipients as string,",
						"          orderConfirmationByEmailPermissionIndicator as string,",
						"          orderPickUpCTN as string,",
						"          permissionForOutboundCallIndicator as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          preferredContactMethod as string,",
						"          preferredTimeOfDayForContact as string,",
						"          primaryemailaddress as string,",
						"          productUpdatesByEmailPermissionIndicator as string,",
						"          secondaryEmailAddress as string,",
						"          timeZone as string,",
						"          unpublishedContactByPhonePermissionIndicator as string,",
						"          ModifiedDate as timestamp,",
						"          smsValidIndicator as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordercontactdetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails,",
						"          additionalEmailRecipients,",
						"          orderConfirmationByEmailPermissionIndicator,",
						"          orderPickUpCTN,",
						"          permissionForOutboundCallIndicator,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = nameid,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          preferredContactMethod,",
						"          preferredTimeOfDayForContact,",
						"          primaryemailaddress = primaryEmailAddress,",
						"          productUpdatesByEmailPermissionIndicator,",
						"          secondaryEmailAddress,",
						"          timeZone,",
						"          unpublishedContactByPhonePermissionIndicator,",
						"          smsValidIndicator = smsValidatedIndicator",
						"     )) ~> sinkOrderContactDetails",
						"AlterRowOrderPriceList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseamount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencytype as string,",
						"          installmentEligibility as string,",
						"          msrp as decimal(20,2),",
						"          total as decimal(20,2),",
						"          taxDetail as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpricelist_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          additionalDetails,",
						"          amount,",
						"          baseamount = baseAmount,",
						"          creditFeeType,",
						"          currencytype = currencyType,",
						"          installmentEligibility,",
						"          msrp,",
						"          total,",
						"          taxDetail",
						"     )) ~> sinkOrderPrice",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          priceType as string,",
						"          amount as decimal(20,2),",
						"          currencyType as string,",
						"          taxSummary as string,",
						"          total as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpricesummarylist',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          priceType,",
						"          amount,",
						"          currencyType,",
						"          taxSummary,",
						"          total",
						"     )) ~> sinkOrderPriceSummaryList",
						"AlterRowOrderProductGroups sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          productGroupId as string,",
						"          productGroupSequence as string,",
						"          additionalDetails as string,",
						"          characteristicsId as string,",
						"          name as string,",
						"          type as string,",
						"          discountOffer as string,",
						"          packageCharacteristicsCode as string,",
						"          packageCharacteristicsDesc as string,",
						"          packageCharacteristicsType as string,",
						"          sharedPlanDataGroupId as string,",
						"          sharedPlanFamilyGroupId as string,",
						"          sharedPlanGroupReferencesCode as string,",
						"          sharedPlanType as string,",
						"          sharedPlanPrimarySubscriberNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','productGroupId','productGroupSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderproductgroups',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          productGroupId = Product_id,",
						"          productGroupSequence = sequence,",
						"          additionalDetails,",
						"          characteristicsId = characteristicsid,",
						"          name,",
						"          type = ProductGrouptype,",
						"          discountOffer,",
						"          packageCharacteristicsCode = code,",
						"          packageCharacteristicsDesc = description,",
						"          packageCharacteristicsType = packageCharacteristicstype,",
						"          sharedPlanDataGroupId = sharedPlandataGroupId,",
						"          sharedPlanFamilyGroupId = sharedPlanfamilyGroupId,",
						"          sharedPlanGroupReferencesCode = sharedPlangroupReferencesCode,",
						"          sharedPlanType = sharedPlanplanType,",
						"          sharedPlanPrimarySubscriberNumber = sharedPlanprimarySubscriberNumber",
						"     )) ~> sinkOrderProductGroups",
						"derivedColumn49 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          id as string,",
						"          sequence as string,",
						"          additionDetails as string,",
						"          amount as decimal(20,2),",
						"          baseOfferId as string,",
						"          complexDiscountIndicator as string,",
						"          componentConfigurations as string,",
						"          couponCode as string,",
						"          displayLevel as string,",
						"          duration as integer,",
						"          effectiveDate as timestamp,",
						"          effectiveInDays as integer,",
						"          endDate as timestamp,",
						"          fixedAmount as decimal(20,2),",
						"          ioId as string,",
						"          ioSequence as string,",
						"          parentPricePlanCode as string,",
						"          payInAdvanceProdId as string,",
						"          percent as decimal(20,2),",
						"          promotionAppliedBy as string,",
						"          promotionBillingCode as string,",
						"          promotionCode as string,",
						"          promotionCycle as string,",
						"          promotionId as string,",
						"          promotionName as string,",
						"          promotionType as string,",
						"          unitOfMeasurement as string,",
						"          promotionTypeDetail as string,",
						"          qualifyingServiceDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','sequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderpromotions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          amount,",
						"          duration,",
						"          id = Promotion_id,",
						"          percent = Promotionpercent,",
						"          promotionCode,",
						"          promotionCycle,",
						"          promotionId,",
						"          promotionName,",
						"          promotionType,",
						"          sequence,",
						"          unitOfMeasurement,",
						"          baseOfferId,",
						"          complexDiscountIndicator,",
						"          componentConfigurations,",
						"          couponCode,",
						"          displayLevel,",
						"          effectiveDate,",
						"          effectiveInDays,",
						"          endDate,",
						"          fixedAmount,",
						"          ioId,",
						"          ioSequence,",
						"          parentPricePlanCode,",
						"          payInAdvanceProdId,",
						"          promotionAppliedBy,",
						"          promotionBillingCode,",
						"          promotionTypeDetail,",
						"          qualifyingServiceDetails,",
						"          additionDetails = additionalDetails",
						"     )) ~> sinkOrderPromotions",
						"AlterRow4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          termsAndConditionsId as string,",
						"          agreementText as string,",
						"          accepted as string,",
						"          agreementURL as string,",
						"          agreementType as string,",
						"          category as string,",
						"          documentName as string,",
						"          orderLevelIndicator as string,",
						"          timestamp as timestamp,",
						"          tncId as string,",
						"          tncKey as string,",
						"          tncRecordingOff as string,",
						"          version as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','termsAndConditionsId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordertermsandconditions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accepted,",
						"          agreementText,",
						"          agreementType,",
						"          category,",
						"          termsAndConditionsId = id,",
						"          orderLevelIndicator,",
						"          timestamp,",
						"          version,",
						"          agreementURL,",
						"          documentName,",
						"          tncId,",
						"          tncKey,",
						"          tncRecordingOff",
						"     )) ~> sinkOrderTermsandConditions",
						"AlterRowOrderAccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          accepteddate as timestamp,",
						"          accountCategory as string,",
						"          accountCrossmarketIndicator as string,",
						"          accountSubCategory as string,",
						"          accountSubType as string,",
						"          accountType as string,",
						"          acpTransactionId as string,",
						"          acpClassification as string,",
						"          additionalDetails as string,",
						"          anchorCTN as string,",
						"          autoPayReason as string,",
						"          b2bReference as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          bigData as string,",
						"          billingAccountNumber as string,",
						"          billingAccountTelephoneNumber as string,",
						"          billingdeliverypreference as string,",
						"          billingLanguagePreference as string,",
						"          billPaymentDueDate as string,",
						"          businessAccountName as string,",
						"          cardOnFileStatus as string,",
						"          conflictingServiceDetails as string,",
						"          consentToCCIndicator as string,",
						"          contractAcceptance as string,",
						"          contractLength as string,",
						"          contractVersionNumber as string,",
						"          cpni as string,",
						"          creditAlertFraudAlert as string,",
						"          creditAlertGeneralMessage as string,",
						"          ctnValidatedIndicator as string,",
						"          customerCode as string,",
						"          delinquentAccountIndicator as string,",
						"          ebillReason as string,",
						"          electronicDisclosureAuthorization as string,",
						"          internetServiceAuthorization as string,",
						"          letterOfAuthorizationURL as string,",
						"          localServiceAuthorization as string,",
						"          localTollProviderAuthorization as string,",
						"          longDistanceServiceProvider as string,",
						"          emailValidatedIndicator as string,",
						"          enterpriseType as string,",
						"          existingAutoBillStatus as string,",
						"          existingAutoBillIndicator as string,",
						"          gigaPower as string,",
						"          landLineNumber as string,",
						"          langId as string,",
						"          liabilityType as string,",
						"          market as string,",
						"          marketingSourceCode as string,",
						"          mdmProfileSettingAdditionDetails as string,",
						"          mdmProfileSettingProfileName as string,",
						"          packageId as string,",
						"          partnerJointBillType as string,",
						"          paymentArrangement as string,",
						"          pmoIndicator as string,",
						"          priceCode as string,",
						"          priceMatch as string,",
						"          primaryCTN as string,",
						"          spokenLanguagePreference as string,",
						"          subMarket as string,",
						"          submittedDate as timestamp,",
						"          targetCTN as string,",
						"          thirdPartyCombinedBill as string,",
						"          winBackIndicator as string,",
						"          createdDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          eventTimeUnixTime as string,",
						"          eventTimeDateTime as timestamp,",
						"          priceStrategyId as string,",
						"          priceStrategyName as string,",
						"          priceLockEndDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAccts_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          createdDate,",
						"          submittedDate,",
						"          accepteddate = acceptedDate,",
						"          accountCategory,",
						"          accountSubCategory,",
						"          accountSubType,",
						"          accountType,",
						"          autoPayReason,",
						"          b2bReference,",
						"          billingdeliverypreference = billingDeliveryPreference,",
						"          billingLanguagePreference,",
						"          businessAccountName,",
						"          cpni,",
						"          ebillReason,",
						"          enterpriseType,",
						"          gigaPower,",
						"          acctId = Account_id,",
						"          langId,",
						"          market,",
						"          paymentArrangement,",
						"          acctSequence = sequence,",
						"          spokenLanguagePreference,",
						"          billingAccountNumber,",
						"          additionalDetails,",
						"          billingAccountTelephoneNumber,",
						"          primaryCTN,",
						"          packageId = employeeReferralDetail.packageId,",
						"          accountCrossmarketIndicator,",
						"          acpTransactionId,",
						"          acpClassification,",
						"          anchorCTN,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          bigData,",
						"          billPaymentDueDate,",
						"          cardOnFileStatus,",
						"          conflictingServiceDetails,",
						"          consentToCCIndicator,",
						"          contractAcceptance,",
						"          contractLength,",
						"          contractVersionNumber,",
						"          creditAlertFraudAlert,",
						"          creditAlertGeneralMessage,",
						"          ctnValidatedIndicator,",
						"          customerCode,",
						"          delinquentAccountIndicator,",
						"          electronicDisclosureAuthorization,",
						"          internetServiceAuthorization,",
						"          letterOfAuthorizationURL,",
						"          localServiceAuthorization,",
						"          localTollProviderAuthorization,",
						"          longDistanceServiceProvider,",
						"          emailValidatedIndicator,",
						"          existingAutoBillStatus,",
						"          existingAutoBillIndicator,",
						"          landLineNumber,",
						"          liabilityType,",
						"          marketingSourceCode,",
						"          mdmProfileSettingAdditionDetails,",
						"          mdmProfileSettingProfileName,",
						"          partnerJointBillType,",
						"          pmoIndicator,",
						"          priceCode,",
						"          priceMatch,",
						"          subMarket,",
						"          targetCTN,",
						"          thirdPartyCombinedBill,",
						"          winBackIndicator,",
						"          eventTimeDateTime = dc_eventtime,",
						"          eventTimeUnixTime = eventTime,",
						"          priceStrategyName,",
						"          priceStrategyId,",
						"          priceLockEndDate",
						"     )) ~> sinkOrderAccounts",
						"AlterRowOrderAccountsServiceFacilityQualification sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          additionalDetails as string,",
						"          address as string,",
						"          cpeRequiredIndicator as string,",
						"          dslAvailableIndicator as string,",
						"          facilityCheck as string,",
						"          frequency17MhzIndicator as string,",
						"          gfastDeviceWireType as string,",
						"          id as string,",
						"          potsAvailableIndicator as string,",
						"          preferredNetworkType as string,",
						"          profileCode as string,",
						"          vectoringIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderaccountsservicefacilityqualification_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = Actsequence,",
						"          additionalDetails,",
						"          address,",
						"          cpeRequiredIndicator,",
						"          dslAvailableIndicator,",
						"          facilityCheck,",
						"          frequency17MhzIndicator,",
						"          gfastDeviceWireType,",
						"          id,",
						"          potsAvailableIndicator,",
						"          vectoringIndicator,",
						"          preferredNetworkType,",
						"          profileCode",
						"     )) ~> sinkOrderAccountsServiceFacilityQualification",
						"AlterRowOrderAccountsBillingDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountStatus as string,",
						"          dob as string,",
						"          driversLicenseExpirationDate as string,",
						"          driversLicenseNumber as string,",
						"          driverLicenseState as string,",
						"          employerName as string,",
						"          employerPhoneNumber as string,",
						"          federalTaxId as string,",
						"          gender as string,",
						"          lastFourOfSSN as string,",
						"          motherMaidenName as string,",
						"          securityVerificationPin as string,",
						"          securityAnswer as string,",
						"          securityQuestion as string,",
						"          ssn as string,",
						"          ssnRefusedIndicator as string,",
						"          stateIdNumber as string,",
						"          stateIdIssuedState as string,",
						"          billingType as string,",
						"          nextBillingCycleDate as string,",
						"          previousAddress as string,",
						"          previousPhoneNumber as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderaccountsbillingdetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          accountStatus,",
						"          driverLicenseState = licensestate,",
						"          employerName,",
						"          employerPhoneNumber,",
						"          gender,",
						"          motherMaidenName,",
						"          ssnRefusedIndicator,",
						"          stateIdIssuedState,",
						"          billingType,",
						"          nextBillingCycleDate,",
						"          previousAddress,",
						"          previousPhoneNumber,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails",
						"     )) ~> sinkOrderAccountsBillingDetails",
						"AlterRowOrderLosgsPrice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseamount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencytype as string,",
						"          installmentEligibility as string,",
						"          msrp as string,",
						"          total as decimal(20,2),",
						"          taxDetail as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgsprice_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          amount,",
						"          baseamount = baseAmount,",
						"          currencytype = currencyType,",
						"          priceType = pricetype,",
						"          total,",
						"          creditFeeType,",
						"          installmentEligibility,",
						"          msrp,",
						"          additionalDetails,",
						"          taxDetail",
						"     )) ~> sinkOrderLosgsPrice",
						"AlterRowOrderLosgsPriceSummaryList sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          priceType as string,",
						"          amount as double,",
						"          currencytype as string,",
						"          total as double,",
						"          taxSummary as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','priceType','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgspricesummarylist_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          amount,",
						"          currencytype = currencyType,",
						"          priceType,",
						"          total,",
						"          taxSummary,",
						"          losgSequence = Losgsequence",
						"     )) ~> sinkOrderLosgsPriceSummaryList",
						"AlterRowlosgsLineitemsAdditionalDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          type as string,",
						"          code as string,",
						"          value as string,",
						"          parentType as string,",
						"          sequence as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','code','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_losgslineitemsadditionaldetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          lineItemId = LineItem_id,",
						"          type,",
						"          parentType,",
						"          code,",
						"          value,",
						"          losgSequence = losgsequence,",
						"          lineItemSequence = LineItemsequence,",
						"          sequence",
						"     )) ~> oceOrderLosgsLineItemsAddlDetails",
						"AlterRowOrderSourceDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          application as string,",
						"          browserId as string,",
						"          channel as string,",
						"          city as string,",
						"          clientIP as string,",
						"          clientType as string,",
						"          countryCode as string,",
						"          county as string,",
						"          expressCheckOutIndicator as string,",
						"          externalOrderSource as string,",
						"          locale as string,",
						"          mediaSource as string,",
						"          originatingApplication as string,",
						"          initiatingApplication as string,",
						"          premierDetailGroupId as string,",
						"          premierDetailGroupName as string,",
						"          premierDetailResourceCenterTicketNumber as string,",
						"          region as string,",
						"          responseMode as string,",
						"          salesChannel as string,",
						"          salesChannelType as string,",
						"          sender as string,",
						"          sequence as string,",
						"          zip as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordersourcedetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          application,",
						"          browserId,",
						"          channel,",
						"          city,",
						"          clientIP,",
						"          clientType,",
						"          countryCode,",
						"          county,",
						"          externalOrderSource,",
						"          locale,",
						"          region,",
						"          salesChannel,",
						"          salesChannelType,",
						"          sender,",
						"          zip,",
						"          expressCheckOutIndicator,",
						"          mediaSource,",
						"          originatingApplication,",
						"          initiatingApplication,",
						"          premierDetailGroupId,",
						"          premierDetailGroupName,",
						"          premierDetailResourceCenterTicketNumber = premierDetailGroupTick,",
						"          responseMode,",
						"          sequence",
						"     )) ~> sinkOrderSourceDetail",
						"AlterRowOrderSourceDetailAdditionalDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          value as string,",
						"          sequence as string,",
						"          type as string,",
						"          parentType as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code','value'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_ordersourcedetailadditionaldetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          type,",
						"          value,",
						"          sequence,",
						"          parentType",
						"     )) ~> SourceDetailAdditionalDetail",
						"AlterRowOrderlosgs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          acceptEULA as string,",
						"          accountReference as string,",
						"          actionReason as string,",
						"          actionType as string,",
						"          apiExecutionDetailsErrorCode as string,",
						"          apiExecutionDetailsLosgStatus as string,",
						"          apiExecutionDetailsName as string,",
						"          apiExecutionDetailsPriority as string,",
						"          billingsystemid as string,",
						"          bundleGroupId as string,",
						"          childOrderId as string,",
						"          companyCode as string,",
						"          creditPolicySecurityType as string,",
						"          dealercode as string,",
						"          divisionCode as string,",
						"          effectiveDate as timestamp,",
						"          engageVideoId as string,",
						"          entitlementBenefit as string,",
						"          fallout as string,",
						"          fnGuId as string,",
						"          fnType as string,",
						"          fnUserId as string,",
						"          freeDevicePolicyId as string,",
						"          fulfillerCode as string,",
						"          fulfillerName as string,",
						"          fulfillmentmethod as string,",
						"          fwCAF2AddressIndicator as string,",
						"          fwiMoveInIndicator as string,",
						"          installtype as string,",
						"          losgType as string,",
						"          market as string,",
						"          migrationIndicator as string,",
						"          migrationSource as string,",
						"          name as string,",
						"          notes as string,",
						"          preferredAreaCode as string,",
						"          priceCode as string,",
						"          primaryIndicator as string,",
						"          productcategory as string,",
						"          productOfferingId as string,",
						"          productOrderActionId as string,",
						"          productOrderActionReference as string,",
						"          profileCode as string,",
						"          rateType as string,",
						"          requestedExecutionDate as timestamp,",
						"          salesOfferId as string,",
						"          schedulingdetailreference as string,",
						"          serviceArea as string,",
						"          serviceAreaName as string,",
						"          servicequalificationreference as string,",
						"          status as string,",
						"          subMarket as string,",
						"          substatus as string,",
						"          sunsetDate as timestamp,",
						"          tenantAccountId as string,",
						"          tenantAccountStatus as string,",
						"          transferFromBAN as string,",
						"          transferFromFAN as string,",
						"          transferFromMobileNumber as string,",
						"          type as string,",
						"          vendorAccountId as string,",
						"          ModifiedDate as timestamp,",
						"          actionReasonCode as string,",
						"          previousProductOrderActionId as string,",
						"          eventTimeUnixTime as string,",
						"          eventTimeDateTime as timestamp,",
						"          productInventoryStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_orderlosgs_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence,",
						"          losgId = losg_id,",
						"          accountReference,",
						"          actionReason,",
						"          actionType,",
						"          acceptEULA,",
						"          tenantAccountId,",
						"          tenantAccountStatus,",
						"          billingsystemid = billingSystemId,",
						"          bundleGroupId,",
						"          childOrderId,",
						"          companyCode,",
						"          creditPolicySecurityType,",
						"          dealercode = dealerCode,",
						"          divisionCode,",
						"          effectiveDate,",
						"          engageVideoId,",
						"          entitlementBenefit,",
						"          fnGuId,",
						"          fnUserId,",
						"          fnType,",
						"          freeDevicePolicyId,",
						"          fulfillmentmethod = fulfillmentMethod,",
						"          fulfillerName,",
						"          fulfillerCode,",
						"          fwCAF2AddressIndicator,",
						"          fwiMoveInIndicator,",
						"          installtype = installType,",
						"          status,",
						"          substatus = subStatus,",
						"          fallout,",
						"          losgType,",
						"          market,",
						"          migrationIndicator,",
						"          migrationSource,",
						"          name,",
						"          notes,",
						"          preferredAreaCode,",
						"          priceCode,",
						"          primaryIndicator,",
						"          productcategory = productCategory,",
						"          productOfferingId,",
						"          productOrderActionId,",
						"          productOrderActionReference,",
						"          profileCode,",
						"          rateType,",
						"          requestedExecutionDate,",
						"          salesOfferId,",
						"          schedulingdetailreference = schedulingDetailReference,",
						"          serviceArea,",
						"          serviceAreaName,",
						"          servicequalificationreference = serviceQualificationReference,",
						"          subMarket,",
						"          sunsetDate,",
						"          transferFromBAN = transferfromBAN,",
						"          transferFromFAN = transferfromFAN,",
						"          transferFromMobileNumber = transferfromMobileNumber,",
						"          type,",
						"          vendorAccountId,",
						"          previousProductOrderActionId,",
						"          actionReasonCode,",
						"          eventTimeUnixTime = eventTime,",
						"          eventTimeDateTime = dc_eventtime,",
						"          productInventoryStatus",
						"     )) ~> sinkOrderlosgs",
						"alterRowcreditpolicy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          creditPolicyTransactionId as string,",
						"          crsmOnFlag as string,",
						"          previousCreditPolicyTransactionId as string,",
						"          policyAcceptedIndicator as string,",
						"          uucpStatus as string,",
						"          ModifiedDate as timestamp,",
						"          order_type as string,",
						"          additionalDetails as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_ordercreditpolicy_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          creditPolicyTransactionId,",
						"          crsmOnFlag,",
						"          previousCreditPolicyTransactionId,",
						"          policyAcceptedIndicator,",
						"          uucpStatus,",
						"          additionalDetails",
						"     )) ~> sinkcreditpolicy",
						"alterRowdebitaccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          debtId as string,",
						"          debtAccountNumber as string,",
						"          accountCategory as string,",
						"          accountSubCategory as string,",
						"          affiliateId as string,",
						"          amount as decimal(20,2),",
						"          debtPaidStatus as string,",
						"          paymentMethodReference as string,",
						"          provider as string,",
						"          settledBy as string,",
						"          system as string,",
						"          systemDivision as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','debtId','debtAccountNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_orderdebtAccounts_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          accountCategory,",
						"          accountSubCategory,",
						"          affiliateId,",
						"          amount,",
						"          debtAccountNumber,",
						"          debtPaidStatus,",
						"          debtId = id,",
						"          paymentMethodReference,",
						"          provider,",
						"          settledBy,",
						"          system,",
						"          systemDivision",
						"     )) ~> sinkdebtaccounts",
						"alterRowerrors sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          ErrorCode as string,",
						"          ErrorDescription as string,",
						"          IdRef as string,",
						"          Type as string,",
						"          eventhub_adx_ingest_time as timestamp,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','ErrorCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_Errors_error',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          ErrorCode,",
						"          ErrorDescription,",
						"          IdRef,",
						"          Type,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          eventTime = eventtime",
						"     )) ~> sinkError",
						"alterRowmoveorder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          disconnectDate as timestamp,",
						"          fromBillingAddress as string,",
						"          fromServiceAddress as string,",
						"          fullyAuthenticatedIndicator as string,",
						"          fromTelephoneNumber as string,",
						"          modifiedDate as timestamp,",
						"          eventTime as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_moveorderexists_errors',",
						"     transactionCommit: 'batch',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          additionalDetails,",
						"          disconnectDate,",
						"          fromBillingAddress,",
						"          fromServiceAddress,",
						"          fullyAuthenticatedIndicator,",
						"          fromTelephoneNumber,",
						"          eventTime = lastmodified_date",
						"     )) ~> sinkoceOrderMoveDetail",
						"alterRowtaskid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerOrderNumber as string,",
						"          taskId as string,",
						"          applicationName as string,",
						"          camundaTaskId as string,",
						"          channel as string,",
						"          creationDate as timestamp,",
						"          losgIds as string,",
						"          orderNumber as string,",
						"          partnerName as string,",
						"          programName as string,",
						"          queueId as string,",
						"          queueName as string,",
						"          queuesladetails as string,",
						"          taskStatus as string,",
						"          eventHubAdxIngestTime as timestamp,",
						"          modifiedDate as timestamp,",
						"          eventTime as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerOrderNumber','taskId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_ordertask_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          CustomerOrderNumber,",
						"          taskId = dc_taskid,",
						"          applicationName = ApplicationName,",
						"          camundaTaskId = dc_camuda,",
						"          channel = Channel,",
						"          creationDate = CreationDate,",
						"          losgIds = dc_losgids,",
						"          orderNumber = OrderNumber,",
						"          partnerName = PartnerName,",
						"          programName = ProgramName,",
						"          queueId = QueueId,",
						"          queueName = QueueName,",
						"          queuesladetails = QueueSlaDetails,",
						"          taskStatus = TaskStatus,",
						"          eventTime,",
						"          eventHubAdxIngestTime = lastmodified_date",
						"     )) ~> sinkordertask",
						"alterRowreferencedetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          associatedRequestID as string,",
						"          bulkIndicator as string,",
						"          bulkOrderWorkRequestNumber as string,",
						"          chatId as string,",
						"          commonOrderIndicator as string,",
						"          encryptedIndicator as string,",
						"          fraudDetectionAdditionalDetails as string,",
						"          authenticationRequestId as string,",
						"          orderFraudCheckStatus as string,",
						"          orderModifiedAfterPinValidation as string,",
						"          pinValidationSource as string,",
						"          pinValidationStatus as string,",
						"          proofOfIdentityUrl as string,",
						"          smsCTN as string,",
						"          validationType as string,",
						"          efcCallIndicator as string,",
						"          orderStatusUrl as string,",
						"          parentOrderId as string,",
						"          partialOrderIndicator as string,",
						"          passThroughIndicator as string,",
						"          posReferenceId as string,",
						"          posUUID as string,",
						"          productCombinationCode as string,",
						"          referenceOrderId as string,",
						"          resubmitOrderIndicator as string,",
						"          summaryCreatedIndicator as string,",
						"          testOrderIndicator as string,",
						"          eventhub_adx_ingest_time as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_order_referenceDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eventhub_adx_ingest_time = lastmodified_date,",
						"          encryptedIndicator,",
						"          posReferenceId,",
						"          posUUID,",
						"          associatedRequestID,",
						"          passThroughIndicator,",
						"          testOrderIndicator,",
						"          bulkIndicator,",
						"          bulkOrderWorkRequestNumber,",
						"          chatId,",
						"          commonOrderIndicator,",
						"          fraudDetectionAdditionalDetails,",
						"          authenticationRequestId,",
						"          orderFraudCheckStatus,",
						"          orderModifiedAfterPinValidation,",
						"          pinValidationSource,",
						"          pinValidationStatus,",
						"          proofOfIdentityUrl,",
						"          smsCTN,",
						"          validationType,",
						"          efcCallIndicator,",
						"          orderStatusUrl,",
						"          parentOrderId,",
						"          partialOrderIndicator,",
						"          productCombinationCode,",
						"          referenceOrderId,",
						"          resubmitOrderIndicator,",
						"          summaryCreatedIndicator",
						"     )) ~> sinkorderreferencedetail",
						"IPtvalterrow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          freeSTBReceiverCount as integer,",
						"          parentComponentCode as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_iptvLOSCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          freeSTBReceiverCount,",
						"          parentComponentCode",
						"     )) ~> iptvLOSCharacteristics",
						"AlterSubcribeName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101-oceOrderLosgsSubscriberName_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          additionalContactPhones,",
						"          emailAddress,",
						"          firstName,",
						"          nameId,",
						"          lastName,",
						"          legalFirstName,",
						"          legalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          previousLegalLastName,",
						"          suffix,",
						"          title,",
						"          primaryContactPhoneNumber,",
						"          primaryContactextension,",
						"          primaryContactPhoneType,",
						"          primarycontactPhoneConsentDetails",
						"     )) ~> oceOrderLosgsSubscriberName",
						"MapDrifted1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerordernumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          termsAndConditionsId as string,",
						"          accepted as string,",
						"          agreementtext as string,",
						"          agreementtype as string,",
						"          agreementURL as string,",
						"          category as string,",
						"          documentName as string,",
						"          orderlevelindicator as string,",
						"          version as string,",
						"          timestamp as timestamp,",
						"          tncKey as string,",
						"          tncld as string,",
						"          tncRecordingOff as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerordernumber','losgSequence','losgId','termsAndConditionsId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgTermsAndConditionsAccepted_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerordernumber = customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          accepted,",
						"          agreementtext = agreementText,",
						"          agreementtype = agreementType,",
						"          agreementURL,",
						"          category,",
						"          termsAndConditionsId = termsandconditions_id,",
						"          orderlevelindicator = orderLevelIndicator,",
						"          timestamp,",
						"          version,",
						"          tncKey = tnckey,",
						"          tncld,",
						"          tncRecordingOff,",
						"          documentName",
						"     )) ~> oceOrderLosgsTermsAndConditionAccepted",
						"altervoipc sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          reservedTelephoneNumber as string,",
						"          e911Id as string,",
						"          e911HomeAlarmSystem as string,",
						"          e911NoMatchFound as string,",
						"          e911Adress as string,",
						"          e911TermsAndConditionId as string,",
						"          e911TnCAccepted as string,",
						"          e911TnCCategory as string,",
						"          e911TnCAgreementText as string,",
						"          e911TnCAgreementType as string,",
						"          e911TnCAgreementURL as string,",
						"          e911TnCTimestamp as timestamp,",
						"          e911TnCVersion as string,",
						"          e911TnCDocumentName as string,",
						"          e911TnCOrderLevelIndicator as string,",
						"          e911TncId as string,",
						"          e911TncKey as string,",
						"          e911TnCRecordingOff as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsVoipCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          reservedTelephoneNumber,",
						"          e911Id,",
						"          e911HomeAlarmSystem,",
						"          e911NoMatchFound,",
						"          e911Adress = e911address,",
						"          e911TermsAndConditionId,",
						"          e911TnCAccepted = e911TnCaccepted,",
						"          e911TnCCategory = e911TnCcategory,",
						"          e911TnCAgreementText = e911TnCagreementText,",
						"          e911TnCAgreementType = e911TnCagreementType,",
						"          e911TnCAgreementURL = e911TnCagreementURL,",
						"          e911TnCTimestamp = e911TnCtimestamp,",
						"          e911TnCVersion = e911TnCversion,",
						"          e911TnCDocumentName = e911TnCdocumentName,",
						"          e911TnCOrderLevelIndicator = e911TnCorderLevelIndicator,",
						"          e911TncId = e911TnCId,",
						"          e911TncKey = e911TnCKey,",
						"          e911TnCRecordingOff",
						"     )) ~> oceOrderLosgsVoipCharacteristics",
						"altere11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerordernumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          dirListingName as string,",
						"          dirListingAdditionalDetails as string,",
						"          dirListingDesignation as string,",
						"          dirListingAddress as string,",
						"          dirListingListingType as string,",
						"          dirListingListingCategory as string,",
						"          dirListingListBy as string,",
						"          releaseDetailForBillingIndicator as string,",
						"          dirListingOmitAddressIndicator as string,",
						"          dirListingParentComponentCode as string,",
						"          dirListingTitle2 as string,",
						"          dirListingSubscriberName as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerordernumber','losgSequence','losgId','dirListingName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsVoipCharacteristicsE911Detail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerordernumber = customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          dirListingName,",
						"          dirListingAdditionalDetails,",
						"          dirListingDesignation,",
						"          dirListingAddress,",
						"          dirListingListingType,",
						"          dirListingListingCategory,",
						"          dirListingListBy,",
						"          releaseDetailForBillingIndicator,",
						"          dirListingOmitAddressIndicator,",
						"          dirListingParentComponentCode,",
						"          dirListingTitle2,",
						"          dirListingSubscriberName",
						"     )) ~> oceOrderLosgsVoipCharacteristicsDirListing",
						"alterWirlessChar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          accountConversionStatus as string,",
						"          activationDate as timestamp,",
						"          availabilityDate as timestamp,",
						"          billingSystemId as string,",
						"          calculateTaxIndicator as string,",
						"          coPayDataAddendDateAndTime as timestamp,",
						"          coPayDataAddendVersion as string,",
						"          coPayDataAllowanceAmount as double,",
						"          coPayDataCancelCTN as string,",
						"          coPayDataEnrollingCTN as string,",
						"          coPayDataReceivingBAN as string,",
						"          coPayDataReceivingFAN as string,",
						"          cCarDetailMake as string,",
						"          cCarDetailModel as string,",
						"          cCarDetailTrim as string,",
						"          cCarDetailVehicleManufacturer as string,",
						"          cCarVin as string,",
						"          cCarYear as string,",
						"          crossUpgradeIndicator as string,",
						"          curbsideDelivery as string,",
						"          inventoryStoreId as string,",
						"          manageCallListaction as string,",
						"          manageCallListCompAListName as string,",
						"          manageCallListcompCTNList as string,",
						"          manageCallListcontactCTN as string,",
						"          manageCallListId as string,",
						"          manageCallListOverrideInd as string,",
						"          mobileNumber as string,",
						"          paymentId as string,",
						"          preOrderIndicator as string,",
						"          primarySharedPlanIndicator as string,",
						"          shippedHotIndicator as string,",
						"          shoppingZipCode as string,",
						"          splitLiabilityDataAddendDateAndTime as timestamp,",
						"          splitLiabilityDataAddendVersion as string,",
						"          splitLiabilityDataCancelCTN as string,",
						"          splitLiabilityDataEnrollingCTN as string,",
						"          splitLiabilityDataOneTimeChargeInd as string,",
						"          splitLiabilityDataValueIndicator as string,",
						"          splitLiabilityDataTargetBAN as string,",
						"          splitLiabilityDataTargetFAN as string,",
						"          splitLiabilityDataTelecomManagerEmail as string,",
						"          storeId as string,",
						"          subscriberCrossmarketIndicator as string,",
						"          subscriptionClass as string,",
						"          tradeInQuoteId as string,",
						"          upgradeDetailRelatedMobNumber as string,",
						"          upgradeDetailRelationship as string,",
						"          ModifiedDate as timestamp,",
						"          networkFulfillmentDate as timestamp,",
						"          subscriberNumberStatus as string,",
						"          subscriberId as string,",
						"          preferredCTNZipCode as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsWirelessCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          accountConversionStatus = accountConversion,",
						"          activationDate,",
						"          availabilityDate,",
						"          billingSystemId,",
						"          calculateTaxIndicator,",
						"          coPayDataAddendDateAndTime = addendDateAndTime,",
						"          coPayDataAddendVersion = addendVersion,",
						"          coPayDataAllowanceAmount = allowanceAmount,",
						"          coPayDataCancelCTN = cancelCTN,",
						"          coPayDataEnrollingCTN = enrollingCTN,",
						"          coPayDataReceivingBAN = receivingBAN,",
						"          coPayDataReceivingFAN = receivingFAN,",
						"          cCarDetailMake = CCar_make,",
						"          cCarDetailModel = CCar_model,",
						"          cCarDetailTrim = CCar_trim,",
						"          cCarDetailVehicleManufacturer = CCar_vehicleManufacturer,",
						"          cCarVin = CCar_vin,",
						"          cCarYear = CCar_year,",
						"          crossUpgradeIndicator,",
						"          curbsideDelivery,",
						"          inventoryStoreId,",
						"          manageCallListaction,",
						"          manageCallListCompAListName,",
						"          manageCallListcompCTNList,",
						"          manageCallListcontactCTN,",
						"          manageCallListId,",
						"          manageCallListOverrideInd,",
						"          mobileNumber,",
						"          paymentId,",
						"          preOrderIndicator,",
						"          primarySharedPlanIndicator,",
						"          shippedHotIndicator,",
						"          shoppingZipCode,",
						"          splitLiabilityDataAddendDateAndTime,",
						"          splitLiabilityDataAddendVersion,",
						"          splitLiabilityDataCancelCTN,",
						"          splitLiabilityDataEnrollingCTN,",
						"          splitLiabilityDataOneTimeChargeInd,",
						"          splitLiabilityDataValueIndicator = splitLiabilityValueIndicator,",
						"          splitLiabilityDataTargetBAN,",
						"          splitLiabilityDataTargetFAN,",
						"          splitLiabilityDataTelecomManagerEmail,",
						"          storeId,",
						"          subscriberCrossmarketIndicator,",
						"          subscriptionClass,",
						"          tradeInQuoteId,",
						"          upgradeDetailRelatedMobNumber = upgrade_relatedMobileNumber,",
						"          upgradeDetailRelationship = upgrade_relationship,",
						"          networkFulfillmentDate,",
						"          subscriberNumberStatus,",
						"          subscriberId,",
						"          preferredCTNZipCode",
						"     )) ~> oceOrderLosgsWirelessCharacteristics",
						"alterRowPortDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          currentServiceProviderId as string,",
						"          customerCode as string,",
						"          disconAccepted as string,",
						"          disconDevInstallAgreementType as string,",
						"          disconEConsentAgreementType as string,",
						"          disconTimestamp as timestamp,",
						"          disconVersion as string,",
						"          e911ServiceRoutingNumber as string,",
						"          lightspeedLocalRoutingNumber as string,",
						"          lastFourOfSSN as string,",
						"          localRoutingNumber as string,",
						"          name as string,",
						"          nonATTPortIn as string,",
						"          ospAccountNumber as string,",
						"          ospName as string,",
						"          pinOrPassword as string,",
						"          portEligibility as string,",
						"          portInType as string,",
						"          portTelephoneNumber as string,",
						"          portRequestNumber as string,",
						"          portStatus as string,",
						"          previousAddress as string,",
						"          shadowLocalRoutingNumber as string,",
						"          ssn as string,",
						"          taxId as string,",
						"          ModifiedDate as timestamp,",
						"          shipmentInfoUpdatedIndicator as string,",
						"          portstatusReasonCode as string,",
						"          portRequestLineStatus as string,",
						"          portstatusReasonDescription as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderLosgsPortDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          portTelephoneNumber,",
						"          currentServiceProviderId,",
						"          customerCode,",
						"          disconAccepted,",
						"          disconDevInstallAgreementType,",
						"          disconEConsentAgreementType,",
						"          disconTimestamp,",
						"          disconVersion,",
						"          e911ServiceRoutingNumber,",
						"          lightspeedLocalRoutingNumber,",
						"          localRoutingNumber,",
						"          name,",
						"          nonATTPortIn,",
						"          ospAccountNumber,",
						"          ospName,",
						"          portEligibility,",
						"          portInType,",
						"          portRequestNumber,",
						"          portStatus,",
						"          previousAddress,",
						"          shadowLocalRoutingNumber,",
						"          shipmentInfoUpdatedIndicator,",
						"          portstatusReasonCode,",
						"          portRequestLineStatus,",
						"          portstatusReasonDescription",
						"     )) ~> sinkoceOrderLosgsPortDetails",
						"alterRowv101oceOrderAcctsBillingDetailAddr sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence','id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctsBillingDetailAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          placeId,",
						"          addressId,",
						"          connectedCommunityId,",
						"          id = BillingAddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = auxillaryaddress_line1,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = dc_codingaccuracysupport,",
						"          parsedAddrAddInstructions = parsed_addInstructions,",
						"          parsedAddrAddressChanged = parsed_addressChanged,",
						"          parsedAddrAddressMatchCode = parsed_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsed_addressStreetLine,",
						"          parsedAddrAddressType = parsed_addressType,",
						"          parsedAddrApartmentUnit = parsed_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsed_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsed_assignedStreetNumber,",
						"          parsedAddrAttention = parsed_attention,",
						"          parsedAddrBuildingType = parsed_buildingType,",
						"          parsedAddrCity = parsed_city,",
						"          parsedAddrCountry = parsed_country,",
						"          parsedAddrCounty = parsed_county,",
						"          parsedAddrCountyCode = parsed_countyCode,",
						"          parsedAddrDirection = parsed_direction,",
						"          parsedAddrDirectionPrefix = parsed_directionPrefix,",
						"          parsedAddrDisconnectDate = parsed_disconnectDate,",
						"          parsedAddrExchangeCode = parsed_exchangeCode,",
						"          parsedAddrExhaustCode = parsed_exhaustCode,",
						"          parsedAddrHouseNumber = parsed_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsed_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsed_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsed_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsed_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsed_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsed_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsed_legalEntity,",
						"          parsedAddrLevel = parsed_level,",
						"          parsedAddrLevelNumber = parsed_levelNumber,",
						"          parsedAddrLinkKey = parsed_linkKey,",
						"          parsedAddrPostOfficeBox = parsed_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsed_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsed_primaryNPANXX,",
						"          parsedAddrProvince = parsed_province,",
						"          parsedAddrRateCenterCode = parsed_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsed_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsed_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsed_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsed_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsed_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsed_siteAddressId,",
						"          parsedAddrSiteId = parsed_siteId,",
						"          parsedAddrSmartMoves = parsed_smartMoves,",
						"          parsedAddrState = parsed_state,",
						"          parsedAddrStreetName = parsed_streetName,",
						"          parsedAddrStreetNameSuffix = parsed_streetNameSuffix,",
						"          parsedAddrStreetType = parsed_streetType,",
						"          parsedAddrStructure = parsed_structure,",
						"          parsedAddrStructureNumber = parsed_structureNumber,",
						"          parsedAddrTarCode = parsed_tarCode,",
						"          parsedAddrTelephoneNumber = parsed_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsed_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsed_videoHubOffice,",
						"          parsedAddrZip = parsed_zip,",
						"          parsedAddrZipCodeExtension = parsed_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsed_zipGeoCode,",
						"          unparsedAddressLine1 = unparsed_addressLine1,",
						"          unparsedAddressLine3 = unparsed_addressLine3,",
						"          unparsedAddrAttention = unparsed_attention,",
						"          unparsedAddrElevation = unparsed_elevation,",
						"          unparsedAddrPostOfficeBox = unparsed_postOfficeBox,",
						"          unparsedAddrProvince = unparsed_province,",
						"          unparsedAddrRuralRoute = unparsed_ruralRoute,",
						"          unparsedAddrStructure = unparsed_structure,",
						"          unparsedAddrUnit = unparsed_unit,",
						"          unparsedAddrUrbanizationCode = unparsed_urbanizationCode,",
						"          unparsedAddrCity = unparsed_city,",
						"          unparsedAddrCountry = unparsed_country,",
						"          unparsedAddrState = unparsed_state,",
						"          unparsedAddrZip = unparsed_zip,",
						"          unparsedAddrZipCodeExtension = unparsed_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsed_internationalZip,",
						"          unparsedAddressLine2 = unparsed_addressLine2,",
						"          additionalDetails = stringify_additionaldetails,",
						"          acctSequence = sequence,",
						"          codingAccuracySupportSystemAddress = dc_codingaccuracysupport,",
						"          unparsedAddrCounty = unparsed_county,",
						"          parsedAddrTimeZone,",
						"          parsedAddrRateZone",
						"     )) ~> sinkoceOrderAcctsBillingDetailAddr",
						"AlterRowOrderAccountsServiceAddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','id','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctServiceAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          addressId = addressid,",
						"          id = ServiceAddress_id,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = line1,",
						"          dwellingType,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = dc_addressLines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUnit = unparsedAddr_unit,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          additionalDetails = json_additionalDetails,",
						"          placeId,",
						"          connectedCommunityId,",
						"          acctSequence = acct_sequence,",
						"          unparsedAddrCounty,",
						"          parsedAddrRateZone,",
						"          parsedAddrTimeZone",
						"     )) ~> sinkorderaccountsserviceaddress",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','id','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctBussinessAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          addressId,",
						"          id = BusinessAddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = auxillaryaddress_line1,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = dc_addresslines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUnit = unparsedAddr_unit,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          placeId,",
						"          connectedCommunityId,",
						"          acctSequence = acct_sequence,",
						"          unparsedAddrCounty,",
						"          additionalDetails = json_additionaldetails,",
						"          parsedAddrRateZone,",
						"          parsedAddrTimeZone",
						"     )) ~> sinkorderaccountsbusinessaddress",
						"alterCompensation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          repId as string,",
						"          repAction as string,",
						"          dealerCode as string,",
						"          salesCode as string,",
						"          type as string,",
						"          submittedBy as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','repId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderLosgsCompensation_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          repId,",
						"          repAction,",
						"          dealerCode,",
						"          salesCode,",
						"          type,",
						"          submittedBy",
						"     )) ~> oceOrderLosgsCompensation",
						"alteradditonalDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          code as string,",
						"          value as string,",
						"          parentType as string,",
						"          type as string,",
						"          sequence as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','code','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsAdditionDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losg_sequence,",
						"          code,",
						"          value,",
						"          parentType,",
						"          type,",
						"          sequence",
						"     )) ~> oceOrderLosgsAdditionDetails",
						"alterRowlosginternetchar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          categoryType as string,",
						"          discountedInternetIndicator as string,",
						"          discountedInternetAdditionalAllowance as string,",
						"          gatewayCTN as string,",
						"          gatewayCTNStatus as string,",
						"          internetProgramType as string,",
						"          internetProtocolDigitalSubscriberLineAccess as string,",
						"          internetNetworkProvider as string,",
						"          parentComponentCode as string,",
						"          retainedServiceProcessIndicator as string,",
						"          serviceId as string,",
						"          serviceType as string,",
						"          totalAllowance as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          primaryNetworkType as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsinternetCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          categoryType,",
						"          discountedInternetIndicator,",
						"          discountedInternetAdditionalAllowance,",
						"          gatewayCTN,",
						"          gatewayCTNStatus,",
						"          internetProgramType,",
						"          internetProtocolDigitalSubscriberLineAccess,",
						"          internetNetworkProvider,",
						"          parentComponentCode,",
						"          retainedServiceProcessIndicator,",
						"          serviceId,",
						"          serviceType,",
						"          totalAllowance,",
						"          primaryNetworkType,",
						"          additionalDetails",
						"     )) ~> oceOrderLosgsinternetCharacteristics",
						"alterRowDIrectvchar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          dealerId as string,",
						"          freeSTBReceiverCount as string,",
						"          hasMoreThanThreeFloors as string,",
						"          marketingSourceCode as string,",
						"          moveInOrder as string,",
						"          offerLanguage as string,",
						"          parentComponentCode as string,",
						"          serviceAgreement as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderLosgsDirectTVCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          dealerId,",
						"          freeSTBReceiverCount,",
						"          hasMoreThanThreeFloors,",
						"          marketingSourceCode,",
						"          moveInOrder,",
						"          offerLanguage,",
						"          parentComponentCode,",
						"          serviceAgreement",
						"     )) ~> oceOrderLosgsDirectTVCharacteristics",
						"alterRowevent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          automationUrl as string,",
						"          callBack as string,",
						"          channel as string,",
						"          eventId as string,",
						"          eventSource as string,",
						"          eventTime as timestamp,",
						"          eventType as string,",
						"          fallOut as string,",
						"          fraudResponse as string,",
						"          isSingleTopic as string,",
						"          isUpgradeOrder as string,",
						"          orderType as string,",
						"          originalVersion as string,",
						"          priority as string,",
						"          routingInfo as string,",
						"          sender as string,",
						"          traceId as string,",
						"          version as string,",
						"          eventHubAdxIngestTime as timestamp,",
						"          modifiedDate as timestamp,",
						"          eventTimeInt as string,",
						"          idbstatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101tableerror_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          automationUrl,",
						"          callBack = callback,",
						"          channel,",
						"          eventId = eventid,",
						"          eventSource,",
						"          eventTime = dc_eventTime,",
						"          eventType,",
						"          fallOut = fallout,",
						"          fraudResponse,",
						"          isSingleTopic,",
						"          isUpgradeOrder,",
						"          orderType,",
						"          originalVersion,",
						"          priority,",
						"          routingInfo,",
						"          sender,",
						"          traceId,",
						"          version,",
						"          eventHubAdxIngestTime = lastmodified_date,",
						"          eventTimeInt = eventTime,",
						"          idbstatus = idbStatus",
						"     )) ~> sinkevents",
						"alterRowOrderAccountsCreditCheck sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          addAccountGUId as string,",
						"          applicationApprovalDate as string,",
						"          applicationExpiresDate as string,",
						"          creditBand as string,",
						"          creditCheckManagementTransactionId as string,",
						"          creditCheckRanIndicator as string,",
						"          creditClass as string,",
						"          creditInquiryOpen as string,",
						"          creditPolicyToken as string,",
						"          creditReferenceDate as timestamp,",
						"          creditScoreResult as string,",
						"          creditStatus as string,",
						"          creditVerified as string,",
						"          currentAccountBalance as decimal(20,2),",
						"          currentDeniablePastDueAmount as decimal(20,2),",
						"          currentNonDeniablePastDueAmount as decimal(20,2),",
						"          currentNonRegulatedPastDueAmount as decimal(20,2),",
						"          currentPastDueAmount as decimal(20,2),",
						"          currentRegulatedPastDueAmount as decimal(20,2),",
						"          customerApprovalSystemTransactionId as string,",
						"          debtPaidStatus as string,",
						"          depositAmount as decimal(20,2),",
						"          depositRequired as string,",
						"          depositStatus as string,",
						"          electronicIdNumber as string,",
						"          electronicIdVerifierLaunched as string,",
						"          electronicIdVerifierRequired as string,",
						"          electronicIdVerifierResults as string,",
						"          exchangeListFound as string,",
						"          expressPayDetailHeld as string,",
						"          finalBillAccounts as string,",
						"          ignoreDeposit as string,",
						"          individualCustomerKey as string,",
						"          minimumAmountDue as decimal(20,2),",
						"          nonRefundableCreditFee as decimal(20,2),",
						"          numberApprovedLines as decimal(20,2),",
						"          numberLinesRequired as decimal(20,2),",
						"          productsInclude as string,",
						"          proprietarySegment as string,",
						"          reasonCode as string,",
						"          reasonCodeDescription as string,",
						"          safeScanAlertIndicator as string,",
						"          safeScanPassIndicator as string,",
						"          singleCreditQueryWirelessIndicator as string,",
						"          treatmentCode as string,",
						"          treatmentMessage as string,",
						"          writeOffAmount as decimal(20,2),",
						"          writeOffDate as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'oceOrderAcctsCreditCheck_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          creditClass,",
						"          addAccountGUId,",
						"          applicationApprovalDate,",
						"          applicationExpiresDate,",
						"          creditBand,",
						"          creditCheckManagementTransactionId = creditCheckMcreditCheckManagementTransactionIdanagementTransactionId,",
						"          creditCheckRanIndicator,",
						"          creditInquiryOpen,",
						"          creditPolicyToken,",
						"          creditReferenceDate,",
						"          creditScoreResult,",
						"          creditStatus,",
						"          creditVerified,",
						"          currentAccountBalance,",
						"          currentDeniablePastDueAmount,",
						"          currentNonDeniablePastDueAmount,",
						"          currentNonRegulatedPastDueAmount,",
						"          currentPastDueAmount,",
						"          currentRegulatedPastDueAmount,",
						"          customerApprovalSystemTransactionId,",
						"          debtPaidStatus,",
						"          depositAmount,",
						"          depositRequired,",
						"          depositStatus,",
						"          electronicIdNumber,",
						"          electronicIdVerifierLaunched,",
						"          electronicIdVerifierRequired,",
						"          electronicIdVerifierResults,",
						"          exchangeListFound,",
						"          expressPayDetailHeld,",
						"          finalBillAccounts,",
						"          ignoreDeposit,",
						"          individualCustomerKey,",
						"          minimumAmountDue,",
						"          nonRefundableCreditFee,",
						"          numberApprovedLines,",
						"          numberLinesRequired,",
						"          productsInclude,",
						"          proprietarySegment,",
						"          reasonCode,",
						"          reasonCodeDescription,",
						"          safeScanAlertIndicator,",
						"          safeScanPassIndicator,",
						"          singleCreditQueryWirelessIndicator,",
						"          treatmentCode,",
						"          treatmentMessage,",
						"          writeOffAmount,",
						"          writeOffDate,",
						"          finalBillAccounts",
						"     )) ~> sinkoceOrderAcctsCreditCheck",
						"alterRowautopay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountsReceivableIndicator as string,",
						"          purchaseOrderNumber as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as decimal(20,2),",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsAutopayPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = acctsequence,",
						"          accountsReceivableIndicator,",
						"          purchaseOrderNumber,",
						"          btmEquipmentType,",
						"          btmSubscriberNumber,",
						"          btmTotalAmount,",
						"          btnCustomerCode,",
						"          btnPaymentAmount,",
						"          btnTn,",
						"          cashPaymentAmount,",
						"          cashPaymentToken,",
						"          lpmCustomerAgreementVersion,",
						"          lpmPaymentType,",
						"          lpmPaymentTypeName,",
						"          lpmReferenceNumber,",
						"          lpmTotalAmount = ipmTotalAmount,",
						"          paymentTokenOnlyAmount,",
						"          paymentTokenOnlyToken,",
						"          storeLast4Digits,",
						"          storePaymentAmount,",
						"          storeProfileOwnerId",
						"     )) ~> oceOrderAcctsAutopayPaymentMethod",
						"alterRowautoepay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          achAccountHolderName as string,",
						"          achAccountNumber as string,",
						"          achAccountNumberLast4Digits as string,",
						"          achAccountType as string,",
						"          achRoutingNumber as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          cardBillingZipCode as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          ccCreditCardNumber as string,",
						"          ccExpirationYearMonth as string,",
						"          creditCardLast4Digits as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as decimal(20,2),",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          last4Digits as string,",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp,",
						"          paymentMethodId as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsAutoPayEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = accsequence,",
						"          achAccountHolderName,",
						"          achAccountType,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          cardCryptogram,",
						"          ccCardNotValidatedIndicator,",
						"          ccCreditCardHolderName,",
						"          creditCardType,",
						"          customerAgreementVersion,",
						"          giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber,",
						"          paymentConfirmationDetailaymentHandle = paymentConfirmationDetailPaymentHandle,",
						"          paymentConfirmationDetailReferenceNumber,",
						"          paymentConfirmationDetailTransactionId,",
						"          paymentProfileAutomationProfileName,",
						"          paymentProfileAutomationProfileOwnerId,",
						"          paymentProfileName,",
						"          paymentProfileOwnerId,",
						"          paymentProfileType,",
						"          paymentTenderConfigMerchantId,",
						"          paymentTenderConfigSourceLocation,",
						"          paymentTenderConfigSourceSystem,",
						"          paymentTenderConfigSourceUser,",
						"          paymentTokenPaymentAmount,",
						"          paymentTokenPaymentToken,",
						"          payType,",
						"          payPalEmailAddress,",
						"          payPalPayerId,",
						"          payPalPaymentMethodId,",
						"          payPalToken,",
						"          preAuthAddressVerificationSystemCode,",
						"          preAuthAuthorizationCode,",
						"          preAuthAuthorizationDate = column1preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey,",
						"          profileAction,",
						"          token,",
						"          totalAmount,",
						"          verificationIndicator,",
						"          skipAuthorization,",
						"          address,",
						"          paymentMethodId",
						"     )) ~> oceOrderAcctsAutoPayEPaymentMethod",
						"alterRowcardonfile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          accountsReceivableIndicator as string,",
						"          purchaseOrderNumber as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as string,",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsCardOnFilePaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          accountsReceivableIndicator,",
						"          purchaseOrderNumber,",
						"          btmEquipmentType,",
						"          btmSubscriberNumber,",
						"          btmTotalAmount,",
						"          btnCustomerCode,",
						"          btnPaymentAmount,",
						"          btnTn,",
						"          cashPaymentAmount,",
						"          cashPaymentToken,",
						"          lpmCustomerAgreementVersion = ipmCustomerAgreementVersion,",
						"          lpmPaymentType,",
						"          lpmPaymentTypeName,",
						"          lpmReferenceNumber,",
						"          lpmTotalAmount = ipmTotalAmount,",
						"          paymentTokenOnlyAmount,",
						"          paymentTokenOnlyToken,",
						"          storeLast4Digits,",
						"          storePaymentAmount,",
						"          storeProfileOwnerId",
						"     )) ~> oceOrderAcctsCardOnFilePaymentMethod",
						"alterRowcardepay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          achAccountHolderName as string,",
						"          achAccountNumber as string,",
						"          achAccountNumberLast4Digits as string,",
						"          achAccountType as string,",
						"          achRoutingNumber as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          cardBillingZipCode as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          ccCreditCardNumber as string,",
						"          ccExpirationYearMonth as string,",
						"          creditCardLast4Digits as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as decimal(20,2),",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          last4Digits as string,",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'V101_oceOrderAcctsCardOnFileEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = acctsequence,",
						"          achAccountHolderName,",
						"          achAccountType,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          cardCryptogram,",
						"          ccCardNotValidatedIndicator,",
						"          ccCreditCardHolderName,",
						"          creditCardType,",
						"          customerAgreementVersion,",
						"          giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber,",
						"          paymentConfirmationDetailaymentHandle = paymentConfirmationDetailPaymentHandle,",
						"          paymentConfirmationDetailReferenceNumber,",
						"          paymentConfirmationDetailTransactionId,",
						"          paymentProfileAutomationProfileName,",
						"          paymentProfileAutomationProfileOwnerId,",
						"          paymentProfileName,",
						"          paymentProfileOwnerId,",
						"          paymentProfileType,",
						"          paymentTenderConfigMerchantId,",
						"          paymentTenderConfigSourceLocation,",
						"          paymentTenderConfigSourceSystem,",
						"          paymentTenderConfigSourceUser,",
						"          paymentTokenPaymentAmount,",
						"          paymentTokenPaymentToken,",
						"          payType,",
						"          payPalEmailAddress,",
						"          payPalPayerId,",
						"          payPalPaymentMethodId,",
						"          payPalToken,",
						"          preAuthAddressVerificationSystemCode,",
						"          preAuthAuthorizationCode,",
						"          preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey,",
						"          profileAction,",
						"          token,",
						"          totalAmount,",
						"          verificationIndicator,",
						"          skipAuthorization,",
						"          address",
						"     )) ~> oceOrderAcctsCardOnFileEPaymentMethod",
						"alterRownego sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          conflictCustomerType as string,",
						"          conflictLandlordDetailApprovalDate as timestamp,",
						"          conflictLandlordDetailCompanyName as string,",
						"          conflictLandlordDetailEmail as string,",
						"          conflictLandlordDetailFirstName as string,",
						"          conflictLandlordDetailLandlordApproval as string,",
						"          conflictLandlordDetailLastName as string,",
						"          conflictLandlordDetailPhoneNumber as string,",
						"          conflictLandlordDetailPhoneNumberType as string,",
						"          existingCustomerDetailBillingAccountNumber as string,",
						"          existingCustomerDetailBillingTelephoneNumber as string,",
						"          existingCustomerDetailCompanyName as string,",
						"          existingCustomerDetailEmail as string,",
						"          existingCustomerDetailFirstName as string,",
						"          existingCustomerDetailLastName as string,",
						"          existingCustomerDetailPhoneNumber as string,",
						"          existingCustomerDetailPhoneNumberType as string,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsNegotiateConflictCustomer_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = acctsequence,",
						"          conflictCustomerType,",
						"          conflictLandlordDetailApprovalDate,",
						"          conflictLandlordDetailCompanyName,",
						"          conflictLandlordDetailEmail,",
						"          conflictLandlordDetailFirstName,",
						"          conflictLandlordDetailLastName,",
						"          conflictLandlordDetailPhoneNumber = phoneNumber,",
						"          conflictLandlordDetailPhoneNumberType,",
						"          conflictLandlordDetailLandlordApproval,",
						"          existingCustomerDetailBillingTelephoneNumber,",
						"          existingCustomerDetailBillingAccountNumber,",
						"          existingCustomerDetailCompanyName,",
						"          existingCustomerDetailEmail,",
						"          existingCustomerDetailFirstName,",
						"          existingCustomerDetailLastName,",
						"          existingCustomerDetailPhoneNumber,",
						"          existingCustomerDetailPhoneNumberType,",
						"          existingCustomerDetailMoveOrCeaseOrderNumber",
						"     )) ~> oceOrderAcctsNegotiateConflictCustomer",
						"alterRowunified sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as integer,",
						"          convergeOrderIndicator as string,",
						"          convergeValidationIndicator as string,",
						"          convergedBilling as string,",
						"          premierIndicator as string,",
						"          unifiedAccountDiscount as decimal(20,2),",
						"          unifiedAccountExisting as string,",
						"          unifiedAccountPending as string,",
						"          unifiedAccountRebate as decimal(20,2),",
						"          unifiedAccountReference as string,",
						"          unifiedAccountReward as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderAcctsUnifiedAccount_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId = Account_id,",
						"          acctSequence = sequence,",
						"          convergeOrderIndicator,",
						"          convergeValidationIndicator,",
						"          convergedBilling,",
						"          premierIndicator,",
						"          unifiedAccountDiscount,",
						"          unifiedAccountExisting,",
						"          unifiedAccountPending,",
						"          unifiedAccountRebate,",
						"          unifiedAccountReference,",
						"          unifiedAccountReward",
						"     )) ~> oceOrderAcctsUnifiedAccount",
						"alterRowEmployeeDetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          centralizedTableId as string,",
						"          class as string,",
						"          uid as string,",
						"          status as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderEmployeeDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          centralizedTableId,",
						"          class,",
						"          uid,",
						"          status",
						"     )) ~> oceOrderEmployeeDetail",
						"alterRowecommerce sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          additionalDetails as string,",
						"          affiliateName as string,",
						"          code as string,",
						"          name as string,",
						"          email as string,",
						"          phoneNumber as string,",
						"          referredDate as timestamp,",
						"          type as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderECommercePartner_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          affiliateName,",
						"          code,",
						"          name,",
						"          email,",
						"          phoneNumber,",
						"          referredDate,",
						"          type,",
						"          additionalDetails",
						"     )) ~> oceOrderECommercePartner",
						"alterRowInte sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          ioId as string,",
						"          ioSequence as string,",
						"          category as string,",
						"          qualifyingServiceDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','ioId','ioSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderIntegratedOffers_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          ioId,",
						"          ioSequence,",
						"          category,",
						"          qualifyingServiceDetails",
						"     )) ~> oceOrderIntegratedOffers",
						"alterRowlogin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          email as string,",
						"          orderInitiator as string,",
						"          profileId as string,",
						"          userGuId as string,",
						"          userId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLoginProfile_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          email,",
						"          orderInitiator,",
						"          profileId,",
						"          userGuId,",
						"          userId",
						"     )) ~> oceOrderLoginProfile",
						"alterRowSingleDispatch sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          eligibleIndicator as string,",
						"          geoAreaAvailableIndicator as string,",
						"          satelliteTVOnlyEligibleIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSingleDispatchDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          eligibleIndicator,",
						"          geoAreaAvailableIndicator,",
						"          satelliteTVOnlyEligibleIndicator",
						"     )) ~> oceOrderSingleDispatchDetail",
						"alterRowPaymentTender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          paymentTenderId as string,",
						"          paymentTenderSequence as string,",
						"          accountsReceivableIndicator as string,",
						"          additionalDetails as string,",
						"          btmEquipmentType as string,",
						"          btmSubscriberNumber as string,",
						"          btmTotalAmount as decimal(20,2),",
						"          btnCustomerCode as string,",
						"          btnPaymentAmount as decimal(20,2),",
						"          btnTn as string,",
						"          collectedInOtherSystem as string,",
						"          cashPaymentAmount as decimal(20,2),",
						"          cashPaymentToken as string,",
						"          depositOption as string,",
						"          fixedAmount as decimal(20,2),",
						"          lpmCustomerAgreementVersion as string,",
						"          lpmLast4Digits as string,",
						"          lpmPaymentType as string,",
						"          lpmPaymentTypeName as string,",
						"          lpmReferenceNumber as string,",
						"          lpmTotalAmount as decimal(20,2),",
						"          purchaseOrderNumber as string,",
						"          paymentTokenOnlyAmount as decimal(20,2),",
						"          paymentTokenOnlyToken as string,",
						"          selectedOptionId as string,",
						"          storeLast4Digits as string,",
						"          storePaymentAmount as decimal(20,2),",
						"          storeProfileOwnerId as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','paymentTenderId','paymentTenderSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderPaymentTenders_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence,",
						"          additionalDetails,",
						"          depositOption,",
						"          fixedAmount,",
						"          selectedOptionId,",
						"          collectedInOtherSystem,",
						"          accountsReceivableIndicator,",
						"          purchaseOrderNumber,",
						"          btmEquipmentType,",
						"          btmSubscriberNumber,",
						"          btmTotalAmount,",
						"          btnCustomerCode,",
						"          btnPaymentAmount,",
						"          btnTn,",
						"          cashPaymentAmount,",
						"          cashPaymentToken,",
						"          lpmCustomerAgreementVersion,",
						"          lpmPaymentType,",
						"          lpmPaymentTypeName,",
						"          lpmReferenceNumber,",
						"          lpmTotalAmount,",
						"          paymentTokenOnlyAmount,",
						"          paymentTokenOnlyToken,",
						"          storeLast4Digits,",
						"          storePaymentAmount,",
						"          storeProfileOwnerId",
						"     )) ~> oceOrderPaymentTenders",
						"alterRowpayment sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          paymentTenderId as string,",
						"          paymentTenderSequence as string,",
						"          achAccountHolderName as string,",
						"          achAccountType as string,",
						"          address as string,",
						"          bankingPartnerCustomerId as string,",
						"          bankingPartnerName as string,",
						"          cardCryptogram as string,",
						"          ccCardNotValidatedIndicator as string,",
						"          ccCreditCardHolderName as string,",
						"          creditCardType as string,",
						"          customerAgreementVersion as string,",
						"          giftCardIndicator as string,",
						"          paymentConfirmationDetailBatchNumber as string,",
						"          paymentConfirmationDetailaymentHandle as string,",
						"          paymentConfirmationDetailReferenceNumber as string,",
						"          paymentConfirmationDetailTransactionId as string,",
						"          paymentProfileAutomationProfileName as string,",
						"          paymentProfileAutomationProfileOwnerId as string,",
						"          paymentProfileName as string,",
						"          paymentProfileOwnerId as string,",
						"          paymentProfileType as string,",
						"          paymentTenderConfigMerchantId as string,",
						"          paymentTenderConfigSourceLocation as string,",
						"          paymentTenderConfigSourceSystem as string,",
						"          paymentTenderConfigSourceUser as string,",
						"          paymentTokenPaymentAmount as string,",
						"          paymentTokenPaymentToken as string,",
						"          payType as string,",
						"          payPalEmailAddress as string,",
						"          payPalPayerId as string,",
						"          payPalPaymentMethodId as string,",
						"          payPalToken as string,",
						"          preAuthAddressVerificationSystemCode as string,",
						"          preAuthAuthorizationCode as string,",
						"          preAuthAuthorizationDate as timestamp,",
						"          preAuthAuthorizationExpirationDate as timestamp,",
						"          preAuthAuthorizationKey as string,",
						"          profileAction as string,",
						"          token as string,",
						"          totalAmount as decimal(20,2),",
						"          verificationIndicator as string,",
						"          skipAuthorization as string,",
						"          ModifiedDate as timestamp,",
						"          paymentMethodId as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','paymentTenderId','paymentTenderSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderPaymentTendersEPaymentMethod_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          paymentTenderId,",
						"          paymentTenderSequence,",
						"          achAccountHolderName,",
						"          achAccountType,",
						"          address,",
						"          bankingPartnerCustomerId,",
						"          bankingPartnerName,",
						"          cardCryptogram,",
						"          ccCardNotValidatedIndicator,",
						"          ccCreditCardHolderName,",
						"          creditCardType,",
						"          customerAgreementVersion,",
						"          giftCardIndicator,",
						"          paymentConfirmationDetailBatchNumber,",
						"          paymentConfirmationDetailaymentHandle = paymentConfirmationDetailPaymentHandle,",
						"          paymentConfirmationDetailReferenceNumber,",
						"          paymentConfirmationDetailTransactionId,",
						"          paymentProfileAutomationProfileName,",
						"          paymentProfileAutomationProfileOwnerId,",
						"          paymentProfileName,",
						"          paymentProfileOwnerId,",
						"          paymentProfileType = ptype,",
						"          paymentTenderConfigMerchantId,",
						"          paymentTenderConfigSourceLocation,",
						"          paymentTenderConfigSourceSystem,",
						"          paymentTenderConfigSourceUser,",
						"          paymentTokenPaymentAmount,",
						"          paymentTokenPaymentToken,",
						"          payType,",
						"          payPalEmailAddress,",
						"          payPalPayerId,",
						"          payPalPaymentMethodId,",
						"          payPalToken,",
						"          preAuthAddressVerificationSystemCode,",
						"          preAuthAuthorizationCode,",
						"          preAuthAuthorizationDate,",
						"          preAuthAuthorizationExpirationDate,",
						"          preAuthAuthorizationKey,",
						"          profileAction,",
						"          token,",
						"          totalAmount,",
						"          verificationIndicator,",
						"          skipAuthorization,",
						"          paymentMethodId",
						"     )) ~> oceOrderPaymentTendersEPaymentMethod",
						"alterRowshippingdetail sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          additiondetails as string,",
						"          billingCode as string,",
						"          carrierPreference as string,",
						"          additionalContactPhones as string,",
						"          recipientAdditionalContactPhones as string,",
						"          recipientEmailAddress as string,",
						"          recipientFirstName as string,",
						"          recipientNameId as string,",
						"          recipientLastName as string,",
						"          recipientLegalFirstName as string,",
						"          recipientLegalLastName as string,",
						"          recipientMiddleInitial as string,",
						"          recipientPreferredContactMethod as string,",
						"          recipientNamePrefix as string,",
						"          recipientPreviousLegalLastName as string,",
						"          recipientNameSuffix as string,",
						"          recipientNameTitle as string,",
						"          recipientPrimaryContactPhoneNumber as string,",
						"          recipientPrimaryContactextension as string,",
						"          recipientPrimaryContactPhoneType as string,",
						"          recipientPrimaryContactPhoneConsentDetails as string,",
						"          shipmentCommitDateFromDate as string,",
						"          shipmentCommitDateToDate as string,",
						"          shippingCode as string,",
						"          shippingMethod as string,",
						"          shippingPriceCode as string,",
						"          ModifiedDate as timestamp,",
						"          signatureRequiredIndicator as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','shippingId','shippingSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderShippingDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          billingCode,",
						"          carrierPreference,",
						"          shipmentCommitDateFromDate = fromDate,",
						"          shipmentCommitDateToDate = toDate,",
						"          shippingSequence = sequence,",
						"          shippingCode,",
						"          shippingMethod,",
						"          shippingPriceCode,",
						"          recipientAdditionalContactPhones = additionalContactPhones,",
						"          shippingId = shippingDetailsid,",
						"          recipientEmailAddress = emailAddress,",
						"          recipientFirstName = firstName,",
						"          recipientMiddleInitial = middleInitial,",
						"          recipientLastName = lastName,",
						"          recipientLegalFirstName = legalFirstName,",
						"          recipientLegalLastName = legalLastName,",
						"          recipientPreferredContactMethod = preferredContactMethod,",
						"          recipientNameSuffix = suffix,",
						"          recipientNamePrefix = prefix,",
						"          recipientNameTitle = title,",
						"          recipientNameId = id,",
						"          recipientPrimaryContactPhoneNumber,",
						"          recipientPrimaryContactPhoneType,",
						"          recipientPrimaryContactextension,",
						"          recipientPrimaryContactPhoneConsentDetails,",
						"          additionalContactPhones,",
						"          recipientPreviousLegalLastName = previousLegalLastName,",
						"          signatureRequiredIndicator",
						"     )) ~> sinkshippingdetails",
						"alterRowshippingprice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          priceType as string,",
						"          additionalDetails as string,",
						"          amount as decimal(20,2),",
						"          baseAmount as decimal(20,2),",
						"          creditFeeType as string,",
						"          currencyType as string,",
						"          installmentEligibility as string,",
						"          msrp as decimal(20,2),",
						"          taxDetail as string,",
						"          total as decimal(20,2),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','shippingId','shippingSequence','priceType'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderShippingDetailsPrice_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          shippingId = shippingDetailsid,",
						"          shippingSequence = shippingsequence,",
						"          priceType,",
						"          amount,",
						"          baseAmount,",
						"          creditFeeType,",
						"          currencyType,",
						"          installmentEligibility,",
						"          msrp,",
						"          total,",
						"          additionalDetails = str_additionalDetails,",
						"          taxDetail",
						"     )) ~> sinkShippingDetailsPrice",
						"alterRowsalesagent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          agentCode as string,",
						"          location as string,",
						"          salesCode as string,",
						"          uid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSalesAgent_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          agentCode,",
						"          location,",
						"          salesCode,",
						"          uid",
						"     )) ~> oceOrderSalesAgent",
						"alterRowRFallout sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          code as string,",
						"          dateTime as timestamp,",
						"          description as string,",
						"          Operation as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','code'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderReferenceDetailFalloutDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          code,",
						"          dateTime,",
						"          description,",
						"          Operation = operation",
						"     )) ~> oceOrderReferenceDetailFalloutDetails",
						"alterRowshippingaddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          shippingId as string,",
						"          shippingSequence as integer,",
						"          id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          ModifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','id','shippingSequence','shippingId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_sinkShippingDetailsAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          addressId,",
						"          id = shippingaddress_id,",
						"          dwellingType,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = auxillaryaddress_line1,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = addressLines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrclli8 = paresed_clli8,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUnit = unparsedAddr_unit,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          additionalDetails = json_additionaldetails,",
						"          shippingSequence = sequence,",
						"          placeId,",
						"          connectedCommunityId,",
						"          shippingId = shippingDetailsid,",
						"          unparsedAddrCounty = unparessed_county,",
						"          parsedAddrTimeZone,",
						"          parsedAddrRateZone",
						"     )) ~> sinkShippingDetailsAddr",
						"alterRowschedulingdetailflat sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          schedulingId as string,",
						"          actualScheduleEndTime as string,",
						"          actualScheduleSelectedAppointmentDate as date,",
						"          actualScheduleSelectedAppointmentTime as string,",
						"          actualScheduleStartTime as string,",
						"          actualScheduleWorkOrderId as string,",
						"          additionalDetails as string,",
						"          appointmentComment as string,",
						"          bestTimeToReach as string,",
						"          billingInstallmentsIndicator as string,",
						"          businessName as string,",
						"          confirmedScheduleEndTime as string,",
						"          confirmedScheduleSelectedAppointmentDate as date,",
						"          confirmedScheduleSelectedAppointmentTime as string,",
						"          confirmedScheduleStartTime as string,",
						"          confirmedScheduleWorkOrderId as string,",
						"          connecTechInstallationOptions as string,",
						"          dispatchType as string,",
						"          deferredInstallationDuration as string,",
						"          eventCode as string,",
						"          eventCodeEnteredManuallyIndicator as string,",
						"          installationPartnerName as string,",
						"          installationPartnerPurchaseOrderAmount as decimal(20,2),",
						"          installationPartnerPurchaseOrderDate as timestamp,",
						"          installationPartnerPurchaseOrderNumber as string,",
						"          installationPartnerProjectBilling as string,",
						"          installType as string,",
						"          landlordName as string,",
						"          landlordPermission as string,",
						"          landlordPhoneNumber as string,",
						"          nfflFulfillerName as string,",
						"          nfflFulfillerTN as string,",
						"          nfflFlag as string,",
						"          preference as string,",
						"          realTimeCalendarIndicator as string,",
						"          reservationId as string,",
						"          scheduleType as string,",
						"          scheduleASAPIndicator as string,",
						"          scheduleByDayAndTimeAnyDay as string,",
						"          scheduleByDayAndTimeMonday as string,",
						"          scheduleByDayAndTimeTuesday as string,",
						"          scheduleByDayAndTimeWednesday as string,",
						"          scheduleByDayAndTimeThursday as string,",
						"          scheduleByDayAndTimeFriday as string,",
						"          scheduleByDayAndTimeSaturday as string,",
						"          scheduleByDayAndTimeSunday as string,",
						"          serviceLevel as string,",
						"          timeZone as string,",
						"          valueSegmentationTier as string,",
						"          additionalContactPhones as string,",
						"          emailAddress as string,",
						"          firstName as string,",
						"          nameId as string,",
						"          lastName as string,",
						"          legalFirstName as string,",
						"          legalLastName as string,",
						"          middleInitial as string,",
						"          preferredContactMethod as string,",
						"          prefix as string,",
						"          previousLegalLastName as string,",
						"          suffix as string,",
						"          title as string,",
						"          primaryContactPhoneNumber as string,",
						"          primaryContactextension as string,",
						"          primaryContactPhoneType as string,",
						"          primarycontactPhoneConsentDetails as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','schedulingId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderSchedulingDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          serviceLevel,",
						"          timeZone,",
						"          valueSegmentationTier,",
						"          landlordName = landlordDetail_landlordName,",
						"          landlordPermission = landlordDetail_landlordPermission,",
						"          landlordPhoneNumber = landlordDetail_landlordPhoneNumber,",
						"          nfflFulfillerName = nffl_fulfillerName,",
						"          nfflFulfillerTN = nffl_ffulfillerTN,",
						"          nfflFlag = nffl_fnfflFlag,",
						"          preference,",
						"          reservationId,",
						"          scheduleType,",
						"          dispatchType,",
						"          deferredInstallationDuration,",
						"          eventCode,",
						"          eventCodeEnteredManuallyIndicator,",
						"          installationPartnerName = partnerName_installationPartner,",
						"          installationPartnerPurchaseOrderAmount = partnerName_projectPurchaseOrderAmount,",
						"          installationPartnerPurchaseOrderDate = partnerName_projectPurchaseOrderDate,",
						"          installationPartnerPurchaseOrderNumber = partnerName_projectPurchaseOrderNumber,",
						"          installationPartnerProjectBilling = partnerName_projectBilling,",
						"          appointmentComment,",
						"          bestTimeToReach,",
						"          billingInstallmentsIndicator,",
						"          businessName,",
						"          schedulingId = schedulingdetails_id,",
						"          installType,",
						"          realTimeCalendarIndicator,",
						"          scheduleASAPIndicator = scheduleAsSoonAsPossibleIndicator,",
						"          emailAddress,",
						"          firstName,",
						"          nameId = schedulingdetails_name_id,",
						"          lastName,",
						"          primarycontactPhoneConsentDetails,",
						"          primaryContactextension,",
						"          scheduleByDayAndTimeFriday = scheduleByDayAndTime_friday,",
						"          scheduleByDayAndTimeMonday = scheduleByDayAndTime_monday,",
						"          scheduleByDayAndTimeSaturday = scheduleByDayAndTime_saturday,",
						"          scheduleByDayAndTimeSunday = scheduleByDayAndTime_sunday,",
						"          scheduleByDayAndTimeThursday = scheduleByDayAndTime_thursday,",
						"          scheduleByDayAndTimeTuesday = scheduleByDayAndTime_tuesday,",
						"          scheduleByDayAndTimeWednesday = scheduleByDayAndTime_wednesday,",
						"          actualScheduleWorkOrderId = actualSchedule_workOrderId,",
						"          actualScheduleStartTime = actualSchedule_startTime,",
						"          actualScheduleSelectedAppointmentDate = actualSchedule_selectedAppointmentDate,",
						"          actualScheduleSelectedAppointmentTime = actualSchedule_selectedAppointmentTime,",
						"          actualScheduleEndTime = actualSchedule_endTime,",
						"          confirmedScheduleWorkOrderId = confirmedSchedule_workOrderId,",
						"          confirmedScheduleStartTime = confirmedSchedule_startTime,",
						"          confirmedScheduleSelectedAppointmentDate = confirmedSchedule_selectedAppointmentDate,",
						"          confirmedScheduleSelectedAppointmentTime = confirmedSchedule_selectedAppointmentTime,",
						"          confirmedScheduleEndTime = confirmedSchedule_endTime,",
						"          additionalDetails = str_additionalDetails,",
						"          additionalContactPhones,",
						"          legalLastName,",
						"          legalFirstName,",
						"          previousLegalLastName,",
						"          middleInitial,",
						"          preferredContactMethod,",
						"          prefix,",
						"          suffix,",
						"          title,",
						"          primaryContactextension,",
						"          primaryContactPhoneNumber = phoneNumber,",
						"          primaryContactPhoneType = contactPhoneType,",
						"          primarycontactPhoneConsentDetails,",
						"          connecTechInstallationOptions,",
						"          scheduleByDayAndTimeAnyDay = anyDayOfTheWeek",
						"     )) ~> sinkschedulingdetailsflat",
						"alterRowext sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          systemName as string,",
						"          systemOrderReference as string,",
						"          systemOrderReferenceType as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsExternalOrderReferences_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          systemName,",
						"          systemOrderReference,",
						"          systemOrderReferenceType",
						"     )) ~> oceOrderLosgsExternalOrderReferences",
						"alterRowpromo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          id as string,",
						"          sequence as string,",
						"          additionDetails as string,",
						"          amount as double,",
						"          baseOfferId as string,",
						"          complexDiscountIndicator as string,",
						"          componentConfigurations as string,",
						"          couponCode as string,",
						"          displayLevel as string,",
						"          duration as integer,",
						"          effectiveDate as timestamp,",
						"          effectiveInDays as integer,",
						"          endDate as timestamp,",
						"          fixedAmount as double,",
						"          ioId as string,",
						"          ioSequence as string,",
						"          parentPricePlanCode as string,",
						"          payInAdvanceProdId as string,",
						"          percent as double,",
						"          promotionAppliedBy as string,",
						"          promotionBillingCode as string,",
						"          promotionCode as string,",
						"          promotionCycle as string,",
						"          promotionId as string,",
						"          promotionName as string,",
						"          promotionType as string,",
						"          unitOfMeasurement as string,",
						"          promotionTypeDetail as string,",
						"          qualifyingServiceDetails as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','id','sequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsPromotions_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          id,",
						"          sequence,",
						"          additionDetails = additionalDetails,",
						"          amount,",
						"          baseOfferId,",
						"          complexDiscountIndicator,",
						"          componentConfigurations,",
						"          couponCode,",
						"          displayLevel,",
						"          duration,",
						"          effectiveDate,",
						"          effectiveInDays,",
						"          endDate,",
						"          fixedAmount,",
						"          ioId,",
						"          ioSequence,",
						"          parentPricePlanCode,",
						"          payInAdvanceProdId,",
						"          percent,",
						"          promotionAppliedBy,",
						"          promotionBillingCode,",
						"          promotionCode,",
						"          promotionCycle,",
						"          promotionId,",
						"          promotionName,",
						"          promotionType,",
						"          unitOfMeasurement,",
						"          promotionTypeDetail,",
						"          qualifyingServiceDetails",
						"     )) ~> oceOrderLosgsPromotions",
						"alterRowuse sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          ModifiedDate as timestamp,",
						"          label as string,",
						"          sequence as string,",
						"          value as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','label'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsUserDefinedLabels_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          label,",
						"          sequence,",
						"          value",
						"     )) ~> oceOrderLosgsUserDefinedLabels",
						"alterRowllpay sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemId as string,",
						"          lineItemSequence as string,",
						"          paymentTenderReference as string,",
						"          amount as decimal(20,2),",
						"          currencyType as string,",
						"          numberOfInstallment as integer,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','paymentTenderReference','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsPayments_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = lineitemsequence,",
						"          paymentTenderReference,",
						"          lineItemId = LineItem_id,",
						"          amount,",
						"          currencyType,",
						"          numberOfInstallment",
						"     )) ~> oceOrderLosgsLineItemsPayments",
						"alterRowLLIhard sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          availabilityDate as timestamp,",
						"          biller as string,",
						"          byodIndicator as string,",
						"          cardSerialNumber as string,",
						"          deliveryByDateFromDate as timestamp,",
						"          deliveryByDateToDate as timestamp,",
						"          deliveryPromiseNoteEnglish as string,",
						"          deliveryPromiseNoteSpanish as string,",
						"          eid as string,",
						"          fieldId as string,",
						"          hardGoodType as string,",
						"          iccId as string,",
						"          make as string,",
						"          manufacturerCode as string,",
						"          model as string,",
						"          networkAccessDeviceType as string,",
						"          preOrderIndicator as string,",
						"          productImageUrl as string,",
						"          serialNumber as string,",
						"          shipmentCommitFromDate as timestamp,",
						"          shipmentCommitToDate as timestamp,",
						"          shippedHotIndicator as string,",
						"          whiteGloveDeliveryPartner as string,",
						"          WirelessHardGoodConnectionType as string,",
						"          WirelessHardGoodDeviceCategory as string,",
						"          WirelessHardGoodEquipmentType as string,",
						"          WirelessHardGoodEquipmentUpgrade as string,",
						"          WirelessHardGoodIMEI as string,",
						"          WirelessHardGoodIMEIType as string,",
						"          WirelessHardGoodIMSI as string,",
						"          WirelessHardGoodPhoneType as string,",
						"          WirelessHardGoodTechType as string,",
						"          WirelessHardGoodUSOC as string,",
						"          WirelessHardGoodZodiacSeqNum as string,",
						"          ModifiedDate as timestamp,",
						"          simStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemshardGood_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = lineitemidsequence,",
						"          lineItemId = LineItem_id,",
						"          availabilityDate,",
						"          biller,",
						"          byodIndicator,",
						"          cardSerialNumber,",
						"          deliveryByDateFromDate,",
						"          deliveryByDateToDate,",
						"          deliveryPromiseNoteEnglish,",
						"          deliveryPromiseNoteSpanish,",
						"          eid,",
						"          fieldId,",
						"          hardGoodType,",
						"          iccId,",
						"          make,",
						"          manufacturerCode,",
						"          model,",
						"          networkAccessDeviceType,",
						"          preOrderIndicator,",
						"          productImageUrl,",
						"          serialNumber,",
						"          shipmentCommitFromDate,",
						"          shipmentCommitToDate,",
						"          shippedHotIndicator,",
						"          whiteGloveDeliveryPartner,",
						"          WirelessHardGoodConnectionType,",
						"          WirelessHardGoodDeviceCategory,",
						"          WirelessHardGoodEquipmentType,",
						"          WirelessHardGoodEquipmentUpgrade,",
						"          WirelessHardGoodIMEIType,",
						"          WirelessHardGoodPhoneType,",
						"          WirelessHardGoodTechType,",
						"          WirelessHardGoodUSOC,",
						"          WirelessHardGoodZodiacSeqNum,",
						"          simStatus",
						"     )) ~> oceOrderLosgsLineItemshardGood",
						"alterRowsupplychain sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          availabilityDate as timestamp,",
						"          carrier as string,",
						"          claimRMANumber as string,",
						"          exchangeDocumentId as string,",
						"          exchangeOrderId as string,",
						"          orderDocumentDetailActivity as string,",
						"          orderDocumentDetailLocation as string,",
						"          orderDocumentDetailOrderId as string,",
						"          price as decimal(20,2),",
						"          quantityBackOrdered as integer,",
						"          quantityCanceled as integer,",
						"          quantityOrdered as integer,",
						"          quantityShipped as integer,",
						"          quantityToShip as integer,",
						"          shippedDate as timestamp,",
						"          trackingNumber as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsSupplyChainDetail_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = lineitemsequence,",
						"          lineItemId = LineItem_id,",
						"          availabilityDate,",
						"          carrier,",
						"          claimRMANumber,",
						"          exchangeDocumentId,",
						"          exchangeOrderId,",
						"          orderDocumentDetailActivity,",
						"          orderDocumentDetailLocation,",
						"          orderDocumentDetailOrderId,",
						"          price,",
						"          quantityBackOrdered,",
						"          quantityCanceled,",
						"          quantityOrdered,",
						"          quantityShipped,",
						"          quantityToShip,",
						"          shippedDate,",
						"          trackingNumber",
						"     )) ~> oceOrderLosgsLineItemsSupplyChainDetail",
						"alterRowlosgserviceaddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          Id as string,",
						"          placeId as string,",
						"          addressId as string,",
						"          connectedCommunityId as string,",
						"          dwellingType as string,",
						"          validatedIndicator as string,",
						"          auxiliaryAddressLine1 as string,",
						"          auxiliaryAddressLine2 as string,",
						"          auxiliaryAddressLine3 as string,",
						"          auxiliaryAddressLine4 as string,",
						"          auxiliaryAddressLine5 as string,",
						"          codingAccuracySupportSystemAddress as string,",
						"          parsedAddrAddInstructions as string,",
						"          parsedAddrAddressChanged as string,",
						"          parsedAddrAddressMatchCode as string,",
						"          parsedAddrAddressStreetLine as string,",
						"          parsedAddrAddressType as string,",
						"          parsedAddrApartmentUnit as string,",
						"          parsedAddrApartmentUnitNumber as string,",
						"          parsedAddrAssignedStreetNumber as string,",
						"          parsedAddrAttention as string,",
						"          parsedAddrBuildingType as string,",
						"          parsedAddrCity as string,",
						"          parsedAddrclli8 as string,",
						"          parsedAddrCountry as string,",
						"          parsedAddrCounty as string,",
						"          parsedAddrCountyCode as string,",
						"          parsedAddrDirection as string,",
						"          parsedAddrDirectionPrefix as string,",
						"          parsedAddrDisconnectDate as string,",
						"          parsedAddrExchangeCode as string,",
						"          parsedAddrExhaustCode as string,",
						"          parsedAddrHouseNumber as string,",
						"          parsedAddrHouseNumberPrefix as string,",
						"          parsedAddrHouseNumberSuffix as string,",
						"          parsedAddrIncorporatedIndicator as string,",
						"          parsedAddrInternationalZip as string,",
						"          parsedAddrLastDisconnectedTransportType as string,",
						"          parsedAddrLastNetworkAccessDeviceType as string,",
						"          parsedAddrLegalEntity as string,",
						"          parsedAddrLevel as string,",
						"          parsedAddrLevelNumber as string,",
						"          parsedAddrLinkKey as string,",
						"          parsedAddrPostOfficeBox as string,",
						"          parsedAddrPrimaryAddressLine as string,",
						"          parsedAddrPrimaryNPANXX as string,",
						"          parsedAddrProvince as string,",
						"          parsedAddrRateCenterCode as string,",
						"          parsedAddrRateZoneBanCode as string,",
						"          parsedAddrRsagValidationIndicator as string,",
						"          parsedAddrRuralRouteBoxNumber as string,",
						"          parsedAddrRuralRouteCenterNumber as string,",
						"          parsedAddrSecondaryAddressLine as string,",
						"          parsedAddrSiteAddressId as string,",
						"          parsedAddrSiteId as string,",
						"          parsedAddrSmartMoves as string,",
						"          parsedAddrState as string,",
						"          parsedAddrStreetName as string,",
						"          parsedAddrStreetNameSuffix as string,",
						"          parsedAddrStreetType as string,",
						"          parsedAddrStructure as string,",
						"          parsedAddrStructureNumber as string,",
						"          parsedAddrTarCode as string,",
						"          parsedAddrTelephoneNumber as string,",
						"          parsedAddrUrbanizationCode as string,",
						"          parsedAddrVideoHubOffice as string,",
						"          parsedAddrZip as string,",
						"          parsedAddrZipCodeExtension as string,",
						"          parsedAddrZipGeoCode as string,",
						"          unparsedAddressLine1 as string,",
						"          unparsedAddressLine2 as string,",
						"          unparsedAddressLine3 as string,",
						"          unparsedAddrAttention as string,",
						"          unparsedAddrCity as string,",
						"          unparsedAddrCountry as string,",
						"          unparsedAddrCounty as string,",
						"          unparsedAddrElevation as string,",
						"          unparsedAddrInternationalZip as string,",
						"          unparsedAddrPostOfficeBox as string,",
						"          unparsedAddrProvince as string,",
						"          unparsedAddrRuralRoute as string,",
						"          unparsedAddrState as string,",
						"          unparsedAddrStructure as string,",
						"          unparsedAddrUnit as string,",
						"          unparsedAddrUrbanizationCode as string,",
						"          unparsedAddrZip as string,",
						"          unparsedAddrZipCodeExtension as string,",
						"          additionalDetails as string,",
						"          modifiedDate as timestamp,",
						"          parsedAddrTimeZone as string,",
						"          parsedAddrRateZone as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsServiceAddr_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          additionalDetails,",
						"          addressId,",
						"          Id = ServiceAddress_id,",
						"          validatedIndicator,",
						"          auxiliaryAddressLine1 = line1,",
						"          dwellingType,",
						"          auxiliaryAddressLine2 = auxillaryaddress_line2,",
						"          auxiliaryAddressLine3 = auxillaryaddress_line3,",
						"          auxiliaryAddressLine4 = auxillaryaddress_line4,",
						"          auxiliaryAddressLine5 = auxillaryaddress_line5,",
						"          codingAccuracySupportSystemAddress = addressLines,",
						"          parsedAddrAddInstructions = parsedAddr_addInstructions,",
						"          parsedAddrAddressChanged = parsedAddr_addressChanged,",
						"          parsedAddrAddressMatchCode = parsedAddr_addressMatchCode,",
						"          parsedAddrAddressStreetLine = parsedAddr_addressStreetLine,",
						"          parsedAddrAddressType = parsedAddr_addressType,",
						"          parsedAddrApartmentUnit = parsedAddr_apartmentUnit,",
						"          parsedAddrApartmentUnitNumber = parsedAddr_apartmentUnitNumber,",
						"          parsedAddrAssignedStreetNumber = parsedAddr_assignedStreetNumber,",
						"          parsedAddrAttention = parsedAddr_attention,",
						"          parsedAddrBuildingType = parsedAddr_buildingType,",
						"          parsedAddrCity = parsedAddr_city,",
						"          parsedAddrCountry = parsedAddr_country,",
						"          parsedAddrCounty = parsedAddr_county,",
						"          parsedAddrCountyCode = parsedAddr_countyCode,",
						"          parsedAddrDirection = parsedAddr_direction,",
						"          parsedAddrDirectionPrefix = parsedAddr_directionPrefix,",
						"          parsedAddrDisconnectDate = parsedAddr_disconnectDate,",
						"          parsedAddrExchangeCode = parsedAddr_exchangeCode,",
						"          parsedAddrExhaustCode = parsedAddr_exhaustCode,",
						"          parsedAddrHouseNumber = parsedAddr_houseNumber,",
						"          parsedAddrHouseNumberPrefix = parsedAddr_houseNumberPrefix,",
						"          parsedAddrHouseNumberSuffix = parsedAddr_houseNumberSuffix,",
						"          parsedAddrIncorporatedIndicator = parsedAddr_incorporatedIndicator,",
						"          parsedAddrInternationalZip = parsedAddr_internationalZip,",
						"          parsedAddrLastDisconnectedTransportType = parsedAddr_lastDisconnectedTransportType,",
						"          parsedAddrLastNetworkAccessDeviceType = parsedAddr_lastNetworkAccessDeviceType,",
						"          parsedAddrLegalEntity = parsedAddr_legalEntity,",
						"          parsedAddrLevel = parsedAddr_level,",
						"          parsedAddrLevelNumber = parsedAddr_levelNumber,",
						"          parsedAddrLinkKey = parsedAddr_linkKey,",
						"          parsedAddrPostOfficeBox = parsedAddr_postOfficeBox,",
						"          parsedAddrPrimaryAddressLine = parsedAddr_primaryAddressLine,",
						"          parsedAddrPrimaryNPANXX = parsedAddr_primaryNPANXX,",
						"          parsedAddrProvince = parsedAddr_province,",
						"          parsedAddrRateCenterCode = parsedAddr_rateCenterCode,",
						"          parsedAddrRateZoneBanCode = parsedAddr_rateZoneBanCode,",
						"          parsedAddrRsagValidationIndicator = parsedAddr_rsagValidationIndicator,",
						"          parsedAddrRuralRouteBoxNumber = parsedAddr_ruralRouteBoxNumber,",
						"          parsedAddrRuralRouteCenterNumber = parsedAddr_ruralRouteCenterNumber,",
						"          parsedAddrSecondaryAddressLine = parsedAddr_secondaryAddressLine,",
						"          parsedAddrSiteAddressId = parsedAddr_siteAddressId,",
						"          parsedAddrSiteId = parsedAddr_siteId,",
						"          parsedAddrSmartMoves = parsedAddr_smartMoves,",
						"          parsedAddrState = parsedAddr_state,",
						"          parsedAddrStreetName = parsedAddr_streetName,",
						"          parsedAddrStreetNameSuffix = parsedAddr_streetNameSuffix,",
						"          parsedAddrStreetType = parsedAddr_streetType,",
						"          parsedAddrStructure = parsedAddr_structure,",
						"          parsedAddrStructureNumber = parsedAddr_structureNumber,",
						"          parsedAddrTarCode = parsedAddr_tarCode,",
						"          parsedAddrTelephoneNumber = parsedAddr_telephoneNumber,",
						"          parsedAddrUrbanizationCode = parsedAddr_urbanizationCode,",
						"          parsedAddrVideoHubOffice = parsedAddr_videoHubOffice,",
						"          parsedAddrZip = parsedAddr_zip,",
						"          parsedAddrZipCodeExtension = parsedAddr_zipCodeExtension,",
						"          parsedAddrZipGeoCode = parsedAddr_zipGeoCode,",
						"          unparsedAddressLine1 = unparsedAddr_addressLine1,",
						"          unparsedAddressLine3 = unparsedAddr_addressLine3,",
						"          unparsedAddrAttention = unparsedAddr_attention,",
						"          unparsedAddrElevation = unparsedAddr_elevation,",
						"          unparsedAddrPostOfficeBox = unparsedAddr_postOfficeBox,",
						"          unparsedAddrProvince = unparsedAddr_province,",
						"          unparsedAddrRuralRoute = unparsedAddr_ruralRoute,",
						"          unparsedAddrStructure = unparsedAddr_structure,",
						"          unparsedAddrUrbanizationCode = unparsedAddr_urbanizationCode,",
						"          unparsedAddrCity = unparsedAddr_city,",
						"          unparsedAddrCountry = unparsedAddr_country,",
						"          unparsedAddrState = unparsedAddr_state,",
						"          unparsedAddrZip = unparsedAddr_zip,",
						"          unparsedAddrZipCodeExtension = unparsedAddr_zipCodeExtension,",
						"          unparsedAddrInternationalZip = unparsedAddr_internationalZip,",
						"          unparsedAddressLine2 = unparsedAddr_addressLine2,",
						"          placeId,",
						"          connectedCommunityId,",
						"          unparsedAddrCounty,",
						"          parsedAddrTimeZone,",
						"          parsedAddrRateZone",
						"     )) ~> sinklosgserviceaddress",
						"alterRowDiLitem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsDirecTVCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = losgsequence,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup",
						"     )) ~> oceOrderLosgsLineItemsDirecTVCharacteristics",
						"alterRowvoipLLitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          callerId as string,",
						"          uverseMessaging as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsVoipCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup,",
						"          callerId,",
						"          uverseMessaging",
						"     )) ~> oceOrderLosgsLineItemsVoipCharacteristics",
						"alterRowiptv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsIptvCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup",
						"     )) ~> oceOrderLosgsLineItemsIptvCharacteristics",
						"alterRowwire sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          attDynTrafficManagerAddlDetails as string,",
						"          attDynTrafficManagerEnterpriseId as string,",
						"          attDynTrafficManagerManifestLabel as string,",
						"          attDynTrafficManagerManifestURL as string,",
						"          availabilityType as string,",
						"          distributionChannelId as string,",
						"          nciEligibleIndicator as string,",
						"          newSalesChannelId as string,",
						"          offerType as string,",
						"          packetDataProtocolAddlDetails as string,",
						"          packetDataProtocolApnName as string,",
						"          packetDataProtocol5GIndicator as string,",
						"          packetDataProtocolDefaultIndicator as string,",
						"          packetDataProtocolDefaultSNType as string,",
						"          packetDataProtocolIpAddress as string,",
						"          packetDataProtocolIpv6Address as string,",
						"          packetDataProtocolIpversionType as string,",
						"          packetDataProtocolLteIndicator as string,",
						"          packetDataProtocolOnlineChargingIndicator as string,",
						"          packetDataProtocolType as string,",
						"          partnerCode as string,",
						"          simType as string,",
						"          tradeInModelCode as string,",
						"          tradeInDetailAddlDetails as string,",
						"          tradeInDetailClaimId as string,",
						"          tradeInDetailDeviceClearingAgreement as string,",
						"          tradeInDetailDeviceCondition as string,",
						"          tradeInDetailExchangeType as string,",
						"          tradeInDetailInstallmentPlanId as string,",
						"          tradeInDetailModelCode as string,",
						"          tradeInDetailNonComplianceFee as integer,",
						"          tradeInDetailPayupAmount as integer,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsWirelessCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup,",
						"          attDynTrafficManagerAddlDetails,",
						"          attDynTrafficManagerEnterpriseId,",
						"          attDynTrafficManagerManifestLabel,",
						"          attDynTrafficManagerManifestURL,",
						"          availabilityType,",
						"          distributionChannelId,",
						"          nciEligibleIndicator,",
						"          newSalesChannelId,",
						"          offerType,",
						"          packetDataProtocolAddlDetails,",
						"          packetDataProtocolApnName,",
						"          packetDataProtocol5GIndicator,",
						"          packetDataProtocolDefaultIndicator,",
						"          packetDataProtocolDefaultSNType,",
						"          packetDataProtocolIpAddress,",
						"          packetDataProtocolIpv6Address,",
						"          packetDataProtocolIpversionType,",
						"          packetDataProtocolLteIndicator,",
						"          packetDataProtocolOnlineChargingIndicator,",
						"          packetDataProtocolType,",
						"          partnerCode,",
						"          simType,",
						"          tradeInDetailModelCode,",
						"          tradeInDetailAddlDetails,",
						"          tradeInDetailClaimId,",
						"          tradeInDetailDeviceClearingAgreement,",
						"          tradeInDetailDeviceCondition,",
						"          tradeInDetailExchangeType,",
						"          tradeInDetailInstallmentPlanId,",
						"          tradeInDetailNonComplianceFee,",
						"          tradeInDetailPayupAmount,",
						"          tradeInModelCode = tradeInDetailModelCode",
						"     )) ~> oceOrderLosgsLineItemsWirelessCharacteristics",
						"alterRowIIChar sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          additionalDetails as string,",
						"          boltOnType as string,",
						"          bucketAllowance as string,",
						"          componentConfigurations as string,",
						"          ignorePricePlanCode as string,",
						"          ipType as string,",
						"          maxOverageCharge as integer,",
						"          overageBucketAllowance as string,",
						"          planDownloadSpeed as string,",
						"          pricePerBucketAllowance as integer,",
						"          productSpecificationId as string,",
						"          requestComponentGroup as string,",
						"          modifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsInternetCharacteristics_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          additionalDetails,",
						"          componentConfigurations,",
						"          ignorePricePlanCode,",
						"          productSpecificationId,",
						"          requestComponentGroup,",
						"          boltOnType,",
						"          bucketAllowance,",
						"          ipType,",
						"          maxOverageCharge,",
						"          overageBucketAllowance,",
						"          planDownloadSpeed,",
						"          pricePerBucketAllowance",
						"     )) ~> oceOrderLosgsLineItemsInternetCharacteristics",
						"alterRowupgrad sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          approvalNumber as string,",
						"          contractExtended as string,",
						"          deviceType as string,",
						"          discountUOM as string,",
						"          maximumMRC as integer,",
						"          minimumCommitment as string,",
						"          minimumMRC as integer,",
						"          newAEUCheckerIndicator as string,",
						"          offerCategory as string,",
						"          policyCategory as string,",
						"          priceList as string,",
						"          qualificationLevel as string,",
						"          qualificationMessage as string,",
						"          qualificationType as string,",
						"          upgradeEligibilityDate as timestamp,",
						"          upgradeFeeWaivedIndicator as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsWirelessCharUpgradeQual_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence = sequence,",
						"          approvalNumber,",
						"          contractExtended,",
						"          deviceType,",
						"          discountUOM,",
						"          maximumMRC,",
						"          minimumCommitment,",
						"          minimumMRC,",
						"          newAEUCheckerIndicator,",
						"          offerCategory,",
						"          policyCategory,",
						"          priceList,",
						"          qualificationLevel,",
						"          qualificationMessage,",
						"          qualificationType,",
						"          upgradeEligibilityDate = date,",
						"          upgradeFeeWaivedIndicator",
						"     )) ~> oceOrderLosgsWirelessCharUpgradeQual",
						"alterRowlineitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgSequence as string,",
						"          losgId as string,",
						"          lineItemSequence as string,",
						"          lineItemId as string,",
						"          action as string,",
						"          addOnDomainName as string,",
						"          addOnDomainRegistration as string,",
						"          addOnParentItem as string,",
						"          addOnRegistrationType as string,",
						"          billingCode as string,",
						"          billingCodeType as string,",
						"          catalogProductType as string,",
						"          catalogSKUId as string,",
						"          contractAmountFinanced as decimal(20,2),",
						"          contractAnnualPercentageRate as decimal(20,2),",
						"          contractBalancedAmount as decimal(20,2),",
						"          contractDisplayName as string,",
						"          contractSent as string,",
						"          contractSystem as string,",
						"          contractType as string,",
						"          contractDownPayment as decimal(20,2),",
						"          contractDownPaymentPercent as decimal(20,2),",
						"          contractFinanceCharge as decimal(20,2),",
						"          contractInstallmentAmount as decimal(20,2),",
						"          contractInstallmentPlanDef as string,",
						"          contractInstallmentPlanId as string,",
						"          contractInstallmentStatus as string,",
						"          contractInstallmentType as string,",
						"          contractPrepaidFinanceCharge as string,",
						"          contractPayupAmount as decimal(20,2),",
						"          contractPayoffAmount as decimal(20,2),",
						"          contractTotalSalePrice as decimal(20,2),",
						"          contractlength as integer,",
						"          curbsideDelivery as string,",
						"          description as string,",
						"          displayName as string,",
						"          effectiveDate as timestamp,",
						"          feeId as string,",
						"          feeIdType as string,",
						"          feeWaivedIndicator as string,",
						"          feeWaivedReason as string,",
						"          fulfillmentLocation as string,",
						"          groupOptionId as string,",
						"          inventoryStoreId as string,",
						"          itemFulfillmentMethod as string,",
						"          locationId as string,",
						"          notes as string,",
						"          operation as string,",
						"          preOwnedIndicator as string,",
						"          priceAdditionalDetails as string,",
						"          priceAmount as decimal(20,2),",
						"          priceBaseAmount as decimal(20,2),",
						"          priceCreditFeeType as string,",
						"          priceCurrencyType as string,",
						"          priceInstallmentEligibility as string,",
						"          priceMsrp as decimal(20,2),",
						"          priceType as string,",
						"          priceTaxDetail as string,",
						"          priceTotal as decimal(20,2),",
						"          productCode as string,",
						"          productGroupReferences as string,",
						"          productSKU as string,",
						"          productSubType as string,",
						"          productType as string,",
						"          promotionReferences as string,",
						"          purchaseTransactionId as string,",
						"          quantity as integer,",
						"          shippingDetailReference as string,",
						"          socForPreviousDevice as string,",
						"          status as string,",
						"          storeId as string,",
						"          subscriptionId as string,",
						"          systemName as string,",
						"          taxableIndicator as string,",
						"          tier as string,",
						"          ModifiedDate as timestamp,",
						"          productInventoryStatus as string",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgSequence','losgId','lineItemSequence','lineItemId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItems_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgSequence = losgsequence,",
						"          losgId = Losg_id,",
						"          lineItemSequence = sequence,",
						"          lineItemId = LineItem_id,",
						"          action,",
						"          addOnDomainName,",
						"          addOnDomainRegistration,",
						"          addOnParentItem,",
						"          addOnRegistrationType,",
						"          billingCode,",
						"          billingCodeType,",
						"          catalogProductType,",
						"          catalogSKUId,",
						"          contractAmountFinanced,",
						"          contractAnnualPercentageRate,",
						"          contractBalancedAmount,",
						"          contractDisplayName,",
						"          contractSent,",
						"          contractSystem,",
						"          contractType,",
						"          contractDownPayment,",
						"          contractDownPaymentPercent,",
						"          contractFinanceCharge,",
						"          contractInstallmentAmount,",
						"          contractInstallmentPlanDef,",
						"          contractInstallmentPlanId,",
						"          contractInstallmentStatus,",
						"          contractInstallmentType,",
						"          contractPrepaidFinanceCharge,",
						"          contractPayupAmount,",
						"          contractPayoffAmount,",
						"          contractTotalSalePrice,",
						"          contractlength = contractLength,",
						"          curbsideDelivery,",
						"          description,",
						"          displayName,",
						"          effectiveDate,",
						"          feeId,",
						"          feeIdType,",
						"          feeWaivedIndicator,",
						"          feeWaivedReason,",
						"          fulfillmentLocation,",
						"          groupOptionId,",
						"          inventoryStoreId,",
						"          itemFulfillmentMethod,",
						"          locationId,",
						"          notes,",
						"          operation,",
						"          preOwnedIndicator,",
						"          priceAdditionalDetails,",
						"          priceAmount,",
						"          priceBaseAmount,",
						"          priceCreditFeeType,",
						"          priceCurrencyType,",
						"          priceInstallmentEligibility,",
						"          priceMsrp,",
						"          priceType,",
						"          priceTaxDetail,",
						"          priceTotal,",
						"          productCode,",
						"          productGroupReferences,",
						"          productSKU,",
						"          productSubType,",
						"          productType,",
						"          promotionReferences,",
						"          purchaseTransactionId,",
						"          quantity,",
						"          shippingDetailReference,",
						"          socForPreviousDevice,",
						"          status,",
						"          storeId,",
						"          subscriptionId,",
						"          systemName,",
						"          taxableIndicator,",
						"          tier,",
						"          productInventoryStatus",
						"     )) ~> oceOrderLosgsLineItems",
						"alterRowProvisionSystem sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          acctId as string,",
						"          acctSequence as string,",
						"          systemOrderReference as string,",
						"          systemName as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','acctId','acctSequence','systemName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_acctProvisionSystem',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          acctId,",
						"          acctSequence,",
						"          systemOrderReference,",
						"          systemName",
						"     )) ~> sinkacctProvisionSystem",
						"alterRowOrderLosgsLineItemsEventHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          lineItemId as string,",
						"          lineItemSequence as string,",
						"          status as string,",
						"          eventDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','lineItemId','lineItemSequence','status'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsLineItemsEventHistory_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = Losg_id,",
						"          losgSequence,",
						"          lineItemId,",
						"          lineItemSequence,",
						"          status,",
						"          ModifiedDate,",
						"          eventDate = dc_eventtime",
						"     )) ~> sinkLosgsLineItemsEventHistory",
						"alterRowForOceOrderLosgsEventHistory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          status as string,",
						"          substatus as string,",
						"          eventDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          insertedDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence','status','substatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsEventHistory_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId = losg_id,",
						"          losgSequence,",
						"          status,",
						"          substatus = subStatus,",
						"          eventDate,",
						"          ModifiedDate",
						"     )) ~> sinkOceOrderLosgsEventHistory",
						"altertransactinlogs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          actionBy as string,",
						"          changedLosgReferenceId as string,",
						"          channel as string,",
						"          comments as string,",
						"          endTime as timestamp,",
						"          orderId as string,",
						"          orderStatus as string,",
						"          parentOrderId as string,",
						"          queueName as string,",
						"          recordId as string,",
						"          startTime as timestamp,",
						"          transactionId as string,",
						"          transactionName as string,",
						"          transactionType as string,",
						"          updateInfos as string,",
						"          ModifiedDate as timestamp,",
						"          eventTime as string,",
						"          losgReferenceId as string,",
						"          service as string,",
						"          serviceType as string,",
						"          LosgStatus as string,",
						"          LosgSubStatus as string,",
						"          wirelessNumber as string,",
						"          eventtimedate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','startTime','losgReferenceId','LosgStatus','LosgSubStatus'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_transactionlosgnew',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          actionBy,",
						"          changedLosgReferenceId,",
						"          channel,",
						"          endTime,",
						"          orderId,",
						"          orderStatus,",
						"          parentOrderId,",
						"          queueName,",
						"          recordId,",
						"          startTime,",
						"          transactionId,",
						"          transactionName,",
						"          transactionType,",
						"          updateInfos,",
						"          eventTime,",
						"          losgReferenceId,",
						"          service,",
						"          serviceType,",
						"          LosgStatus = losgstatus,",
						"          LosgSubStatus = losgsubStatus,",
						"          wirelessNumber = losgwirelessNumber,",
						"          eventtimedate = lastmodified_date",
						"     )) ~> oceOrderTransactionlogs",
						"AlterRowApiExecutionDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          action as string,",
						"          priority as integer,",
						"          name as string,",
						"          losgSubStatus as string,",
						"          losgStatus as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgsApiExecutionDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          losgId,",
						"          losgSequence,",
						"          action,",
						"          priority,",
						"          name,",
						"          losgSubStatus,",
						"          losgStatus",
						"     )) ~> oceOrderLosgsApiExecutionDetails",
						"AlterRowCancelDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          cancelReason as string,",
						"          insertedDate as timestamp,",
						"          ModifiedEventDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderCancelDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber,",
						"          cancelReason,",
						"          ModifiedEventDate = dc_eventtime",
						"     )) ~> oceOrderCancelDetails",
						"alterRowoceOrderLosgCancelDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customerOrderNumber as string,",
						"          losgId as string,",
						"          losgSequence as string,",
						"          cancelBy as string,",
						"          cancelReason as string,",
						"          insertedDate as timestamp,",
						"          ModifiedEventDate as timestamp",
						"     ),",
						"     stagingSchemaName: 'V101',",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['customerOrderNumber','losgId','losgSequence'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_fileSystem: 'v101tableerror',",
						"     rejectedData_folderPath: 'v101_oceOrderLosgCancelDetails_errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: true,",
						"     mapColumn(",
						"          customerOrderNumber = CustomerOrderNumber,",
						"          losgId = LosgId,",
						"          losgSequence = sequence,",
						"          cancelBy,",
						"          cancelReason,",
						"          ModifiedEventDate = dc_eventtime",
						"     )) ~> oceOrderLosgCancelDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/V101_Copy_To_Azure_SQL')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderData')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderContactDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPrice')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPriceSummaryList')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderProductGroups')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderPromotions')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTermsAndConditions')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAccts')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctServFacilityQualifications')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctsBillingDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsPrice')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsPriceSummaryList')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgsLineItemsAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderSourceDetail')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderSourceDetailAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderLosgs')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderCreditPolicy')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderDebtAccts')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderErrors')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderMoveDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderTasks')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderReferenceDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsIptvCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsSubscriberName')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsTermsAndConditionAccepted')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsVoipCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsVoipCharacteristicsDirListing')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsWirelessCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsNumberPortDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsBillingDetailAddr')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctServiceAddr')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderAcctsBussinessAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsCompensation')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsAddlDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsinternetCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsDirectTVCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderEvents')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCreditCheck')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsAutopayPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsAutoPayEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCardOnFilePaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsCardOnFileEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsNegotiateConflictCustomer')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsUnifiedAccount')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderEmployeeDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderECommercePartner')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderIntegratedOffers')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLoginProfile')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSingleDispatchDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderPaymentTenders')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderPaymentTendersEPaymentMethod')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetailsPrice')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSalesAgent')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderReferenceDetailFalloutDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderShippingDetailsAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderSchedulingDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsExternalOrderReferences')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsPromotions')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsUserDefinedLabels')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsPayments')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemshardGood')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsSupplyChainDetail')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsServiceAddr')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsDirecTVCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsVoipCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsIptvCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsWirelessCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsInternetCharacteristics')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsWirelessCharUpgradeQual')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItems')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderAcctsProvisionSystem')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsLineItemsEventHistory')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsEventHistory')]",
				"[concat(variables('factoryId'), '/datasets/V101_oceOrderTransactionlogs')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsApiExecutionDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderCancelDetails')]",
				"[concat(variables('factoryId'), '/datasets/v101_oceOrderLosgsCancelDetails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_user_event_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OCEUsermanagement"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sql_oceUserDataStaging",
								"type": "DatasetReference"
							},
							"name": "oceUserDataStagingStream",
							"description": "Read oceUserDataStaging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_oceUserRoles",
								"type": "DatasetReference"
							},
							"name": "sinkRoleList"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_oceUserPartners",
								"type": "DatasetReference"
							},
							"name": "sinkPartnerList"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_oceChannels",
								"type": "DatasetReference"
							},
							"name": "sinkChannelList"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_oceUsers",
								"type": "DatasetReference"
							},
							"name": "sinkOceUsers"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_oceUserDataAuditStaging",
								"type": "DatasetReference"
							},
							"name": "sinkUserDataAuditStaging"
						}
					],
					"transformations": [
						{
							"name": "parseUserEventData"
						},
						{
							"name": "selectPostPrase"
						},
						{
							"name": "alterRowOceUser",
							"description": "alterRowOceUser"
						},
						{
							"name": "selectUserColumns",
							"description": "selectUserColumns"
						},
						{
							"name": "setDateColStream"
						},
						{
							"name": "windowByUserId"
						},
						{
							"name": "filterTopUser"
						},
						{
							"name": "selectRolesList"
						},
						{
							"name": "selectChannelsList"
						},
						{
							"name": "selectPartnersList"
						},
						{
							"name": "flattenPartnerList"
						},
						{
							"name": "flattenChannelList"
						},
						{
							"name": "windowByUserIdPartnerId"
						},
						{
							"name": "windowByUserIdChannel"
						},
						{
							"name": "windowByUserIdRoleId"
						},
						{
							"name": "filterLatestPartnerList"
						},
						{
							"name": "filterLatestChannel"
						},
						{
							"name": "filterLatestRole"
						},
						{
							"name": "alterRowPaterner"
						},
						{
							"name": "alterRowChannels"
						},
						{
							"name": "alterRowRoles"
						},
						{
							"name": "alterRowAuditStaging"
						}
					],
					"scriptLines": [
						"source(output(",
						"          userId as string,",
						"          eventData as string,",
						"          eventTime as long,",
						"          eventSource as string,",
						"          lastmodified_date as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionColumn: 'userId',",
						"     partitionBy('external', 2)) ~> oceUserDataStagingStream",
						"oceUserDataStagingStream parse(eventData = eventData ? (event as (eventId as string,",
						"          eventType as string,",
						"          eventTime as string,",
						"          eventSource as string,",
						"          metaData as (sender as string),",
						"          data as (user as (firstName as string,",
						"          lastName as string,",
						"          profileName as string,",
						"          roleId as string,",
						"          attuid as string,",
						"          email as string,",
						"          globalQueueVisibility as string,",
						"          createdBy as string,",
						"          creationDate as string,",
						"          lastModifiedDate as string,",
						"          lastModifiedBy as string,",
						"          startDate as string,",
						"          endDate as string,",
						"          accountStatus as string,",
						"          workPhone as string,",
						"          lastLogonDate as string,",
						"          partner as (",
						"                                    name as string",
						"                )[],",
						"          channel as (",
						"                                taskLimit as string,",
						"                                globalTimeOut as string,",
						"                                id as string,",
						"                                taskTimeOut as string,",
						"                                organizationUnitName as string",
						"                )[])))),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseUserEventData",
						"parseUserEventData select(mapColumn(",
						"          attuid = userId,",
						"          eventData,",
						"          eventTime,",
						"          eventSource,",
						"          lastmodified_date,",
						"          firstName = eventData.event.data.user.firstName,",
						"          lastName = eventData.event.data.user.lastName,",
						"          email = eventData.event.data.user.email,",
						"          accountStatus = eventData.event.data.user.accountStatus,",
						"          workPhone = eventData.event.data.user.workPhone,",
						"          createdBy = eventData.event.data.user.createdBy,",
						"          lastModifiedDate = eventData.event.data.user.lastModifiedDate,",
						"          creationDate = eventData.event.data.user.creationDate,",
						"          startDate = eventData.event.data.user.startDate,",
						"          endDate = eventData.event.data.user.endDate,",
						"          lastLogonDate = eventData.event.data.user.lastLogonDate,",
						"          ModifiedDate = lastmodified_date,",
						"          lastModifiedBy = eventData.event.data.user.lastModifiedBy,",
						"          roleId = eventData.event.data.user.roleId,",
						"          profileName = eventData.event.data.user.profileName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPostPrase",
						"filterTopUser alterRow(upsertIf(true())) ~> alterRowOceUser",
						"selectPostPrase select(mapColumn(",
						"          attuid,",
						"          eventData,",
						"          eventTime,",
						"          eventSource,",
						"          ModifiedDate = lastmodified_date,",
						"          firstName,",
						"          lastName,",
						"          email,",
						"          accountStatus,",
						"          workPhone,",
						"          createdBy,",
						"          lastModifiedDate,",
						"          creationDate,",
						"          startDate,",
						"          endDate,",
						"          lastLogonDate,",
						"          lastModifiedBy,",
						"          roleId,",
						"          profileName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectUserColumns",
						"selectUserColumns derive(lastModifiedDate = toTimestamp(toLong(toString(byName('lastModifiedDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          creationDate = toTimestamp(toLong(toString(byName('creationDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          startDate = toTimestamp(toLong(toString(byName('startDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          endDate = toTimestamp(toLong(toString(byName('endDate'))),'yyyy-MM-dd HH:mm:ss.SSS'),",
						"          lastLogonDate = toTimestamp(toLong(toString(byName('lastLogonDate'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> setDateColStream",
						"setDateColStream window(over(attuid),",
						"     desc(lastModifiedDate, true),",
						"     prank = rowNumber()) ~> windowByUserId",
						"windowByUserId filter(prank==1) ~> filterTopUser",
						"parseUserEventData select(mapColumn(",
						"          attuid = userId,",
						"          profileName = eventData.event.data.user.profileName,",
						"          roleId = eventData.event.data.user.roleId,",
						"          lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRolesList",
						"parseUserEventData select(mapColumn(",
						"          attuid = userId,",
						"          Channels = eventData.event.data.user.channel,",
						"          ModifiedDate = lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectChannelsList",
						"parseUserEventData select(mapColumn(",
						"          attuid = userId,",
						"          partners = eventData.event.data.user.partner,",
						"          ModifiedDate = lastmodified_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPartnersList",
						"selectPartnersList foldDown(unroll(partners, partners),",
						"     mapColumn(",
						"          name = partners.name,",
						"          attuid,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenPartnerList",
						"selectChannelsList foldDown(unroll(Channels, Channels),",
						"     mapColumn(",
						"          taskLimit = Channels.taskLimit,",
						"          globalTimeOut = Channels.globalTimeOut,",
						"          id = Channels.id,",
						"          taskTimeOut = Channels.taskTimeOut,",
						"          organizationUnitName = Channels.organizationUnitName,",
						"          attuid,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenChannelList",
						"flattenPartnerList window(over(attuid,",
						"          name),",
						"     desc(ModifiedDate, true),",
						"     prank = rowNumber()) ~> windowByUserIdPartnerId",
						"flattenChannelList window(over(attuid,",
						"          id),",
						"     desc(ModifiedDate, true),",
						"     prank = rowNumber()) ~> windowByUserIdChannel",
						"selectRolesList window(over(attuid),",
						"     desc(lastmodified_date, true),",
						"     prank = rowNumber()) ~> windowByUserIdRoleId",
						"windowByUserIdPartnerId filter(prank==1) ~> filterLatestPartnerList",
						"windowByUserIdChannel filter(prank==1) ~> filterLatestChannel",
						"windowByUserIdRoleId filter(prank==1) ~> filterLatestRole",
						"filterLatestPartnerList alterRow(upsertIf(true())) ~> alterRowPaterner",
						"filterLatestChannel alterRow(upsertIf(true())) ~> alterRowChannels",
						"filterLatestRole alterRow(upsertIf(true())) ~> alterRowRoles",
						"setDateColStream alterRow(insertIf(true())) ~> alterRowAuditStaging",
						"alterRowRoles sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          attuid as string,",
						"          roleId as string,",
						"          profileName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['attuid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          attuid,",
						"          profileName,",
						"          roleId",
						"     )) ~> sinkRoleList",
						"alterRowPaterner sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          attuid as string,",
						"          name as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['attuid','name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          attuid,",
						"          name,",
						"          ModifiedDate",
						"     )) ~> sinkPartnerList",
						"alterRowChannels sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          attuid as string,",
						"          id as string,",
						"          organizationUnitName as string,",
						"          taskLimit as string,",
						"          globalTimeOut as string,",
						"          taskTimeOut as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['attuid','id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          attuid,",
						"          id,",
						"          organizationUnitName,",
						"          globalTimeOut,",
						"          taskTimeOut,",
						"          ModifiedDate,",
						"          taskLimit",
						"     )) ~> sinkChannelList",
						"alterRowOceUser sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          attuid as string,",
						"          firstName as string,",
						"          middleName as string,",
						"          lastName as string,",
						"          email as string,",
						"          accountStatus as string,",
						"          workPhone as string,",
						"          createdBy as string,",
						"          lastModifiedDate as timestamp,",
						"          creationDate as timestamp,",
						"          startDate as timestamp,",
						"          endDate as timestamp,",
						"          lastLogonDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['attuid'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          attuid,",
						"          firstName,",
						"          lastName,",
						"          email,",
						"          accountStatus,",
						"          workPhone,",
						"          createdBy,",
						"          lastModifiedDate,",
						"          creationDate,",
						"          startDate,",
						"          endDate,",
						"          lastLogonDate,",
						"          ModifiedDate",
						"     )) ~> sinkOceUsers",
						"alterRowAuditStaging sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          attuid as string,",
						"          roleId as string,",
						"          profileName as string,",
						"          accountStatus as string,",
						"          startDate as timestamp,",
						"          endDate as timestamp,",
						"          lastModifiedBy as string,",
						"          lastmodified_date as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          attuid,",
						"          roleId,",
						"          profileName,",
						"          accountStatus,",
						"          startDate,",
						"          endDate,",
						"          lastModifiedBy,",
						"          lastmodified_date = lastModifiedDate,",
						"          ModifiedDate",
						"     )) ~> sinkUserDataAuditStaging"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceUserDataStaging')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceUserRoles')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceUserPartners')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceChannels')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceUsers')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_oceUserDataAuditStaging')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/oceOrderQualityCheckstgdf')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DQC_oceOrderQualityCheckstg",
								"type": "DatasetReference"
							},
							"name": "oceOrderQualityCheckstg"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DQC_oceOrderQualityCheck",
								"type": "DatasetReference"
							},
							"name": "sinkoceOrderQualityCheckstg"
						}
					],
					"transformations": [
						{
							"name": "dceventtimestamp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          lastmodified_date as timestamp,",
						"          customer_order_number as string,",
						"          eventTime as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          ingestion_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> oceOrderQualityCheckstg",
						"oceOrderQualityCheckstg derive(eventtimestamp = toTimestamp(toLong(toString(byName('eventTime'))),'yyyy-MM-dd HH:mm:ss.SSS')) ~> dceventtimestamp",
						"dceventtimestamp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          lastmodified_date as timestamp,",
						"          customer_order_number as string,",
						"          eventTime as string,",
						"          eventSource as string,",
						"          eventType as string,",
						"          ingestion_time as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkoceOrderQualityCheckstg"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DQC_oceOrderQualityCheckstg')]",
				"[concat(variables('factoryId'), '/datasets/DQC_oceOrderQualityCheck')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('AzureBlobStorage1_properties_privateLinkResourceId')]",
				"groupId": "[parameters('AzureBlobStorage1_properties_groupId')]",
				"fqdns": "[parameters('AzureBlobStorage1_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/MyLogin_PrivateEndpoint')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('MyLogin_PrivateEndpoint_properties_privateLinkResourceId')]",
				"groupId": "[parameters('MyLogin_PrivateEndpoint_properties_groupId')]",
				"fqdns": "[parameters('MyLogin_PrivateEndpoint_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/OCESql_adf_PLE')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('OCESql_adf_PLE_properties_privateLinkResourceId')]",
				"groupId": "[parameters('OCESql_adf_PLE_properties_groupId')]",
				"fqdns": "[parameters('OCESql_adf_PLE_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/PrivateEndpoint_ISAAC_NonProd')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('PrivateEndpoint_ISAAC_NonProd_properties_privateLinkResourceId')]",
				"groupId": "[parameters('PrivateEndpoint_ISAAC_NonProd_properties_groupId')]",
				"fqdns": "[parameters('PrivateEndpoint_ISAAC_NonProd_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/PrivateEndpoint_ISAAC_NonProd2')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('PrivateEndpoint_ISAAC_NonProd2_properties_privateLinkResourceId')]",
				"groupId": "[parameters('PrivateEndpoint_ISAAC_NonProd2_properties_groupId')]",
				"fqdns": "[parameters('PrivateEndpoint_ISAAC_NonProd2_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/dev1-23488-eastus2-oracle-ple')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('dev1-23488-eastus2-oracle-ple_properties_privateLinkResourceId')]",
				"groupId": "[parameters('dev1-23488-eastus2-oracle-ple_properties_groupId')]",
				"fqdns": "[parameters('dev1-23488-eastus2-oracle-ple_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/dev1_23488_eastus2_zlt05203_vci_att_com_ple')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('dev1_23488_eastus2_zlt05203_vci_att_com_ple_properties_privateLinkResourceId')]",
				"groupId": "[parameters('dev1_23488_eastus2_zlt05203_vci_att_com_ple_properties_groupId')]",
				"fqdns": "[parameters('dev1_23488_eastus2_zlt05203_vci_att_com_ple_properties_fqdns')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default/oce-eastus2-poc-adx-pe-oce-eastus2')]",
			"type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2018-06-01",
			"properties": {
				"privateLinkResourceId": "[parameters('oce-eastus2-poc-adx-pe-oce-eastus2_properties_privateLinkResourceId')]",
				"groupId": "[parameters('oce-eastus2-poc-adx-pe-oce-eastus2_properties_groupId')]"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/default')]",
			"type": "Microsoft.DataFactory/factories/globalparameters",
			"apiVersion": "2018-06-01",
			"properties": {},
			"dependsOn": []
		}
	]
}